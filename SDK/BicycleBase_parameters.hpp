#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BicycleBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "HottaFramework_structs.hpp"


namespace SDK::Params
{

// Function BicycleBase.BicycleBase_C.BP_CanDrawTrail
// 0x0001 (0x0001 - 0x0000)
struct BicycleBase_C_BP_CanDrawTrail final
{
public:
	bool                                          DrawTrail;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BicycleBase_C_BP_CanDrawTrail) == 0x000001, "Wrong alignment on BicycleBase_C_BP_CanDrawTrail");
static_assert(sizeof(BicycleBase_C_BP_CanDrawTrail) == 0x000001, "Wrong size on BicycleBase_C_BP_CanDrawTrail");
static_assert(offsetof(BicycleBase_C_BP_CanDrawTrail, DrawTrail) == 0x000000, "Member 'BicycleBase_C_BP_CanDrawTrail::DrawTrail' has a wrong offset!");

// Function BicycleBase.BicycleBase_C.CalculateSkidDirection
// 0x00B4 (0x00B4 - 0x0000)
struct BicycleBase_C_CalculateSkidDirection final
{
public:
	struct FVector                                Velocity;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               WheelForward;                                      // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               MarkDirection;                                     // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          VelocityInverted;                                  // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1BB0[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RelativeVelocity;                                  // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ___bool_Variable;                                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1BB1[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue_1;            // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               K2Node_Select_Default;                             // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BicycleBase_C_CalculateSkidDirection) == 0x000004, "Wrong alignment on BicycleBase_C_CalculateSkidDirection");
static_assert(sizeof(BicycleBase_C_CalculateSkidDirection) == 0x0000B4, "Wrong size on BicycleBase_C_CalculateSkidDirection");
static_assert(offsetof(BicycleBase_C_CalculateSkidDirection, Velocity) == 0x000000, "Member 'BicycleBase_C_CalculateSkidDirection::Velocity' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_CalculateSkidDirection, WheelForward) == 0x00000C, "Member 'BicycleBase_C_CalculateSkidDirection::WheelForward' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_CalculateSkidDirection, MarkDirection) == 0x000018, "Member 'BicycleBase_C_CalculateSkidDirection::MarkDirection' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_CalculateSkidDirection, VelocityInverted) == 0x000024, "Member 'BicycleBase_C_CalculateSkidDirection::VelocityInverted' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_CalculateSkidDirection, RelativeVelocity) == 0x000028, "Member 'BicycleBase_C_CalculateSkidDirection::RelativeVelocity' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_CalculateSkidDirection, CallFunc_ComposeRotators_ReturnValue) == 0x000034, "Member 'BicycleBase_C_CalculateSkidDirection::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_CalculateSkidDirection, CallFunc_BreakRotator_Roll) == 0x000040, "Member 'BicycleBase_C_CalculateSkidDirection::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_CalculateSkidDirection, CallFunc_BreakRotator_Pitch) == 0x000044, "Member 'BicycleBase_C_CalculateSkidDirection::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_CalculateSkidDirection, CallFunc_BreakRotator_Yaw) == 0x000048, "Member 'BicycleBase_C_CalculateSkidDirection::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_CalculateSkidDirection, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x00004C, "Member 'BicycleBase_C_CalculateSkidDirection::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_CalculateSkidDirection, CallFunc_MapRangeClamped_ReturnValue) == 0x000058, "Member 'BicycleBase_C_CalculateSkidDirection::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_CalculateSkidDirection, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x00005C, "Member 'BicycleBase_C_CalculateSkidDirection::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_CalculateSkidDirection, ___bool_Variable) == 0x000068, "Member 'BicycleBase_C_CalculateSkidDirection::___bool_Variable' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_CalculateSkidDirection, CallFunc_ComposeRotators_ReturnValue_1) == 0x00006C, "Member 'BicycleBase_C_CalculateSkidDirection::CallFunc_ComposeRotators_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_CalculateSkidDirection, K2Node_Select_Default) == 0x000078, "Member 'BicycleBase_C_CalculateSkidDirection::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_CalculateSkidDirection, CallFunc_BreakRotator_Roll_1) == 0x000084, "Member 'BicycleBase_C_CalculateSkidDirection::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_CalculateSkidDirection, CallFunc_BreakRotator_Pitch_1) == 0x000088, "Member 'BicycleBase_C_CalculateSkidDirection::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_CalculateSkidDirection, CallFunc_BreakRotator_Yaw_1) == 0x00008C, "Member 'BicycleBase_C_CalculateSkidDirection::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_CalculateSkidDirection, CallFunc_BreakRotator_Roll_2) == 0x000090, "Member 'BicycleBase_C_CalculateSkidDirection::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_CalculateSkidDirection, CallFunc_BreakRotator_Pitch_2) == 0x000094, "Member 'BicycleBase_C_CalculateSkidDirection::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_CalculateSkidDirection, CallFunc_BreakRotator_Yaw_2) == 0x000098, "Member 'BicycleBase_C_CalculateSkidDirection::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_CalculateSkidDirection, CallFunc_Add_FloatFloat_ReturnValue) == 0x00009C, "Member 'BicycleBase_C_CalculateSkidDirection::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_CalculateSkidDirection, CallFunc_Abs_ReturnValue) == 0x0000A0, "Member 'BicycleBase_C_CalculateSkidDirection::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_CalculateSkidDirection, CallFunc_MakeRotator_ReturnValue) == 0x0000A4, "Member 'BicycleBase_C_CalculateSkidDirection::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_CalculateSkidDirection, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000B0, "Member 'BicycleBase_C_CalculateSkidDirection::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function BicycleBase.BicycleBase_C.TryDrawBrakeTrail
// 0x00D0 (0x00D0 - 0x0000)
struct BicycleBase_C_TryDrawBrakeTrail final
{
public:
	struct FVector                                TyreDownLocation;                                  // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_CalculateSkidDirection_MarkDirection;     // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1BB2[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult; // 0x0034(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1BB3[0x7];                                     // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x00C8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BicycleBase_C_TryDrawBrakeTrail) == 0x000008, "Wrong alignment on BicycleBase_C_TryDrawBrakeTrail");
static_assert(sizeof(BicycleBase_C_TryDrawBrakeTrail) == 0x0000D0, "Wrong size on BicycleBase_C_TryDrawBrakeTrail");
static_assert(offsetof(BicycleBase_C_TryDrawBrakeTrail, TyreDownLocation) == 0x000000, "Member 'BicycleBase_C_TryDrawBrakeTrail::TyreDownLocation' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_TryDrawBrakeTrail, CallFunc_K2_GetActorRotation_ReturnValue) == 0x00000C, "Member 'BicycleBase_C_TryDrawBrakeTrail::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_TryDrawBrakeTrail, CallFunc_GetVelocity_ReturnValue) == 0x000018, "Member 'BicycleBase_C_TryDrawBrakeTrail::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_TryDrawBrakeTrail, CallFunc_CalculateSkidDirection_MarkDirection) == 0x000024, "Member 'BicycleBase_C_TryDrawBrakeTrail::CallFunc_CalculateSkidDirection_MarkDirection' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_TryDrawBrakeTrail, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'BicycleBase_C_TryDrawBrakeTrail::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_TryDrawBrakeTrail, CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult) == 0x000034, "Member 'BicycleBase_C_TryDrawBrakeTrail::CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_TryDrawBrakeTrail, CallFunc_IsValid_ReturnValue_1) == 0x0000C0, "Member 'BicycleBase_C_TryDrawBrakeTrail::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_TryDrawBrakeTrail, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x0000C8, "Member 'BicycleBase_C_TryDrawBrakeTrail::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");

// Function BicycleBase.BicycleBase_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BicycleBase_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BicycleBase_C_ReceiveTick) == 0x000004, "Wrong alignment on BicycleBase_C_ReceiveTick");
static_assert(sizeof(BicycleBase_C_ReceiveTick) == 0x000004, "Wrong size on BicycleBase_C_ReceiveTick");
static_assert(offsetof(BicycleBase_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BicycleBase_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BicycleBase.BicycleBase_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BicycleBase_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BicycleBase_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BicycleBase_C_ReceiveEndPlay");
static_assert(sizeof(BicycleBase_C_ReceiveEndPlay) == 0x000001, "Wrong size on BicycleBase_C_ReceiveEndPlay");
static_assert(offsetof(BicycleBase_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BicycleBase_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BicycleBase.BicycleBase_C.ExecuteUbergraph_BicycleBase
// 0x0038 (0x0038 - 0x0000)
struct BicycleBase_C_ExecuteUbergraph_BicycleBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPressedBrake_ReturnValue;               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHottaNetMode                                 CallFunc_SwitchNetMode_OutNetMode;                 // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1BB4[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHottaNetMode                                 CallFunc_SwitchNetMode_OutNetMode_1;               // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHottaNetMode                                 CallFunc_SwitchNetMode_OutNetMode_2;               // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1BB5[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1BB6[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BicycleBase_C_ExecuteUbergraph_BicycleBase) == 0x000004, "Wrong alignment on BicycleBase_C_ExecuteUbergraph_BicycleBase");
static_assert(sizeof(BicycleBase_C_ExecuteUbergraph_BicycleBase) == 0x000038, "Wrong size on BicycleBase_C_ExecuteUbergraph_BicycleBase");
static_assert(offsetof(BicycleBase_C_ExecuteUbergraph_BicycleBase, EntryPoint) == 0x000000, "Member 'BicycleBase_C_ExecuteUbergraph_BicycleBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_ExecuteUbergraph_BicycleBase, CallFunc_IsPressedBrake_ReturnValue) == 0x000004, "Member 'BicycleBase_C_ExecuteUbergraph_BicycleBase::CallFunc_IsPressedBrake_ReturnValue' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_ExecuteUbergraph_BicycleBase, CallFunc_SwitchNetMode_OutNetMode) == 0x000005, "Member 'BicycleBase_C_ExecuteUbergraph_BicycleBase::CallFunc_SwitchNetMode_OutNetMode' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_ExecuteUbergraph_BicycleBase, K2Node_SwitchEnum_CmpSuccess) == 0x000006, "Member 'BicycleBase_C_ExecuteUbergraph_BicycleBase::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_ExecuteUbergraph_BicycleBase, K2Node_Event_DeltaSeconds) == 0x000008, "Member 'BicycleBase_C_ExecuteUbergraph_BicycleBase::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_ExecuteUbergraph_BicycleBase, K2Node_Event_EndPlayReason) == 0x00000C, "Member 'BicycleBase_C_ExecuteUbergraph_BicycleBase::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_ExecuteUbergraph_BicycleBase, CallFunc_SwitchNetMode_OutNetMode_1) == 0x00000D, "Member 'BicycleBase_C_ExecuteUbergraph_BicycleBase::CallFunc_SwitchNetMode_OutNetMode_1' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_ExecuteUbergraph_BicycleBase, K2Node_SwitchEnum_CmpSuccess_1) == 0x00000E, "Member 'BicycleBase_C_ExecuteUbergraph_BicycleBase::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_ExecuteUbergraph_BicycleBase, CallFunc_SwitchNetMode_OutNetMode_2) == 0x00000F, "Member 'BicycleBase_C_ExecuteUbergraph_BicycleBase::CallFunc_SwitchNetMode_OutNetMode_2' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_ExecuteUbergraph_BicycleBase, CallFunc_GetVelocity_ReturnValue) == 0x000010, "Member 'BicycleBase_C_ExecuteUbergraph_BicycleBase::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_ExecuteUbergraph_BicycleBase, K2Node_SwitchEnum_CmpSuccess_2) == 0x00001C, "Member 'BicycleBase_C_ExecuteUbergraph_BicycleBase::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_ExecuteUbergraph_BicycleBase, CallFunc_VSize_ReturnValue) == 0x000020, "Member 'BicycleBase_C_ExecuteUbergraph_BicycleBase::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_ExecuteUbergraph_BicycleBase, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000024, "Member 'BicycleBase_C_ExecuteUbergraph_BicycleBase::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_ExecuteUbergraph_BicycleBase, CallFunc_GetSocketLocation_ReturnValue) == 0x000028, "Member 'BicycleBase_C_ExecuteUbergraph_BicycleBase::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_ExecuteUbergraph_BicycleBase, CallFunc_BooleanAND_ReturnValue) == 0x000034, "Member 'BicycleBase_C_ExecuteUbergraph_BicycleBase::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BicycleBase_C_ExecuteUbergraph_BicycleBase, CallFunc_IsValid_ReturnValue) == 0x000035, "Member 'BicycleBase_C_ExecuteUbergraph_BicycleBase::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

