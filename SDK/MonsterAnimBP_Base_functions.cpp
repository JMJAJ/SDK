#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MonsterAnimBP_Base

#include "Basic.hpp"

#include "MonsterAnimBP_Base_classes.hpp"
#include "MonsterAnimBP_Base_parameters.hpp"


namespace SDK
{

// Function MonsterAnimBP_Base.MonsterAnimBP_Base_C.ExecuteUbergraph_MonsterAnimBP_Base
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMonsterAnimBP_Base_C::ExecuteUbergraph_MonsterAnimBP_Base(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MonsterAnimBP_Base_C", "ExecuteUbergraph_MonsterAnimBP_Base");

	Params::MonsterAnimBP_Base_C_ExecuteUbergraph_MonsterAnimBP_Base Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MonsterAnimBP_Base.MonsterAnimBP_Base_C.AnimGraph
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPoseLink                        Param_AnimGraph                                        (Parm, OutParm, NoDestructor)

void UMonsterAnimBP_Base_C::AnimGraph(struct FPoseLink* Param_AnimGraph)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MonsterAnimBP_Base_C", "AnimGraph");

	Params::MonsterAnimBP_Base_C_AnimGraph Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_AnimGraph != nullptr)
		*Param_AnimGraph = std::move(Parms.Param_AnimGraph);
}


// Function MonsterAnimBP_Base.MonsterAnimBP_Base_C.BoneShakeLayer
// (HasOutParams, BlueprintCallable)
// Parameters:
// struct FPoseLink                        InPose                                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   Param_PushScale                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_BlendAlpha                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FPoseLink                        Param_BoneShakeLayer                                   (Parm, OutParm, NoDestructor)

void UMonsterAnimBP_Base_C::BoneShakeLayer(const struct FPoseLink& InPose, float Param_PushScale, float Param_BlendAlpha, struct FPoseLink* Param_BoneShakeLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MonsterAnimBP_Base_C", "BoneShakeLayer");

	Params::MonsterAnimBP_Base_C_BoneShakeLayer Parms{};

	Parms.InPose = std::move(InPose);
	Parms.Param_PushScale = Param_PushScale;
	Parms.Param_BlendAlpha = Param_BlendAlpha;

	UObject::ProcessEvent(Func, &Parms);

	if (Param_BoneShakeLayer != nullptr)
		*Param_BoneShakeLayer = std::move(Parms.Param_BoneShakeLayer);
}


// Function MonsterAnimBP_Base.MonsterAnimBP_Base_C.IKAnimationLayer
// (HasOutParams, BlueprintCallable)
// Parameters:
// struct FPoseLink                        InPose                                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   PowerIKAlpha                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FPoseLink                        Param_IKAnimationLayer                                 (Parm, OutParm, NoDestructor)

void UMonsterAnimBP_Base_C::IKAnimationLayer(const struct FPoseLink& InPose, float PowerIKAlpha, struct FPoseLink* Param_IKAnimationLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MonsterAnimBP_Base_C", "IKAnimationLayer");

	Params::MonsterAnimBP_Base_C_IKAnimationLayer Parms{};

	Parms.InPose = std::move(InPose);
	Parms.PowerIKAlpha = PowerIKAlpha;

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IKAnimationLayer != nullptr)
		*Param_IKAnimationLayer = std::move(Parms.Param_IKAnimationLayer);
}

}

