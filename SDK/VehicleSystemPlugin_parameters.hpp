#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VehicleSystemPlugin

#include "Basic.hpp"

#include "VehicleSystemPlugin_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function VehicleSystemPlugin.VehicleConstraint.SetLinearSoftConstraint
// 0x000C (0x000C - 0x0000)
struct VehicleConstraint_SetLinearSoftConstraint final
{
public:
	bool                                          SoftConstraint;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A83[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Stiffness;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damping;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleConstraint_SetLinearSoftConstraint) == 0x000004, "Wrong alignment on VehicleConstraint_SetLinearSoftConstraint");
static_assert(sizeof(VehicleConstraint_SetLinearSoftConstraint) == 0x00000C, "Wrong size on VehicleConstraint_SetLinearSoftConstraint");
static_assert(offsetof(VehicleConstraint_SetLinearSoftConstraint, SoftConstraint) == 0x000000, "Member 'VehicleConstraint_SetLinearSoftConstraint::SoftConstraint' has a wrong offset!");
static_assert(offsetof(VehicleConstraint_SetLinearSoftConstraint, Stiffness) == 0x000004, "Member 'VehicleConstraint_SetLinearSoftConstraint::Stiffness' has a wrong offset!");
static_assert(offsetof(VehicleConstraint_SetLinearSoftConstraint, Damping) == 0x000008, "Member 'VehicleConstraint_SetLinearSoftConstraint::Damping' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemBase.AVS_Tick
// 0x0004 (0x0004 - 0x0000)
struct VehicleSystemBase_AVS_Tick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSystemBase_AVS_Tick) == 0x000004, "Wrong alignment on VehicleSystemBase_AVS_Tick");
static_assert(sizeof(VehicleSystemBase_AVS_Tick) == 0x000004, "Wrong size on VehicleSystemBase_AVS_Tick");
static_assert(offsetof(VehicleSystemBase_AVS_Tick, DeltaTime) == 0x000000, "Member 'VehicleSystemBase_AVS_Tick::DeltaTime' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemBase.BlueprintDebugMessage
// 0x0010 (0x0010 - 0x0000)
struct VehicleSystemBase_BlueprintDebugMessage final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSystemBase_BlueprintDebugMessage) == 0x000008, "Wrong alignment on VehicleSystemBase_BlueprintDebugMessage");
static_assert(sizeof(VehicleSystemBase_BlueprintDebugMessage) == 0x000010, "Wrong size on VehicleSystemBase_BlueprintDebugMessage");
static_assert(offsetof(VehicleSystemBase_BlueprintDebugMessage, Text) == 0x000000, "Member 'VehicleSystemBase_BlueprintDebugMessage::Text' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemBase.Client_ReceiveNetState
// 0x0038 (0x0038 - 0x0000)
struct VehicleSystemBase_Client_ReceiveNetState final
{
public:
	struct FNetState                              State;                                             // 0x0000(0x0038)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSystemBase_Client_ReceiveNetState) == 0x000004, "Wrong alignment on VehicleSystemBase_Client_ReceiveNetState");
static_assert(sizeof(VehicleSystemBase_Client_ReceiveNetState) == 0x000038, "Wrong size on VehicleSystemBase_Client_ReceiveNetState");
static_assert(offsetof(VehicleSystemBase_Client_ReceiveNetState, State) == 0x000000, "Member 'VehicleSystemBase_Client_ReceiveNetState::State' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemBase.GetSteeringFromCurve
// 0x0008 (0x0008 - 0x0000)
struct VehicleSystemBase_GetSteeringFromCurve final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSystemBase_GetSteeringFromCurve) == 0x000004, "Wrong alignment on VehicleSystemBase_GetSteeringFromCurve");
static_assert(sizeof(VehicleSystemBase_GetSteeringFromCurve) == 0x000008, "Wrong size on VehicleSystemBase_GetSteeringFromCurve");
static_assert(offsetof(VehicleSystemBase_GetSteeringFromCurve, Speed) == 0x000000, "Member 'VehicleSystemBase_GetSteeringFromCurve::Speed' has a wrong offset!");
static_assert(offsetof(VehicleSystemBase_GetSteeringFromCurve, ReturnValue) == 0x000004, "Member 'VehicleSystemBase_GetSteeringFromCurve::ReturnValue' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemBase.Server_ReceiveNetState
// 0x0038 (0x0038 - 0x0000)
struct VehicleSystemBase_Server_ReceiveNetState final
{
public:
	struct FNetState                              State;                                             // 0x0000(0x0038)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSystemBase_Server_ReceiveNetState) == 0x000004, "Wrong alignment on VehicleSystemBase_Server_ReceiveNetState");
static_assert(sizeof(VehicleSystemBase_Server_ReceiveNetState) == 0x000038, "Wrong size on VehicleSystemBase_Server_ReceiveNetState");
static_assert(offsetof(VehicleSystemBase_Server_ReceiveNetState, State) == 0x000000, "Member 'VehicleSystemBase_Server_ReceiveNetState::State' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemBase.Server_ReceiveRestState
// 0x0038 (0x0038 - 0x0000)
struct VehicleSystemBase_Server_ReceiveRestState final
{
public:
	struct FNetState                              State;                                             // 0x0000(0x0038)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSystemBase_Server_ReceiveRestState) == 0x000004, "Wrong alignment on VehicleSystemBase_Server_ReceiveRestState");
static_assert(sizeof(VehicleSystemBase_Server_ReceiveRestState) == 0x000038, "Wrong size on VehicleSystemBase_Server_ReceiveRestState");
static_assert(offsetof(VehicleSystemBase_Server_ReceiveRestState, State) == 0x000000, "Member 'VehicleSystemBase_Server_ReceiveRestState::State' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemBase.SetShouldSyncWithServer
// 0x0001 (0x0001 - 0x0000)
struct VehicleSystemBase_SetShouldSyncWithServer final
{
public:
	bool                                          ShouldSync;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSystemBase_SetShouldSyncWithServer) == 0x000001, "Wrong alignment on VehicleSystemBase_SetShouldSyncWithServer");
static_assert(sizeof(VehicleSystemBase_SetShouldSyncWithServer) == 0x000001, "Wrong size on VehicleSystemBase_SetShouldSyncWithServer");
static_assert(offsetof(VehicleSystemBase_SetShouldSyncWithServer, ShouldSync) == 0x000000, "Member 'VehicleSystemBase_SetShouldSyncWithServer::ShouldSync' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemBase.SyncTrailerRotation
// 0x0004 (0x0004 - 0x0000)
struct VehicleSystemBase_SyncTrailerRotation final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSystemBase_SyncTrailerRotation) == 0x000004, "Wrong alignment on VehicleSystemBase_SyncTrailerRotation");
static_assert(sizeof(VehicleSystemBase_SyncTrailerRotation) == 0x000004, "Wrong size on VehicleSystemBase_SyncTrailerRotation");
static_assert(offsetof(VehicleSystemBase_SyncTrailerRotation, DeltaTime) == 0x000000, "Member 'VehicleSystemBase_SyncTrailerRotation::DeltaTime' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemFunctions.GetBoneBounds
// 0x0028 (0x0028 - 0x0000)
struct VehicleSystemFunctions_GetBoneBounds final
{
public:
	class UPrimitiveComponent*                    Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSystemFunctions_GetBoneBounds) == 0x000008, "Wrong alignment on VehicleSystemFunctions_GetBoneBounds");
static_assert(sizeof(VehicleSystemFunctions_GetBoneBounds) == 0x000028, "Wrong size on VehicleSystemFunctions_GetBoneBounds");
static_assert(offsetof(VehicleSystemFunctions_GetBoneBounds, Target) == 0x000000, "Member 'VehicleSystemFunctions_GetBoneBounds::Target' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_GetBoneBounds, BoneName) == 0x000008, "Member 'VehicleSystemFunctions_GetBoneBounds::BoneName' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_GetBoneBounds, Origin) == 0x000010, "Member 'VehicleSystemFunctions_GetBoneBounds::Origin' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_GetBoneBounds, ReturnValue) == 0x00001C, "Member 'VehicleSystemFunctions_GetBoneBounds::ReturnValue' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemFunctions.GetMeshCenterOfMass
// 0x0020 (0x0020 - 0x0000)
struct VehicleSystemFunctions_GetMeshCenterOfMass final
{
public:
	class UPrimitiveComponent*                    Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A88[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VehicleSystemFunctions_GetMeshCenterOfMass) == 0x000008, "Wrong alignment on VehicleSystemFunctions_GetMeshCenterOfMass");
static_assert(sizeof(VehicleSystemFunctions_GetMeshCenterOfMass) == 0x000020, "Wrong size on VehicleSystemFunctions_GetMeshCenterOfMass");
static_assert(offsetof(VehicleSystemFunctions_GetMeshCenterOfMass, Target) == 0x000000, "Member 'VehicleSystemFunctions_GetMeshCenterOfMass::Target' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_GetMeshCenterOfMass, BoneName) == 0x000008, "Member 'VehicleSystemFunctions_GetMeshCenterOfMass::BoneName' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_GetMeshCenterOfMass, ReturnValue) == 0x000010, "Member 'VehicleSystemFunctions_GetMeshCenterOfMass::ReturnValue' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemFunctions.GetMeshDiameter
// 0x0018 (0x0018 - 0x0000)
struct VehicleSystemFunctions_GetMeshDiameter final
{
public:
	class UPrimitiveComponent*                    Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A89[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VehicleSystemFunctions_GetMeshDiameter) == 0x000008, "Wrong alignment on VehicleSystemFunctions_GetMeshDiameter");
static_assert(sizeof(VehicleSystemFunctions_GetMeshDiameter) == 0x000018, "Wrong size on VehicleSystemFunctions_GetMeshDiameter");
static_assert(offsetof(VehicleSystemFunctions_GetMeshDiameter, Target) == 0x000000, "Member 'VehicleSystemFunctions_GetMeshDiameter::Target' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_GetMeshDiameter, BoneName) == 0x000008, "Member 'VehicleSystemFunctions_GetMeshDiameter::BoneName' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_GetMeshDiameter, ReturnValue) == 0x000010, "Member 'VehicleSystemFunctions_GetMeshDiameter::ReturnValue' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemFunctions.GetMeshRadius
// 0x0018 (0x0018 - 0x0000)
struct VehicleSystemFunctions_GetMeshRadius final
{
public:
	class UPrimitiveComponent*                    Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A8A[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VehicleSystemFunctions_GetMeshRadius) == 0x000008, "Wrong alignment on VehicleSystemFunctions_GetMeshRadius");
static_assert(sizeof(VehicleSystemFunctions_GetMeshRadius) == 0x000018, "Wrong size on VehicleSystemFunctions_GetMeshRadius");
static_assert(offsetof(VehicleSystemFunctions_GetMeshRadius, Target) == 0x000000, "Member 'VehicleSystemFunctions_GetMeshRadius::Target' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_GetMeshRadius, BoneName) == 0x000008, "Member 'VehicleSystemFunctions_GetMeshRadius::BoneName' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_GetMeshRadius, ReturnValue) == 0x000010, "Member 'VehicleSystemFunctions_GetMeshRadius::ReturnValue' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemFunctions.GetPluginVersion
// 0x0010 (0x0010 - 0x0000)
struct VehicleSystemFunctions_GetPluginVersion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSystemFunctions_GetPluginVersion) == 0x000008, "Wrong alignment on VehicleSystemFunctions_GetPluginVersion");
static_assert(sizeof(VehicleSystemFunctions_GetPluginVersion) == 0x000010, "Wrong size on VehicleSystemFunctions_GetPluginVersion");
static_assert(offsetof(VehicleSystemFunctions_GetPluginVersion, ReturnValue) == 0x000000, "Member 'VehicleSystemFunctions_GetPluginVersion::ReturnValue' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemFunctions.PrintToScreenWithTag
// 0x0028 (0x0028 - 0x0000)
struct VehicleSystemFunctions_PrintToScreenWithTag final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TextColor;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tag;                                               // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSystemFunctions_PrintToScreenWithTag) == 0x000008, "Wrong alignment on VehicleSystemFunctions_PrintToScreenWithTag");
static_assert(sizeof(VehicleSystemFunctions_PrintToScreenWithTag) == 0x000028, "Wrong size on VehicleSystemFunctions_PrintToScreenWithTag");
static_assert(offsetof(VehicleSystemFunctions_PrintToScreenWithTag, InString) == 0x000000, "Member 'VehicleSystemFunctions_PrintToScreenWithTag::InString' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_PrintToScreenWithTag, TextColor) == 0x000010, "Member 'VehicleSystemFunctions_PrintToScreenWithTag::TextColor' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_PrintToScreenWithTag, Duration) == 0x000020, "Member 'VehicleSystemFunctions_PrintToScreenWithTag::Duration' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_PrintToScreenWithTag, Tag) == 0x000024, "Member 'VehicleSystemFunctions_PrintToScreenWithTag::Tag' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemFunctions.RunningInEditor_World
// 0x0010 (0x0010 - 0x0000)
struct VehicleSystemFunctions_RunningInEditor_World final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A8B[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VehicleSystemFunctions_RunningInEditor_World) == 0x000008, "Wrong alignment on VehicleSystemFunctions_RunningInEditor_World");
static_assert(sizeof(VehicleSystemFunctions_RunningInEditor_World) == 0x000010, "Wrong size on VehicleSystemFunctions_RunningInEditor_World");
static_assert(offsetof(VehicleSystemFunctions_RunningInEditor_World, WorldContextObject) == 0x000000, "Member 'VehicleSystemFunctions_RunningInEditor_World::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_RunningInEditor_World, ReturnValue) == 0x000008, "Member 'VehicleSystemFunctions_RunningInEditor_World::ReturnValue' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemFunctions.RunningInGame_World
// 0x0010 (0x0010 - 0x0000)
struct VehicleSystemFunctions_RunningInGame_World final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A8C[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VehicleSystemFunctions_RunningInGame_World) == 0x000008, "Wrong alignment on VehicleSystemFunctions_RunningInGame_World");
static_assert(sizeof(VehicleSystemFunctions_RunningInGame_World) == 0x000010, "Wrong size on VehicleSystemFunctions_RunningInGame_World");
static_assert(offsetof(VehicleSystemFunctions_RunningInGame_World, WorldContextObject) == 0x000000, "Member 'VehicleSystemFunctions_RunningInGame_World::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_RunningInGame_World, ReturnValue) == 0x000008, "Member 'VehicleSystemFunctions_RunningInGame_World::ReturnValue' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemFunctions.RunningInPIE_World
// 0x0010 (0x0010 - 0x0000)
struct VehicleSystemFunctions_RunningInPIE_World final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A8D[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VehicleSystemFunctions_RunningInPIE_World) == 0x000008, "Wrong alignment on VehicleSystemFunctions_RunningInPIE_World");
static_assert(sizeof(VehicleSystemFunctions_RunningInPIE_World) == 0x000010, "Wrong size on VehicleSystemFunctions_RunningInPIE_World");
static_assert(offsetof(VehicleSystemFunctions_RunningInPIE_World, WorldContextObject) == 0x000000, "Member 'VehicleSystemFunctions_RunningInPIE_World::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_RunningInPIE_World, ReturnValue) == 0x000008, "Member 'VehicleSystemFunctions_RunningInPIE_World::ReturnValue' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemFunctions.SetAngularDamping
// 0x0018 (0x0018 - 0x0000)
struct VehicleSystemFunctions_SetAngularDamping final
{
public:
	class UPrimitiveComponent*                    Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDamping;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A8E[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VehicleSystemFunctions_SetAngularDamping) == 0x000008, "Wrong alignment on VehicleSystemFunctions_SetAngularDamping");
static_assert(sizeof(VehicleSystemFunctions_SetAngularDamping) == 0x000018, "Wrong size on VehicleSystemFunctions_SetAngularDamping");
static_assert(offsetof(VehicleSystemFunctions_SetAngularDamping, Target) == 0x000000, "Member 'VehicleSystemFunctions_SetAngularDamping::Target' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_SetAngularDamping, InDamping) == 0x000008, "Member 'VehicleSystemFunctions_SetAngularDamping::InDamping' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_SetAngularDamping, BoneName) == 0x00000C, "Member 'VehicleSystemFunctions_SetAngularDamping::BoneName' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemFunctions.SetLinearDamping
// 0x0018 (0x0018 - 0x0000)
struct VehicleSystemFunctions_SetLinearDamping final
{
public:
	class UPrimitiveComponent*                    Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDamping;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A8F[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VehicleSystemFunctions_SetLinearDamping) == 0x000008, "Wrong alignment on VehicleSystemFunctions_SetLinearDamping");
static_assert(sizeof(VehicleSystemFunctions_SetLinearDamping) == 0x000018, "Wrong size on VehicleSystemFunctions_SetLinearDamping");
static_assert(offsetof(VehicleSystemFunctions_SetLinearDamping, Target) == 0x000000, "Member 'VehicleSystemFunctions_SetLinearDamping::Target' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_SetLinearDamping, InDamping) == 0x000008, "Member 'VehicleSystemFunctions_SetLinearDamping::InDamping' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_SetLinearDamping, BoneName) == 0x00000C, "Member 'VehicleSystemFunctions_SetLinearDamping::BoneName' has a wrong offset!");

}

