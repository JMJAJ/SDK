#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerControllerBase

#include "Basic.hpp"

#include "QRSL_classes.hpp"
#include "HottaFramework_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerControllerBase.BP_PlayerControllerBase_C
// 0x0110 (0x1310 - 0x1200)
class ABP_PlayerControllerBase_C final : public AQRSLPlayerController
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x1200(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class FName                                   TaskId_FireVillage;                                // 0x1208(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           NewVar_1;                                          // 0x1210(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<ELevelSceneType>                       ExScene;                                           // 0x1220(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         ShowMouseRequestNum;                               // 0x1230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   WeekJournal_Func_ID;                               // 0x1234(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   DailyActivity_Func_ID;                             // 0x123C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ActivityEntrance_Func_ID;                          // 0x1244(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   GameShop_Func_ID;                                  // 0x124C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Cant_State;                                        // 0x1254(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FuncLock;                                          // 0x1255(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59F2[0x2];                                     // 0x1256(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, bool>                     Key_PressedMap;                                    // 0x1258(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsLBPressed;                                       // 0x12A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ResetAim;                                          // 0x12A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanUse;                                            // 0x12AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59F3[0x1];                                     // 0x12AB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GamepadChangeArtifactIndex;                        // 0x12AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CantShowMapTips;                                   // 0x12B0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	uint8                                         Pad_59F4[0x8];                                     // 0x12C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Spawn_Transform;                                   // 0x12D0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Diving;                                            // 0x1300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ActiveUnmount();
	void IsLanceFlyToBulletAvailable(bool* IsAvailable);
	void ShowSelfMenuForm();
	void GetSelfMenuFormID(class FString* FormID);
	void ShowGamepadSelfMenu(class AQRSLHUD* QRSLHUD);
	void IsGamepadInputType(bool* Param_IsGamepadInputType);
	void CanEnterAim(bool* Ret);
	void CanCanel(bool* Ret);
	void IsCurrentWeaponType(EWeaponType InWeaponType, bool* Ret);
	void GetCurrentWeaponType(EWeaponType* Weapon_Type);
	void CanDiving(bool* Ret);
	void IsInteractionShow(bool* Ret);
	void GoOnGuide(class FName GuideName);
	void EndGuideByAction(class FName InInputAction);
	void GetCurrentGuideInputAction(class FName* InputAction);
	void OverrideInputActionMap(ELevelSceneType InSceneType);
	void CurSceneOverrideInputActionMap(bool* IsOverride, ELevelSceneType* SceneType);
	void CanShortcutGetTowerAward(bool* Can);
	void NeedBanActionMap(bool* OutIsBanActionMap);
	void NewFunction_1(bool IsCurrentGuide);
	void NewFunction_0(bool IsCurrentGuide);
	void GetGamepadChangeArtifactIndex(int32* Param_Index);
	void UpdateInteractionHeight();
	bool CanChangeWeapon();
	void Execute_Cmd(const class FString& Cmd);
	class AQRSLPlayerCharacter* GetPlayer();
	void Is_In_Game(bool bContainWormhole, TArray<ELevelSceneType>& ExcludeScene, bool* IsActive);
	void InpActEvt_Gamepad_LeftTrigger_K2Node_InputKeyEvent_5(const struct FKey& Key);
	void InpActEvt_Gamepad_LeftTrigger_K2Node_InputKeyEvent_4(const struct FKey& Key);
	void InpActEvt_Gamepad_RightThumbstick_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_Gamepad_Special_Right_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_Gamepad_Special_Right_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_111(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_110(const struct FKey& Key);
	void InpActEvt_Interaction_K2Node_InputActionEvent_109(const struct FKey& Key);
	void InpActEvt_Interaction_K2Node_InputActionEvent_108(const struct FKey& Key);
	void InpActEvt_SwitchTarget_K2Node_InputActionEvent_107(const struct FKey& Key);
	void InpActEvt_SwitchTarget_K2Node_InputActionEvent_106(const struct FKey& Key);
	void InpActEvt_UI_Avatar_K2Node_InputActionEvent_105(const struct FKey& Key);
	void InpActEvt_UI_Avatar_K2Node_InputActionEvent_104(const struct FKey& Key);
	void InpActEvt_UI_Bag_K2Node_InputActionEvent_103(const struct FKey& Key);
	void InpActEvt_UI_Bag_K2Node_InputActionEvent_102(const struct FKey& Key);
	void InpActEvt_UI_SelfMenu_K2Node_InputActionEvent_101(const struct FKey& Key);
	void InpActEvt_UI_SelfMenu_K2Node_InputActionEvent_100(const struct FKey& Key);
	void InpActEvt_Crouch_K2Node_InputActionEvent_99(const struct FKey& Key);
	void InpActEvt_Crouch_K2Node_InputActionEvent_98(const struct FKey& Key);
	void InpActEvt_Melee_K2Node_InputActionEvent_97(const struct FKey& Key);
	void InpActEvt_Melee_K2Node_InputActionEvent_96(const struct FKey& Key);
	void InpActEvt_Evade_K2Node_InputActionEvent_95(const struct FKey& Key);
	void InpActEvt_Evade_K2Node_InputActionEvent_94(const struct FKey& Key);
	void InpActEvt_WeaponSkill_K2Node_InputActionEvent_93(const struct FKey& Key);
	void InpActEvt_WeaponSkill_K2Node_InputActionEvent_92(const struct FKey& Key);
	void InpActEvt_ProfessionSkill_K2Node_InputActionEvent_91(const struct FKey& Key);
	void InpActEvt_ProfessionSkill_K2Node_InputActionEvent_90(const struct FKey& Key);
	void InpActEvt_ChangeWeapon0_K2Node_InputActionEvent_89(const struct FKey& Key);
	void InpActEvt_ChangeWeapon0_K2Node_InputActionEvent_88(const struct FKey& Key);
	void InpActEvt_ChangeWeapon1_K2Node_InputActionEvent_87(const struct FKey& Key);
	void InpActEvt_ChangeWeapon1_K2Node_InputActionEvent_86(const struct FKey& Key);
	void InpActEvt_F1_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_Mount_K2Node_InputActionEvent_85(const struct FKey& Key);
	void InpActEvt_Mount_K2Node_InputActionEvent_84(const struct FKey& Key);
	void InpActEvt_Supply_K2Node_InputActionEvent_83(const struct FKey& Key);
	void InpActEvt_Supply_K2Node_InputActionEvent_82(const struct FKey& Key);
	void InpActEvt_Artifact_1_K2Node_InputActionEvent_81(const struct FKey& Key);
	void InpActEvt_Artifact_1_K2Node_InputActionEvent_80(const struct FKey& Key);
	void InpActEvt_Artifact_2_K2Node_InputActionEvent_79(const struct FKey& Key);
	void InpActEvt_Artifact_2_K2Node_InputActionEvent_78(const struct FKey& Key);
	void InpActEvt_Map_K2Node_InputActionEvent_77(const struct FKey& Key);
	void InpActEvt_Map_K2Node_InputActionEvent_76(const struct FKey& Key);
	void InpActEvt_Introduce_K2Node_InputActionEvent_75(const struct FKey& Key);
	void InpActEvt_Introduce_K2Node_InputActionEvent_74(const struct FKey& Key);
	void InpActEvt_SwitchMouse_K2Node_InputActionEvent_73(const struct FKey& Key);
	void InpActEvt_SwitchMouse_K2Node_InputActionEvent_72(const struct FKey& Key);
	void InpActEvt_Cancel_K2Node_InputActionEvent_71(const struct FKey& Key);
	void InpActEvt_Cancel_K2Node_InputActionEvent_70(const struct FKey& Key);
	void InpActEvt_Track_K2Node_InputActionEvent_69(const struct FKey& Key);
	void InpActEvt_Chat_K2Node_InputActionEvent_68(const struct FKey& Key);
	void InpActEvt_Chat_K2Node_InputActionEvent_67(const struct FKey& Key);
	void InpActEvt_Vines_K2Node_InputActionEvent_66(const struct FKey& Key);
	void InpActEvt_Vines_K2Node_InputActionEvent_65(const struct FKey& Key);
	void InpActEvt_ChangeArtifact0_K2Node_InputActionEvent_64(const struct FKey& Key);
	void InpActEvt_ChangeArtifact0_K2Node_InputActionEvent_63(const struct FKey& Key);
	void InpActEvt_UI_Weapon_K2Node_InputActionEvent_62(const struct FKey& Key);
	void InpActEvt_UI_Weapon_K2Node_InputActionEvent_61(const struct FKey& Key);
	void InpActEvt_GmPanel_K2Node_InputActionEvent_60(const struct FKey& Key);
	void InpActEvt_ChangeWeapon2_K2Node_InputActionEvent_59(const struct FKey& Key);
	void InpActEvt_ChangeWeapon2_K2Node_InputActionEvent_58(const struct FKey& Key);
	void InpActEvt_Melee_Key_K2Node_InputActionEvent_57(const struct FKey& Key);
	void InpActEvt_Melee_Key_K2Node_InputActionEvent_56(const struct FKey& Key);
	void InpActEvt_Evade_Key_K2Node_InputActionEvent_55(const struct FKey& Key);
	void InpActEvt_Evade_Key_K2Node_InputActionEvent_54(const struct FKey& Key);
	void InpActEvt_Menu_1_K2Node_InputActionEvent_53(const struct FKey& Key);
	void InpActEvt_Menu_2_K2Node_InputActionEvent_52(const struct FKey& Key);
	void InpActEvt_Menu_3_K2Node_InputActionEvent_51(const struct FKey& Key);
	void InpActEvt_Menu_4_K2Node_InputActionEvent_50(const struct FKey& Key);
	void InpActEvt_pckeyY_K2Node_InputActionEvent_49(const struct FKey& Key);
	void InpActEvt_Artifact_1_BreakFate_K2Node_InputActionEvent_48(const struct FKey& Key);
	void InpActEvt_Artifact_1_BreakFate_K2Node_InputActionEvent_47(const struct FKey& Key);
	void InpActEvt_Artifact_2_BreakFate_K2Node_InputActionEvent_46(const struct FKey& Key);
	void InpActEvt_Artifact_2_BreakFate_K2Node_InputActionEvent_45(const struct FKey& Key);
	void InpActEvt_Supply1_BreakFate_K2Node_InputActionEvent_44(const struct FKey& Key);
	void InpActEvt_Supply1_BreakFate_K2Node_InputActionEvent_43(const struct FKey& Key);
	void InpActEvt_Supply2_BreakFate_K2Node_InputActionEvent_42(const struct FKey& Key);
	void InpActEvt_Supply2_BreakFate_K2Node_InputActionEvent_41(const struct FKey& Key);
	void InpActEvt_UI_Bag_BreakFate_K2Node_InputActionEvent_40(const struct FKey& Key);
	void InpActEvt_UI_Bag_BreakFate_K2Node_InputActionEvent_39(const struct FKey& Key);
	void InpActEvt_ChangeWeapon0_BreakFate_K2Node_InputActionEvent_38(const struct FKey& Key);
	void InpActEvt_ChangeWeapon0_BreakFate_K2Node_InputActionEvent_37(const struct FKey& Key);
	void InpActEvt_ChangeWeapon2_BreakFate_K2Node_InputActionEvent_36(const struct FKey& Key);
	void InpActEvt_ChangeWeapon2_BreakFate_K2Node_InputActionEvent_35(const struct FKey& Key);
	void InpActEvt_Interaction_BreakFate_K2Node_InputActionEvent_34(const struct FKey& Key);
	void InpActEvt_Interaction_BreakFate_K2Node_InputActionEvent_33(const struct FKey& Key);
	void InpActEvt_Jump_BreakFate_K2Node_InputActionEvent_32(const struct FKey& Key);
	void InpActEvt_Jump_BreakFate_K2Node_InputActionEvent_31(const struct FKey& Key);
	void InpActEvt_Map_BreakFate_K2Node_InputActionEvent_30(const struct FKey& Key);
	void InpActEvt_Map_BreakFate_K2Node_InputActionEvent_29(const struct FKey& Key);
	void InpActEvt_WeaponSkill_BreakFate_K2Node_InputActionEvent_28(const struct FKey& Key);
	void InpActEvt_WeaponSkill_BreakFate_K2Node_InputActionEvent_27(const struct FKey& Key);
	void InpActEvt_ChangeWeapon1_BreakFate_K2Node_InputActionEvent_26(const struct FKey& Key);
	void InpActEvt_ChangeWeapon1_BreakFate_K2Node_InputActionEvent_25(const struct FKey& Key);
	void InpActEvt_Artifact_gousuo_BreakFate_K2Node_InputActionEvent_24(const struct FKey& Key);
	void InpActEvt_Artifact_gousuo_BreakFate_K2Node_InputActionEvent_23(const struct FKey& Key);
	void InpActEvt_SwitchTarget_BreakFate_K2Node_InputActionEvent_22(const struct FKey& Key);
	void InpActEvt_SwitchTarget_BreakFate_K2Node_InputActionEvent_21(const struct FKey& Key);
	void InpActEvt_sign_BreakFate_K2Node_InputActionEvent_20(const struct FKey& Key);
	void InpActEvt_Evade_Key_BreakFate_K2Node_InputActionEvent_19(const struct FKey& Key);
	void InpActEvt_Evade_Key_BreakFate_K2Node_InputActionEvent_18(const struct FKey& Key);
	void InpActEvt_Crouch_BreakFate_K2Node_InputActionEvent_17(const struct FKey& Key);
	void InpActEvt_Crouch_BreakFate_K2Node_InputActionEvent_16(const struct FKey& Key);
	void InpActEvt_UI_SelfMenu_BreakFate_K2Node_InputActionEvent_15(const struct FKey& Key);
	void InpActEvt_UI_SelfMenu_BreakFate_K2Node_InputActionEvent_14(const struct FKey& Key);
	void InpActEvt_Introduce_BreakFate_K2Node_InputActionEvent_13(const struct FKey& Key);
	void InpActEvt_Xbox360A_K2Node_InputActionEvent_12(const struct FKey& Key);
	void InpActEvt_Xbox360A_K2Node_InputActionEvent_11(const struct FKey& Key);
	void InpActEvt_Diving_K2Node_InputActionEvent_10(const struct FKey& Key);
	void InpActEvt_SkillAdditional_K2Node_InputActionEvent_9(const struct FKey& Key);
	void InpActEvt_SkillAdditional_K2Node_InputActionEvent_8(const struct FKey& Key);
	void InpActEvt_PlayingMethodSkill_K2Node_InputActionEvent_7(const struct FKey& Key);
	void InpActEvt_PlayingMethodSkill_K2Node_InputActionEvent_6(const struct FKey& Key);
	void InpActEvt_SmallMoveInput_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_SmallMoveInput_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_UI_HackerTerminal_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_UI_HackerTerminal_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_InteractiveAction_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_InteractiveAction_K2Node_InputActionEvent_0(const struct FKey& Key);
	void GamepadInputAction_Dodge_BreakFate(const struct FKey& Key, EInputEvent InputEvent);
	void GamepadInputAction_Skill_BreakFate(const struct FKey& Key, EInputEvent InputEvent);
	void GamepadInputAction_Jump_BreakFate(const struct FKey& Key, EInputEvent InputEvent);
	void GamepadInputAction_Attack_BreakFate(const struct FKey& Key, EInputEvent InputEvent);
	void GamepadInputAction_Artifact1_BreakFate(const struct FKey& Key, EInputEvent InputEvent);
	void GamepadInputAction_Artifact2_BreakFate(const struct FKey& Key, EInputEvent InputEvent);
	void GamepadInputAction_Interaction_BreakFate(const struct FKey& Key, EInputEvent InputEvent);
	void GamepadInputAction_Weapon1_BreakFate(const struct FKey& Key, EInputEvent InputEvent);
	void GamepadInputAction_Weapon2_BreakFate(const struct FKey& Key, EInputEvent InputEvent);
	void GamepadInputAction_Weapon3_BreakFate(const struct FKey& Key, EInputEvent InputEvent);
	void GamepadInputAction_Inventory_BreakFate(const struct FKey& Key, EInputEvent InputEvent);
	void GamepadInputAction_Mark_BreakFate(const struct FKey& Key, EInputEvent InputEvent);
	void GamepadInputAction_Hook_BreakFate(const struct FKey& Key, EInputEvent InputEvent);
	void GamepadInputAction_Cancel_BreakFate(const struct FKey& Key, EInputEvent InputEvent);
	void GamepadInputAction_Dodge(const struct FKey& Key, EInputEvent InputEvent);
	void GamepadInputAction_Skill(const struct FKey& Key, EInputEvent InputEvent);
	void GamepadInputAction_Jump(const struct FKey& Key, EInputEvent InputEvent);
	void GamepadInputAction_Attack(const struct FKey& Key, EInputEvent InputEvent);
	void GamepadInputAction_Artifact1(const struct FKey& Key, EInputEvent InputEvent);
	void GamepadInputAction_Artifact2(const struct FKey& Key, EInputEvent InputEvent);
	void GamepadInputAction_SwitchArtifact(const struct FKey& Key, EInputEvent InputEvent);
	void GamepadInputAction_Weapon1(const struct FKey& Key, EInputEvent InputEvent);
	void GamepadInputAction_Weapon2(const struct FKey& Key, EInputEvent InputEvent);
	void GamepadInputAction_Weapon3(const struct FKey& Key, EInputEvent InputEvent);
	void GamepadInputAction_Interact(const struct FKey& Key, EInputEvent InputEvent);
	void GamepadInputAction_Food(const struct FKey& Key, EInputEvent InputEvent);
	void GamepadInputAction_Mount(const struct FKey& Key, EInputEvent InputEvent);
	void GamepadInputAction_Cancel(const struct FKey& Key, EInputEvent InputEvent);
	void GamepadInputAction_MainMenu(const struct FKey& Key, EInputEvent InputEvent);
	void ProcessGamepadSpecialLeftInput(EGamepadInput SpecialLeftInput, EInputEvent InputEvent);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void SwitchMouse(bool bShow);
	void SetWeather(int32 Type);
	void SetTimeOfDay(float Time);
	void Evade_Pressed();
	void Evade_Released();
	void Vines_Pressed();
	void Vines_Released();
	void Interaction_Pressed();
	void Interaction_Released();
	void Jump_Pressed();
	void Jump_Released();
	void Crouch_Pressed();
	void Crouch_Released();
	void Melee_Pressed();
	void Melee_Released();
	void ArtifactSkill_Pressed(int32 Param_Index);
	void ArtifactSkill_Released(int32 Param_Index);
	void Switch_Pressed();
	void Switch_Released();
	void WeaponSkill_Pressed();
	void WeaponSkill_Released();
	void ChangeWeapon_Pressed(int32 Param_Index);
	void ChangeWeapon_Releassed(int32 Param_Index);
	void ChangeArtifact_Pressed(int32 Param_Index);
	void ChangeArtifact_Relesed(int32 Param_Index);
	void Cancel_Pressed();
	void Cancel_Released();
	void Mount_Pressed();
	void Mount_Released();
	void Supply_Pressed();
	void Supply_Relessed();
	void SelfMenu_Pressed();
	void SelfMenu_Released();
	void Track_Pressed();
	void Track_Released();
	void ChangeWeapon0_Pressed();
	void ChangeWeapon0_Released();
	void ChangeWeapon1_Released();
	void ChangeWeapon1_Pressed();
	void ChangeWeapon2_Released();
	void ChangeWeapon2_Pressed();
	void BPOnEscEvent(bool bPressed);
	void EnterAnimingPressed();
	void EnterAnimingReleased();
	void ChangeWeapon0_BreakFate();
	void ChangeWeapon1_BreakFate();
	void ChangeWeapon2_BreakFate();
	void Jump_BreakFate();
	void UseSupply1_BreakFate();
	void UseSupply2_BreakFate();
	void UI_Bag_BreakFate();
	void WeaponSkillPressed_BreakFate();
	void WeaponSkillReleased_BreakFate();
	void ArtifactSkill_Pressed_BreakFate(int32 Param_Index);
	void ArtifactSkill_Released_BreakFate(int32 Param_Index);
	void Artifact_gousuo_Pressed_BreakFate();
	void Artifact_gousuo_Released_BreakFate();
	void SelfMenu_BreakFate_Pressed();
	void SelfMenu_BreakFate_Released();
	void ChangeWeapon0_BreakFate_Released();
	void ChangeWeapon1_BreakFate_Released();
	void ChangeWeapon2_BreakFate_Released();
	void Interaction_BreakFate_Pressed();
	void Interaction_BreakFate_Released();
	void OnSpectate_guanzhan();
	void OutSpectate_guanzhan();
	void BPOnGamepadFaceBottomEvent(bool bPressed);
	void Introduce_Pressed();
	void Introduce_Released();
	void Diving_Pressed();
	void GamepadPcKey_Pressed();
	void Fiona_Pressed();
	void Fiona_Released();
	void Map_BreakFate_Pressed();
	void Map_BreakFate_Released();
	void ExecuteUbergraph_BP_PlayerControllerBase(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerControllerBase_C">();
	}
	static class ABP_PlayerControllerBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlayerControllerBase_C>();
	}
};
static_assert(alignof(ABP_PlayerControllerBase_C) == 0x000010, "Wrong alignment on ABP_PlayerControllerBase_C");
static_assert(sizeof(ABP_PlayerControllerBase_C) == 0x001310, "Wrong size on ABP_PlayerControllerBase_C");
static_assert(offsetof(ABP_PlayerControllerBase_C, UberGraphFrame) == 0x001200, "Member 'ABP_PlayerControllerBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PlayerControllerBase_C, TaskId_FireVillage) == 0x001208, "Member 'ABP_PlayerControllerBase_C::TaskId_FireVillage' has a wrong offset!");
static_assert(offsetof(ABP_PlayerControllerBase_C, NewVar_1) == 0x001210, "Member 'ABP_PlayerControllerBase_C::NewVar_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerControllerBase_C, ExScene) == 0x001220, "Member 'ABP_PlayerControllerBase_C::ExScene' has a wrong offset!");
static_assert(offsetof(ABP_PlayerControllerBase_C, ShowMouseRequestNum) == 0x001230, "Member 'ABP_PlayerControllerBase_C::ShowMouseRequestNum' has a wrong offset!");
static_assert(offsetof(ABP_PlayerControllerBase_C, WeekJournal_Func_ID) == 0x001234, "Member 'ABP_PlayerControllerBase_C::WeekJournal_Func_ID' has a wrong offset!");
static_assert(offsetof(ABP_PlayerControllerBase_C, DailyActivity_Func_ID) == 0x00123C, "Member 'ABP_PlayerControllerBase_C::DailyActivity_Func_ID' has a wrong offset!");
static_assert(offsetof(ABP_PlayerControllerBase_C, ActivityEntrance_Func_ID) == 0x001244, "Member 'ABP_PlayerControllerBase_C::ActivityEntrance_Func_ID' has a wrong offset!");
static_assert(offsetof(ABP_PlayerControllerBase_C, GameShop_Func_ID) == 0x00124C, "Member 'ABP_PlayerControllerBase_C::GameShop_Func_ID' has a wrong offset!");
static_assert(offsetof(ABP_PlayerControllerBase_C, Cant_State) == 0x001254, "Member 'ABP_PlayerControllerBase_C::Cant_State' has a wrong offset!");
static_assert(offsetof(ABP_PlayerControllerBase_C, FuncLock) == 0x001255, "Member 'ABP_PlayerControllerBase_C::FuncLock' has a wrong offset!");
static_assert(offsetof(ABP_PlayerControllerBase_C, Key_PressedMap) == 0x001258, "Member 'ABP_PlayerControllerBase_C::Key_PressedMap' has a wrong offset!");
static_assert(offsetof(ABP_PlayerControllerBase_C, IsLBPressed) == 0x0012A8, "Member 'ABP_PlayerControllerBase_C::IsLBPressed' has a wrong offset!");
static_assert(offsetof(ABP_PlayerControllerBase_C, ResetAim) == 0x0012A9, "Member 'ABP_PlayerControllerBase_C::ResetAim' has a wrong offset!");
static_assert(offsetof(ABP_PlayerControllerBase_C, CanUse) == 0x0012AA, "Member 'ABP_PlayerControllerBase_C::CanUse' has a wrong offset!");
static_assert(offsetof(ABP_PlayerControllerBase_C, GamepadChangeArtifactIndex) == 0x0012AC, "Member 'ABP_PlayerControllerBase_C::GamepadChangeArtifactIndex' has a wrong offset!");
static_assert(offsetof(ABP_PlayerControllerBase_C, CantShowMapTips) == 0x0012B0, "Member 'ABP_PlayerControllerBase_C::CantShowMapTips' has a wrong offset!");
static_assert(offsetof(ABP_PlayerControllerBase_C, Spawn_Transform) == 0x0012D0, "Member 'ABP_PlayerControllerBase_C::Spawn_Transform' has a wrong offset!");
static_assert(offsetof(ABP_PlayerControllerBase_C, Diving) == 0x001300, "Member 'ABP_PlayerControllerBase_C::Diving' has a wrong offset!");

}

