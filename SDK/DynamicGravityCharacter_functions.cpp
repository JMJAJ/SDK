#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DynamicGravityCharacter

#include "Basic.hpp"

#include "DynamicGravityCharacter_classes.hpp"
#include "DynamicGravityCharacter_parameters.hpp"


namespace SDK
{

// Function DynamicGravityCharacter.DGCharacter.AddForwardPlanarMovementInput
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                         WorldRotation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ScaleValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADGCharacter::AddForwardPlanarMovementInput(const struct FRotator& WorldRotation, float ScaleValue, bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacter", "AddForwardPlanarMovementInput");

	Params::DGCharacter_AddForwardPlanarMovementInput Parms{};

	Parms.WorldRotation = std::move(WorldRotation);
	Parms.ScaleValue = ScaleValue;
	Parms.bForce = bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicGravityCharacter.DGCharacter.AddForwardPlanarMovementInputWithViewRotationAsWorldRotation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ScaleValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADGCharacter::AddForwardPlanarMovementInputWithViewRotationAsWorldRotation(float ScaleValue, bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacter", "AddForwardPlanarMovementInputWithViewRotationAsWorldRotation");

	Params::DGCharacter_AddForwardPlanarMovementInputWithViewRotationAsWorldRotation Parms{};

	Parms.ScaleValue = ScaleValue;
	Parms.bForce = bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicGravityCharacter.DGCharacter.AddForwardRadialMovementInput
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                         WorldRotation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ScaleValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADGCharacter::AddForwardRadialMovementInput(const struct FRotator& WorldRotation, float ScaleValue, bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacter", "AddForwardRadialMovementInput");

	Params::DGCharacter_AddForwardRadialMovementInput Parms{};

	Parms.WorldRotation = std::move(WorldRotation);
	Parms.ScaleValue = ScaleValue;
	Parms.bForce = bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicGravityCharacter.DGCharacter.AddForwardRadialMovementInputWithViewRotationAsWorldRotation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ScaleValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADGCharacter::AddForwardRadialMovementInputWithViewRotationAsWorldRotation(float ScaleValue, bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacter", "AddForwardRadialMovementInputWithViewRotationAsWorldRotation");

	Params::DGCharacter_AddForwardRadialMovementInputWithViewRotationAsWorldRotation Parms{};

	Parms.ScaleValue = ScaleValue;
	Parms.bForce = bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicGravityCharacter.DGCharacter.AddRightPlanarMovementInput
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                         WorldRotation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ScaleValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADGCharacter::AddRightPlanarMovementInput(const struct FRotator& WorldRotation, float ScaleValue, bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacter", "AddRightPlanarMovementInput");

	Params::DGCharacter_AddRightPlanarMovementInput Parms{};

	Parms.WorldRotation = std::move(WorldRotation);
	Parms.ScaleValue = ScaleValue;
	Parms.bForce = bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicGravityCharacter.DGCharacter.AddRightPlanarMovementInputWithViewRotationAsWorldRotation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ScaleValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADGCharacter::AddRightPlanarMovementInputWithViewRotationAsWorldRotation(float ScaleValue, bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacter", "AddRightPlanarMovementInputWithViewRotationAsWorldRotation");

	Params::DGCharacter_AddRightPlanarMovementInputWithViewRotationAsWorldRotation Parms{};

	Parms.ScaleValue = ScaleValue;
	Parms.bForce = bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicGravityCharacter.DGCharacter.AddRightRadialMovementInput
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                         WorldRotation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ScaleValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADGCharacter::AddRightRadialMovementInput(const struct FRotator& WorldRotation, float ScaleValue, bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacter", "AddRightRadialMovementInput");

	Params::DGCharacter_AddRightRadialMovementInput Parms{};

	Parms.WorldRotation = std::move(WorldRotation);
	Parms.ScaleValue = ScaleValue;
	Parms.bForce = bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicGravityCharacter.DGCharacter.AddRightRadialMovementInputWithViewRotationAsWorldRotation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ScaleValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADGCharacter::AddRightRadialMovementInputWithViewRotationAsWorldRotation(float ScaleValue, bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacter", "AddRightRadialMovementInputWithViewRotationAsWorldRotation");

	Params::DGCharacter_AddRightRadialMovementInputWithViewRotationAsWorldRotation Parms{};

	Parms.ScaleValue = ScaleValue;
	Parms.bForce = bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicGravityCharacter.DGCharacter.HorizontalAndVerticalVelocities
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct DynamicGravityCharacter::FHorizontalAndVerticalVelocitiesReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct DynamicGravityCharacter::FHorizontalAndVerticalVelocities ADGCharacter::HorizontalAndVerticalVelocities()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacter", "HorizontalAndVerticalVelocities");

	Params::DGCharacter_HorizontalAndVerticalVelocities Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicGravityCharacter.DGCharacter.HorizontalSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ADGCharacter::HorizontalSpeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacter", "HorizontalSpeed");

	Params::DGCharacter_HorizontalSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicGravityCharacter.DGCharacter.HorizontalVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ADGCharacter::HorizontalVelocity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacter", "HorizontalVelocity");

	Params::DGCharacter_HorizontalVelocity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicGravityCharacter.DGCharacter.ResetControlRotation
// (Final, Native, Public, BlueprintCallable)

void ADGCharacter::ResetControlRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacter", "ResetControlRotation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicGravityCharacter.DGCharacter.ResetControlRotationHorizontally
// (Final, Native, Public, BlueprintCallable)

void ADGCharacter::ResetControlRotationHorizontally()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacter", "ResetControlRotationHorizontally");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicGravityCharacter.DGCharacter.ResetControlRotationVertically
// (Final, Native, Public, BlueprintCallable)

void ADGCharacter::ResetControlRotationVertically()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacter", "ResetControlRotationVertically");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicGravityCharacter.DGCharacter.ResetPitchControlRotation
// (Final, Native, Public, BlueprintCallable)

void ADGCharacter::ResetPitchControlRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacter", "ResetPitchControlRotation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicGravityCharacter.DGCharacter.ResetRollControlRotation
// (Final, Native, Public, BlueprintCallable)

void ADGCharacter::ResetRollControlRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacter", "ResetRollControlRotation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicGravityCharacter.DGCharacter.ResetYawControlRotation
// (Final, Native, Public, BlueprintCallable)

void ADGCharacter::ResetYawControlRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacter", "ResetYawControlRotation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicGravityCharacter.DGCharacter.SetViewRotationBaseMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EViewRotationBaseMode                   NewViewRotationBaseMode                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADGCharacter::SetViewRotationBaseMode(EViewRotationBaseMode NewViewRotationBaseMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacter", "SetViewRotationBaseMode");

	Params::DGCharacter_SetViewRotationBaseMode Parms{};

	Parms.NewViewRotationBaseMode = NewViewRotationBaseMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicGravityCharacter.DGCharacter.Speed
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ADGCharacter::Speed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacter", "Speed");

	Params::DGCharacter_Speed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicGravityCharacter.DGCharacter.VerticalSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ADGCharacter::VerticalSpeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacter", "VerticalSpeed");

	Params::DGCharacter_VerticalSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicGravityCharacter.DGCharacter.VerticalVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ADGCharacter::VerticalVelocity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacter", "VerticalVelocity");

	Params::DGCharacter_VerticalVelocity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicGravityCharacter.DGCharacter.GetViewRotation
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator ADGCharacter::GetViewRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacter", "GetViewRotation");

	Params::DGCharacter_GetViewRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicGravityCharacter.DGCharacter.GetViewRotationBaseMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EViewRotationBaseMode                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EViewRotationBaseMode ADGCharacter::GetViewRotationBaseMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacter", "GetViewRotationBaseMode");

	Params::DGCharacter_GetViewRotationBaseMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicGravityCharacter.DGCharacterMovementComponent.SetCustomJumpDirection
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          NewJumpDirection                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDGCharacterMovementComponent::SetCustomJumpDirection(const struct FVector& NewJumpDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacterMovementComponent", "SetCustomJumpDirection");

	Params::DGCharacterMovementComponent_SetCustomJumpDirection Parms{};

	Parms.NewJumpDirection = std::move(NewJumpDirection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicGravityCharacter.DGCharacterMovementComponent.SetCustomWalkableFloorNormal
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          NewFloorDirection                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDGCharacterMovementComponent::SetCustomWalkableFloorNormal(const struct FVector& NewFloorDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacterMovementComponent", "SetCustomWalkableFloorNormal");

	Params::DGCharacterMovementComponent_SetCustomWalkableFloorNormal Parms{};

	Parms.NewFloorDirection = std::move(NewFloorDirection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicGravityCharacter.DGCharacterMovementComponent.ComputeFloorDist
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          WalkableNormal                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         CapsuleRotation                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          CapsuleLocation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LineDistance                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SweepDistance                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SweepRadius                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFindFloorResult                 FloorResult                                            (Parm, OutParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UDGCharacterMovementComponent::ComputeFloorDist(const struct FVector& WalkableNormal, const struct FRotator& CapsuleRotation, const struct FVector& CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, struct FFindFloorResult* FloorResult) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacterMovementComponent", "ComputeFloorDist");

	Params::DGCharacterMovementComponent_ComputeFloorDist Parms{};

	Parms.WalkableNormal = std::move(WalkableNormal);
	Parms.CapsuleRotation = std::move(CapsuleRotation);
	Parms.CapsuleLocation = std::move(CapsuleLocation);
	Parms.LineDistance = LineDistance;
	Parms.SweepDistance = SweepDistance;
	Parms.SweepRadius = SweepRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FloorResult != nullptr)
		*FloorResult = std::move(Parms.FloorResult);
}


// Function DynamicGravityCharacter.DGCharacterMovementComponent.DynamicGravityNormal
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UDGCharacterMovementComponent::DynamicGravityNormal() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacterMovementComponent", "DynamicGravityNormal");

	Params::DGCharacterMovementComponent_DynamicGravityNormal Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicGravityCharacter.DGCharacterMovementComponent.FindFloor
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          WalkableNormal                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         CapsuleRotation                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          CapsuleLocation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFindFloorResult                 FloorResult                                            (Parm, OutParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UDGCharacterMovementComponent::FindFloor(const struct FVector& WalkableNormal, const struct FRotator& CapsuleRotation, const struct FVector& CapsuleLocation, struct FFindFloorResult* FloorResult) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacterMovementComponent", "FindFloor");

	Params::DGCharacterMovementComponent_FindFloor Parms{};

	Parms.WalkableNormal = std::move(WalkableNormal);
	Parms.CapsuleRotation = std::move(CapsuleRotation);
	Parms.CapsuleLocation = std::move(CapsuleLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FloorResult != nullptr)
		*FloorResult = std::move(Parms.FloorResult);
}


// Function DynamicGravityCharacter.DGCharacterMovementComponent.GetCustomJumpDirection
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UDGCharacterMovementComponent::GetCustomJumpDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacterMovementComponent", "GetCustomJumpDirection");

	Params::DGCharacterMovementComponent_GetCustomJumpDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicGravityCharacter.DGCharacterMovementComponent.GetCustomWalkableFloorNormal
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UDGCharacterMovementComponent::GetCustomWalkableFloorNormal() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacterMovementComponent", "GetCustomWalkableFloorNormal");

	Params::DGCharacterMovementComponent_GetCustomWalkableFloorNormal Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicGravityCharacter.DGCharacterMovementComponent.Gravity
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UDGCharacterMovementComponent::Gravity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacterMovementComponent", "Gravity");

	Params::DGCharacterMovementComponent_Gravity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicGravityCharacter.DGCharacterMovementComponent.GravityNormal
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UDGCharacterMovementComponent::GravityNormal() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacterMovementComponent", "GravityNormal");

	Params::DGCharacterMovementComponent_GravityNormal Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicGravityCharacter.DGCharacterMovementComponent.JumpDirection
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UDGCharacterMovementComponent::JumpDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacterMovementComponent", "JumpDirection");

	Params::DGCharacterMovementComponent_JumpDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicGravityCharacter.DGCharacterMovementComponent.WalkableFloorNormal
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UDGCharacterMovementComponent::WalkableFloorNormal() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacterMovementComponent", "WalkableFloorNormal");

	Params::DGCharacterMovementComponent_WalkableFloorNormal Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicGravityCharacter.DGCharacterMovementComponent.WorldGravity
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UDGCharacterMovementComponent::WorldGravity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacterMovementComponent", "WorldGravity");

	Params::DGCharacterMovementComponent_WorldGravity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicGravityCharacter.DGCharacterMovementComponent.WorldGravityNormal
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UDGCharacterMovementComponent::WorldGravityNormal() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DGCharacterMovementComponent", "WorldGravityNormal");

	Params::DGCharacterMovementComponent_WorldGravityNormal Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

