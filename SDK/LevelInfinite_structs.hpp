#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LevelInfinite

#include "Basic.hpp"

#include "LIEventSubsystem_structs.hpp"


namespace SDK
{

// Enum LevelInfinite.ELIEventType
// NumValues: 0x000C
enum class ELIEventType : uint8
{
	DEFAULT                                  = 0,
	INTL_REPEAT                              = 1,
	GN_DISABLED                              = 2,
	GN_READY                                 = 3,
	LOGIN_PANEL_OPEN                         = 4,
	LOGIN_PANEL_CLOSE                        = 5,
	ACCOUNT_CENTER_OPEN                      = 6,
	ACCOUNT_CENTER_CLOSE                     = 7,
	SET_PROVISION                            = 8,
	COMPLIANCE_AGE_SUCESS                    = 9,
	COMPLIANCE_MINOR_SUCESS                  = 10,
	ELIEventType_MAX                         = 11,
};

// ScriptStruct LevelInfinite.LIAuthSuccessEvent
// 0x0000 (0x0001 - 0x0001)
struct FLIAuthSuccessEvent final : public FEventBase
{
};
static_assert(alignof(FLIAuthSuccessEvent) == 0x000001, "Wrong alignment on FLIAuthSuccessEvent");
static_assert(sizeof(FLIAuthSuccessEvent) == 0x000001, "Wrong size on FLIAuthSuccessEvent");

// ScriptStruct LevelInfinite.LIUserData
// 0x00B0 (0x00B0 - 0x0000)
struct FLIUserData final
{
public:
	int32                                         GameId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1997[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ChannelID;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OpenID;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Token;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoleId;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AreaId;                                            // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZoneId;                                            // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LangType;                                          // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefLangType;                                       // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoleName;                                          // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppVersion;                                        // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExtraJson;                                         // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLIUserData) == 0x000008, "Wrong alignment on FLIUserData");
static_assert(sizeof(FLIUserData) == 0x0000B0, "Wrong size on FLIUserData");
static_assert(offsetof(FLIUserData, GameId) == 0x000000, "Member 'FLIUserData::GameId' has a wrong offset!");
static_assert(offsetof(FLIUserData, ChannelID) == 0x000008, "Member 'FLIUserData::ChannelID' has a wrong offset!");
static_assert(offsetof(FLIUserData, OpenID) == 0x000018, "Member 'FLIUserData::OpenID' has a wrong offset!");
static_assert(offsetof(FLIUserData, Token) == 0x000028, "Member 'FLIUserData::Token' has a wrong offset!");
static_assert(offsetof(FLIUserData, RoleId) == 0x000038, "Member 'FLIUserData::RoleId' has a wrong offset!");
static_assert(offsetof(FLIUserData, Region) == 0x000048, "Member 'FLIUserData::Region' has a wrong offset!");
static_assert(offsetof(FLIUserData, AreaId) == 0x000058, "Member 'FLIUserData::AreaId' has a wrong offset!");
static_assert(offsetof(FLIUserData, ZoneId) == 0x00005C, "Member 'FLIUserData::ZoneId' has a wrong offset!");
static_assert(offsetof(FLIUserData, LangType) == 0x000060, "Member 'FLIUserData::LangType' has a wrong offset!");
static_assert(offsetof(FLIUserData, DefLangType) == 0x000070, "Member 'FLIUserData::DefLangType' has a wrong offset!");
static_assert(offsetof(FLIUserData, RoleName) == 0x000080, "Member 'FLIUserData::RoleName' has a wrong offset!");
static_assert(offsetof(FLIUserData, AppVersion) == 0x000090, "Member 'FLIUserData::AppVersion' has a wrong offset!");
static_assert(offsetof(FLIUserData, ExtraJson) == 0x0000A0, "Member 'FLIUserData::ExtraJson' has a wrong offset!");

// ScriptStruct LevelInfinite.LIBaseEvent
// 0x0018 (0x0018 - 0x0000)
struct FLIBaseEvent final
{
public:
	ELIEventType                                  EventType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1998[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ExtraJson;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLIBaseEvent) == 0x000008, "Wrong alignment on FLIBaseEvent");
static_assert(sizeof(FLIBaseEvent) == 0x000018, "Wrong size on FLIBaseEvent");
static_assert(offsetof(FLIBaseEvent, EventType) == 0x000000, "Member 'FLIBaseEvent::EventType' has a wrong offset!");
static_assert(offsetof(FLIBaseEvent, ExtraJson) == 0x000008, "Member 'FLIBaseEvent::ExtraJson' has a wrong offset!");

// ScriptStruct LevelInfinite.GNPanelReadyEventExtraParam
// 0x0018 (0x0018 - 0x0000)
struct FGNPanelReadyEventExtraParam final
{
public:
	class FString                                 Asset_version;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_cdn_asset;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1999[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGNPanelReadyEventExtraParam) == 0x000008, "Wrong alignment on FGNPanelReadyEventExtraParam");
static_assert(sizeof(FGNPanelReadyEventExtraParam) == 0x000018, "Wrong size on FGNPanelReadyEventExtraParam");
static_assert(offsetof(FGNPanelReadyEventExtraParam, Asset_version) == 0x000000, "Member 'FGNPanelReadyEventExtraParam::Asset_version' has a wrong offset!");
static_assert(offsetof(FGNPanelReadyEventExtraParam, Is_cdn_asset) == 0x000010, "Member 'FGNPanelReadyEventExtraParam::Is_cdn_asset' has a wrong offset!");

// ScriptStruct LevelInfinite.GNPanelReadyEventParam
// 0x0030 (0x0030 - 0x0000)
struct FGNPanelReadyEventParam final
{
public:
	class FString                                 Module;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPopPanel;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_199A[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGNPanelReadyEventExtraParam           ExtraParams;                                       // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGNPanelReadyEventParam) == 0x000008, "Wrong alignment on FGNPanelReadyEventParam");
static_assert(sizeof(FGNPanelReadyEventParam) == 0x000030, "Wrong size on FGNPanelReadyEventParam");
static_assert(offsetof(FGNPanelReadyEventParam, Module) == 0x000000, "Member 'FGNPanelReadyEventParam::Module' has a wrong offset!");
static_assert(offsetof(FGNPanelReadyEventParam, IsPopPanel) == 0x000010, "Member 'FGNPanelReadyEventParam::IsPopPanel' has a wrong offset!");
static_assert(offsetof(FGNPanelReadyEventParam, ExtraParams) == 0x000018, "Member 'FGNPanelReadyEventParam::ExtraParams' has a wrong offset!");

// ScriptStruct LevelInfinite.LIBaseAuthInfoUpdateEvent
// 0x0000 (0x0001 - 0x0001)
struct FLIBaseAuthInfoUpdateEvent final : public FEventBase
{
};
static_assert(alignof(FLIBaseAuthInfoUpdateEvent) == 0x000001, "Wrong alignment on FLIBaseAuthInfoUpdateEvent");
static_assert(sizeof(FLIBaseAuthInfoUpdateEvent) == 0x000001, "Wrong size on FLIBaseAuthInfoUpdateEvent");

}

