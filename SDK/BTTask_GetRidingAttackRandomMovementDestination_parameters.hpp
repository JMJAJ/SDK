#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTTask_GetRidingAttackRandomMovementDestination

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BTTask_GetRidingAttackRandomMovementDestination.BTTask_GetRidingAttackRandomMovementDestination_C.ExecuteUbergraph_BTTask_GetRidingAttackRandomMovementDestination
// 0x0040 (0x0040 - 0x0000)
struct BTTask_GetRidingAttackRandomMovementDestination_C_ExecuteUbergraph_BTTask_GetRidingAttackRandomMovementDestination final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5597[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5598[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHottaAICharacter*                      K2Node_DynamicCast_AsHotta_AICharacter;            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5599[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetRidingAttackRandomMovementDestination_OutLoc; // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetRidingAttackRandomMovementDestination_ReturnValue; // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_559A[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTTask_GetRidingAttackRandomMovementDestination_C_ExecuteUbergraph_BTTask_GetRidingAttackRandomMovementDestination) == 0x000008, "Wrong alignment on BTTask_GetRidingAttackRandomMovementDestination_C_ExecuteUbergraph_BTTask_GetRidingAttackRandomMovementDestination");
static_assert(sizeof(BTTask_GetRidingAttackRandomMovementDestination_C_ExecuteUbergraph_BTTask_GetRidingAttackRandomMovementDestination) == 0x000040, "Wrong size on BTTask_GetRidingAttackRandomMovementDestination_C_ExecuteUbergraph_BTTask_GetRidingAttackRandomMovementDestination");
static_assert(offsetof(BTTask_GetRidingAttackRandomMovementDestination_C_ExecuteUbergraph_BTTask_GetRidingAttackRandomMovementDestination, EntryPoint) == 0x000000, "Member 'BTTask_GetRidingAttackRandomMovementDestination_C_ExecuteUbergraph_BTTask_GetRidingAttackRandomMovementDestination::EntryPoint' has a wrong offset!");
static_assert(offsetof(BTTask_GetRidingAttackRandomMovementDestination_C_ExecuteUbergraph_BTTask_GetRidingAttackRandomMovementDestination, K2Node_Event_OwnerController) == 0x000008, "Member 'BTTask_GetRidingAttackRandomMovementDestination_C_ExecuteUbergraph_BTTask_GetRidingAttackRandomMovementDestination::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(BTTask_GetRidingAttackRandomMovementDestination_C_ExecuteUbergraph_BTTask_GetRidingAttackRandomMovementDestination, K2Node_Event_ControlledPawn) == 0x000010, "Member 'BTTask_GetRidingAttackRandomMovementDestination_C_ExecuteUbergraph_BTTask_GetRidingAttackRandomMovementDestination::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTTask_GetRidingAttackRandomMovementDestination_C_ExecuteUbergraph_BTTask_GetRidingAttackRandomMovementDestination, CallFunc_RandomFloatInRange_ReturnValue) == 0x000018, "Member 'BTTask_GetRidingAttackRandomMovementDestination_C_ExecuteUbergraph_BTTask_GetRidingAttackRandomMovementDestination::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTTask_GetRidingAttackRandomMovementDestination_C_ExecuteUbergraph_BTTask_GetRidingAttackRandomMovementDestination, K2Node_DynamicCast_AsHotta_AICharacter) == 0x000020, "Member 'BTTask_GetRidingAttackRandomMovementDestination_C_ExecuteUbergraph_BTTask_GetRidingAttackRandomMovementDestination::K2Node_DynamicCast_AsHotta_AICharacter' has a wrong offset!");
static_assert(offsetof(BTTask_GetRidingAttackRandomMovementDestination_C_ExecuteUbergraph_BTTask_GetRidingAttackRandomMovementDestination, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BTTask_GetRidingAttackRandomMovementDestination_C_ExecuteUbergraph_BTTask_GetRidingAttackRandomMovementDestination::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTTask_GetRidingAttackRandomMovementDestination_C_ExecuteUbergraph_BTTask_GetRidingAttackRandomMovementDestination, CallFunc_GetRidingAttackRandomMovementDestination_OutLoc) == 0x00002C, "Member 'BTTask_GetRidingAttackRandomMovementDestination_C_ExecuteUbergraph_BTTask_GetRidingAttackRandomMovementDestination::CallFunc_GetRidingAttackRandomMovementDestination_OutLoc' has a wrong offset!");
static_assert(offsetof(BTTask_GetRidingAttackRandomMovementDestination_C_ExecuteUbergraph_BTTask_GetRidingAttackRandomMovementDestination, CallFunc_GetRidingAttackRandomMovementDestination_ReturnValue) == 0x000038, "Member 'BTTask_GetRidingAttackRandomMovementDestination_C_ExecuteUbergraph_BTTask_GetRidingAttackRandomMovementDestination::CallFunc_GetRidingAttackRandomMovementDestination_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTTask_GetRidingAttackRandomMovementDestination_C_ExecuteUbergraph_BTTask_GetRidingAttackRandomMovementDestination, CallFunc_Add_FloatFloat_ReturnValue) == 0x00003C, "Member 'BTTask_GetRidingAttackRandomMovementDestination_C_ExecuteUbergraph_BTTask_GetRidingAttackRandomMovementDestination::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function BTTask_GetRidingAttackRandomMovementDestination.BTTask_GetRidingAttackRandomMovementDestination_C.ReceiveExecuteAI
// 0x0010 (0x0010 - 0x0000)
struct BTTask_GetRidingAttackRandomMovementDestination_C_ReceiveExecuteAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTTask_GetRidingAttackRandomMovementDestination_C_ReceiveExecuteAI) == 0x000008, "Wrong alignment on BTTask_GetRidingAttackRandomMovementDestination_C_ReceiveExecuteAI");
static_assert(sizeof(BTTask_GetRidingAttackRandomMovementDestination_C_ReceiveExecuteAI) == 0x000010, "Wrong size on BTTask_GetRidingAttackRandomMovementDestination_C_ReceiveExecuteAI");
static_assert(offsetof(BTTask_GetRidingAttackRandomMovementDestination_C_ReceiveExecuteAI, OwnerController) == 0x000000, "Member 'BTTask_GetRidingAttackRandomMovementDestination_C_ReceiveExecuteAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTTask_GetRidingAttackRandomMovementDestination_C_ReceiveExecuteAI, ControlledPawn) == 0x000008, "Member 'BTTask_GetRidingAttackRandomMovementDestination_C_ReceiveExecuteAI::ControlledPawn' has a wrong offset!");

}

