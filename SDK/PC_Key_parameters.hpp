#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PC_Key

#include "Basic.hpp"

#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function PC_Key.PC_Key_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct PC_Key_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PC_Key_C_PreConstruct) == 0x000001, "Wrong alignment on PC_Key_C_PreConstruct");
static_assert(sizeof(PC_Key_C_PreConstruct) == 0x000001, "Wrong size on PC_Key_C_PreConstruct");
static_assert(offsetof(PC_Key_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'PC_Key_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function PC_Key.PC_Key_C.ExecuteUbergraph_PC_Key
// 0x0020 (0x0020 - 0x0000)
struct PC_Key_C_ExecuteUbergraph_PC_Key final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              ___byte_Variable;                                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_Variable;                                  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              ___byte_Variable_1;                                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              ___byte_Variable_2;                                // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C8C[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              ___byte_Variable_3;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_Variable_1;                                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsBreakFateMap_ReturnValue;               // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PC_Key_C_ExecuteUbergraph_PC_Key) == 0x000008, "Wrong alignment on PC_Key_C_ExecuteUbergraph_PC_Key");
static_assert(sizeof(PC_Key_C_ExecuteUbergraph_PC_Key) == 0x000020, "Wrong size on PC_Key_C_ExecuteUbergraph_PC_Key");
static_assert(offsetof(PC_Key_C_ExecuteUbergraph_PC_Key, EntryPoint) == 0x000000, "Member 'PC_Key_C_ExecuteUbergraph_PC_Key::EntryPoint' has a wrong offset!");
static_assert(offsetof(PC_Key_C_ExecuteUbergraph_PC_Key, ___byte_Variable) == 0x000004, "Member 'PC_Key_C_ExecuteUbergraph_PC_Key::___byte_Variable' has a wrong offset!");
static_assert(offsetof(PC_Key_C_ExecuteUbergraph_PC_Key, ___bool_Variable) == 0x000005, "Member 'PC_Key_C_ExecuteUbergraph_PC_Key::___bool_Variable' has a wrong offset!");
static_assert(offsetof(PC_Key_C_ExecuteUbergraph_PC_Key, ___byte_Variable_1) == 0x000006, "Member 'PC_Key_C_ExecuteUbergraph_PC_Key::___byte_Variable_1' has a wrong offset!");
static_assert(offsetof(PC_Key_C_ExecuteUbergraph_PC_Key, ___byte_Variable_2) == 0x000007, "Member 'PC_Key_C_ExecuteUbergraph_PC_Key::___byte_Variable_2' has a wrong offset!");
static_assert(offsetof(PC_Key_C_ExecuteUbergraph_PC_Key, K2Node_Event_IsDesignTime) == 0x000008, "Member 'PC_Key_C_ExecuteUbergraph_PC_Key::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(PC_Key_C_ExecuteUbergraph_PC_Key, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000010, "Member 'PC_Key_C_ExecuteUbergraph_PC_Key::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_Key_C_ExecuteUbergraph_PC_Key, ___byte_Variable_3) == 0x000018, "Member 'PC_Key_C_ExecuteUbergraph_PC_Key::___byte_Variable_3' has a wrong offset!");
static_assert(offsetof(PC_Key_C_ExecuteUbergraph_PC_Key, ___bool_Variable_1) == 0x000019, "Member 'PC_Key_C_ExecuteUbergraph_PC_Key::___bool_Variable_1' has a wrong offset!");
static_assert(offsetof(PC_Key_C_ExecuteUbergraph_PC_Key, K2Node_Select_Default) == 0x00001A, "Member 'PC_Key_C_ExecuteUbergraph_PC_Key::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(PC_Key_C_ExecuteUbergraph_PC_Key, CallFunc_IsBreakFateMap_ReturnValue) == 0x00001B, "Member 'PC_Key_C_ExecuteUbergraph_PC_Key::CallFunc_IsBreakFateMap_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_Key_C_ExecuteUbergraph_PC_Key, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x00001C, "Member 'PC_Key_C_ExecuteUbergraph_PC_Key::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_Key_C_ExecuteUbergraph_PC_Key, K2Node_Select_Default_1) == 0x00001D, "Member 'PC_Key_C_ExecuteUbergraph_PC_Key::K2Node_Select_Default_1' has a wrong offset!");

// Function PC_Key.PC_Key_C.IsBreakFateKey
// 0x0001 (0x0001 - 0x0000)
struct PC_Key_C_IsBreakFateKey final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PC_Key_C_IsBreakFateKey) == 0x000001, "Wrong alignment on PC_Key_C_IsBreakFateKey");
static_assert(sizeof(PC_Key_C_IsBreakFateKey) == 0x000001, "Wrong size on PC_Key_C_IsBreakFateKey");
static_assert(offsetof(PC_Key_C_IsBreakFateKey, ReturnValue) == 0x000000, "Member 'PC_Key_C_IsBreakFateKey::ReturnValue' has a wrong offset!");

}

