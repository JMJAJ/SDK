#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HottaUIExtensions

#include "Basic.hpp"

#include "HottaUIExtensions_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function HottaUIExtensions.ScrollPhysics.CreateScrollPhysics
// 0x0020 (0x0020 - 0x0000)
struct ScrollPhysics_CreateScrollPhysics final
{
public:
	TSubclassOf<class UScrollPhysics>             InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                InOuter;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScrollPhysics*                         InParent;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScrollPhysics*                         ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPhysics_CreateScrollPhysics) == 0x000008, "Wrong alignment on ScrollPhysics_CreateScrollPhysics");
static_assert(sizeof(ScrollPhysics_CreateScrollPhysics) == 0x000020, "Wrong size on ScrollPhysics_CreateScrollPhysics");
static_assert(offsetof(ScrollPhysics_CreateScrollPhysics, InClass) == 0x000000, "Member 'ScrollPhysics_CreateScrollPhysics::InClass' has a wrong offset!");
static_assert(offsetof(ScrollPhysics_CreateScrollPhysics, InOuter) == 0x000008, "Member 'ScrollPhysics_CreateScrollPhysics::InOuter' has a wrong offset!");
static_assert(offsetof(ScrollPhysics_CreateScrollPhysics, InParent) == 0x000010, "Member 'ScrollPhysics_CreateScrollPhysics::InParent' has a wrong offset!");
static_assert(offsetof(ScrollPhysics_CreateScrollPhysics, ReturnValue) == 0x000018, "Member 'ScrollPhysics_CreateScrollPhysics::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollPhysics.ApplyTo
// 0x0010 (0x0010 - 0x0000)
struct ScrollPhysics_ApplyTo final
{
public:
	class UScrollPhysics*                         InAncestor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScrollPhysics*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPhysics_ApplyTo) == 0x000008, "Wrong alignment on ScrollPhysics_ApplyTo");
static_assert(sizeof(ScrollPhysics_ApplyTo) == 0x000010, "Wrong size on ScrollPhysics_ApplyTo");
static_assert(offsetof(ScrollPhysics_ApplyTo, InAncestor) == 0x000000, "Member 'ScrollPhysics_ApplyTo::InAncestor' has a wrong offset!");
static_assert(offsetof(ScrollPhysics_ApplyTo, ReturnValue) == 0x000008, "Member 'ScrollPhysics_ApplyTo::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollPhysics.GetSpring
// 0x000C (0x000C - 0x0000)
struct ScrollPhysics_GetSpring final
{
public:
	struct FSpringDescription                     ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPhysics_GetSpring) == 0x000004, "Wrong alignment on ScrollPhysics_GetSpring");
static_assert(sizeof(ScrollPhysics_GetSpring) == 0x00000C, "Wrong size on ScrollPhysics_GetSpring");
static_assert(offsetof(ScrollPhysics_GetSpring, ReturnValue) == 0x000000, "Member 'ScrollPhysics_GetSpring::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollPhysics.GetTolerance
// 0x000C (0x000C - 0x0000)
struct ScrollPhysics_GetTolerance final
{
public:
	struct FTolerance                             ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPhysics_GetTolerance) == 0x000004, "Wrong alignment on ScrollPhysics_GetTolerance");
static_assert(sizeof(ScrollPhysics_GetTolerance) == 0x00000C, "Wrong size on ScrollPhysics_GetTolerance");
static_assert(offsetof(ScrollPhysics_GetTolerance, ReturnValue) == 0x000000, "Member 'ScrollPhysics_GetTolerance::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.AlwaysScrollableScrollPhysics.CreateAlwaysScrollableScrollPhysics
// 0x0020 (0x0020 - 0x0000)
struct AlwaysScrollableScrollPhysics_CreateAlwaysScrollableScrollPhysics final
{
public:
	TSubclassOf<class UAlwaysScrollableScrollPhysics> InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                InOuter;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScrollPhysics*                         InParent;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAlwaysScrollableScrollPhysics*         ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AlwaysScrollableScrollPhysics_CreateAlwaysScrollableScrollPhysics) == 0x000008, "Wrong alignment on AlwaysScrollableScrollPhysics_CreateAlwaysScrollableScrollPhysics");
static_assert(sizeof(AlwaysScrollableScrollPhysics_CreateAlwaysScrollableScrollPhysics) == 0x000020, "Wrong size on AlwaysScrollableScrollPhysics_CreateAlwaysScrollableScrollPhysics");
static_assert(offsetof(AlwaysScrollableScrollPhysics_CreateAlwaysScrollableScrollPhysics, InClass) == 0x000000, "Member 'AlwaysScrollableScrollPhysics_CreateAlwaysScrollableScrollPhysics::InClass' has a wrong offset!");
static_assert(offsetof(AlwaysScrollableScrollPhysics_CreateAlwaysScrollableScrollPhysics, InOuter) == 0x000008, "Member 'AlwaysScrollableScrollPhysics_CreateAlwaysScrollableScrollPhysics::InOuter' has a wrong offset!");
static_assert(offsetof(AlwaysScrollableScrollPhysics_CreateAlwaysScrollableScrollPhysics, InParent) == 0x000010, "Member 'AlwaysScrollableScrollPhysics_CreateAlwaysScrollableScrollPhysics::InParent' has a wrong offset!");
static_assert(offsetof(AlwaysScrollableScrollPhysics_CreateAlwaysScrollableScrollPhysics, ReturnValue) == 0x000018, "Member 'AlwaysScrollableScrollPhysics_CreateAlwaysScrollableScrollPhysics::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollActivity.CreateScrollActivity
// 0x0018 (0x0018 - 0x0000)
struct ScrollActivity_CreateScrollActivity final
{
public:
	TSubclassOf<class UScrollActivity>            InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScrollPosition*                        InPosition;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScrollActivity*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollActivity_CreateScrollActivity) == 0x000008, "Wrong alignment on ScrollActivity_CreateScrollActivity");
static_assert(sizeof(ScrollActivity_CreateScrollActivity) == 0x000018, "Wrong size on ScrollActivity_CreateScrollActivity");
static_assert(offsetof(ScrollActivity_CreateScrollActivity, InClass) == 0x000000, "Member 'ScrollActivity_CreateScrollActivity::InClass' has a wrong offset!");
static_assert(offsetof(ScrollActivity_CreateScrollActivity, InPosition) == 0x000008, "Member 'ScrollActivity_CreateScrollActivity::InPosition' has a wrong offset!");
static_assert(offsetof(ScrollActivity_CreateScrollActivity, ReturnValue) == 0x000010, "Member 'ScrollActivity_CreateScrollActivity::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.BallisticScrollActivity.CreateBallisticScrollActivity
// 0x0020 (0x0020 - 0x0000)
struct BallisticScrollActivity_CreateBallisticScrollActivity final
{
public:
	TSubclassOf<class UBallisticScrollActivity>   InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScrollPosition*                        InPosition;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USimulation*                            InSimulation;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBallisticScrollActivity*               ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BallisticScrollActivity_CreateBallisticScrollActivity) == 0x000008, "Wrong alignment on BallisticScrollActivity_CreateBallisticScrollActivity");
static_assert(sizeof(BallisticScrollActivity_CreateBallisticScrollActivity) == 0x000020, "Wrong size on BallisticScrollActivity_CreateBallisticScrollActivity");
static_assert(offsetof(BallisticScrollActivity_CreateBallisticScrollActivity, InClass) == 0x000000, "Member 'BallisticScrollActivity_CreateBallisticScrollActivity::InClass' has a wrong offset!");
static_assert(offsetof(BallisticScrollActivity_CreateBallisticScrollActivity, InPosition) == 0x000008, "Member 'BallisticScrollActivity_CreateBallisticScrollActivity::InPosition' has a wrong offset!");
static_assert(offsetof(BallisticScrollActivity_CreateBallisticScrollActivity, InSimulation) == 0x000010, "Member 'BallisticScrollActivity_CreateBallisticScrollActivity::InSimulation' has a wrong offset!");
static_assert(offsetof(BallisticScrollActivity_CreateBallisticScrollActivity, ReturnValue) == 0x000018, "Member 'BallisticScrollActivity_CreateBallisticScrollActivity::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.BouncingScrollPhysics.CreateBouncingScrollPhysics
// 0x0020 (0x0020 - 0x0000)
struct BouncingScrollPhysics_CreateBouncingScrollPhysics final
{
public:
	TSubclassOf<class UBouncingScrollPhysics>     InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                InOuter;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScrollPhysics*                         InParent;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBouncingScrollPhysics*                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BouncingScrollPhysics_CreateBouncingScrollPhysics) == 0x000008, "Wrong alignment on BouncingScrollPhysics_CreateBouncingScrollPhysics");
static_assert(sizeof(BouncingScrollPhysics_CreateBouncingScrollPhysics) == 0x000020, "Wrong size on BouncingScrollPhysics_CreateBouncingScrollPhysics");
static_assert(offsetof(BouncingScrollPhysics_CreateBouncingScrollPhysics, InClass) == 0x000000, "Member 'BouncingScrollPhysics_CreateBouncingScrollPhysics::InClass' has a wrong offset!");
static_assert(offsetof(BouncingScrollPhysics_CreateBouncingScrollPhysics, InOuter) == 0x000008, "Member 'BouncingScrollPhysics_CreateBouncingScrollPhysics::InOuter' has a wrong offset!");
static_assert(offsetof(BouncingScrollPhysics_CreateBouncingScrollPhysics, InParent) == 0x000010, "Member 'BouncingScrollPhysics_CreateBouncingScrollPhysics::InParent' has a wrong offset!");
static_assert(offsetof(BouncingScrollPhysics_CreateBouncingScrollPhysics, ReturnValue) == 0x000018, "Member 'BouncingScrollPhysics_CreateBouncingScrollPhysics::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.Simulation.CreateSimulation
// 0x0028 (0x0028 - 0x0000)
struct Simulation_CreateSimulation final
{
public:
	TSubclassOf<class USimulation>                InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                InOuter;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTolerance                             InTolerance;                                       // 0x0010(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_115B[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USimulation*                            ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Simulation_CreateSimulation) == 0x000008, "Wrong alignment on Simulation_CreateSimulation");
static_assert(sizeof(Simulation_CreateSimulation) == 0x000028, "Wrong size on Simulation_CreateSimulation");
static_assert(offsetof(Simulation_CreateSimulation, InClass) == 0x000000, "Member 'Simulation_CreateSimulation::InClass' has a wrong offset!");
static_assert(offsetof(Simulation_CreateSimulation, InOuter) == 0x000008, "Member 'Simulation_CreateSimulation::InOuter' has a wrong offset!");
static_assert(offsetof(Simulation_CreateSimulation, InTolerance) == 0x000010, "Member 'Simulation_CreateSimulation::InTolerance' has a wrong offset!");
static_assert(offsetof(Simulation_CreateSimulation, ReturnValue) == 0x000020, "Member 'Simulation_CreateSimulation::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.BouncingScrollSimulation.CreateBouncingScrollSimulation
// 0x0040 (0x0040 - 0x0000)
struct BouncingScrollSimulation_CreateBouncingScrollSimulation final
{
public:
	TSubclassOf<class UBouncingScrollSimulation>  InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                InOuter;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPosition;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InVelocity;                                        // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InLeadingExtent;                                   // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTrailingExtent;                                  // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSpringDescription                     InSpring;                                          // 0x0020(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FTolerance                             InTolerance;                                       // 0x002C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UBouncingScrollSimulation*              ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BouncingScrollSimulation_CreateBouncingScrollSimulation) == 0x000008, "Wrong alignment on BouncingScrollSimulation_CreateBouncingScrollSimulation");
static_assert(sizeof(BouncingScrollSimulation_CreateBouncingScrollSimulation) == 0x000040, "Wrong size on BouncingScrollSimulation_CreateBouncingScrollSimulation");
static_assert(offsetof(BouncingScrollSimulation_CreateBouncingScrollSimulation, InClass) == 0x000000, "Member 'BouncingScrollSimulation_CreateBouncingScrollSimulation::InClass' has a wrong offset!");
static_assert(offsetof(BouncingScrollSimulation_CreateBouncingScrollSimulation, InOuter) == 0x000008, "Member 'BouncingScrollSimulation_CreateBouncingScrollSimulation::InOuter' has a wrong offset!");
static_assert(offsetof(BouncingScrollSimulation_CreateBouncingScrollSimulation, InPosition) == 0x000010, "Member 'BouncingScrollSimulation_CreateBouncingScrollSimulation::InPosition' has a wrong offset!");
static_assert(offsetof(BouncingScrollSimulation_CreateBouncingScrollSimulation, InVelocity) == 0x000014, "Member 'BouncingScrollSimulation_CreateBouncingScrollSimulation::InVelocity' has a wrong offset!");
static_assert(offsetof(BouncingScrollSimulation_CreateBouncingScrollSimulation, InLeadingExtent) == 0x000018, "Member 'BouncingScrollSimulation_CreateBouncingScrollSimulation::InLeadingExtent' has a wrong offset!");
static_assert(offsetof(BouncingScrollSimulation_CreateBouncingScrollSimulation, InTrailingExtent) == 0x00001C, "Member 'BouncingScrollSimulation_CreateBouncingScrollSimulation::InTrailingExtent' has a wrong offset!");
static_assert(offsetof(BouncingScrollSimulation_CreateBouncingScrollSimulation, InSpring) == 0x000020, "Member 'BouncingScrollSimulation_CreateBouncingScrollSimulation::InSpring' has a wrong offset!");
static_assert(offsetof(BouncingScrollSimulation_CreateBouncingScrollSimulation, InTolerance) == 0x00002C, "Member 'BouncingScrollSimulation_CreateBouncingScrollSimulation::InTolerance' has a wrong offset!");
static_assert(offsetof(BouncingScrollSimulation_CreateBouncingScrollSimulation, ReturnValue) == 0x000038, "Member 'BouncingScrollSimulation_CreateBouncingScrollSimulation::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ClampingScrollPhysics.CreateClampingScrollPhysics
// 0x0020 (0x0020 - 0x0000)
struct ClampingScrollPhysics_CreateClampingScrollPhysics final
{
public:
	TSubclassOf<class UClampingScrollPhysics>     InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                InOuter;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScrollPhysics*                         InParent;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClampingScrollPhysics*                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClampingScrollPhysics_CreateClampingScrollPhysics) == 0x000008, "Wrong alignment on ClampingScrollPhysics_CreateClampingScrollPhysics");
static_assert(sizeof(ClampingScrollPhysics_CreateClampingScrollPhysics) == 0x000020, "Wrong size on ClampingScrollPhysics_CreateClampingScrollPhysics");
static_assert(offsetof(ClampingScrollPhysics_CreateClampingScrollPhysics, InClass) == 0x000000, "Member 'ClampingScrollPhysics_CreateClampingScrollPhysics::InClass' has a wrong offset!");
static_assert(offsetof(ClampingScrollPhysics_CreateClampingScrollPhysics, InOuter) == 0x000008, "Member 'ClampingScrollPhysics_CreateClampingScrollPhysics::InOuter' has a wrong offset!");
static_assert(offsetof(ClampingScrollPhysics_CreateClampingScrollPhysics, InParent) == 0x000010, "Member 'ClampingScrollPhysics_CreateClampingScrollPhysics::InParent' has a wrong offset!");
static_assert(offsetof(ClampingScrollPhysics_CreateClampingScrollPhysics, ReturnValue) == 0x000018, "Member 'ClampingScrollPhysics_CreateClampingScrollPhysics::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ClampingScrollSimulation.CreateClampingScrollSimulation
// 0x0030 (0x0030 - 0x0000)
struct ClampingScrollSimulation_CreateClampingScrollSimulation final
{
public:
	TSubclassOf<class UClampingScrollSimulation>  InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                InOuter;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPosition;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InVelocity;                                        // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTolerance                             InTolerance;                                       // 0x0018(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_115E[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClampingScrollSimulation*              ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClampingScrollSimulation_CreateClampingScrollSimulation) == 0x000008, "Wrong alignment on ClampingScrollSimulation_CreateClampingScrollSimulation");
static_assert(sizeof(ClampingScrollSimulation_CreateClampingScrollSimulation) == 0x000030, "Wrong size on ClampingScrollSimulation_CreateClampingScrollSimulation");
static_assert(offsetof(ClampingScrollSimulation_CreateClampingScrollSimulation, InClass) == 0x000000, "Member 'ClampingScrollSimulation_CreateClampingScrollSimulation::InClass' has a wrong offset!");
static_assert(offsetof(ClampingScrollSimulation_CreateClampingScrollSimulation, InOuter) == 0x000008, "Member 'ClampingScrollSimulation_CreateClampingScrollSimulation::InOuter' has a wrong offset!");
static_assert(offsetof(ClampingScrollSimulation_CreateClampingScrollSimulation, InPosition) == 0x000010, "Member 'ClampingScrollSimulation_CreateClampingScrollSimulation::InPosition' has a wrong offset!");
static_assert(offsetof(ClampingScrollSimulation_CreateClampingScrollSimulation, InVelocity) == 0x000014, "Member 'ClampingScrollSimulation_CreateClampingScrollSimulation::InVelocity' has a wrong offset!");
static_assert(offsetof(ClampingScrollSimulation_CreateClampingScrollSimulation, InTolerance) == 0x000018, "Member 'ClampingScrollSimulation_CreateClampingScrollSimulation::InTolerance' has a wrong offset!");
static_assert(offsetof(ClampingScrollSimulation_CreateClampingScrollSimulation, ReturnValue) == 0x000028, "Member 'ClampingScrollSimulation_CreateClampingScrollSimulation::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.DragScrollActivity.CreateDragScrollActivity
// 0x0018 (0x0018 - 0x0000)
struct DragScrollActivity_CreateDragScrollActivity final
{
public:
	TSubclassOf<class UDragScrollActivity>        InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScrollPosition*                        InPosition;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDragScrollActivity*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DragScrollActivity_CreateDragScrollActivity) == 0x000008, "Wrong alignment on DragScrollActivity_CreateDragScrollActivity");
static_assert(sizeof(DragScrollActivity_CreateDragScrollActivity) == 0x000018, "Wrong size on DragScrollActivity_CreateDragScrollActivity");
static_assert(offsetof(DragScrollActivity_CreateDragScrollActivity, InClass) == 0x000000, "Member 'DragScrollActivity_CreateDragScrollActivity::InClass' has a wrong offset!");
static_assert(offsetof(DragScrollActivity_CreateDragScrollActivity, InPosition) == 0x000008, "Member 'DragScrollActivity_CreateDragScrollActivity::InPosition' has a wrong offset!");
static_assert(offsetof(DragScrollActivity_CreateDragScrollActivity, ReturnValue) == 0x000010, "Member 'DragScrollActivity_CreateDragScrollActivity::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.DrivenScrollActivity.CreateDrivenScrollActivity
// 0x0030 (0x0030 - 0x0000)
struct DrivenScrollActivity_CreateDrivenScrollActivity final
{
public:
	TSubclassOf<class UDrivenScrollActivity>      InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScrollPosition*                        InPosition;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFrom;                                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTo;                                              // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDuration;                                        // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1162[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            InCurve;                                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDrivenScrollActivity*                  ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DrivenScrollActivity_CreateDrivenScrollActivity) == 0x000008, "Wrong alignment on DrivenScrollActivity_CreateDrivenScrollActivity");
static_assert(sizeof(DrivenScrollActivity_CreateDrivenScrollActivity) == 0x000030, "Wrong size on DrivenScrollActivity_CreateDrivenScrollActivity");
static_assert(offsetof(DrivenScrollActivity_CreateDrivenScrollActivity, InClass) == 0x000000, "Member 'DrivenScrollActivity_CreateDrivenScrollActivity::InClass' has a wrong offset!");
static_assert(offsetof(DrivenScrollActivity_CreateDrivenScrollActivity, InPosition) == 0x000008, "Member 'DrivenScrollActivity_CreateDrivenScrollActivity::InPosition' has a wrong offset!");
static_assert(offsetof(DrivenScrollActivity_CreateDrivenScrollActivity, InFrom) == 0x000010, "Member 'DrivenScrollActivity_CreateDrivenScrollActivity::InFrom' has a wrong offset!");
static_assert(offsetof(DrivenScrollActivity_CreateDrivenScrollActivity, InTo) == 0x000014, "Member 'DrivenScrollActivity_CreateDrivenScrollActivity::InTo' has a wrong offset!");
static_assert(offsetof(DrivenScrollActivity_CreateDrivenScrollActivity, InDuration) == 0x000018, "Member 'DrivenScrollActivity_CreateDrivenScrollActivity::InDuration' has a wrong offset!");
static_assert(offsetof(DrivenScrollActivity_CreateDrivenScrollActivity, InCurve) == 0x000020, "Member 'DrivenScrollActivity_CreateDrivenScrollActivity::InCurve' has a wrong offset!");
static_assert(offsetof(DrivenScrollActivity_CreateDrivenScrollActivity, ReturnValue) == 0x000028, "Member 'DrivenScrollActivity_CreateDrivenScrollActivity::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.FixedExtentScrollableObjectInterface.Interface_GetItemExtent
// 0x0004 (0x0004 - 0x0000)
struct FixedExtentScrollableObjectInterface_Interface_GetItemExtent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FixedExtentScrollableObjectInterface_Interface_GetItemExtent) == 0x000004, "Wrong alignment on FixedExtentScrollableObjectInterface_Interface_GetItemExtent");
static_assert(sizeof(FixedExtentScrollableObjectInterface_Interface_GetItemExtent) == 0x000004, "Wrong size on FixedExtentScrollableObjectInterface_Interface_GetItemExtent");
static_assert(offsetof(FixedExtentScrollableObjectInterface_Interface_GetItemExtent, ReturnValue) == 0x000000, "Member 'FixedExtentScrollableObjectInterface_Interface_GetItemExtent::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollableState.CreateScrollState
// 0x0018 (0x0018 - 0x0000)
struct ScrollableState_CreateScrollState final
{
public:
	TSubclassOf<class UScrollableState>           InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScrollContext*                         InContext;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScrollableState*                       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollableState_CreateScrollState) == 0x000008, "Wrong alignment on ScrollableState_CreateScrollState");
static_assert(sizeof(ScrollableState_CreateScrollState) == 0x000018, "Wrong size on ScrollableState_CreateScrollState");
static_assert(offsetof(ScrollableState_CreateScrollState, InClass) == 0x000000, "Member 'ScrollableState_CreateScrollState::InClass' has a wrong offset!");
static_assert(offsetof(ScrollableState_CreateScrollState, InContext) == 0x000008, "Member 'ScrollableState_CreateScrollState::InContext' has a wrong offset!");
static_assert(offsetof(ScrollableState_CreateScrollState, ReturnValue) == 0x000010, "Member 'ScrollableState_CreateScrollState::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollableState.UpdateScrollExtent
// 0x0008 (0x0008 - 0x0000)
struct ScrollableState_UpdateScrollExtent final
{
public:
	class UScrollContext*                         InContext;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollableState_UpdateScrollExtent) == 0x000008, "Wrong alignment on ScrollableState_UpdateScrollExtent");
static_assert(sizeof(ScrollableState_UpdateScrollExtent) == 0x000008, "Wrong size on ScrollableState_UpdateScrollExtent");
static_assert(offsetof(ScrollableState_UpdateScrollExtent, InContext) == 0x000000, "Member 'ScrollableState_UpdateScrollExtent::InContext' has a wrong offset!");

// Function HottaUIExtensions.ScrollableState.UpdateViewportDimension
// 0x0008 (0x0008 - 0x0000)
struct ScrollableState_UpdateViewportDimension final
{
public:
	class UScrollContext*                         InContext;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollableState_UpdateViewportDimension) == 0x000008, "Wrong alignment on ScrollableState_UpdateViewportDimension");
static_assert(sizeof(ScrollableState_UpdateViewportDimension) == 0x000008, "Wrong size on ScrollableState_UpdateViewportDimension");
static_assert(offsetof(ScrollableState_UpdateViewportDimension, InContext) == 0x000000, "Member 'ScrollableState_UpdateViewportDimension::InContext' has a wrong offset!");

// Function HottaUIExtensions.ScrollableState.GetController
// 0x0008 (0x0008 - 0x0000)
struct ScrollableState_GetController final
{
public:
	class UScrollController*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollableState_GetController) == 0x000008, "Wrong alignment on ScrollableState_GetController");
static_assert(sizeof(ScrollableState_GetController) == 0x000008, "Wrong size on ScrollableState_GetController");
static_assert(offsetof(ScrollableState_GetController, ReturnValue) == 0x000000, "Member 'ScrollableState_GetController::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollableState.GetDirection
// 0x0001 (0x0001 - 0x0000)
struct ScrollableState_GetDirection final
{
public:
	EScrollDirectionType                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollableState_GetDirection) == 0x000001, "Wrong alignment on ScrollableState_GetDirection");
static_assert(sizeof(ScrollableState_GetDirection) == 0x000001, "Wrong size on ScrollableState_GetDirection");
static_assert(offsetof(ScrollableState_GetDirection, ReturnValue) == 0x000000, "Member 'ScrollableState_GetDirection::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollableState.GetPhysics
// 0x0008 (0x0008 - 0x0000)
struct ScrollableState_GetPhysics final
{
public:
	class UScrollPhysics*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollableState_GetPhysics) == 0x000008, "Wrong alignment on ScrollableState_GetPhysics");
static_assert(sizeof(ScrollableState_GetPhysics) == 0x000008, "Wrong size on ScrollableState_GetPhysics");
static_assert(offsetof(ScrollableState_GetPhysics, ReturnValue) == 0x000000, "Member 'ScrollableState_GetPhysics::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollableState.GetPosition
// 0x0008 (0x0008 - 0x0000)
struct ScrollableState_GetPosition final
{
public:
	class UScrollPosition*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollableState_GetPosition) == 0x000008, "Wrong alignment on ScrollableState_GetPosition");
static_assert(sizeof(ScrollableState_GetPosition) == 0x000008, "Wrong size on ScrollableState_GetPosition");
static_assert(offsetof(ScrollableState_GetPosition, ReturnValue) == 0x000000, "Member 'ScrollableState_GetPosition::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.FixedExtentScrollableState.CreateFixedExtentScrollableState
// 0x0018 (0x0018 - 0x0000)
struct FixedExtentScrollableState_CreateFixedExtentScrollableState final
{
public:
	TSubclassOf<class UFixedExtentScrollableState> InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScrollContext*                         InContext;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFixedExtentScrollableState*            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FixedExtentScrollableState_CreateFixedExtentScrollableState) == 0x000008, "Wrong alignment on FixedExtentScrollableState_CreateFixedExtentScrollableState");
static_assert(sizeof(FixedExtentScrollableState_CreateFixedExtentScrollableState) == 0x000018, "Wrong size on FixedExtentScrollableState_CreateFixedExtentScrollableState");
static_assert(offsetof(FixedExtentScrollableState_CreateFixedExtentScrollableState, InClass) == 0x000000, "Member 'FixedExtentScrollableState_CreateFixedExtentScrollableState::InClass' has a wrong offset!");
static_assert(offsetof(FixedExtentScrollableState_CreateFixedExtentScrollableState, InContext) == 0x000008, "Member 'FixedExtentScrollableState_CreateFixedExtentScrollableState::InContext' has a wrong offset!");
static_assert(offsetof(FixedExtentScrollableState_CreateFixedExtentScrollableState, ReturnValue) == 0x000010, "Member 'FixedExtentScrollableState_CreateFixedExtentScrollableState::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollContext.CreateScrollContext
// 0x0018 (0x0018 - 0x0000)
struct ScrollContext_CreateScrollContext final
{
public:
	TSubclassOf<class UScrollContext>             InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                InOuter;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScrollContext*                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollContext_CreateScrollContext) == 0x000008, "Wrong alignment on ScrollContext_CreateScrollContext");
static_assert(sizeof(ScrollContext_CreateScrollContext) == 0x000018, "Wrong size on ScrollContext_CreateScrollContext");
static_assert(offsetof(ScrollContext_CreateScrollContext, InClass) == 0x000000, "Member 'ScrollContext_CreateScrollContext::InClass' has a wrong offset!");
static_assert(offsetof(ScrollContext_CreateScrollContext, InOuter) == 0x000008, "Member 'ScrollContext_CreateScrollContext::InOuter' has a wrong offset!");
static_assert(offsetof(ScrollContext_CreateScrollContext, ReturnValue) == 0x000010, "Member 'ScrollContext_CreateScrollContext::ReturnValue' has a wrong offset!");

// DelegateFunction HottaUIExtensions.ScrollContext.OnScrollExtentUpdateNotification__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ScrollContext_OnScrollExtentUpdateNotification__DelegateSignature final
{
public:
	class UScrollContext*                         InContext;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollContext_OnScrollExtentUpdateNotification__DelegateSignature) == 0x000008, "Wrong alignment on ScrollContext_OnScrollExtentUpdateNotification__DelegateSignature");
static_assert(sizeof(ScrollContext_OnScrollExtentUpdateNotification__DelegateSignature) == 0x000008, "Wrong size on ScrollContext_OnScrollExtentUpdateNotification__DelegateSignature");
static_assert(offsetof(ScrollContext_OnScrollExtentUpdateNotification__DelegateSignature, InContext) == 0x000000, "Member 'ScrollContext_OnScrollExtentUpdateNotification__DelegateSignature::InContext' has a wrong offset!");

// DelegateFunction HottaUIExtensions.ScrollContext.OnViewportDimensionUpdateNotification__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ScrollContext_OnViewportDimensionUpdateNotification__DelegateSignature final
{
public:
	class UScrollContext*                         InContext;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollContext_OnViewportDimensionUpdateNotification__DelegateSignature) == 0x000008, "Wrong alignment on ScrollContext_OnViewportDimensionUpdateNotification__DelegateSignature");
static_assert(sizeof(ScrollContext_OnViewportDimensionUpdateNotification__DelegateSignature) == 0x000008, "Wrong size on ScrollContext_OnViewportDimensionUpdateNotification__DelegateSignature");
static_assert(offsetof(ScrollContext_OnViewportDimensionUpdateNotification__DelegateSignature, InContext) == 0x000000, "Member 'ScrollContext_OnViewportDimensionUpdateNotification__DelegateSignature::InContext' has a wrong offset!");

// Function HottaUIExtensions.FixedExtentScrollContext.CreateFixedExtentScrollContext
// 0x0018 (0x0018 - 0x0000)
struct FixedExtentScrollContext_CreateFixedExtentScrollContext final
{
public:
	TSubclassOf<class UFixedExtentScrollContext>  InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                InOuter;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFixedExtentScrollContext*              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FixedExtentScrollContext_CreateFixedExtentScrollContext) == 0x000008, "Wrong alignment on FixedExtentScrollContext_CreateFixedExtentScrollContext");
static_assert(sizeof(FixedExtentScrollContext_CreateFixedExtentScrollContext) == 0x000018, "Wrong size on FixedExtentScrollContext_CreateFixedExtentScrollContext");
static_assert(offsetof(FixedExtentScrollContext_CreateFixedExtentScrollContext, InClass) == 0x000000, "Member 'FixedExtentScrollContext_CreateFixedExtentScrollContext::InClass' has a wrong offset!");
static_assert(offsetof(FixedExtentScrollContext_CreateFixedExtentScrollContext, InOuter) == 0x000008, "Member 'FixedExtentScrollContext_CreateFixedExtentScrollContext::InOuter' has a wrong offset!");
static_assert(offsetof(FixedExtentScrollContext_CreateFixedExtentScrollContext, ReturnValue) == 0x000010, "Member 'FixedExtentScrollContext_CreateFixedExtentScrollContext::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollController.CreateScrollController
// 0x0020 (0x0020 - 0x0000)
struct ScrollController_CreateScrollController final
{
public:
	TSubclassOf<class UScrollController>          InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                InOuter;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_InitialScrollOffset;                         // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1168[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UScrollController*                      ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollController_CreateScrollController) == 0x000008, "Wrong alignment on ScrollController_CreateScrollController");
static_assert(sizeof(ScrollController_CreateScrollController) == 0x000020, "Wrong size on ScrollController_CreateScrollController");
static_assert(offsetof(ScrollController_CreateScrollController, InClass) == 0x000000, "Member 'ScrollController_CreateScrollController::InClass' has a wrong offset!");
static_assert(offsetof(ScrollController_CreateScrollController, InOuter) == 0x000008, "Member 'ScrollController_CreateScrollController::InOuter' has a wrong offset!");
static_assert(offsetof(ScrollController_CreateScrollController, Param_InitialScrollOffset) == 0x000010, "Member 'ScrollController_CreateScrollController::Param_InitialScrollOffset' has a wrong offset!");
static_assert(offsetof(ScrollController_CreateScrollController, ReturnValue) == 0x000018, "Member 'ScrollController_CreateScrollController::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollController.AnimateTo
// 0x0018 (0x0018 - 0x0000)
struct ScrollController_AnimateTo final
{
public:
	float                                         InNewScrollOffset;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDuration;                                        // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            InCurve;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1169[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScrollController_AnimateTo) == 0x000008, "Wrong alignment on ScrollController_AnimateTo");
static_assert(sizeof(ScrollController_AnimateTo) == 0x000018, "Wrong size on ScrollController_AnimateTo");
static_assert(offsetof(ScrollController_AnimateTo, InNewScrollOffset) == 0x000000, "Member 'ScrollController_AnimateTo::InNewScrollOffset' has a wrong offset!");
static_assert(offsetof(ScrollController_AnimateTo, InDuration) == 0x000004, "Member 'ScrollController_AnimateTo::InDuration' has a wrong offset!");
static_assert(offsetof(ScrollController_AnimateTo, InCurve) == 0x000008, "Member 'ScrollController_AnimateTo::InCurve' has a wrong offset!");
static_assert(offsetof(ScrollController_AnimateTo, ReturnValue) == 0x000010, "Member 'ScrollController_AnimateTo::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollController.Attach
// 0x0008 (0x0008 - 0x0000)
struct ScrollController_Attach final
{
public:
	class UScrollPosition*                        InPosition;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollController_Attach) == 0x000008, "Wrong alignment on ScrollController_Attach");
static_assert(sizeof(ScrollController_Attach) == 0x000008, "Wrong size on ScrollController_Attach");
static_assert(offsetof(ScrollController_Attach, InPosition) == 0x000000, "Member 'ScrollController_Attach::InPosition' has a wrong offset!");

// Function HottaUIExtensions.ScrollController.CreateScrollPosition
// 0x0020 (0x0020 - 0x0000)
struct ScrollController_CreateScrollPosition final
{
public:
	TSubclassOf<class UScrollPosition>            InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScrollableState*                       InState;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScrollPhysics*                         InPhysics;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScrollPosition*                        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollController_CreateScrollPosition) == 0x000008, "Wrong alignment on ScrollController_CreateScrollPosition");
static_assert(sizeof(ScrollController_CreateScrollPosition) == 0x000020, "Wrong size on ScrollController_CreateScrollPosition");
static_assert(offsetof(ScrollController_CreateScrollPosition, InClass) == 0x000000, "Member 'ScrollController_CreateScrollPosition::InClass' has a wrong offset!");
static_assert(offsetof(ScrollController_CreateScrollPosition, InState) == 0x000008, "Member 'ScrollController_CreateScrollPosition::InState' has a wrong offset!");
static_assert(offsetof(ScrollController_CreateScrollPosition, InPhysics) == 0x000010, "Member 'ScrollController_CreateScrollPosition::InPhysics' has a wrong offset!");
static_assert(offsetof(ScrollController_CreateScrollPosition, ReturnValue) == 0x000018, "Member 'ScrollController_CreateScrollPosition::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollController.Detach
// 0x0008 (0x0008 - 0x0000)
struct ScrollController_Detach final
{
public:
	class UScrollPosition*                        InPosition;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollController_Detach) == 0x000008, "Wrong alignment on ScrollController_Detach");
static_assert(sizeof(ScrollController_Detach) == 0x000008, "Wrong size on ScrollController_Detach");
static_assert(offsetof(ScrollController_Detach, InPosition) == 0x000000, "Member 'ScrollController_Detach::InPosition' has a wrong offset!");

// Function HottaUIExtensions.ScrollController.GetPosition
// 0x0008 (0x0008 - 0x0000)
struct ScrollController_GetPosition final
{
public:
	class UScrollPosition*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollController_GetPosition) == 0x000008, "Wrong alignment on ScrollController_GetPosition");
static_assert(sizeof(ScrollController_GetPosition) == 0x000008, "Wrong size on ScrollController_GetPosition");
static_assert(offsetof(ScrollController_GetPosition, ReturnValue) == 0x000000, "Member 'ScrollController_GetPosition::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollController.GetPositions
// 0x0010 (0x0010 - 0x0000)
struct ScrollController_GetPositions final
{
public:
	TArray<class UScrollPosition*>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollController_GetPositions) == 0x000008, "Wrong alignment on ScrollController_GetPositions");
static_assert(sizeof(ScrollController_GetPositions) == 0x000010, "Wrong size on ScrollController_GetPositions");
static_assert(offsetof(ScrollController_GetPositions, ReturnValue) == 0x000000, "Member 'ScrollController_GetPositions::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollController.JumpTo
// 0x0004 (0x0004 - 0x0000)
struct ScrollController_JumpTo final
{
public:
	float                                         InNewScrollOffset;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollController_JumpTo) == 0x000004, "Wrong alignment on ScrollController_JumpTo");
static_assert(sizeof(ScrollController_JumpTo) == 0x000004, "Wrong size on ScrollController_JumpTo");
static_assert(offsetof(ScrollController_JumpTo, InNewScrollOffset) == 0x000000, "Member 'ScrollController_JumpTo::InNewScrollOffset' has a wrong offset!");

// Function HottaUIExtensions.ScrollController.GetInitialScrollOffset
// 0x0004 (0x0004 - 0x0000)
struct ScrollController_GetInitialScrollOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollController_GetInitialScrollOffset) == 0x000004, "Wrong alignment on ScrollController_GetInitialScrollOffset");
static_assert(sizeof(ScrollController_GetInitialScrollOffset) == 0x000004, "Wrong size on ScrollController_GetInitialScrollOffset");
static_assert(offsetof(ScrollController_GetInitialScrollOffset, ReturnValue) == 0x000000, "Member 'ScrollController_GetInitialScrollOffset::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollController.GetScrollOffset
// 0x0004 (0x0004 - 0x0000)
struct ScrollController_GetScrollOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollController_GetScrollOffset) == 0x000004, "Wrong alignment on ScrollController_GetScrollOffset");
static_assert(sizeof(ScrollController_GetScrollOffset) == 0x000004, "Wrong size on ScrollController_GetScrollOffset");
static_assert(offsetof(ScrollController_GetScrollOffset, ReturnValue) == 0x000000, "Member 'ScrollController_GetScrollOffset::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollController.HasClients
// 0x0001 (0x0001 - 0x0000)
struct ScrollController_HasClients final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollController_HasClients) == 0x000001, "Wrong alignment on ScrollController_HasClients");
static_assert(sizeof(ScrollController_HasClients) == 0x000001, "Wrong size on ScrollController_HasClients");
static_assert(offsetof(ScrollController_HasClients, ReturnValue) == 0x000000, "Member 'ScrollController_HasClients::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.FixedExtentScrollController.CreateFixedExtentScrollController
// 0x0020 (0x0020 - 0x0000)
struct FixedExtentScrollController_CreateFixedExtentScrollController final
{
public:
	TSubclassOf<class UFixedExtentScrollController> InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                InOuter;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitialItem;                                       // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_116B[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFixedExtentScrollController*           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FixedExtentScrollController_CreateFixedExtentScrollController) == 0x000008, "Wrong alignment on FixedExtentScrollController_CreateFixedExtentScrollController");
static_assert(sizeof(FixedExtentScrollController_CreateFixedExtentScrollController) == 0x000020, "Wrong size on FixedExtentScrollController_CreateFixedExtentScrollController");
static_assert(offsetof(FixedExtentScrollController_CreateFixedExtentScrollController, InClass) == 0x000000, "Member 'FixedExtentScrollController_CreateFixedExtentScrollController::InClass' has a wrong offset!");
static_assert(offsetof(FixedExtentScrollController_CreateFixedExtentScrollController, InOuter) == 0x000008, "Member 'FixedExtentScrollController_CreateFixedExtentScrollController::InOuter' has a wrong offset!");
static_assert(offsetof(FixedExtentScrollController_CreateFixedExtentScrollController, InitialItem) == 0x000010, "Member 'FixedExtentScrollController_CreateFixedExtentScrollController::InitialItem' has a wrong offset!");
static_assert(offsetof(FixedExtentScrollController_CreateFixedExtentScrollController, ReturnValue) == 0x000018, "Member 'FixedExtentScrollController_CreateFixedExtentScrollController::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.FixedExtentScrollController.AnimateToItem
// 0x0008 (0x0008 - 0x0000)
struct FixedExtentScrollController_AnimateToItem final
{
public:
	int32                                         InTargetItemIndex;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_116C[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FixedExtentScrollController_AnimateToItem) == 0x000004, "Wrong alignment on FixedExtentScrollController_AnimateToItem");
static_assert(sizeof(FixedExtentScrollController_AnimateToItem) == 0x000008, "Wrong size on FixedExtentScrollController_AnimateToItem");
static_assert(offsetof(FixedExtentScrollController_AnimateToItem, InTargetItemIndex) == 0x000000, "Member 'FixedExtentScrollController_AnimateToItem::InTargetItemIndex' has a wrong offset!");
static_assert(offsetof(FixedExtentScrollController_AnimateToItem, ReturnValue) == 0x000004, "Member 'FixedExtentScrollController_AnimateToItem::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.FixedExtentScrollController.JumpToItem
// 0x0008 (0x0008 - 0x0000)
struct FixedExtentScrollController_JumpToItem final
{
public:
	int32                                         InTargetItemIndex;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_116D[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FixedExtentScrollController_JumpToItem) == 0x000004, "Wrong alignment on FixedExtentScrollController_JumpToItem");
static_assert(sizeof(FixedExtentScrollController_JumpToItem) == 0x000008, "Wrong size on FixedExtentScrollController_JumpToItem");
static_assert(offsetof(FixedExtentScrollController_JumpToItem, InTargetItemIndex) == 0x000000, "Member 'FixedExtentScrollController_JumpToItem::InTargetItemIndex' has a wrong offset!");
static_assert(offsetof(FixedExtentScrollController_JumpToItem, ReturnValue) == 0x000004, "Member 'FixedExtentScrollController_JumpToItem::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.FixedExtentScrollController.GetSelectedItem
// 0x0004 (0x0004 - 0x0000)
struct FixedExtentScrollController_GetSelectedItem final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FixedExtentScrollController_GetSelectedItem) == 0x000004, "Wrong alignment on FixedExtentScrollController_GetSelectedItem");
static_assert(sizeof(FixedExtentScrollController_GetSelectedItem) == 0x000004, "Wrong size on FixedExtentScrollController_GetSelectedItem");
static_assert(offsetof(FixedExtentScrollController_GetSelectedItem, ReturnValue) == 0x000000, "Member 'FixedExtentScrollController_GetSelectedItem::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.FixedExtentScrollPhysics.CreateFixedExtentScrollPhysics
// 0x0020 (0x0020 - 0x0000)
struct FixedExtentScrollPhysics_CreateFixedExtentScrollPhysics final
{
public:
	TSubclassOf<class UFixedExtentScrollPhysics>  InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                InOuter;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScrollPhysics*                         InParent;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFixedExtentScrollPhysics*              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FixedExtentScrollPhysics_CreateFixedExtentScrollPhysics) == 0x000008, "Wrong alignment on FixedExtentScrollPhysics_CreateFixedExtentScrollPhysics");
static_assert(sizeof(FixedExtentScrollPhysics_CreateFixedExtentScrollPhysics) == 0x000020, "Wrong size on FixedExtentScrollPhysics_CreateFixedExtentScrollPhysics");
static_assert(offsetof(FixedExtentScrollPhysics_CreateFixedExtentScrollPhysics, InClass) == 0x000000, "Member 'FixedExtentScrollPhysics_CreateFixedExtentScrollPhysics::InClass' has a wrong offset!");
static_assert(offsetof(FixedExtentScrollPhysics_CreateFixedExtentScrollPhysics, InOuter) == 0x000008, "Member 'FixedExtentScrollPhysics_CreateFixedExtentScrollPhysics::InOuter' has a wrong offset!");
static_assert(offsetof(FixedExtentScrollPhysics_CreateFixedExtentScrollPhysics, InParent) == 0x000010, "Member 'FixedExtentScrollPhysics_CreateFixedExtentScrollPhysics::InParent' has a wrong offset!");
static_assert(offsetof(FixedExtentScrollPhysics_CreateFixedExtentScrollPhysics, ReturnValue) == 0x000018, "Member 'FixedExtentScrollPhysics_CreateFixedExtentScrollPhysics::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollPosition.CreateScrollPosition
// 0x0028 (0x0028 - 0x0000)
struct ScrollPosition_CreateScrollPosition final
{
public:
	TSubclassOf<class UScrollPosition>            InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScrollableState*                       InState;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScrollPhysics*                         InPhysics;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialScrollOffset;                               // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_116F[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UScrollPosition*                        ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPosition_CreateScrollPosition) == 0x000008, "Wrong alignment on ScrollPosition_CreateScrollPosition");
static_assert(sizeof(ScrollPosition_CreateScrollPosition) == 0x000028, "Wrong size on ScrollPosition_CreateScrollPosition");
static_assert(offsetof(ScrollPosition_CreateScrollPosition, InClass) == 0x000000, "Member 'ScrollPosition_CreateScrollPosition::InClass' has a wrong offset!");
static_assert(offsetof(ScrollPosition_CreateScrollPosition, InState) == 0x000008, "Member 'ScrollPosition_CreateScrollPosition::InState' has a wrong offset!");
static_assert(offsetof(ScrollPosition_CreateScrollPosition, InPhysics) == 0x000010, "Member 'ScrollPosition_CreateScrollPosition::InPhysics' has a wrong offset!");
static_assert(offsetof(ScrollPosition_CreateScrollPosition, InitialScrollOffset) == 0x000018, "Member 'ScrollPosition_CreateScrollPosition::InitialScrollOffset' has a wrong offset!");
static_assert(offsetof(ScrollPosition_CreateScrollPosition, ReturnValue) == 0x000020, "Member 'ScrollPosition_CreateScrollPosition::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollPosition.AnimateTo
// 0x0010 (0x0010 - 0x0000)
struct ScrollPosition_AnimateTo final
{
public:
	float                                         InNewScrollOffset;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDuration;                                        // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            InCurve;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPosition_AnimateTo) == 0x000008, "Wrong alignment on ScrollPosition_AnimateTo");
static_assert(sizeof(ScrollPosition_AnimateTo) == 0x000010, "Wrong size on ScrollPosition_AnimateTo");
static_assert(offsetof(ScrollPosition_AnimateTo, InNewScrollOffset) == 0x000000, "Member 'ScrollPosition_AnimateTo::InNewScrollOffset' has a wrong offset!");
static_assert(offsetof(ScrollPosition_AnimateTo, InDuration) == 0x000004, "Member 'ScrollPosition_AnimateTo::InDuration' has a wrong offset!");
static_assert(offsetof(ScrollPosition_AnimateTo, InCurve) == 0x000008, "Member 'ScrollPosition_AnimateTo::InCurve' has a wrong offset!");

// Function HottaUIExtensions.ScrollPosition.ApplyUserOffset
// 0x0004 (0x0004 - 0x0000)
struct ScrollPosition_ApplyUserOffset final
{
public:
	float                                         InDeltaOffset;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPosition_ApplyUserOffset) == 0x000004, "Wrong alignment on ScrollPosition_ApplyUserOffset");
static_assert(sizeof(ScrollPosition_ApplyUserOffset) == 0x000004, "Wrong size on ScrollPosition_ApplyUserOffset");
static_assert(offsetof(ScrollPosition_ApplyUserOffset, InDeltaOffset) == 0x000000, "Member 'ScrollPosition_ApplyUserOffset::InDeltaOffset' has a wrong offset!");

// Function HottaUIExtensions.ScrollPosition.BeginActivity
// 0x0010 (0x0010 - 0x0000)
struct ScrollPosition_BeginActivity final
{
public:
	class UScrollActivity*                        InNewScrollActivity;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1170[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScrollPosition_BeginActivity) == 0x000008, "Wrong alignment on ScrollPosition_BeginActivity");
static_assert(sizeof(ScrollPosition_BeginActivity) == 0x000010, "Wrong size on ScrollPosition_BeginActivity");
static_assert(offsetof(ScrollPosition_BeginActivity, InNewScrollActivity) == 0x000000, "Member 'ScrollPosition_BeginActivity::InNewScrollActivity' has a wrong offset!");
static_assert(offsetof(ScrollPosition_BeginActivity, ReturnValue) == 0x000008, "Member 'ScrollPosition_BeginActivity::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollPosition.CorrectScrollOffset
// 0x0004 (0x0004 - 0x0000)
struct ScrollPosition_CorrectScrollOffset final
{
public:
	float                                         InNewScrollOffset;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPosition_CorrectScrollOffset) == 0x000004, "Wrong alignment on ScrollPosition_CorrectScrollOffset");
static_assert(sizeof(ScrollPosition_CorrectScrollOffset) == 0x000004, "Wrong size on ScrollPosition_CorrectScrollOffset");
static_assert(offsetof(ScrollPosition_CorrectScrollOffset, InNewScrollOffset) == 0x000000, "Member 'ScrollPosition_CorrectScrollOffset::InNewScrollOffset' has a wrong offset!");

// Function HottaUIExtensions.ScrollPosition.Drag
// 0x0008 (0x0008 - 0x0000)
struct ScrollPosition_Drag final
{
public:
	class UDragScrollActivity*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPosition_Drag) == 0x000008, "Wrong alignment on ScrollPosition_Drag");
static_assert(sizeof(ScrollPosition_Drag) == 0x000008, "Wrong size on ScrollPosition_Drag");
static_assert(offsetof(ScrollPosition_Drag, ReturnValue) == 0x000000, "Member 'ScrollPosition_Drag::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollPosition.GoBallistic
// 0x0004 (0x0004 - 0x0000)
struct ScrollPosition_GoBallistic final
{
public:
	float                                         InVelocity;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPosition_GoBallistic) == 0x000004, "Wrong alignment on ScrollPosition_GoBallistic");
static_assert(sizeof(ScrollPosition_GoBallistic) == 0x000004, "Wrong size on ScrollPosition_GoBallistic");
static_assert(offsetof(ScrollPosition_GoBallistic, InVelocity) == 0x000000, "Member 'ScrollPosition_GoBallistic::InVelocity' has a wrong offset!");

// Function HottaUIExtensions.ScrollPosition.GoIdle
// 0x0008 (0x0008 - 0x0000)
struct ScrollPosition_GoIdle final
{
public:
	class UIdleScrollActivity*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPosition_GoIdle) == 0x000008, "Wrong alignment on ScrollPosition_GoIdle");
static_assert(sizeof(ScrollPosition_GoIdle) == 0x000008, "Wrong size on ScrollPosition_GoIdle");
static_assert(offsetof(ScrollPosition_GoIdle, ReturnValue) == 0x000000, "Member 'ScrollPosition_GoIdle::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollPosition.Hold
// 0x0008 (0x0008 - 0x0000)
struct ScrollPosition_Hold final
{
public:
	class UHoldScrollActivity*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPosition_Hold) == 0x000008, "Wrong alignment on ScrollPosition_Hold");
static_assert(sizeof(ScrollPosition_Hold) == 0x000008, "Wrong size on ScrollPosition_Hold");
static_assert(offsetof(ScrollPosition_Hold, ReturnValue) == 0x000000, "Member 'ScrollPosition_Hold::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollPosition.JumpTo
// 0x0004 (0x0004 - 0x0000)
struct ScrollPosition_JumpTo final
{
public:
	float                                         InNewScrollOffset;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPosition_JumpTo) == 0x000004, "Wrong alignment on ScrollPosition_JumpTo");
static_assert(sizeof(ScrollPosition_JumpTo) == 0x000004, "Wrong size on ScrollPosition_JumpTo");
static_assert(offsetof(ScrollPosition_JumpTo, InNewScrollOffset) == 0x000000, "Member 'ScrollPosition_JumpTo::InNewScrollOffset' has a wrong offset!");

// Function HottaUIExtensions.ScrollPosition.MoveTo
// 0x0010 (0x0010 - 0x0000)
struct ScrollPosition_MoveTo final
{
public:
	float                                         InNewScrollOffset;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDuration;                                        // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            InCurve;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPosition_MoveTo) == 0x000008, "Wrong alignment on ScrollPosition_MoveTo");
static_assert(sizeof(ScrollPosition_MoveTo) == 0x000010, "Wrong size on ScrollPosition_MoveTo");
static_assert(offsetof(ScrollPosition_MoveTo, InNewScrollOffset) == 0x000000, "Member 'ScrollPosition_MoveTo::InNewScrollOffset' has a wrong offset!");
static_assert(offsetof(ScrollPosition_MoveTo, InDuration) == 0x000004, "Member 'ScrollPosition_MoveTo::InDuration' has a wrong offset!");
static_assert(offsetof(ScrollPosition_MoveTo, InCurve) == 0x000008, "Member 'ScrollPosition_MoveTo::InCurve' has a wrong offset!");

// DelegateFunction HottaUIExtensions.ScrollPosition.OnContentDimensionsUpdateNotification__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct ScrollPosition_OnContentDimensionsUpdateNotification__DelegateSignature final
{
public:
	class UScrollPosition*                        InScrollPosition;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOldMinScrollExtent;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOldMaxScrollExtent;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOldScrollOffset;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMinScrollExtent;                                 // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMaxScrollExtent;                                 // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InScrollOffset;                                    // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPosition_OnContentDimensionsUpdateNotification__DelegateSignature) == 0x000008, "Wrong alignment on ScrollPosition_OnContentDimensionsUpdateNotification__DelegateSignature");
static_assert(sizeof(ScrollPosition_OnContentDimensionsUpdateNotification__DelegateSignature) == 0x000020, "Wrong size on ScrollPosition_OnContentDimensionsUpdateNotification__DelegateSignature");
static_assert(offsetof(ScrollPosition_OnContentDimensionsUpdateNotification__DelegateSignature, InScrollPosition) == 0x000000, "Member 'ScrollPosition_OnContentDimensionsUpdateNotification__DelegateSignature::InScrollPosition' has a wrong offset!");
static_assert(offsetof(ScrollPosition_OnContentDimensionsUpdateNotification__DelegateSignature, InOldMinScrollExtent) == 0x000008, "Member 'ScrollPosition_OnContentDimensionsUpdateNotification__DelegateSignature::InOldMinScrollExtent' has a wrong offset!");
static_assert(offsetof(ScrollPosition_OnContentDimensionsUpdateNotification__DelegateSignature, InOldMaxScrollExtent) == 0x00000C, "Member 'ScrollPosition_OnContentDimensionsUpdateNotification__DelegateSignature::InOldMaxScrollExtent' has a wrong offset!");
static_assert(offsetof(ScrollPosition_OnContentDimensionsUpdateNotification__DelegateSignature, InOldScrollOffset) == 0x000010, "Member 'ScrollPosition_OnContentDimensionsUpdateNotification__DelegateSignature::InOldScrollOffset' has a wrong offset!");
static_assert(offsetof(ScrollPosition_OnContentDimensionsUpdateNotification__DelegateSignature, InMinScrollExtent) == 0x000014, "Member 'ScrollPosition_OnContentDimensionsUpdateNotification__DelegateSignature::InMinScrollExtent' has a wrong offset!");
static_assert(offsetof(ScrollPosition_OnContentDimensionsUpdateNotification__DelegateSignature, InMaxScrollExtent) == 0x000018, "Member 'ScrollPosition_OnContentDimensionsUpdateNotification__DelegateSignature::InMaxScrollExtent' has a wrong offset!");
static_assert(offsetof(ScrollPosition_OnContentDimensionsUpdateNotification__DelegateSignature, InScrollOffset) == 0x00001C, "Member 'ScrollPosition_OnContentDimensionsUpdateNotification__DelegateSignature::InScrollOffset' has a wrong offset!");

// DelegateFunction HottaUIExtensions.ScrollPosition.OnOverscrollNotification__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct ScrollPosition_OnOverscrollNotification__DelegateSignature final
{
public:
	class UScrollPosition*                        InScrollPosition;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOverscroll;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1171[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScrollPosition_OnOverscrollNotification__DelegateSignature) == 0x000008, "Wrong alignment on ScrollPosition_OnOverscrollNotification__DelegateSignature");
static_assert(sizeof(ScrollPosition_OnOverscrollNotification__DelegateSignature) == 0x000010, "Wrong size on ScrollPosition_OnOverscrollNotification__DelegateSignature");
static_assert(offsetof(ScrollPosition_OnOverscrollNotification__DelegateSignature, InScrollPosition) == 0x000000, "Member 'ScrollPosition_OnOverscrollNotification__DelegateSignature::InScrollPosition' has a wrong offset!");
static_assert(offsetof(ScrollPosition_OnOverscrollNotification__DelegateSignature, InOverscroll) == 0x000008, "Member 'ScrollPosition_OnOverscrollNotification__DelegateSignature::InOverscroll' has a wrong offset!");

// DelegateFunction HottaUIExtensions.ScrollPosition.OnScrollEndNotification__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ScrollPosition_OnScrollEndNotification__DelegateSignature final
{
public:
	class UScrollPosition*                        InScrollPosition;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPosition_OnScrollEndNotification__DelegateSignature) == 0x000008, "Wrong alignment on ScrollPosition_OnScrollEndNotification__DelegateSignature");
static_assert(sizeof(ScrollPosition_OnScrollEndNotification__DelegateSignature) == 0x000008, "Wrong size on ScrollPosition_OnScrollEndNotification__DelegateSignature");
static_assert(offsetof(ScrollPosition_OnScrollEndNotification__DelegateSignature, InScrollPosition) == 0x000000, "Member 'ScrollPosition_OnScrollEndNotification__DelegateSignature::InScrollPosition' has a wrong offset!");

// DelegateFunction HottaUIExtensions.ScrollPosition.OnScrollOffsetChangedEvent__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct ScrollPosition_OnScrollOffsetChangedEvent__DelegateSignature final
{
public:
	class UScrollPosition*                        InScrollPosition;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOldScrollOffset;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InScrollOffset;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPosition_OnScrollOffsetChangedEvent__DelegateSignature) == 0x000008, "Wrong alignment on ScrollPosition_OnScrollOffsetChangedEvent__DelegateSignature");
static_assert(sizeof(ScrollPosition_OnScrollOffsetChangedEvent__DelegateSignature) == 0x000010, "Wrong size on ScrollPosition_OnScrollOffsetChangedEvent__DelegateSignature");
static_assert(offsetof(ScrollPosition_OnScrollOffsetChangedEvent__DelegateSignature, InScrollPosition) == 0x000000, "Member 'ScrollPosition_OnScrollOffsetChangedEvent__DelegateSignature::InScrollPosition' has a wrong offset!");
static_assert(offsetof(ScrollPosition_OnScrollOffsetChangedEvent__DelegateSignature, InOldScrollOffset) == 0x000008, "Member 'ScrollPosition_OnScrollOffsetChangedEvent__DelegateSignature::InOldScrollOffset' has a wrong offset!");
static_assert(offsetof(ScrollPosition_OnScrollOffsetChangedEvent__DelegateSignature, InScrollOffset) == 0x00000C, "Member 'ScrollPosition_OnScrollOffsetChangedEvent__DelegateSignature::InScrollOffset' has a wrong offset!");

// DelegateFunction HottaUIExtensions.ScrollPosition.OnScrollStartNotification__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ScrollPosition_OnScrollStartNotification__DelegateSignature final
{
public:
	class UScrollPosition*                        InScrollPosition;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPosition_OnScrollStartNotification__DelegateSignature) == 0x000008, "Wrong alignment on ScrollPosition_OnScrollStartNotification__DelegateSignature");
static_assert(sizeof(ScrollPosition_OnScrollStartNotification__DelegateSignature) == 0x000008, "Wrong size on ScrollPosition_OnScrollStartNotification__DelegateSignature");
static_assert(offsetof(ScrollPosition_OnScrollStartNotification__DelegateSignature, InScrollPosition) == 0x000000, "Member 'ScrollPosition_OnScrollStartNotification__DelegateSignature::InScrollPosition' has a wrong offset!");

// DelegateFunction HottaUIExtensions.ScrollPosition.OnScrollUpdateNotification__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct ScrollPosition_OnScrollUpdateNotification__DelegateSignature final
{
public:
	class UScrollPosition*                        InScrollPosition;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDeltaScrollOffset;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1172[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScrollPosition_OnScrollUpdateNotification__DelegateSignature) == 0x000008, "Wrong alignment on ScrollPosition_OnScrollUpdateNotification__DelegateSignature");
static_assert(sizeof(ScrollPosition_OnScrollUpdateNotification__DelegateSignature) == 0x000010, "Wrong size on ScrollPosition_OnScrollUpdateNotification__DelegateSignature");
static_assert(offsetof(ScrollPosition_OnScrollUpdateNotification__DelegateSignature, InScrollPosition) == 0x000000, "Member 'ScrollPosition_OnScrollUpdateNotification__DelegateSignature::InScrollPosition' has a wrong offset!");
static_assert(offsetof(ScrollPosition_OnScrollUpdateNotification__DelegateSignature, InDeltaScrollOffset) == 0x000008, "Member 'ScrollPosition_OnScrollUpdateNotification__DelegateSignature::InDeltaScrollOffset' has a wrong offset!");

// Function HottaUIExtensions.ScrollPosition.SetScrollOffset
// 0x0008 (0x0008 - 0x0000)
struct ScrollPosition_SetScrollOffset final
{
public:
	float                                         InNewScrollOffset;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPosition_SetScrollOffset) == 0x000004, "Wrong alignment on ScrollPosition_SetScrollOffset");
static_assert(sizeof(ScrollPosition_SetScrollOffset) == 0x000008, "Wrong size on ScrollPosition_SetScrollOffset");
static_assert(offsetof(ScrollPosition_SetScrollOffset, InNewScrollOffset) == 0x000000, "Member 'ScrollPosition_SetScrollOffset::InNewScrollOffset' has a wrong offset!");
static_assert(offsetof(ScrollPosition_SetScrollOffset, ReturnValue) == 0x000004, "Member 'ScrollPosition_SetScrollOffset::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollPosition.CheckScrollOffsetOutOfRange
// 0x0008 (0x0008 - 0x0000)
struct ScrollPosition_CheckScrollOffsetOutOfRange final
{
public:
	float                                         InScrollOffset;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1173[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScrollPosition_CheckScrollOffsetOutOfRange) == 0x000004, "Wrong alignment on ScrollPosition_CheckScrollOffsetOutOfRange");
static_assert(sizeof(ScrollPosition_CheckScrollOffsetOutOfRange) == 0x000008, "Wrong size on ScrollPosition_CheckScrollOffsetOutOfRange");
static_assert(offsetof(ScrollPosition_CheckScrollOffsetOutOfRange, InScrollOffset) == 0x000000, "Member 'ScrollPosition_CheckScrollOffsetOutOfRange::InScrollOffset' has a wrong offset!");
static_assert(offsetof(ScrollPosition_CheckScrollOffsetOutOfRange, ReturnValue) == 0x000004, "Member 'ScrollPosition_CheckScrollOffsetOutOfRange::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollPosition.GetMaxScrollExtent
// 0x0004 (0x0004 - 0x0000)
struct ScrollPosition_GetMaxScrollExtent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPosition_GetMaxScrollExtent) == 0x000004, "Wrong alignment on ScrollPosition_GetMaxScrollExtent");
static_assert(sizeof(ScrollPosition_GetMaxScrollExtent) == 0x000004, "Wrong size on ScrollPosition_GetMaxScrollExtent");
static_assert(offsetof(ScrollPosition_GetMaxScrollExtent, ReturnValue) == 0x000000, "Member 'ScrollPosition_GetMaxScrollExtent::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollPosition.GetMinScrollExtent
// 0x0004 (0x0004 - 0x0000)
struct ScrollPosition_GetMinScrollExtent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPosition_GetMinScrollExtent) == 0x000004, "Wrong alignment on ScrollPosition_GetMinScrollExtent");
static_assert(sizeof(ScrollPosition_GetMinScrollExtent) == 0x000004, "Wrong size on ScrollPosition_GetMinScrollExtent");
static_assert(offsetof(ScrollPosition_GetMinScrollExtent, ReturnValue) == 0x000000, "Member 'ScrollPosition_GetMinScrollExtent::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollPosition.GetScrollDirection
// 0x0001 (0x0001 - 0x0000)
struct ScrollPosition_GetScrollDirection final
{
public:
	EScrollDirectionType                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPosition_GetScrollDirection) == 0x000001, "Wrong alignment on ScrollPosition_GetScrollDirection");
static_assert(sizeof(ScrollPosition_GetScrollDirection) == 0x000001, "Wrong size on ScrollPosition_GetScrollDirection");
static_assert(offsetof(ScrollPosition_GetScrollDirection, ReturnValue) == 0x000000, "Member 'ScrollPosition_GetScrollDirection::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollPosition.GetScrollOffset
// 0x0004 (0x0004 - 0x0000)
struct ScrollPosition_GetScrollOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPosition_GetScrollOffset) == 0x000004, "Wrong alignment on ScrollPosition_GetScrollOffset");
static_assert(sizeof(ScrollPosition_GetScrollOffset) == 0x000004, "Wrong size on ScrollPosition_GetScrollOffset");
static_assert(offsetof(ScrollPosition_GetScrollOffset, ReturnValue) == 0x000000, "Member 'ScrollPosition_GetScrollOffset::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollPosition.GetScrollRange
// 0x0010 (0x0010 - 0x0000)
struct ScrollPosition_GetScrollRange final
{
public:
	struct FFloatRange                            ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPosition_GetScrollRange) == 0x000004, "Wrong alignment on ScrollPosition_GetScrollRange");
static_assert(sizeof(ScrollPosition_GetScrollRange) == 0x000010, "Wrong size on ScrollPosition_GetScrollRange");
static_assert(offsetof(ScrollPosition_GetScrollRange, ReturnValue) == 0x000000, "Member 'ScrollPosition_GetScrollRange::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollPosition.GetScrollVelocity
// 0x0004 (0x0004 - 0x0000)
struct ScrollPosition_GetScrollVelocity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPosition_GetScrollVelocity) == 0x000004, "Wrong alignment on ScrollPosition_GetScrollVelocity");
static_assert(sizeof(ScrollPosition_GetScrollVelocity) == 0x000004, "Wrong size on ScrollPosition_GetScrollVelocity");
static_assert(offsetof(ScrollPosition_GetScrollVelocity, ReturnValue) == 0x000000, "Member 'ScrollPosition_GetScrollVelocity::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollPosition.GetViewportDimension
// 0x0004 (0x0004 - 0x0000)
struct ScrollPosition_GetViewportDimension final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPosition_GetViewportDimension) == 0x000004, "Wrong alignment on ScrollPosition_GetViewportDimension");
static_assert(sizeof(ScrollPosition_GetViewportDimension) == 0x000004, "Wrong size on ScrollPosition_GetViewportDimension");
static_assert(offsetof(ScrollPosition_GetViewportDimension, ReturnValue) == 0x000000, "Member 'ScrollPosition_GetViewportDimension::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollPosition.HasContentDimensions
// 0x0001 (0x0001 - 0x0000)
struct ScrollPosition_HasContentDimensions final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPosition_HasContentDimensions) == 0x000001, "Wrong alignment on ScrollPosition_HasContentDimensions");
static_assert(sizeof(ScrollPosition_HasContentDimensions) == 0x000001, "Wrong size on ScrollPosition_HasContentDimensions");
static_assert(offsetof(ScrollPosition_HasContentDimensions, ReturnValue) == 0x000000, "Member 'ScrollPosition_HasContentDimensions::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollPosition.HasViewportDimension
// 0x0001 (0x0001 - 0x0000)
struct ScrollPosition_HasViewportDimension final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPosition_HasViewportDimension) == 0x000001, "Wrong alignment on ScrollPosition_HasViewportDimension");
static_assert(sizeof(ScrollPosition_HasViewportDimension) == 0x000001, "Wrong size on ScrollPosition_HasViewportDimension");
static_assert(offsetof(ScrollPosition_HasViewportDimension, ReturnValue) == 0x000000, "Member 'ScrollPosition_HasViewportDimension::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollPosition.IsOutOfRange
// 0x0001 (0x0001 - 0x0000)
struct ScrollPosition_IsOutOfRange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPosition_IsOutOfRange) == 0x000001, "Wrong alignment on ScrollPosition_IsOutOfRange");
static_assert(sizeof(ScrollPosition_IsOutOfRange) == 0x000001, "Wrong size on ScrollPosition_IsOutOfRange");
static_assert(offsetof(ScrollPosition_IsOutOfRange, ReturnValue) == 0x000000, "Member 'ScrollPosition_IsOutOfRange::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollPosition.IsScrolling
// 0x0001 (0x0001 - 0x0000)
struct ScrollPosition_IsScrolling final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollPosition_IsScrolling) == 0x000001, "Wrong alignment on ScrollPosition_IsScrolling");
static_assert(sizeof(ScrollPosition_IsScrolling) == 0x000001, "Wrong size on ScrollPosition_IsScrolling");
static_assert(offsetof(ScrollPosition_IsScrolling, ReturnValue) == 0x000000, "Member 'ScrollPosition_IsScrolling::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.FixedExtentScrollPosition.CreateFixedExtentScrollPosition
// 0x0028 (0x0028 - 0x0000)
struct FixedExtentScrollPosition_CreateFixedExtentScrollPosition final
{
public:
	TSubclassOf<class UFixedExtentScrollPosition> InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFixedExtentScrollableState*            InState;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScrollPhysics*                         InPhysics;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitialItem;                                       // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1174[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFixedExtentScrollPosition*             ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FixedExtentScrollPosition_CreateFixedExtentScrollPosition) == 0x000008, "Wrong alignment on FixedExtentScrollPosition_CreateFixedExtentScrollPosition");
static_assert(sizeof(FixedExtentScrollPosition_CreateFixedExtentScrollPosition) == 0x000028, "Wrong size on FixedExtentScrollPosition_CreateFixedExtentScrollPosition");
static_assert(offsetof(FixedExtentScrollPosition_CreateFixedExtentScrollPosition, InClass) == 0x000000, "Member 'FixedExtentScrollPosition_CreateFixedExtentScrollPosition::InClass' has a wrong offset!");
static_assert(offsetof(FixedExtentScrollPosition_CreateFixedExtentScrollPosition, InState) == 0x000008, "Member 'FixedExtentScrollPosition_CreateFixedExtentScrollPosition::InState' has a wrong offset!");
static_assert(offsetof(FixedExtentScrollPosition_CreateFixedExtentScrollPosition, InPhysics) == 0x000010, "Member 'FixedExtentScrollPosition_CreateFixedExtentScrollPosition::InPhysics' has a wrong offset!");
static_assert(offsetof(FixedExtentScrollPosition_CreateFixedExtentScrollPosition, InitialItem) == 0x000018, "Member 'FixedExtentScrollPosition_CreateFixedExtentScrollPosition::InitialItem' has a wrong offset!");
static_assert(offsetof(FixedExtentScrollPosition_CreateFixedExtentScrollPosition, ReturnValue) == 0x000020, "Member 'FixedExtentScrollPosition_CreateFixedExtentScrollPosition::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.FrictionSimulation.CreateFrictionSimulation
// 0x0030 (0x0030 - 0x0000)
struct FrictionSimulation_CreateFrictionSimulation final
{
public:
	TSubclassOf<class UFrictionSimulation>        InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                InOuter;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDrag;                                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPosition;                                        // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InVelocity;                                        // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTolerance                             InTolerance;                                       // 0x001C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UFrictionSimulation*                    ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FrictionSimulation_CreateFrictionSimulation) == 0x000008, "Wrong alignment on FrictionSimulation_CreateFrictionSimulation");
static_assert(sizeof(FrictionSimulation_CreateFrictionSimulation) == 0x000030, "Wrong size on FrictionSimulation_CreateFrictionSimulation");
static_assert(offsetof(FrictionSimulation_CreateFrictionSimulation, InClass) == 0x000000, "Member 'FrictionSimulation_CreateFrictionSimulation::InClass' has a wrong offset!");
static_assert(offsetof(FrictionSimulation_CreateFrictionSimulation, InOuter) == 0x000008, "Member 'FrictionSimulation_CreateFrictionSimulation::InOuter' has a wrong offset!");
static_assert(offsetof(FrictionSimulation_CreateFrictionSimulation, InDrag) == 0x000010, "Member 'FrictionSimulation_CreateFrictionSimulation::InDrag' has a wrong offset!");
static_assert(offsetof(FrictionSimulation_CreateFrictionSimulation, InPosition) == 0x000014, "Member 'FrictionSimulation_CreateFrictionSimulation::InPosition' has a wrong offset!");
static_assert(offsetof(FrictionSimulation_CreateFrictionSimulation, InVelocity) == 0x000018, "Member 'FrictionSimulation_CreateFrictionSimulation::InVelocity' has a wrong offset!");
static_assert(offsetof(FrictionSimulation_CreateFrictionSimulation, InTolerance) == 0x00001C, "Member 'FrictionSimulation_CreateFrictionSimulation::InTolerance' has a wrong offset!");
static_assert(offsetof(FrictionSimulation_CreateFrictionSimulation, ReturnValue) == 0x000028, "Member 'FrictionSimulation_CreateFrictionSimulation::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.FrictionSimulation.Through
// 0x0028 (0x0028 - 0x0000)
struct FrictionSimulation_Through final
{
public:
	TSubclassOf<class UFrictionSimulation>        InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                InOuter;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InStartPosition;                                   // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InEndPosition;                                     // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InStartVelocity;                                   // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InEndVelocity;                                     // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFrictionSimulation*                    ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FrictionSimulation_Through) == 0x000008, "Wrong alignment on FrictionSimulation_Through");
static_assert(sizeof(FrictionSimulation_Through) == 0x000028, "Wrong size on FrictionSimulation_Through");
static_assert(offsetof(FrictionSimulation_Through, InClass) == 0x000000, "Member 'FrictionSimulation_Through::InClass' has a wrong offset!");
static_assert(offsetof(FrictionSimulation_Through, InOuter) == 0x000008, "Member 'FrictionSimulation_Through::InOuter' has a wrong offset!");
static_assert(offsetof(FrictionSimulation_Through, InStartPosition) == 0x000010, "Member 'FrictionSimulation_Through::InStartPosition' has a wrong offset!");
static_assert(offsetof(FrictionSimulation_Through, InEndPosition) == 0x000014, "Member 'FrictionSimulation_Through::InEndPosition' has a wrong offset!");
static_assert(offsetof(FrictionSimulation_Through, InStartVelocity) == 0x000018, "Member 'FrictionSimulation_Through::InStartVelocity' has a wrong offset!");
static_assert(offsetof(FrictionSimulation_Through, InEndVelocity) == 0x00001C, "Member 'FrictionSimulation_Through::InEndVelocity' has a wrong offset!");
static_assert(offsetof(FrictionSimulation_Through, ReturnValue) == 0x000020, "Member 'FrictionSimulation_Through::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.BoundedFrictionSimulation.CreateBoundedFrictionSimulation
// 0x0038 (0x0038 - 0x0000)
struct BoundedFrictionSimulation_CreateBoundedFrictionSimulation final
{
public:
	TSubclassOf<class UBoundedFrictionSimulation> InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                InOuter;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDrag;                                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPosition;                                        // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InVelocity;                                        // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMinX;                                            // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMaxX;                                            // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTolerance                             InTolerance;                                       // 0x0024(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UBoundedFrictionSimulation*             ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BoundedFrictionSimulation_CreateBoundedFrictionSimulation) == 0x000008, "Wrong alignment on BoundedFrictionSimulation_CreateBoundedFrictionSimulation");
static_assert(sizeof(BoundedFrictionSimulation_CreateBoundedFrictionSimulation) == 0x000038, "Wrong size on BoundedFrictionSimulation_CreateBoundedFrictionSimulation");
static_assert(offsetof(BoundedFrictionSimulation_CreateBoundedFrictionSimulation, InClass) == 0x000000, "Member 'BoundedFrictionSimulation_CreateBoundedFrictionSimulation::InClass' has a wrong offset!");
static_assert(offsetof(BoundedFrictionSimulation_CreateBoundedFrictionSimulation, InOuter) == 0x000008, "Member 'BoundedFrictionSimulation_CreateBoundedFrictionSimulation::InOuter' has a wrong offset!");
static_assert(offsetof(BoundedFrictionSimulation_CreateBoundedFrictionSimulation, InDrag) == 0x000010, "Member 'BoundedFrictionSimulation_CreateBoundedFrictionSimulation::InDrag' has a wrong offset!");
static_assert(offsetof(BoundedFrictionSimulation_CreateBoundedFrictionSimulation, InPosition) == 0x000014, "Member 'BoundedFrictionSimulation_CreateBoundedFrictionSimulation::InPosition' has a wrong offset!");
static_assert(offsetof(BoundedFrictionSimulation_CreateBoundedFrictionSimulation, InVelocity) == 0x000018, "Member 'BoundedFrictionSimulation_CreateBoundedFrictionSimulation::InVelocity' has a wrong offset!");
static_assert(offsetof(BoundedFrictionSimulation_CreateBoundedFrictionSimulation, InMinX) == 0x00001C, "Member 'BoundedFrictionSimulation_CreateBoundedFrictionSimulation::InMinX' has a wrong offset!");
static_assert(offsetof(BoundedFrictionSimulation_CreateBoundedFrictionSimulation, InMaxX) == 0x000020, "Member 'BoundedFrictionSimulation_CreateBoundedFrictionSimulation::InMaxX' has a wrong offset!");
static_assert(offsetof(BoundedFrictionSimulation_CreateBoundedFrictionSimulation, InTolerance) == 0x000024, "Member 'BoundedFrictionSimulation_CreateBoundedFrictionSimulation::InTolerance' has a wrong offset!");
static_assert(offsetof(BoundedFrictionSimulation_CreateBoundedFrictionSimulation, ReturnValue) == 0x000030, "Member 'BoundedFrictionSimulation_CreateBoundedFrictionSimulation::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.GravitySimulation.Create
// 0x0020 (0x0020 - 0x0000)
struct GravitySimulation_Create final
{
public:
	class UObject*                                InOuter;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAcceleration;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDistance;                                        // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InVelocity;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InEndDistance;                                     // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGravitySimulation*                     ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GravitySimulation_Create) == 0x000008, "Wrong alignment on GravitySimulation_Create");
static_assert(sizeof(GravitySimulation_Create) == 0x000020, "Wrong size on GravitySimulation_Create");
static_assert(offsetof(GravitySimulation_Create, InOuter) == 0x000000, "Member 'GravitySimulation_Create::InOuter' has a wrong offset!");
static_assert(offsetof(GravitySimulation_Create, InAcceleration) == 0x000008, "Member 'GravitySimulation_Create::InAcceleration' has a wrong offset!");
static_assert(offsetof(GravitySimulation_Create, InDistance) == 0x00000C, "Member 'GravitySimulation_Create::InDistance' has a wrong offset!");
static_assert(offsetof(GravitySimulation_Create, InVelocity) == 0x000010, "Member 'GravitySimulation_Create::InVelocity' has a wrong offset!");
static_assert(offsetof(GravitySimulation_Create, InEndDistance) == 0x000014, "Member 'GravitySimulation_Create::InEndDistance' has a wrong offset!");
static_assert(offsetof(GravitySimulation_Create, ReturnValue) == 0x000018, "Member 'GravitySimulation_Create::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.HoldScrollActivity.CreateHoldScrollActivity
// 0x0018 (0x0018 - 0x0000)
struct HoldScrollActivity_CreateHoldScrollActivity final
{
public:
	TSubclassOf<class UHoldScrollActivity>        InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScrollPosition*                        InPosition;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHoldScrollActivity*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HoldScrollActivity_CreateHoldScrollActivity) == 0x000008, "Wrong alignment on HoldScrollActivity_CreateHoldScrollActivity");
static_assert(sizeof(HoldScrollActivity_CreateHoldScrollActivity) == 0x000018, "Wrong size on HoldScrollActivity_CreateHoldScrollActivity");
static_assert(offsetof(HoldScrollActivity_CreateHoldScrollActivity, InClass) == 0x000000, "Member 'HoldScrollActivity_CreateHoldScrollActivity::InClass' has a wrong offset!");
static_assert(offsetof(HoldScrollActivity_CreateHoldScrollActivity, InPosition) == 0x000008, "Member 'HoldScrollActivity_CreateHoldScrollActivity::InPosition' has a wrong offset!");
static_assert(offsetof(HoldScrollActivity_CreateHoldScrollActivity, ReturnValue) == 0x000010, "Member 'HoldScrollActivity_CreateHoldScrollActivity::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.IdleScrollActivity.CreateIdleScrollActivity
// 0x0018 (0x0018 - 0x0000)
struct IdleScrollActivity_CreateIdleScrollActivity final
{
public:
	TSubclassOf<class UIdleScrollActivity>        InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScrollPosition*                        InPosition;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UIdleScrollActivity*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IdleScrollActivity_CreateIdleScrollActivity) == 0x000008, "Wrong alignment on IdleScrollActivity_CreateIdleScrollActivity");
static_assert(sizeof(IdleScrollActivity_CreateIdleScrollActivity) == 0x000018, "Wrong size on IdleScrollActivity_CreateIdleScrollActivity");
static_assert(offsetof(IdleScrollActivity_CreateIdleScrollActivity, InClass) == 0x000000, "Member 'IdleScrollActivity_CreateIdleScrollActivity::InClass' has a wrong offset!");
static_assert(offsetof(IdleScrollActivity_CreateIdleScrollActivity, InPosition) == 0x000008, "Member 'IdleScrollActivity_CreateIdleScrollActivity::InPosition' has a wrong offset!");
static_assert(offsetof(IdleScrollActivity_CreateIdleScrollActivity, ReturnValue) == 0x000010, "Member 'IdleScrollActivity_CreateIdleScrollActivity::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.NeverScrollableScrollPhysics.CreateNeverScrollableScrollPhysics
// 0x0020 (0x0020 - 0x0000)
struct NeverScrollableScrollPhysics_CreateNeverScrollableScrollPhysics final
{
public:
	TSubclassOf<class UNeverScrollableScrollPhysics> InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                InOuter;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScrollPhysics*                         InParent;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNeverScrollableScrollPhysics*          ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NeverScrollableScrollPhysics_CreateNeverScrollableScrollPhysics) == 0x000008, "Wrong alignment on NeverScrollableScrollPhysics_CreateNeverScrollableScrollPhysics");
static_assert(sizeof(NeverScrollableScrollPhysics_CreateNeverScrollableScrollPhysics) == 0x000020, "Wrong size on NeverScrollableScrollPhysics_CreateNeverScrollableScrollPhysics");
static_assert(offsetof(NeverScrollableScrollPhysics_CreateNeverScrollableScrollPhysics, InClass) == 0x000000, "Member 'NeverScrollableScrollPhysics_CreateNeverScrollableScrollPhysics::InClass' has a wrong offset!");
static_assert(offsetof(NeverScrollableScrollPhysics_CreateNeverScrollableScrollPhysics, InOuter) == 0x000008, "Member 'NeverScrollableScrollPhysics_CreateNeverScrollableScrollPhysics::InOuter' has a wrong offset!");
static_assert(offsetof(NeverScrollableScrollPhysics_CreateNeverScrollableScrollPhysics, InParent) == 0x000010, "Member 'NeverScrollableScrollPhysics_CreateNeverScrollableScrollPhysics::InParent' has a wrong offset!");
static_assert(offsetof(NeverScrollableScrollPhysics_CreateNeverScrollableScrollPhysics, ReturnValue) == 0x000018, "Member 'NeverScrollableScrollPhysics_CreateNeverScrollableScrollPhysics::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollableObjectInterface.Interface_CreateScrollController
// 0x0008 (0x0008 - 0x0000)
struct ScrollableObjectInterface_Interface_CreateScrollController final
{
public:
	class UScrollController*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollableObjectInterface_Interface_CreateScrollController) == 0x000008, "Wrong alignment on ScrollableObjectInterface_Interface_CreateScrollController");
static_assert(sizeof(ScrollableObjectInterface_Interface_CreateScrollController) == 0x000008, "Wrong size on ScrollableObjectInterface_Interface_CreateScrollController");
static_assert(offsetof(ScrollableObjectInterface_Interface_CreateScrollController, ReturnValue) == 0x000000, "Member 'ScrollableObjectInterface_Interface_CreateScrollController::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollableObjectInterface.Interface_CreateScrollPhysics
// 0x0008 (0x0008 - 0x0000)
struct ScrollableObjectInterface_Interface_CreateScrollPhysics final
{
public:
	class UScrollPhysics*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollableObjectInterface_Interface_CreateScrollPhysics) == 0x000008, "Wrong alignment on ScrollableObjectInterface_Interface_CreateScrollPhysics");
static_assert(sizeof(ScrollableObjectInterface_Interface_CreateScrollPhysics) == 0x000008, "Wrong size on ScrollableObjectInterface_Interface_CreateScrollPhysics");
static_assert(offsetof(ScrollableObjectInterface_Interface_CreateScrollPhysics, ReturnValue) == 0x000000, "Member 'ScrollableObjectInterface_Interface_CreateScrollPhysics::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollableObjectInterface.Interface_GetMaxScrollExtent
// 0x0004 (0x0004 - 0x0000)
struct ScrollableObjectInterface_Interface_GetMaxScrollExtent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollableObjectInterface_Interface_GetMaxScrollExtent) == 0x000004, "Wrong alignment on ScrollableObjectInterface_Interface_GetMaxScrollExtent");
static_assert(sizeof(ScrollableObjectInterface_Interface_GetMaxScrollExtent) == 0x000004, "Wrong size on ScrollableObjectInterface_Interface_GetMaxScrollExtent");
static_assert(offsetof(ScrollableObjectInterface_Interface_GetMaxScrollExtent, ReturnValue) == 0x000000, "Member 'ScrollableObjectInterface_Interface_GetMaxScrollExtent::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollableObjectInterface.Interface_GetMinScrollExtent
// 0x0004 (0x0004 - 0x0000)
struct ScrollableObjectInterface_Interface_GetMinScrollExtent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollableObjectInterface_Interface_GetMinScrollExtent) == 0x000004, "Wrong alignment on ScrollableObjectInterface_Interface_GetMinScrollExtent");
static_assert(sizeof(ScrollableObjectInterface_Interface_GetMinScrollExtent) == 0x000004, "Wrong size on ScrollableObjectInterface_Interface_GetMinScrollExtent");
static_assert(offsetof(ScrollableObjectInterface_Interface_GetMinScrollExtent, ReturnValue) == 0x000000, "Member 'ScrollableObjectInterface_Interface_GetMinScrollExtent::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollableObjectInterface.Interface_GetScrollDirection
// 0x0001 (0x0001 - 0x0000)
struct ScrollableObjectInterface_Interface_GetScrollDirection final
{
public:
	EScrollDirectionType                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollableObjectInterface_Interface_GetScrollDirection) == 0x000001, "Wrong alignment on ScrollableObjectInterface_Interface_GetScrollDirection");
static_assert(sizeof(ScrollableObjectInterface_Interface_GetScrollDirection) == 0x000001, "Wrong size on ScrollableObjectInterface_Interface_GetScrollDirection");
static_assert(offsetof(ScrollableObjectInterface_Interface_GetScrollDirection, ReturnValue) == 0x000000, "Member 'ScrollableObjectInterface_Interface_GetScrollDirection::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollableObjectInterface.Interface_GetViewportDimension
// 0x0004 (0x0004 - 0x0000)
struct ScrollableObjectInterface_Interface_GetViewportDimension final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollableObjectInterface_Interface_GetViewportDimension) == 0x000004, "Wrong alignment on ScrollableObjectInterface_Interface_GetViewportDimension");
static_assert(sizeof(ScrollableObjectInterface_Interface_GetViewportDimension) == 0x000004, "Wrong size on ScrollableObjectInterface_Interface_GetViewportDimension");
static_assert(offsetof(ScrollableObjectInterface_Interface_GetViewportDimension, ReturnValue) == 0x000000, "Member 'ScrollableObjectInterface_Interface_GetViewportDimension::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.SpringDescriptionLibrary.MakeSpringDescriptionWithDampingRatio
// 0x0018 (0x0018 - 0x0000)
struct SpringDescriptionLibrary_MakeSpringDescriptionWithDampingRatio final
{
public:
	float                                         InMass;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InStiffness;                                       // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRatio;                                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSpringDescription                     ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpringDescriptionLibrary_MakeSpringDescriptionWithDampingRatio) == 0x000004, "Wrong alignment on SpringDescriptionLibrary_MakeSpringDescriptionWithDampingRatio");
static_assert(sizeof(SpringDescriptionLibrary_MakeSpringDescriptionWithDampingRatio) == 0x000018, "Wrong size on SpringDescriptionLibrary_MakeSpringDescriptionWithDampingRatio");
static_assert(offsetof(SpringDescriptionLibrary_MakeSpringDescriptionWithDampingRatio, InMass) == 0x000000, "Member 'SpringDescriptionLibrary_MakeSpringDescriptionWithDampingRatio::InMass' has a wrong offset!");
static_assert(offsetof(SpringDescriptionLibrary_MakeSpringDescriptionWithDampingRatio, InStiffness) == 0x000004, "Member 'SpringDescriptionLibrary_MakeSpringDescriptionWithDampingRatio::InStiffness' has a wrong offset!");
static_assert(offsetof(SpringDescriptionLibrary_MakeSpringDescriptionWithDampingRatio, InRatio) == 0x000008, "Member 'SpringDescriptionLibrary_MakeSpringDescriptionWithDampingRatio::InRatio' has a wrong offset!");
static_assert(offsetof(SpringDescriptionLibrary_MakeSpringDescriptionWithDampingRatio, ReturnValue) == 0x00000C, "Member 'SpringDescriptionLibrary_MakeSpringDescriptionWithDampingRatio::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.SpringSimulation.CreateSpringSimulation
// 0x0040 (0x0040 - 0x0000)
struct SpringSimulation_CreateSpringSimulation final
{
public:
	TSubclassOf<class USpringSimulation>          InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                InOuter;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSpringDescription                     InSpring;                                          // 0x0010(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InStart;                                           // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InEnd;                                             // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InVelocity;                                        // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTolerance                             InTolerance;                                       // 0x0028(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1179[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USpringSimulation*                      ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpringSimulation_CreateSpringSimulation) == 0x000008, "Wrong alignment on SpringSimulation_CreateSpringSimulation");
static_assert(sizeof(SpringSimulation_CreateSpringSimulation) == 0x000040, "Wrong size on SpringSimulation_CreateSpringSimulation");
static_assert(offsetof(SpringSimulation_CreateSpringSimulation, InClass) == 0x000000, "Member 'SpringSimulation_CreateSpringSimulation::InClass' has a wrong offset!");
static_assert(offsetof(SpringSimulation_CreateSpringSimulation, InOuter) == 0x000008, "Member 'SpringSimulation_CreateSpringSimulation::InOuter' has a wrong offset!");
static_assert(offsetof(SpringSimulation_CreateSpringSimulation, InSpring) == 0x000010, "Member 'SpringSimulation_CreateSpringSimulation::InSpring' has a wrong offset!");
static_assert(offsetof(SpringSimulation_CreateSpringSimulation, InStart) == 0x00001C, "Member 'SpringSimulation_CreateSpringSimulation::InStart' has a wrong offset!");
static_assert(offsetof(SpringSimulation_CreateSpringSimulation, InEnd) == 0x000020, "Member 'SpringSimulation_CreateSpringSimulation::InEnd' has a wrong offset!");
static_assert(offsetof(SpringSimulation_CreateSpringSimulation, InVelocity) == 0x000024, "Member 'SpringSimulation_CreateSpringSimulation::InVelocity' has a wrong offset!");
static_assert(offsetof(SpringSimulation_CreateSpringSimulation, InTolerance) == 0x000028, "Member 'SpringSimulation_CreateSpringSimulation::InTolerance' has a wrong offset!");
static_assert(offsetof(SpringSimulation_CreateSpringSimulation, ReturnValue) == 0x000038, "Member 'SpringSimulation_CreateSpringSimulation::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.ScrollSpringSimulation.CreateScrollSpringSimulation
// 0x0040 (0x0040 - 0x0000)
struct ScrollSpringSimulation_CreateScrollSpringSimulation final
{
public:
	TSubclassOf<class UScrollSpringSimulation>    InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                InOuter;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSpringDescription                     InSpring;                                          // 0x0010(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InStart;                                           // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InEnd;                                             // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InVelocity;                                        // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTolerance                             InTolerance;                                       // 0x0028(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_117A[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UScrollSpringSimulation*                ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScrollSpringSimulation_CreateScrollSpringSimulation) == 0x000008, "Wrong alignment on ScrollSpringSimulation_CreateScrollSpringSimulation");
static_assert(sizeof(ScrollSpringSimulation_CreateScrollSpringSimulation) == 0x000040, "Wrong size on ScrollSpringSimulation_CreateScrollSpringSimulation");
static_assert(offsetof(ScrollSpringSimulation_CreateScrollSpringSimulation, InClass) == 0x000000, "Member 'ScrollSpringSimulation_CreateScrollSpringSimulation::InClass' has a wrong offset!");
static_assert(offsetof(ScrollSpringSimulation_CreateScrollSpringSimulation, InOuter) == 0x000008, "Member 'ScrollSpringSimulation_CreateScrollSpringSimulation::InOuter' has a wrong offset!");
static_assert(offsetof(ScrollSpringSimulation_CreateScrollSpringSimulation, InSpring) == 0x000010, "Member 'ScrollSpringSimulation_CreateScrollSpringSimulation::InSpring' has a wrong offset!");
static_assert(offsetof(ScrollSpringSimulation_CreateScrollSpringSimulation, InStart) == 0x00001C, "Member 'ScrollSpringSimulation_CreateScrollSpringSimulation::InStart' has a wrong offset!");
static_assert(offsetof(ScrollSpringSimulation_CreateScrollSpringSimulation, InEnd) == 0x000020, "Member 'ScrollSpringSimulation_CreateScrollSpringSimulation::InEnd' has a wrong offset!");
static_assert(offsetof(ScrollSpringSimulation_CreateScrollSpringSimulation, InVelocity) == 0x000024, "Member 'ScrollSpringSimulation_CreateScrollSpringSimulation::InVelocity' has a wrong offset!");
static_assert(offsetof(ScrollSpringSimulation_CreateScrollSpringSimulation, InTolerance) == 0x000028, "Member 'ScrollSpringSimulation_CreateScrollSpringSimulation::InTolerance' has a wrong offset!");
static_assert(offsetof(ScrollSpringSimulation_CreateScrollSpringSimulation, ReturnValue) == 0x000038, "Member 'ScrollSpringSimulation_CreateScrollSpringSimulation::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.UIView.PrintDebugString
// 0x0010 (0x0010 - 0x0000)
struct UIView_PrintDebugString final
{
public:
	class FString                                 InDebugString;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIView_PrintDebugString) == 0x000008, "Wrong alignment on UIView_PrintDebugString");
static_assert(sizeof(UIView_PrintDebugString) == 0x000010, "Wrong size on UIView_PrintDebugString");
static_assert(offsetof(UIView_PrintDebugString, InDebugString) == 0x000000, "Member 'UIView_PrintDebugString::InDebugString' has a wrong offset!");

// Function HottaUIExtensions.UIView.CollectChildrenInfo
// 0x0078 (0x0078 - 0x0000)
struct UIView_CollectChildrenInfo final
{
public:
	int32                                         OutChildrenNum;                                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_117C[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ESlateVisibility>                      OutChildrenVisibility;                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 OutCollapsedChildIndexArray;                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            OutChildIndexToLayoutIndexMap;                     // 0x0028(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIView_CollectChildrenInfo) == 0x000008, "Wrong alignment on UIView_CollectChildrenInfo");
static_assert(sizeof(UIView_CollectChildrenInfo) == 0x000078, "Wrong size on UIView_CollectChildrenInfo");
static_assert(offsetof(UIView_CollectChildrenInfo, OutChildrenNum) == 0x000000, "Member 'UIView_CollectChildrenInfo::OutChildrenNum' has a wrong offset!");
static_assert(offsetof(UIView_CollectChildrenInfo, OutChildrenVisibility) == 0x000008, "Member 'UIView_CollectChildrenInfo::OutChildrenVisibility' has a wrong offset!");
static_assert(offsetof(UIView_CollectChildrenInfo, OutCollapsedChildIndexArray) == 0x000018, "Member 'UIView_CollectChildrenInfo::OutCollapsedChildIndexArray' has a wrong offset!");
static_assert(offsetof(UIView_CollectChildrenInfo, OutChildIndexToLayoutIndexMap) == 0x000028, "Member 'UIView_CollectChildrenInfo::OutChildIndexToLayoutIndexMap' has a wrong offset!");

// Function HottaUIExtensions.UIView.GetLayoutChildrenNum
// 0x0004 (0x0004 - 0x0000)
struct UIView_GetLayoutChildrenNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIView_GetLayoutChildrenNum) == 0x000004, "Wrong alignment on UIView_GetLayoutChildrenNum");
static_assert(sizeof(UIView_GetLayoutChildrenNum) == 0x000004, "Wrong size on UIView_GetLayoutChildrenNum");
static_assert(offsetof(UIView_GetLayoutChildrenNum, ReturnValue) == 0x000000, "Member 'UIView_GetLayoutChildrenNum::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.UIView.IsDebugMode
// 0x0001 (0x0001 - 0x0000)
struct UIView_IsDebugMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIView_IsDebugMode) == 0x000001, "Wrong alignment on UIView_IsDebugMode");
static_assert(sizeof(UIView_IsDebugMode) == 0x000001, "Wrong size on UIView_IsDebugMode");
static_assert(offsetof(UIView_IsDebugMode, ReturnValue) == 0x000000, "Member 'UIView_IsDebugMode::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.UICircleView.GetChildWidgetAngle
// 0x000C (0x000C - 0x0000)
struct UICircleView_GetChildWidgetAngle final
{
public:
	int32                                         InChildIndex;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutAngle;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUnit                                         InAngleUnits;                                      // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_117E[0x2];                                     // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UICircleView_GetChildWidgetAngle) == 0x000004, "Wrong alignment on UICircleView_GetChildWidgetAngle");
static_assert(sizeof(UICircleView_GetChildWidgetAngle) == 0x00000C, "Wrong size on UICircleView_GetChildWidgetAngle");
static_assert(offsetof(UICircleView_GetChildWidgetAngle, InChildIndex) == 0x000000, "Member 'UICircleView_GetChildWidgetAngle::InChildIndex' has a wrong offset!");
static_assert(offsetof(UICircleView_GetChildWidgetAngle, OutAngle) == 0x000004, "Member 'UICircleView_GetChildWidgetAngle::OutAngle' has a wrong offset!");
static_assert(offsetof(UICircleView_GetChildWidgetAngle, InAngleUnits) == 0x000008, "Member 'UICircleView_GetChildWidgetAngle::InAngleUnits' has a wrong offset!");
static_assert(offsetof(UICircleView_GetChildWidgetAngle, ReturnValue) == 0x000009, "Member 'UICircleView_GetChildWidgetAngle::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.UICircleView.GetChildWidgetIntervalAngle
// 0x0008 (0x0008 - 0x0000)
struct UICircleView_GetChildWidgetIntervalAngle final
{
public:
	EUnit                                         InAngleUnits;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_117F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICircleView_GetChildWidgetIntervalAngle) == 0x000004, "Wrong alignment on UICircleView_GetChildWidgetIntervalAngle");
static_assert(sizeof(UICircleView_GetChildWidgetIntervalAngle) == 0x000008, "Wrong size on UICircleView_GetChildWidgetIntervalAngle");
static_assert(offsetof(UICircleView_GetChildWidgetIntervalAngle, InAngleUnits) == 0x000000, "Member 'UICircleView_GetChildWidgetIntervalAngle::InAngleUnits' has a wrong offset!");
static_assert(offsetof(UICircleView_GetChildWidgetIntervalAngle, ReturnValue) == 0x000004, "Member 'UICircleView_GetChildWidgetIntervalAngle::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.UICircleView.GetRealBeginAngle
// 0x0004 (0x0004 - 0x0000)
struct UICircleView_GetRealBeginAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICircleView_GetRealBeginAngle) == 0x000004, "Wrong alignment on UICircleView_GetRealBeginAngle");
static_assert(sizeof(UICircleView_GetRealBeginAngle) == 0x000004, "Wrong size on UICircleView_GetRealBeginAngle");
static_assert(offsetof(UICircleView_GetRealBeginAngle, ReturnValue) == 0x000000, "Member 'UICircleView_GetRealBeginAngle::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.UIViewSlot.SetAutoSize
// 0x0001 (0x0001 - 0x0000)
struct UIViewSlot_SetAutoSize final
{
public:
	bool                                          bInAutoSize;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIViewSlot_SetAutoSize) == 0x000001, "Wrong alignment on UIViewSlot_SetAutoSize");
static_assert(sizeof(UIViewSlot_SetAutoSize) == 0x000001, "Wrong size on UIViewSlot_SetAutoSize");
static_assert(offsetof(UIViewSlot_SetAutoSize, bInAutoSize) == 0x000000, "Member 'UIViewSlot_SetAutoSize::bInAutoSize' has a wrong offset!");

// Function HottaUIExtensions.UIViewSlot.SetSize
// 0x0008 (0x0008 - 0x0000)
struct UIViewSlot_SetSize final
{
public:
	struct FVector2D                              InSize;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIViewSlot_SetSize) == 0x000004, "Wrong alignment on UIViewSlot_SetSize");
static_assert(sizeof(UIViewSlot_SetSize) == 0x000008, "Wrong size on UIViewSlot_SetSize");
static_assert(offsetof(UIViewSlot_SetSize, InSize) == 0x000000, "Member 'UIViewSlot_SetSize::InSize' has a wrong offset!");

// Function HottaUIExtensions.UIViewSlot.GetAutoSize
// 0x0001 (0x0001 - 0x0000)
struct UIViewSlot_GetAutoSize final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIViewSlot_GetAutoSize) == 0x000001, "Wrong alignment on UIViewSlot_GetAutoSize");
static_assert(sizeof(UIViewSlot_GetAutoSize) == 0x000001, "Wrong size on UIViewSlot_GetAutoSize");
static_assert(offsetof(UIViewSlot_GetAutoSize, ReturnValue) == 0x000000, "Member 'UIViewSlot_GetAutoSize::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.UIViewSlot.GetSize
// 0x0008 (0x0008 - 0x0000)
struct UIViewSlot_GetSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIViewSlot_GetSize) == 0x000004, "Wrong alignment on UIViewSlot_GetSize");
static_assert(sizeof(UIViewSlot_GetSize) == 0x000008, "Wrong size on UIViewSlot_GetSize");
static_assert(offsetof(UIViewSlot_GetSize, ReturnValue) == 0x000000, "Member 'UIViewSlot_GetSize::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.UIScrollableCircleView.OnScrollPositionOffsetChanged
// 0x0010 (0x0010 - 0x0000)
struct UIScrollableCircleView_OnScrollPositionOffsetChanged final
{
public:
	class UScrollPosition*                        InScrollPosition;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOldScrollOffset;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InScrollOffset;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollableCircleView_OnScrollPositionOffsetChanged) == 0x000008, "Wrong alignment on UIScrollableCircleView_OnScrollPositionOffsetChanged");
static_assert(sizeof(UIScrollableCircleView_OnScrollPositionOffsetChanged) == 0x000010, "Wrong size on UIScrollableCircleView_OnScrollPositionOffsetChanged");
static_assert(offsetof(UIScrollableCircleView_OnScrollPositionOffsetChanged, InScrollPosition) == 0x000000, "Member 'UIScrollableCircleView_OnScrollPositionOffsetChanged::InScrollPosition' has a wrong offset!");
static_assert(offsetof(UIScrollableCircleView_OnScrollPositionOffsetChanged, InOldScrollOffset) == 0x000008, "Member 'UIScrollableCircleView_OnScrollPositionOffsetChanged::InOldScrollOffset' has a wrong offset!");
static_assert(offsetof(UIScrollableCircleView_OnScrollPositionOffsetChanged, InScrollOffset) == 0x00000C, "Member 'UIScrollableCircleView_OnScrollPositionOffsetChanged::InScrollOffset' has a wrong offset!");

// Function HottaUIExtensions.UIScrollableCircleView.GetScrollableState
// 0x0008 (0x0008 - 0x0000)
struct UIScrollableCircleView_GetScrollableState final
{
public:
	class UFixedExtentScrollableState*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollableCircleView_GetScrollableState) == 0x000008, "Wrong alignment on UIScrollableCircleView_GetScrollableState");
static_assert(sizeof(UIScrollableCircleView_GetScrollableState) == 0x000008, "Wrong size on UIScrollableCircleView_GetScrollableState");
static_assert(offsetof(UIScrollableCircleView_GetScrollableState, ReturnValue) == 0x000000, "Member 'UIScrollableCircleView_GetScrollableState::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.UIScrollableCircleView.GetScrollController
// 0x0008 (0x0008 - 0x0000)
struct UIScrollableCircleView_GetScrollController final
{
public:
	class UScrollController*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollableCircleView_GetScrollController) == 0x000008, "Wrong alignment on UIScrollableCircleView_GetScrollController");
static_assert(sizeof(UIScrollableCircleView_GetScrollController) == 0x000008, "Wrong size on UIScrollableCircleView_GetScrollController");
static_assert(offsetof(UIScrollableCircleView_GetScrollController, ReturnValue) == 0x000000, "Member 'UIScrollableCircleView_GetScrollController::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.UIScrollView.OnScrollPositionOffsetChanged
// 0x0010 (0x0010 - 0x0000)
struct UIScrollView_OnScrollPositionOffsetChanged final
{
public:
	class UScrollPosition*                        InScrollPosition;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOldScrollOffset;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InScrollOffset;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollView_OnScrollPositionOffsetChanged) == 0x000008, "Wrong alignment on UIScrollView_OnScrollPositionOffsetChanged");
static_assert(sizeof(UIScrollView_OnScrollPositionOffsetChanged) == 0x000010, "Wrong size on UIScrollView_OnScrollPositionOffsetChanged");
static_assert(offsetof(UIScrollView_OnScrollPositionOffsetChanged, InScrollPosition) == 0x000000, "Member 'UIScrollView_OnScrollPositionOffsetChanged::InScrollPosition' has a wrong offset!");
static_assert(offsetof(UIScrollView_OnScrollPositionOffsetChanged, InOldScrollOffset) == 0x000008, "Member 'UIScrollView_OnScrollPositionOffsetChanged::InOldScrollOffset' has a wrong offset!");
static_assert(offsetof(UIScrollView_OnScrollPositionOffsetChanged, InScrollOffset) == 0x00000C, "Member 'UIScrollView_OnScrollPositionOffsetChanged::InScrollOffset' has a wrong offset!");

// Function HottaUIExtensions.UIScrollView.GetScrollDirection
// 0x0001 (0x0001 - 0x0000)
struct UIScrollView_GetScrollDirection final
{
public:
	EScrollDirectionType                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollView_GetScrollDirection) == 0x000001, "Wrong alignment on UIScrollView_GetScrollDirection");
static_assert(sizeof(UIScrollView_GetScrollDirection) == 0x000001, "Wrong size on UIScrollView_GetScrollDirection");
static_assert(offsetof(UIScrollView_GetScrollDirection, ReturnValue) == 0x000000, "Member 'UIScrollView_GetScrollDirection::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.UIScrollView.GetScrollOffset
// 0x0004 (0x0004 - 0x0000)
struct UIScrollView_GetScrollOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollView_GetScrollOffset) == 0x000004, "Wrong alignment on UIScrollView_GetScrollOffset");
static_assert(sizeof(UIScrollView_GetScrollOffset) == 0x000004, "Wrong size on UIScrollView_GetScrollOffset");
static_assert(offsetof(UIScrollView_GetScrollOffset, ReturnValue) == 0x000000, "Member 'UIScrollView_GetScrollOffset::ReturnValue' has a wrong offset!");

// Function HottaUIExtensions.UIScrollViewSlot.SetMargin
// 0x0010 (0x0010 - 0x0000)
struct UIScrollViewSlot_SetMargin final
{
public:
	struct FMargin                                InMargin;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewSlot_SetMargin) == 0x000004, "Wrong alignment on UIScrollViewSlot_SetMargin");
static_assert(sizeof(UIScrollViewSlot_SetMargin) == 0x000010, "Wrong size on UIScrollViewSlot_SetMargin");
static_assert(offsetof(UIScrollViewSlot_SetMargin, InMargin) == 0x000000, "Member 'UIScrollViewSlot_SetMargin::InMargin' has a wrong offset!");

// Function HottaUIExtensions.UIScrollViewSlot.GetMargin
// 0x0010 (0x0010 - 0x0000)
struct UIScrollViewSlot_GetMargin final
{
public:
	struct FMargin                                ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewSlot_GetMargin) == 0x000004, "Wrong alignment on UIScrollViewSlot_GetMargin");
static_assert(sizeof(UIScrollViewSlot_GetMargin) == 0x000010, "Wrong size on UIScrollViewSlot_GetMargin");
static_assert(offsetof(UIScrollViewSlot_GetMargin, ReturnValue) == 0x000000, "Member 'UIScrollViewSlot_GetMargin::ReturnValue' has a wrong offset!");

}

