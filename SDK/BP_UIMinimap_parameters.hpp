#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UIMinimap

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Slate_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_UIMinimap.BP_UIMinimap_C.HasFogLevel
// 0x0048 (0x0048 - 0x0000)
struct BP_UIMinimap_C_HasFogLevel final
{
public:
	class FString                                 InLevelName;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsJiuYuSceneByLevelName_ReturnValue;      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLevelSceneByName_ReturnValue;           // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_566A[0x1];                                     // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_566B[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetMapLayerRealLevelName_ReturnValue;     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_566C[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLevelSceneByName_ReturnValue_1;         // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_UIMinimap_C_HasFogLevel) == 0x000008, "Wrong alignment on BP_UIMinimap_C_HasFogLevel");
static_assert(sizeof(BP_UIMinimap_C_HasFogLevel) == 0x000048, "Wrong size on BP_UIMinimap_C_HasFogLevel");
static_assert(offsetof(BP_UIMinimap_C_HasFogLevel, InLevelName) == 0x000000, "Member 'BP_UIMinimap_C_HasFogLevel::InLevelName' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_HasFogLevel, ReturnValue) == 0x000010, "Member 'BP_UIMinimap_C_HasFogLevel::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_HasFogLevel, CallFunc_IsJiuYuSceneByLevelName_ReturnValue) == 0x000011, "Member 'BP_UIMinimap_C_HasFogLevel::CallFunc_IsJiuYuSceneByLevelName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_HasFogLevel, CallFunc_IsLevelSceneByName_ReturnValue) == 0x000012, "Member 'BP_UIMinimap_C_HasFogLevel::CallFunc_IsLevelSceneByName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_HasFogLevel, CallFunc_Conv_StringToName_ReturnValue) == 0x000014, "Member 'BP_UIMinimap_C_HasFogLevel::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_HasFogLevel, CallFunc_BooleanOR_ReturnValue) == 0x00001C, "Member 'BP_UIMinimap_C_HasFogLevel::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_HasFogLevel, CallFunc_GetMapLayerRealLevelName_ReturnValue) == 0x000020, "Member 'BP_UIMinimap_C_HasFogLevel::CallFunc_GetMapLayerRealLevelName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_HasFogLevel, CallFunc_NotEqual_NameName_ReturnValue) == 0x000028, "Member 'BP_UIMinimap_C_HasFogLevel::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_HasFogLevel, CallFunc_Conv_NameToString_ReturnValue) == 0x000030, "Member 'BP_UIMinimap_C_HasFogLevel::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_HasFogLevel, CallFunc_IsLevelSceneByName_ReturnValue_1) == 0x000040, "Member 'BP_UIMinimap_C_HasFogLevel::CallFunc_IsLevelSceneByName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_HasFogLevel, CallFunc_BooleanAND_ReturnValue) == 0x000041, "Member 'BP_UIMinimap_C_HasFogLevel::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_HasFogLevel, CallFunc_BooleanOR_ReturnValue_1) == 0x000042, "Member 'BP_UIMinimap_C_HasFogLevel::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function BP_UIMinimap.BP_UIMinimap_C.RefreshMapFogMask
// 0x0058 (0x0058 - 0x0000)
struct BP_UIMinimap_C_RefreshMapFogMask final
{
public:
	class FString                                 CallFunc_GetCurrentLevelName_ReturnValue;          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasFogLevel_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_566D[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_GetChildAt_ReturnValue;                   // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_UIMapBackground_C*                  K2Node_DynamicCast_AsBP_UIMap_Background;          // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_566E[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AMapFog*>                        CallFunc_GetMapFogs_ReturnValue;                   // 0x0030(0x0010)(ConstParm, ReferenceParm)
	class AMapFog*                                CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_566F[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 CallFunc_GetFogBackgroundRenderTarget_ReturnValue; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_UIMinimap_C_RefreshMapFogMask) == 0x000008, "Wrong alignment on BP_UIMinimap_C_RefreshMapFogMask");
static_assert(sizeof(BP_UIMinimap_C_RefreshMapFogMask) == 0x000058, "Wrong size on BP_UIMinimap_C_RefreshMapFogMask");
static_assert(offsetof(BP_UIMinimap_C_RefreshMapFogMask, CallFunc_GetCurrentLevelName_ReturnValue) == 0x000000, "Member 'BP_UIMinimap_C_RefreshMapFogMask::CallFunc_GetCurrentLevelName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_RefreshMapFogMask, CallFunc_HasFogLevel_ReturnValue) == 0x000010, "Member 'BP_UIMinimap_C_RefreshMapFogMask::CallFunc_HasFogLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_RefreshMapFogMask, CallFunc_GetChildAt_ReturnValue) == 0x000018, "Member 'BP_UIMinimap_C_RefreshMapFogMask::CallFunc_GetChildAt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_RefreshMapFogMask, K2Node_DynamicCast_AsBP_UIMap_Background) == 0x000020, "Member 'BP_UIMinimap_C_RefreshMapFogMask::K2Node_DynamicCast_AsBP_UIMap_Background' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_RefreshMapFogMask, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_UIMinimap_C_RefreshMapFogMask::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_RefreshMapFogMask, CallFunc_GetMapFogs_ReturnValue) == 0x000030, "Member 'BP_UIMinimap_C_RefreshMapFogMask::CallFunc_GetMapFogs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_RefreshMapFogMask, CallFunc_Array_Get_Item) == 0x000040, "Member 'BP_UIMinimap_C_RefreshMapFogMask::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_RefreshMapFogMask, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000048, "Member 'BP_UIMinimap_C_RefreshMapFogMask::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_RefreshMapFogMask, CallFunc_GetFogBackgroundRenderTarget_ReturnValue) == 0x000050, "Member 'BP_UIMinimap_C_RefreshMapFogMask::CallFunc_GetFogBackgroundRenderTarget_ReturnValue' has a wrong offset!");

// Function BP_UIMinimap.BP_UIMinimap_C.SetMapView
// 0x0018 (0x0018 - 0x0000)
struct BP_UIMinimap_C_SetMapView final
{
public:
	class UMapViewComponent*                      NewMapView;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5670[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X;                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_UIMinimap_C_SetMapView) == 0x000008, "Wrong alignment on BP_UIMinimap_C_SetMapView");
static_assert(sizeof(BP_UIMinimap_C_SetMapView) == 0x000018, "Wrong size on BP_UIMinimap_C_SetMapView");
static_assert(offsetof(BP_UIMinimap_C_SetMapView, NewMapView) == 0x000000, "Member 'BP_UIMinimap_C_SetMapView::NewMapView' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_SetMapView, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_UIMinimap_C_SetMapView::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_SetMapView, CallFunc_BreakVector2D_X) == 0x00000C, "Member 'BP_UIMinimap_C_SetMapView::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_SetMapView, CallFunc_BreakVector2D_Y) == 0x000010, "Member 'BP_UIMinimap_C_SetMapView::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_SetMapView, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_UIMinimap_C_SetMapView::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_SetMapView, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000015, "Member 'BP_UIMinimap_C_SetMapView::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_SetMapView, CallFunc_BooleanAND_ReturnValue) == 0x000016, "Member 'BP_UIMinimap_C_SetMapView::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_UIMinimap.BP_UIMinimap_C.OnTimerInitMap
// 0x00F8 (0x00F8 - 0x0000)
struct BP_UIMinimap_C_OnTimerInitMap final
{
public:
	TArray<class AMapFog*>                        ExistingMapFogs;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class AMapBackground*>                 ExistingMapBackgrounds;                            // 0x0010(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5671[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Array_Index_Variable;                       // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMapBackground*                         CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              CallFunc_GetCachedGeometry_ReturnValue;            // 0x0034(0x0038)(ConstParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5672[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMapTrackerComponent*                   CallFunc_GetMapTracker_ReturnValue;                // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetLocalSize_ReturnValue;                 // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMapTrackerComponent*                   CallFunc_GetMapTracker_ReturnValue_1;              // 0x0080(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              CallFunc_GetCachedGeometry_ReturnValue_1;          // 0x0088(0x0038)(ConstParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5673[0x3];                                     // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetLocalSize_ReturnValue_1;               // 0x00C4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x00D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5674[0x2];                                     // 0x00D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Loop_Counter_Variable;                      // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00DE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5675[0x1];                                     // 0x00DF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5676[0x4];                                     // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AMapBackground*>                 CallFunc_GetMapBackgrounds_ReturnValue;            // 0x00E8(0x0010)(ConstParm, ReferenceParm)
};
static_assert(alignof(BP_UIMinimap_C_OnTimerInitMap) == 0x000008, "Wrong alignment on BP_UIMinimap_C_OnTimerInitMap");
static_assert(sizeof(BP_UIMinimap_C_OnTimerInitMap) == 0x0000F8, "Wrong size on BP_UIMinimap_C_OnTimerInitMap");
static_assert(offsetof(BP_UIMinimap_C_OnTimerInitMap, ExistingMapFogs) == 0x000000, "Member 'BP_UIMinimap_C_OnTimerInitMap::ExistingMapFogs' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_OnTimerInitMap, ExistingMapBackgrounds) == 0x000010, "Member 'BP_UIMinimap_C_OnTimerInitMap::ExistingMapBackgrounds' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_OnTimerInitMap, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_UIMinimap_C_OnTimerInitMap::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_OnTimerInitMap, ___int_Array_Index_Variable) == 0x000024, "Member 'BP_UIMinimap_C_OnTimerInitMap::___int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_OnTimerInitMap, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_UIMinimap_C_OnTimerInitMap::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_OnTimerInitMap, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'BP_UIMinimap_C_OnTimerInitMap::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_OnTimerInitMap, CallFunc_GetCachedGeometry_ReturnValue) == 0x000034, "Member 'BP_UIMinimap_C_OnTimerInitMap::CallFunc_GetCachedGeometry_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_OnTimerInitMap, CallFunc_GetMapTracker_ReturnValue) == 0x000070, "Member 'BP_UIMinimap_C_OnTimerInitMap::CallFunc_GetMapTracker_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_OnTimerInitMap, CallFunc_GetLocalSize_ReturnValue) == 0x000078, "Member 'BP_UIMinimap_C_OnTimerInitMap::CallFunc_GetLocalSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_OnTimerInitMap, CallFunc_GetMapTracker_ReturnValue_1) == 0x000080, "Member 'BP_UIMinimap_C_OnTimerInitMap::CallFunc_GetMapTracker_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_OnTimerInitMap, CallFunc_GetCachedGeometry_ReturnValue_1) == 0x000088, "Member 'BP_UIMinimap_C_OnTimerInitMap::CallFunc_GetCachedGeometry_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_OnTimerInitMap, CallFunc_IsValid_ReturnValue_1) == 0x0000C0, "Member 'BP_UIMinimap_C_OnTimerInitMap::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_OnTimerInitMap, CallFunc_GetLocalSize_ReturnValue_1) == 0x0000C4, "Member 'BP_UIMinimap_C_OnTimerInitMap::CallFunc_GetLocalSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_OnTimerInitMap, CallFunc_BreakVector2D_X) == 0x0000CC, "Member 'BP_UIMinimap_C_OnTimerInitMap::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_OnTimerInitMap, CallFunc_BreakVector2D_Y) == 0x0000D0, "Member 'BP_UIMinimap_C_OnTimerInitMap::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_OnTimerInitMap, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000D4, "Member 'BP_UIMinimap_C_OnTimerInitMap::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_OnTimerInitMap, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x0000D5, "Member 'BP_UIMinimap_C_OnTimerInitMap::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_OnTimerInitMap, ___int_Loop_Counter_Variable) == 0x0000D8, "Member 'BP_UIMinimap_C_OnTimerInitMap::___int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_OnTimerInitMap, CallFunc_BooleanAND_ReturnValue) == 0x0000DC, "Member 'BP_UIMinimap_C_OnTimerInitMap::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_OnTimerInitMap, CallFunc_BooleanAND_ReturnValue_1) == 0x0000DD, "Member 'BP_UIMinimap_C_OnTimerInitMap::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_OnTimerInitMap, CallFunc_Less_IntInt_ReturnValue) == 0x0000DE, "Member 'BP_UIMinimap_C_OnTimerInitMap::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_OnTimerInitMap, CallFunc_Add_IntInt_ReturnValue) == 0x0000E0, "Member 'BP_UIMinimap_C_OnTimerInitMap::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_OnTimerInitMap, CallFunc_GetMapBackgrounds_ReturnValue) == 0x0000E8, "Member 'BP_UIMinimap_C_OnTimerInitMap::CallFunc_GetMapBackgrounds_ReturnValue' has a wrong offset!");

// Function BP_UIMinimap.BP_UIMinimap_C.BroadcastMapView
// 0x0040 (0x0040 - 0x0000)
struct BP_UIMinimap_C_BroadcastMapView final
{
public:
	int32                                         ___int_Loop_Counter_Variable;                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable;                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable_1;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable_1;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5677[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_UIMapFog_C*                         CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5678[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5679[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_UIMapBackground_C*                  CallFunc_Array_Get_Item_1;                         // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_UIMinimap_C_BroadcastMapView) == 0x000008, "Wrong alignment on BP_UIMinimap_C_BroadcastMapView");
static_assert(sizeof(BP_UIMinimap_C_BroadcastMapView) == 0x000040, "Wrong size on BP_UIMinimap_C_BroadcastMapView");
static_assert(offsetof(BP_UIMinimap_C_BroadcastMapView, ___int_Loop_Counter_Variable) == 0x000000, "Member 'BP_UIMinimap_C_BroadcastMapView::___int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_BroadcastMapView, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'BP_UIMinimap_C_BroadcastMapView::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_BroadcastMapView, ___int_Array_Index_Variable) == 0x000008, "Member 'BP_UIMinimap_C_BroadcastMapView::___int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_BroadcastMapView, ___int_Array_Index_Variable_1) == 0x00000C, "Member 'BP_UIMinimap_C_BroadcastMapView::___int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_BroadcastMapView, ___int_Loop_Counter_Variable_1) == 0x000010, "Member 'BP_UIMinimap_C_BroadcastMapView::___int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_BroadcastMapView, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_UIMinimap_C_BroadcastMapView::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_BroadcastMapView, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_UIMinimap_C_BroadcastMapView::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_BroadcastMapView, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'BP_UIMinimap_C_BroadcastMapView::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_BroadcastMapView, CallFunc_Add_IntInt_ReturnValue_1) == 0x000028, "Member 'BP_UIMinimap_C_BroadcastMapView::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_BroadcastMapView, CallFunc_Array_Get_Item_1) == 0x000030, "Member 'BP_UIMinimap_C_BroadcastMapView::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_BroadcastMapView, CallFunc_Array_Length_ReturnValue_1) == 0x000038, "Member 'BP_UIMinimap_C_BroadcastMapView::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_BroadcastMapView, CallFunc_Less_IntInt_ReturnValue_1) == 0x00003C, "Member 'BP_UIMinimap_C_BroadcastMapView::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function BP_UIMinimap.BP_UIMinimap_C.AddMapFog
// 0x0008 (0x0008 - 0x0000)
struct BP_UIMinimap_C_AddMapFog final
{
public:
	class AMapFog*                                MapFog;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_UIMinimap_C_AddMapFog) == 0x000008, "Wrong alignment on BP_UIMinimap_C_AddMapFog");
static_assert(sizeof(BP_UIMinimap_C_AddMapFog) == 0x000008, "Wrong size on BP_UIMinimap_C_AddMapFog");
static_assert(offsetof(BP_UIMinimap_C_AddMapFog, MapFog) == 0x000000, "Member 'BP_UIMinimap_C_AddMapFog::MapFog' has a wrong offset!");

// Function BP_UIMinimap.BP_UIMinimap_C.AutoFindMapView
// 0x0018 (0x0018 - 0x0000)
struct BP_UIMinimap_C_AutoFindMapView final
{
public:
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_567A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMapViewComponent*                      CallFunc_FindMapView_ReturnValue;                  // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_UIMinimap_C_AutoFindMapView) == 0x000008, "Wrong alignment on BP_UIMinimap_C_AutoFindMapView");
static_assert(sizeof(BP_UIMinimap_C_AutoFindMapView) == 0x000018, "Wrong size on BP_UIMinimap_C_AutoFindMapView");
static_assert(offsetof(BP_UIMinimap_C_AutoFindMapView, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000000, "Member 'BP_UIMinimap_C_AutoFindMapView::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_AutoFindMapView, CallFunc_FindMapView_ReturnValue) == 0x000008, "Member 'BP_UIMinimap_C_AutoFindMapView::CallFunc_FindMapView_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_AutoFindMapView, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_UIMinimap_C_AutoFindMapView::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_UIMinimap.BP_UIMinimap_C.AddMapBackground
// 0x0040 (0x0040 - 0x0000)
struct BP_UIMinimap_C_AddMapBackground final
{
public:
	class AMapBackground*                         MapBackground;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FAnchors                               K2Node_MakeStruct_Anchors;                         // 0x0018(0x0010)(NoDestructor)
	class UBP_UIMapBackground_C*                  CallFunc_Create_ReturnValue;                       // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_AddChildToCanvas_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_UIMinimap_C_AddMapBackground) == 0x000008, "Wrong alignment on BP_UIMinimap_C_AddMapBackground");
static_assert(sizeof(BP_UIMinimap_C_AddMapBackground) == 0x000040, "Wrong size on BP_UIMinimap_C_AddMapBackground");
static_assert(offsetof(BP_UIMinimap_C_AddMapBackground, MapBackground) == 0x000000, "Member 'BP_UIMinimap_C_AddMapBackground::MapBackground' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_AddMapBackground, K2Node_MakeStruct_Margin) == 0x000008, "Member 'BP_UIMinimap_C_AddMapBackground::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_AddMapBackground, K2Node_MakeStruct_Anchors) == 0x000018, "Member 'BP_UIMinimap_C_AddMapBackground::K2Node_MakeStruct_Anchors' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_AddMapBackground, CallFunc_Create_ReturnValue) == 0x000028, "Member 'BP_UIMinimap_C_AddMapBackground::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_AddMapBackground, CallFunc_AddChildToCanvas_ReturnValue) == 0x000030, "Member 'BP_UIMinimap_C_AddMapBackground::CallFunc_AddChildToCanvas_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_AddMapBackground, CallFunc_Array_Add_ReturnValue) == 0x000038, "Member 'BP_UIMinimap_C_AddMapBackground::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_UIMinimap.BP_UIMinimap_C.EnforceAspectRatio
// 0x0090 (0x0090 - 0x0000)
struct BP_UIMinimap_C_EnforceAspectRatio final
{
public:
	struct FVector2D                              NewMapSize;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              MapScale;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CandidateMapSize;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ViewAspectRatio;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MapAspectRatio;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_2;                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_2;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_3;                        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_3;                        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x0054(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_4;                        // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_4;                        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_567B[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X_5;                        // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_5;                        // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_567C[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_3;          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_567D[0x3];                                     // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_2;               // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetViewAspectRatio_ReturnValue;           // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_UIMinimap_C_EnforceAspectRatio) == 0x000004, "Wrong alignment on BP_UIMinimap_C_EnforceAspectRatio");
static_assert(sizeof(BP_UIMinimap_C_EnforceAspectRatio) == 0x000090, "Wrong size on BP_UIMinimap_C_EnforceAspectRatio");
static_assert(offsetof(BP_UIMinimap_C_EnforceAspectRatio, NewMapSize) == 0x000000, "Member 'BP_UIMinimap_C_EnforceAspectRatio::NewMapSize' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_EnforceAspectRatio, MapScale) == 0x000008, "Member 'BP_UIMinimap_C_EnforceAspectRatio::MapScale' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_EnforceAspectRatio, CandidateMapSize) == 0x000010, "Member 'BP_UIMinimap_C_EnforceAspectRatio::CandidateMapSize' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_EnforceAspectRatio, ViewAspectRatio) == 0x000018, "Member 'BP_UIMinimap_C_EnforceAspectRatio::ViewAspectRatio' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_EnforceAspectRatio, MapAspectRatio) == 0x00001C, "Member 'BP_UIMinimap_C_EnforceAspectRatio::MapAspectRatio' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_EnforceAspectRatio, CallFunc_BreakVector2D_X) == 0x000020, "Member 'BP_UIMinimap_C_EnforceAspectRatio::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_EnforceAspectRatio, CallFunc_BreakVector2D_Y) == 0x000024, "Member 'BP_UIMinimap_C_EnforceAspectRatio::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_EnforceAspectRatio, CallFunc_BreakVector2D_X_1) == 0x000028, "Member 'BP_UIMinimap_C_EnforceAspectRatio::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_EnforceAspectRatio, CallFunc_BreakVector2D_Y_1) == 0x00002C, "Member 'BP_UIMinimap_C_EnforceAspectRatio::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_EnforceAspectRatio, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000030, "Member 'BP_UIMinimap_C_EnforceAspectRatio::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_EnforceAspectRatio, CallFunc_BreakVector2D_X_2) == 0x000034, "Member 'BP_UIMinimap_C_EnforceAspectRatio::CallFunc_BreakVector2D_X_2' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_EnforceAspectRatio, CallFunc_BreakVector2D_Y_2) == 0x000038, "Member 'BP_UIMinimap_C_EnforceAspectRatio::CallFunc_BreakVector2D_Y_2' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_EnforceAspectRatio, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x00003C, "Member 'BP_UIMinimap_C_EnforceAspectRatio::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_EnforceAspectRatio, CallFunc_BreakVector2D_X_3) == 0x000040, "Member 'BP_UIMinimap_C_EnforceAspectRatio::CallFunc_BreakVector2D_X_3' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_EnforceAspectRatio, CallFunc_BreakVector2D_Y_3) == 0x000044, "Member 'BP_UIMinimap_C_EnforceAspectRatio::CallFunc_BreakVector2D_Y_3' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_EnforceAspectRatio, CallFunc_MakeVector2D_ReturnValue) == 0x000048, "Member 'BP_UIMinimap_C_EnforceAspectRatio::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_EnforceAspectRatio, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x000050, "Member 'BP_UIMinimap_C_EnforceAspectRatio::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_EnforceAspectRatio, CallFunc_MakeVector2D_ReturnValue_1) == 0x000054, "Member 'BP_UIMinimap_C_EnforceAspectRatio::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_EnforceAspectRatio, CallFunc_BreakVector2D_X_4) == 0x00005C, "Member 'BP_UIMinimap_C_EnforceAspectRatio::CallFunc_BreakVector2D_X_4' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_EnforceAspectRatio, CallFunc_BreakVector2D_Y_4) == 0x000060, "Member 'BP_UIMinimap_C_EnforceAspectRatio::CallFunc_BreakVector2D_Y_4' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_EnforceAspectRatio, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000064, "Member 'BP_UIMinimap_C_EnforceAspectRatio::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_EnforceAspectRatio, CallFunc_BreakVector2D_X_5) == 0x000068, "Member 'BP_UIMinimap_C_EnforceAspectRatio::CallFunc_BreakVector2D_X_5' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_EnforceAspectRatio, CallFunc_BreakVector2D_Y_5) == 0x00006C, "Member 'BP_UIMinimap_C_EnforceAspectRatio::CallFunc_BreakVector2D_Y_5' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_EnforceAspectRatio, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000070, "Member 'BP_UIMinimap_C_EnforceAspectRatio::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_EnforceAspectRatio, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000074, "Member 'BP_UIMinimap_C_EnforceAspectRatio::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_EnforceAspectRatio, CallFunc_Divide_FloatFloat_ReturnValue_3) == 0x000078, "Member 'BP_UIMinimap_C_EnforceAspectRatio::CallFunc_Divide_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_EnforceAspectRatio, CallFunc_Not_PreBool_ReturnValue) == 0x00007C, "Member 'BP_UIMinimap_C_EnforceAspectRatio::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_EnforceAspectRatio, CallFunc_MakeVector2D_ReturnValue_2) == 0x000080, "Member 'BP_UIMinimap_C_EnforceAspectRatio::CallFunc_MakeVector2D_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_EnforceAspectRatio, CallFunc_GetViewAspectRatio_ReturnValue) == 0x000088, "Member 'BP_UIMinimap_C_EnforceAspectRatio::CallFunc_GetViewAspectRatio_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_EnforceAspectRatio, CallFunc_SelectFloat_ReturnValue) == 0x00008C, "Member 'BP_UIMinimap_C_EnforceAspectRatio::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function BP_UIMinimap.BP_UIMinimap_C.OnMapBackgroundUnregistered_Event_0
// 0x0008 (0x0008 - 0x0000)
struct BP_UIMinimap_C_OnMapBackgroundUnregistered_Event_0 final
{
public:
	class AMapBackground*                         MapBackground;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_UIMinimap_C_OnMapBackgroundUnregistered_Event_0) == 0x000008, "Wrong alignment on BP_UIMinimap_C_OnMapBackgroundUnregistered_Event_0");
static_assert(sizeof(BP_UIMinimap_C_OnMapBackgroundUnregistered_Event_0) == 0x000008, "Wrong size on BP_UIMinimap_C_OnMapBackgroundUnregistered_Event_0");
static_assert(offsetof(BP_UIMinimap_C_OnMapBackgroundUnregistered_Event_0, MapBackground) == 0x000000, "Member 'BP_UIMinimap_C_OnMapBackgroundUnregistered_Event_0::MapBackground' has a wrong offset!");

// Function BP_UIMinimap.BP_UIMinimap_C.OnMapFogRegistered_Event_0
// 0x0008 (0x0008 - 0x0000)
struct BP_UIMinimap_C_OnMapFogRegistered_Event_0 final
{
public:
	class AMapFog*                                MapFog;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_UIMinimap_C_OnMapFogRegistered_Event_0) == 0x000008, "Wrong alignment on BP_UIMinimap_C_OnMapFogRegistered_Event_0");
static_assert(sizeof(BP_UIMinimap_C_OnMapFogRegistered_Event_0) == 0x000008, "Wrong size on BP_UIMinimap_C_OnMapFogRegistered_Event_0");
static_assert(offsetof(BP_UIMinimap_C_OnMapFogRegistered_Event_0, MapFog) == 0x000000, "Member 'BP_UIMinimap_C_OnMapFogRegistered_Event_0::MapFog' has a wrong offset!");

// Function BP_UIMinimap.BP_UIMinimap_C.OnViewDestroyed_Event_0
// 0x0008 (0x0008 - 0x0000)
struct BP_UIMinimap_C_OnViewDestroyed_Event_0 final
{
public:
	class UMapViewComponent*                      MapView;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_UIMinimap_C_OnViewDestroyed_Event_0) == 0x000008, "Wrong alignment on BP_UIMinimap_C_OnViewDestroyed_Event_0");
static_assert(sizeof(BP_UIMinimap_C_OnViewDestroyed_Event_0) == 0x000008, "Wrong size on BP_UIMinimap_C_OnViewDestroyed_Event_0");
static_assert(offsetof(BP_UIMinimap_C_OnViewDestroyed_Event_0, MapView) == 0x000000, "Member 'BP_UIMinimap_C_OnViewDestroyed_Event_0::MapView' has a wrong offset!");

// Function BP_UIMinimap.BP_UIMinimap_C.ExecuteUbergraph_BP_UIMinimap
// 0x0078 (0x0078 - 0x0000)
struct BP_UIMinimap_C_ExecuteUbergraph_BP_UIMinimap final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_567E[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AMapFog* MapFog)>        K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_567F[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UMapViewComponent* MapView)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_5680[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMapBackground*                         K2Node_CustomEvent_MapBackground;                  // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5681[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMapFog*                                K2Node_CustomEvent_MapFog;                         // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AMapBackground* MapBackground)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0050(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5682[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMapViewComponent*                      K2Node_CustomEvent_MapView;                        // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_UIMinimap_C_ExecuteUbergraph_BP_UIMinimap) == 0x000008, "Wrong alignment on BP_UIMinimap_C_ExecuteUbergraph_BP_UIMinimap");
static_assert(sizeof(BP_UIMinimap_C_ExecuteUbergraph_BP_UIMinimap) == 0x000078, "Wrong size on BP_UIMinimap_C_ExecuteUbergraph_BP_UIMinimap");
static_assert(offsetof(BP_UIMinimap_C_ExecuteUbergraph_BP_UIMinimap, EntryPoint) == 0x000000, "Member 'BP_UIMinimap_C_ExecuteUbergraph_BP_UIMinimap::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_ExecuteUbergraph_BP_UIMinimap, CallFunc_K2_SetTimer_ReturnValue) == 0x000008, "Member 'BP_UIMinimap_C_ExecuteUbergraph_BP_UIMinimap::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_ExecuteUbergraph_BP_UIMinimap, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'BP_UIMinimap_C_ExecuteUbergraph_BP_UIMinimap::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_ExecuteUbergraph_BP_UIMinimap, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_UIMinimap_C_ExecuteUbergraph_BP_UIMinimap::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_ExecuteUbergraph_BP_UIMinimap, K2Node_CreateDelegate_OutputDelegate_1) == 0x000024, "Member 'BP_UIMinimap_C_ExecuteUbergraph_BP_UIMinimap::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_ExecuteUbergraph_BP_UIMinimap, K2Node_CustomEvent_MapBackground) == 0x000038, "Member 'BP_UIMinimap_C_ExecuteUbergraph_BP_UIMinimap::K2Node_CustomEvent_MapBackground' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_ExecuteUbergraph_BP_UIMinimap, CallFunc_IsValid_ReturnValue_1) == 0x000040, "Member 'BP_UIMinimap_C_ExecuteUbergraph_BP_UIMinimap::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_ExecuteUbergraph_BP_UIMinimap, K2Node_CustomEvent_MapFog) == 0x000048, "Member 'BP_UIMinimap_C_ExecuteUbergraph_BP_UIMinimap::K2Node_CustomEvent_MapFog' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_ExecuteUbergraph_BP_UIMinimap, K2Node_CreateDelegate_OutputDelegate_2) == 0x000050, "Member 'BP_UIMinimap_C_ExecuteUbergraph_BP_UIMinimap::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_ExecuteUbergraph_BP_UIMinimap, CallFunc_IsValid_ReturnValue_2) == 0x000060, "Member 'BP_UIMinimap_C_ExecuteUbergraph_BP_UIMinimap::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_ExecuteUbergraph_BP_UIMinimap, K2Node_CustomEvent_MapView) == 0x000068, "Member 'BP_UIMinimap_C_ExecuteUbergraph_BP_UIMinimap::K2Node_CustomEvent_MapView' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_ExecuteUbergraph_BP_UIMinimap, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000070, "Member 'BP_UIMinimap_C_ExecuteUbergraph_BP_UIMinimap::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_ExecuteUbergraph_BP_UIMinimap, CallFunc_IsValid_ReturnValue_3) == 0x000071, "Member 'BP_UIMinimap_C_ExecuteUbergraph_BP_UIMinimap::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_ExecuteUbergraph_BP_UIMinimap, CallFunc_Not_PreBool_ReturnValue) == 0x000072, "Member 'BP_UIMinimap_C_ExecuteUbergraph_BP_UIMinimap::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_ExecuteUbergraph_BP_UIMinimap, CallFunc_BooleanOR_ReturnValue) == 0x000073, "Member 'BP_UIMinimap_C_ExecuteUbergraph_BP_UIMinimap::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_UIMinimap.BP_UIMinimap_C.OnBoxSelected__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct BP_UIMinimap_C_OnBoxSelected__DelegateSignature final
{
public:
	TArray<class UMapIconComponent*>              MapIcons;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          IsLeftMouseButton;                                 // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsShiftSelect;                                     // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsCtrlSelect;                                      // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_UIMinimap_C_OnBoxSelected__DelegateSignature) == 0x000008, "Wrong alignment on BP_UIMinimap_C_OnBoxSelected__DelegateSignature");
static_assert(sizeof(BP_UIMinimap_C_OnBoxSelected__DelegateSignature) == 0x000018, "Wrong size on BP_UIMinimap_C_OnBoxSelected__DelegateSignature");
static_assert(offsetof(BP_UIMinimap_C_OnBoxSelected__DelegateSignature, MapIcons) == 0x000000, "Member 'BP_UIMinimap_C_OnBoxSelected__DelegateSignature::MapIcons' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_OnBoxSelected__DelegateSignature, IsLeftMouseButton) == 0x000010, "Member 'BP_UIMinimap_C_OnBoxSelected__DelegateSignature::IsLeftMouseButton' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_OnBoxSelected__DelegateSignature, IsShiftSelect) == 0x000011, "Member 'BP_UIMinimap_C_OnBoxSelected__DelegateSignature::IsShiftSelect' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_OnBoxSelected__DelegateSignature, IsCtrlSelect) == 0x000012, "Member 'BP_UIMinimap_C_OnBoxSelected__DelegateSignature::IsCtrlSelect' has a wrong offset!");

// Function BP_UIMinimap.BP_UIMinimap_C.OnViewChanged__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_UIMinimap_C_OnViewChanged__DelegateSignature final
{
public:
	class UMapViewComponent*                      Param_MapViewComp;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_UIMinimap_C_OnViewChanged__DelegateSignature) == 0x000008, "Wrong alignment on BP_UIMinimap_C_OnViewChanged__DelegateSignature");
static_assert(sizeof(BP_UIMinimap_C_OnViewChanged__DelegateSignature) == 0x000008, "Wrong size on BP_UIMinimap_C_OnViewChanged__DelegateSignature");
static_assert(offsetof(BP_UIMinimap_C_OnViewChanged__DelegateSignature, Param_MapViewComp) == 0x000000, "Member 'BP_UIMinimap_C_OnViewChanged__DelegateSignature::Param_MapViewComp' has a wrong offset!");

// Function BP_UIMinimap.BP_UIMinimap_C.OnMapClicked__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BP_UIMinimap_C_OnMapClicked__DelegateSignature final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLeftMouseButton;                                 // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5683[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ClickPos;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ClickUV;                                           // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_UIMinimap_C_OnMapClicked__DelegateSignature) == 0x000004, "Wrong alignment on BP_UIMinimap_C_OnMapClicked__DelegateSignature");
static_assert(sizeof(BP_UIMinimap_C_OnMapClicked__DelegateSignature) == 0x000020, "Wrong size on BP_UIMinimap_C_OnMapClicked__DelegateSignature");
static_assert(offsetof(BP_UIMinimap_C_OnMapClicked__DelegateSignature, WorldLocation) == 0x000000, "Member 'BP_UIMinimap_C_OnMapClicked__DelegateSignature::WorldLocation' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_OnMapClicked__DelegateSignature, IsLeftMouseButton) == 0x00000C, "Member 'BP_UIMinimap_C_OnMapClicked__DelegateSignature::IsLeftMouseButton' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_OnMapClicked__DelegateSignature, ClickPos) == 0x000010, "Member 'BP_UIMinimap_C_OnMapClicked__DelegateSignature::ClickPos' has a wrong offset!");
static_assert(offsetof(BP_UIMinimap_C_OnMapClicked__DelegateSignature, ClickUV) == 0x000018, "Member 'BP_UIMinimap_C_OnMapClicked__DelegateSignature::ClickUV' has a wrong offset!");

}

