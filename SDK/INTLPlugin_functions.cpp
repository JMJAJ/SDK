#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: INTLPlugin

#include "Basic.hpp"

#include "INTLPlugin_classes.hpp"
#include "INTLPlugin_parameters.hpp"


namespace SDK
{

// Function INTLPlugin.INTLOutputUtility.FormatAuthRet
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FINTLAuthResult                  Ret                                                    (ConstParm, Parm, NativeAccessSpecifierPublic)
// bool                                    IsSuccess                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ErrorMsg                                               (Parm, OutParm, NativeAccessSpecifierPublic)

void UINTLOutputUtility::FormatAuthRet(const struct FINTLAuthResult& Ret, bool* IsSuccess, class FText* ErrorMsg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLOutputUtility", "FormatAuthRet");

	Params::INTLOutputUtility_FormatAuthRet Parms{};

	Parms.Ret = std::move(Ret);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (IsSuccess != nullptr)
		*IsSuccess = Parms.IsSuccess;

	if (ErrorMsg != nullptr)
		*ErrorMsg = std::move(Parms.ErrorMsg);
}


// Function INTLPlugin.INTLOutputUtility.FormatBaseRet
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FINTLBaseResult                  Ret                                                    (ConstParm, Parm, NativeAccessSpecifierPublic)
// bool                                    IsSuccess                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ErrorMsg                                               (Parm, OutParm, NativeAccessSpecifierPublic)

void UINTLOutputUtility::FormatBaseRet(const struct FINTLBaseResult& Ret, bool* IsSuccess, class FText* ErrorMsg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLOutputUtility", "FormatBaseRet");

	Params::INTLOutputUtility_FormatBaseRet Parms{};

	Parms.Ret = std::move(Ret);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (IsSuccess != nullptr)
		*IsSuccess = Parms.IsSuccess;

	if (ErrorMsg != nullptr)
		*ErrorMsg = std::move(Parms.ErrorMsg);
}


// Function INTLPlugin.INTLOutputUtility.FormatNoticeRet
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FINTLNoticeResult                Ret                                                    (ConstParm, Parm, NativeAccessSpecifierPublic)
// bool                                    IsSuccess                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ErrorMsg                                               (Parm, OutParm, NativeAccessSpecifierPublic)

void UINTLOutputUtility::FormatNoticeRet(const struct FINTLNoticeResult& Ret, bool* IsSuccess, class FText* ErrorMsg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLOutputUtility", "FormatNoticeRet");

	Params::INTLOutputUtility_FormatNoticeRet Parms{};

	Parms.Ret = std::move(Ret);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (IsSuccess != nullptr)
		*IsSuccess = Parms.IsSuccess;

	if (ErrorMsg != nullptr)
		*ErrorMsg = std::move(Parms.ErrorMsg);
}


// Function INTLPlugin.INTLPluginObserver.OnAccountResult
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FINTLAccountResult               Ret                                                    (Parm, NativeAccessSpecifierPublic)

void IINTLPluginObserver::OnAccountResult(const struct FINTLAccountResult& Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTLPluginObserver", "OnAccountResult");

	Params::INTLPluginObserver_OnAccountResult Parms{};

	Parms.Ret = std::move(Ret);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLPluginObserver.OnAuthBaseResult
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FINTLBaseResult                  Ret                                                    (Parm, NativeAccessSpecifierPublic)

void IINTLPluginObserver::OnAuthBaseResult(const struct FINTLBaseResult& Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTLPluginObserver", "OnAuthBaseResult");

	Params::INTLPluginObserver_OnAuthBaseResult Parms{};

	Parms.Ret = std::move(Ret);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLPluginObserver.OnAuthResult
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FINTLAuthResult                  Ret                                                    (Parm, NativeAccessSpecifierPublic)

void IINTLPluginObserver::OnAuthResult(const struct FINTLAuthResult& Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTLPluginObserver", "OnAuthResult");

	Params::INTLPluginObserver_OnAuthResult Parms{};

	Parms.Ret = std::move(Ret);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLPluginObserver.OnComplianceResult
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FINTLComplianceResult            Ret                                                    (Parm, NativeAccessSpecifierPublic)

void IINTLPluginObserver::OnComplianceResult(const struct FINTLComplianceResult& Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTLPluginObserver", "OnComplianceResult");

	Params::INTLPluginObserver_OnComplianceResult Parms{};

	Parms.Ret = std::move(Ret);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLPluginObserver.OnCustomerResult
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FINTLCustomerResult              Ret                                                    (Parm, NativeAccessSpecifierPublic)

void IINTLPluginObserver::OnCustomerResult(const struct FINTLCustomerResult& Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTLPluginObserver", "OnCustomerResult");

	Params::INTLPluginObserver_OnCustomerResult Parms{};

	Parms.Ret = std::move(Ret);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLPluginObserver.OnCutoutResult
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCutoutInfoResult                Ret                                                    (Parm, NativeAccessSpecifierPublic)

void IINTLPluginObserver::OnCutoutResult(const struct FCutoutInfoResult& Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTLPluginObserver", "OnCutoutResult");

	Params::INTLPluginObserver_OnCutoutResult Parms{};

	Parms.Ret = std::move(Ret);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLPluginObserver.OnDeepLinkResult
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FINTLBaseResult                  Ret                                                    (Parm, NativeAccessSpecifierPublic)

void IINTLPluginObserver::OnDeepLinkResult(const struct FINTLBaseResult& Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTLPluginObserver", "OnDeepLinkResult");

	Params::INTLPluginObserver_OnDeepLinkResult Parms{};

	Parms.Ret = std::move(Ret);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLPluginObserver.OnDetectNetworkResult
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FINTLDetectNetworkResult         Ret                                                    (Parm, NativeAccessSpecifierPublic)

void IINTLPluginObserver::OnDetectNetworkResult(const struct FINTLDetectNetworkResult& Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTLPluginObserver", "OnDetectNetworkResult");

	Params::INTLPluginObserver_OnDetectNetworkResult Parms{};

	Parms.Ret = std::move(Ret);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLPluginObserver.OnDeviceLevelResult
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FINTLDeviceLevelResult           Ret                                                    (Parm, NativeAccessSpecifierPublic)

void IINTLPluginObserver::OnDeviceLevelResult(const struct FINTLDeviceLevelResult& Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTLPluginObserver", "OnDeviceLevelResult");

	Params::INTLPluginObserver_OnDeviceLevelResult Parms{};

	Parms.Ret = std::move(Ret);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLPluginObserver.OnDirTreeResult
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FINTLDirTreeResult               Ret                                                    (Parm, NativeAccessSpecifierPublic)

void IINTLPluginObserver::OnDirTreeResult(const struct FINTLDirTreeResult& Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTLPluginObserver", "OnDirTreeResult");

	Params::INTLPluginObserver_OnDirTreeResult Parms{};

	Parms.Ret = std::move(Ret);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLPluginObserver.OnDismissLoginUI
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Canceled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IINTLPluginObserver::OnDismissLoginUI(bool Canceled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTLPluginObserver", "OnDismissLoginUI");

	Params::INTLPluginObserver_OnDismissLoginUI Parms{};

	Parms.Canceled = Canceled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLPluginObserver.OnDNSResult
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FINTLDNSResult                   Ret                                                    (Parm, NativeAccessSpecifierPublic)

void IINTLPluginObserver::OnDNSResult(const struct FINTLDNSResult& Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTLPluginObserver", "OnDNSResult");

	Params::INTLPluginObserver_OnDNSResult Parms{};

	Parms.Ret = std::move(Ret);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLPluginObserver.OnExtendResult
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FINTLExtendResult                Ret                                                    (Parm, NativeAccessSpecifierPublic)

void IINTLPluginObserver::OnExtendResult(const struct FINTLExtendResult& Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTLPluginObserver", "OnExtendResult");

	Params::INTLPluginObserver_OnExtendResult Parms{};

	Parms.Ret = std::move(Ret);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLPluginObserver.OnFriendBaseResult
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FINTLBaseResult                  Ret                                                    (Parm, NativeAccessSpecifierPublic)

void IINTLPluginObserver::OnFriendBaseResult(const struct FINTLBaseResult& Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTLPluginObserver", "OnFriendBaseResult");

	Params::INTLPluginObserver_OnFriendBaseResult Parms{};

	Parms.Ret = std::move(Ret);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLPluginObserver.OnFriendResult
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FINTLFriendResult                Ret                                                    (Parm, NativeAccessSpecifierPublic)

void IINTLPluginObserver::OnFriendResult(const struct FINTLFriendResult& Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTLPluginObserver", "OnFriendResult");

	Params::INTLPluginObserver_OnFriendResult Parms{};

	Parms.Ret = std::move(Ret);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLPluginObserver.OnGetBestIp
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FINTLBestIpResult                Ret                                                    (Parm, NativeAccessSpecifierPublic)

void IINTLPluginObserver::OnGetBestIp(const struct FINTLBestIpResult& Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTLPluginObserver", "OnGetBestIp");

	Params::INTLPluginObserver_OnGetBestIp Parms{};

	Parms.Ret = std::move(Ret);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLPluginObserver.OnGroupReqInfoResult
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FINTLBaseResult                  Ret                                                    (Parm, NativeAccessSpecifierPublic)

void IINTLPluginObserver::OnGroupReqInfoResult(const struct FINTLBaseResult& Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTLPluginObserver", "OnGroupReqInfoResult");

	Params::INTLPluginObserver_OnGroupReqInfoResult Parms{};

	Parms.Ret = std::move(Ret);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLPluginObserver.OnIDTokenResult
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FINTLIDTokenResult               Ret                                                    (Parm, NativeAccessSpecifierPublic)

void IINTLPluginObserver::OnIDTokenResult(const struct FINTLIDTokenResult& Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTLPluginObserver", "OnIDTokenResult");

	Params::INTLPluginObserver_OnIDTokenResult Parms{};

	Parms.Ret = std::move(Ret);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLPluginObserver.OnIPInfoResult
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FINTLLBSIPInfoResult             Ret                                                    (Parm, NativeAccessSpecifierPublic)

void IINTLPluginObserver::OnIPInfoResult(const struct FINTLLBSIPInfoResult& Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTLPluginObserver", "OnIPInfoResult");

	Params::INTLPluginObserver_OnIPInfoResult Parms{};

	Parms.Ret = std::move(Ret);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLPluginObserver.OnLIBindRewardReult
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FINTLLIBindRewardResult          Ret                                                    (Parm, NativeAccessSpecifierPublic)

void IINTLPluginObserver::OnLIBindRewardReult(const struct FINTLLIBindRewardResult& Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTLPluginObserver", "OnLIBindRewardReult");

	Params::INTLPluginObserver_OnLIBindRewardReult Parms{};

	Parms.Ret = std::move(Ret);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLPluginObserver.OnNoticeRequestData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FINTLNoticeResult                Ret                                                    (Parm, NativeAccessSpecifierPublic)

void IINTLPluginObserver::OnNoticeRequestData(const struct FINTLNoticeResult& Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTLPluginObserver", "OnNoticeRequestData");

	Params::INTLPluginObserver_OnNoticeRequestData Parms{};

	Parms.Ret = std::move(Ret);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLPluginObserver.OnPermissionResult
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FINTLPermissionResult            Ret                                                    (Parm, NativeAccessSpecifierPublic)

void IINTLPluginObserver::OnPermissionResult(const struct FINTLPermissionResult& Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTLPluginObserver", "OnPermissionResult");

	Params::INTLPluginObserver_OnPermissionResult Parms{};

	Parms.Ret = std::move(Ret);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLPluginObserver.OnPushBaseResult
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FINTLBaseResult                  Ret                                                    (Parm, NativeAccessSpecifierPublic)

void IINTLPluginObserver::OnPushBaseResult(const struct FINTLBaseResult& Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTLPluginObserver", "OnPushBaseResult");

	Params::INTLPluginObserver_OnPushBaseResult Parms{};

	Parms.Ret = std::move(Ret);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLPluginObserver.OnPushResult
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FINTLPushResult                  Ret                                                    (Parm, NativeAccessSpecifierPublic)

void IINTLPluginObserver::OnPushResult(const struct FINTLPushResult& Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTLPluginObserver", "OnPushResult");

	Params::INTLPluginObserver_OnPushResult Parms{};

	Parms.Ret = std::move(Ret);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLPluginObserver.OnUpdateOptionalRepoInitResult
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FINTLUpdateOptionalRepoInitResultRet                                                    (Parm, NativeAccessSpecifierPublic)

void IINTLPluginObserver::OnUpdateOptionalRepoInitResult(const struct FINTLUpdateOptionalRepoInitResult& Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTLPluginObserver", "OnUpdateOptionalRepoInitResult");

	Params::INTLPluginObserver_OnUpdateOptionalRepoInitResult Parms{};

	Parms.Ret = std::move(Ret);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLPluginObserver.OnUpdateProgressResult
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FINTLUpdateProgress              Ret                                                    (Parm, NativeAccessSpecifierPublic)

void IINTLPluginObserver::OnUpdateProgressResult(const struct FINTLUpdateProgress& Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTLPluginObserver", "OnUpdateProgressResult");

	Params::INTLPluginObserver_OnUpdateProgressResult Parms{};

	Parms.Ret = std::move(Ret);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLPluginObserver.OnUpdateResult
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FINTLUpdateResult                Ret                                                    (Parm, NativeAccessSpecifierPublic)

void IINTLPluginObserver::OnUpdateResult(const struct FINTLUpdateResult& Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTLPluginObserver", "OnUpdateResult");

	Params::INTLPluginObserver_OnUpdateResult Parms{};

	Parms.Ret = std::move(Ret);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLPluginObserver.OnUpdateStartRepoNewVersionInfoResult
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FINTLUpdateStartRepoNewVersionInfoRet                                                    (Parm, NativeAccessSpecifierPublic)

void IINTLPluginObserver::OnUpdateStartRepoNewVersionInfoResult(const struct FINTLUpdateStartRepoNewVersionInfo& Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTLPluginObserver", "OnUpdateStartRepoNewVersionInfoResult");

	Params::INTLPluginObserver_OnUpdateStartRepoNewVersionInfoResult Parms{};

	Parms.Ret = std::move(Ret);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLPluginObserver.OnWebViewResult
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FINTLWebViewResult               Ret                                                    (Parm, NativeAccessSpecifierPublic)

void IINTLPluginObserver::OnWebViewResult(const struct FINTLWebViewResult& Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTLPluginObserver", "OnWebViewResult");

	Params::INTLPluginObserver_OnWebViewResult Parms{};

	Parms.Ret = std::move(Ret);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.AddLocalNotification
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Channel                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FINTLLocalNotification           LocalNotification                                      (ConstParm, Parm, NativeAccessSpecifierPublic)

void UINTLSDKAPI::AddLocalNotification(const class FString& Channel, const struct FINTLLocalNotification& LocalNotification)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "AddLocalNotification");

	Params::INTLSDKAPI_AddLocalNotification Parms{};

	Parms.Channel = std::move(Channel);
	Parms.LocalNotification = std::move(LocalNotification);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.AddLocalNotificationIOS
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Channel                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FINTLLocalNotificationIOS        LocalNotification                                      (ConstParm, Parm, NativeAccessSpecifierPublic)

void UINTLSDKAPI::AddLocalNotificationIOS(const class FString& Channel, const struct FINTLLocalNotificationIOS& LocalNotification)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "AddLocalNotificationIOS");

	Params::INTLSDKAPI_AddLocalNotificationIOS Parms{};

	Parms.Channel = std::move(Channel);
	Parms.LocalNotification = std::move(LocalNotification);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.AddObserver
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IINTLPluginObserver>Observer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)

void UINTLSDKAPI::AddObserver(TScriptInterface<class IINTLPluginObserver> Observer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "AddObserver");

	Params::INTLSDKAPI_AddObserver Parms{};

	Parms.Observer = Observer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.AsyncGetBestIpGroup
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Tag                                                    (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FINTLSourceIpReqInfo             IpReqInfo                                              (ConstParm, Parm, NativeAccessSpecifierPublic)
// int32                                   Timeout                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Scene                                                  (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ProtocolType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::AsyncGetBestIpGroup(const class FString& Tag, const struct FINTLSourceIpReqInfo& IpReqInfo, int32 Timeout, const class FString& Scene, int32 ProtocolType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "AsyncGetBestIpGroup");

	Params::INTLSDKAPI_AsyncGetBestIpGroup Parms{};

	Parms.Tag = std::move(Tag);
	Parms.IpReqInfo = std::move(IpReqInfo);
	Parms.Timeout = Timeout;
	Parms.Scene = std::move(Scene);
	Parms.ProtocolType = ProtocolType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.AutoLogin
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::AutoLogin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "AutoLogin");

	Params::INTLSDKAPI_AutoLogin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.AutoLoginForLI
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::AutoLoginForLI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "AutoLoginForLI");

	Params::INTLSDKAPI_AutoLoginForLI Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.Bind
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EINTLLoginChannel                       Channel                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Permissions                                            (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExtraJson                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::Bind(const EINTLLoginChannel Channel, const class FString& Permissions, const class FString& ExtraJson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "Bind");

	Params::INTLSDKAPI_Bind Parms{};

	Parms.Channel = Channel;
	Parms.Permissions = std::move(Permissions);
	Parms.ExtraJson = std::move(ExtraJson);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.BindUsePluginCache
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::BindUsePluginCache()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "BindUsePluginCache");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.BindWithLoggedinChannel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::BindWithLoggedinChannel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "BindWithLoggedinChannel");

	Params::INTLSDKAPI_BindWithLoggedinChannel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.BuildMapWithLoggedinChannel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::BuildMapWithLoggedinChannel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "BuildMapWithLoggedinChannel");

	Params::INTLSDKAPI_BuildMapWithLoggedinChannel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.CallJS
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonJsParam                                            (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::CallJS(const class FString& JsonJsParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "CallJS");

	Params::INTLSDKAPI_CallJS Parms{};

	Parms.JsonJsParam = std::move(JsonJsParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.CancelAccountDeletion
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::CancelAccountDeletion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "CancelAccountDeletion");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.CancelLIAccountDeletion
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::CancelLIAccountDeletion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "CancelLIAccountDeletion");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.ChangeIsReceiveEmail
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Recv_email                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::ChangeIsReceiveEmail(int32 Recv_email)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ChangeIsReceiveEmail");

	Params::INTLSDKAPI_ChangeIsReceiveEmail Parms{};

	Parms.Recv_email = Recv_email;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.CheckActiveUser
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::CheckActiveUser()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "CheckActiveUser");

	Params::INTLSDKAPI_CheckActiveUser Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.CheckOptionalRepoFiles
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   RepoID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   FilesPath                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FINTLUpdateOptionalRepoFilesStatus>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FINTLUpdateOptionalRepoFilesStatus> UINTLSDKAPI::CheckOptionalRepoFiles(int32 RepoID, const TArray<class FString>& FilesPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "CheckOptionalRepoFiles");

	Params::INTLSDKAPI_CheckOptionalRepoFiles Parms{};

	Parms.RepoID = RepoID;
	Parms.FilesPath = std::move(FilesPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.CheckPermissionStatus
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<EPermissionType>                 PermissionTypeArray                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UINTLSDKAPI::CheckPermissionStatus(const TArray<EPermissionType>& PermissionTypeArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "CheckPermissionStatus");

	Params::INTLSDKAPI_CheckPermissionStatus Parms{};

	Parms.PermissionTypeArray = std::move(PermissionTypeArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.CheckTracking
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::CheckTracking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "CheckTracking");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.ClearLocalNotifications
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Channel                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::ClearLocalNotifications(const class FString& Channel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ClearLocalNotifications");

	Params::INTLSDKAPI_ClearLocalNotifications Parms{};

	Parms.Channel = std::move(Channel);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.CollectionResume
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::CollectionResume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "CollectionResume");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.CollectionStop
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::CollectionStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "CollectionStop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.ComplianceCommitBirthday
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   BirthdayYear                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BirthdayMonth                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BirthdayDay                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::ComplianceCommitBirthday(const int32 BirthdayYear, const int32 BirthdayMonth, const int32 BirthdayDay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ComplianceCommitBirthday");

	Params::INTLSDKAPI_ComplianceCommitBirthday Parms{};

	Parms.BirthdayYear = BirthdayYear;
	Parms.BirthdayMonth = BirthdayMonth;
	Parms.BirthdayDay = BirthdayDay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.ComplianceInit
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::ComplianceInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ComplianceInit");

	Params::INTLSDKAPI_ComplianceInit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.ComplianceInitWithParams
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           GameId                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OpenID                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Token                                                  (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ChannelID                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::ComplianceInitWithParams(const class FString& GameId, const class FString& OpenID, const class FString& Token, const int32 ChannelID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ComplianceInitWithParams");

	Params::INTLSDKAPI_ComplianceInitWithParams Parms{};

	Parms.GameId = std::move(GameId);
	Parms.OpenID = std::move(OpenID);
	Parms.Token = std::move(Token);
	Parms.ChannelID = ChannelID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.ComplianceQueryStrategy
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Region                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::ComplianceQueryStrategy(const class FString& Region)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ComplianceQueryStrategy");

	Params::INTLSDKAPI_ComplianceQueryStrategy Parms{};

	Parms.Region = std::move(Region);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.ComplianceQueryUserInfo
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::ComplianceQueryUserInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ComplianceQueryUserInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.ComplianceQueryUserStatus
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::ComplianceQueryUserStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ComplianceQueryUserStatus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.ComplianceSendEmail
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Email                                                  (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           UserName                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::ComplianceSendEmail(const class FString& Email, const class FString& UserName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ComplianceSendEmail");

	Params::INTLSDKAPI_ComplianceSendEmail Parms{};

	Parms.Email = std::move(Email);
	Parms.UserName = std::move(UserName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.ComplianceSetAdulthood
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EComplianceAgeStatus                    Status                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::ComplianceSetAdulthood(EComplianceAgeStatus Status)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ComplianceSetAdulthood");

	Params::INTLSDKAPI_ComplianceSetAdulthood Parms{};

	Parms.Status = Status;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.ComplianceSetEUAgreeStatus
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EComplianceAgreeStatus                  Status                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::ComplianceSetEUAgreeStatus(EComplianceAgreeStatus Status)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ComplianceSetEUAgreeStatus");

	Params::INTLSDKAPI_ComplianceSetEUAgreeStatus Parms{};

	Parms.Status = Status;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.ComplianceSetParentCertificateStatus
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EComplianceParentCertificateStatus      Status                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::ComplianceSetParentCertificateStatus(EComplianceParentCertificateStatus Status)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ComplianceSetParentCertificateStatus");

	Params::INTLSDKAPI_ComplianceSetParentCertificateStatus Parms{};

	Parms.Status = Status;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.ComplianceSetUserInfoWithAgeStatus
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Region                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EComplianceAgeStatus                    Status                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::ComplianceSetUserInfoWithAgeStatus(const class FString& Region, EComplianceAgeStatus Status)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ComplianceSetUserInfoWithAgeStatus");

	Params::INTLSDKAPI_ComplianceSetUserInfoWithAgeStatus Parms{};

	Parms.Region = std::move(Region);
	Parms.Status = Status;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.ComplianceSetUserInfoWithBirthday
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Region                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BirthdayYear                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BirthdayMonth                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BirthdayDay                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::ComplianceSetUserInfoWithBirthday(const class FString& Region, const int32 BirthdayYear, const int32 BirthdayMonth, const int32 BirthdayDay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ComplianceSetUserInfoWithBirthday");

	Params::INTLSDKAPI_ComplianceSetUserInfoWithBirthday Parms{};

	Parms.Region = std::move(Region);
	Parms.BirthdayYear = BirthdayYear;
	Parms.BirthdayMonth = BirthdayMonth;
	Parms.BirthdayDay = BirthdayDay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.ComplianceSetUserProfile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           GameId                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OpenID                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Token                                                  (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ChannelID                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Region                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::ComplianceSetUserProfile(const class FString& GameId, const class FString& OpenID, const class FString& Token, const int32 ChannelID, const class FString& Region)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ComplianceSetUserProfile");

	Params::INTLSDKAPI_ComplianceSetUserProfile Parms{};

	Parms.GameId = std::move(GameId);
	Parms.OpenID = std::move(OpenID);
	Parms.Token = std::move(Token);
	Parms.ChannelID = ChannelID;
	Parms.Region = std::move(Region);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.ComplianceVerifyCreditCard
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::ComplianceVerifyCreditCard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ComplianceVerifyCreditCard");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.ComplianceVerifyRealName
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::ComplianceVerifyRealName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ComplianceVerifyRealName");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.DeleteLocalNotifications
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Key                                                    (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::DeleteLocalNotifications(const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "DeleteLocalNotifications");

	Params::INTLSDKAPI_DeleteLocalNotifications Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.DeleteTag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Channel                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Tag                                                    (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::DeleteTag(const class FString& Channel, const class FString& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "DeleteTag");

	Params::INTLSDKAPI_DeleteTag Parms{};

	Parms.Channel = std::move(Channel);
	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.DismissLoginUI
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    Canceled                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::DismissLoginUI(const bool Canceled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "DismissLoginUI");

	Params::INTLSDKAPI_DismissLoginUI Parms{};

	Parms.Canceled = Canceled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.DownloadOptionalRepoFiles
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   RepoID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DownloadPriority                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   FilesPath                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    Isbig                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UINTLSDKAPI::DownloadOptionalRepoFiles(int32 RepoID, int32 DownloadPriority, const TArray<class FString>& FilesPath, bool Isbig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "DownloadOptionalRepoFiles");

	Params::INTLSDKAPI_DownloadOptionalRepoFiles Parms{};

	Parms.RepoID = RepoID;
	Parms.DownloadPriority = DownloadPriority;
	Parms.FilesPath = std::move(FilesPath);
	Parms.Isbig = Isbig;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.EnterGame
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::EnterGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "EnterGame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.EnterGameFailed
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FINTLAuthResult                  Ret                                                    (Parm, NativeAccessSpecifierPublic)

void UINTLSDKAPI::EnterGameFailed(const struct FINTLAuthResult& Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "EnterGameFailed");

	Params::INTLSDKAPI_EnterGameFailed Parms{};

	Parms.Ret = std::move(Ret);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.ExtendInvoke
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EINTLLoginChannel                       Channel                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExtendMethodName                                       (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ParamsJson                                             (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UINTLSDKAPI::ExtendInvoke(const EINTLLoginChannel Channel, const class FString& ExtendMethodName, const class FString& ParamsJson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ExtendInvoke");

	Params::INTLSDKAPI_ExtendInvoke Parms{};

	Parms.Channel = Channel;
	Parms.ExtendMethodName = std::move(ExtendMethodName);
	Parms.ParamsJson = std::move(ParamsJson);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.Fetch
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UINTLSDKAPI::Fetch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "Fetch");

	Params::INTLSDKAPI_Fetch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.FlushINTLEvents
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::FlushINTLEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "FlushINTLEvents");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.GenerateTransferCode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           PassWord                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::GenerateTransferCode(const class FString& PassWord)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "GenerateTransferCode");

	Params::INTLSDKAPI_GenerateTransferCode Parms{};

	Parms.PassWord = std::move(PassWord);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.GetAuthEncryptData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UINTLSDKAPI::GetAuthEncryptData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "GetAuthEncryptData");

	Params::INTLSDKAPI_GetAuthEncryptData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.GetAuthResult
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FINTLAuthResult                  LoginRet                                               (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::GetAuthResult(struct FINTLAuthResult* LoginRet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "GetAuthResult");

	Params::INTLSDKAPI_GetAuthResult Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (LoginRet != nullptr)
		*LoginRet = std::move(Parms.LoginRet);

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.GetChannelVersion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Channel                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UINTLSDKAPI::GetChannelVersion(const class FString& Channel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "GetChannelVersion");

	Params::INTLSDKAPI_GetChannelVersion Parms{};

	Parms.Channel = std::move(Channel);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.GetConfig
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Key                                                    (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DefaultVal                                             (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Project                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UINTLSDKAPI::GetConfig(const class FString& Key, const class FString& DefaultVal, const class FString& Project)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "GetConfig");

	Params::INTLSDKAPI_GetConfig Parms{};

	Parms.Key = std::move(Key);
	Parms.DefaultVal = std::move(DefaultVal);
	Parms.Project = std::move(Project);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.GetCurrentAppVersion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UINTLSDKAPI::GetCurrentAppVersion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "GetCurrentAppVersion");

	Params::INTLSDKAPI_GetCurrentAppVersion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.GetCurrentResourceVersion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UINTLSDKAPI::GetCurrentResourceVersion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "GetCurrentResourceVersion");

	Params::INTLSDKAPI_GetCurrentResourceVersion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.GetDeviceInfo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Extra_json                                             (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UINTLSDKAPI::GetDeviceInfo(const class FString& Extra_json)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "GetDeviceInfo");

	Params::INTLSDKAPI_GetDeviceInfo Parms{};

	Parms.Extra_json = std::move(Extra_json);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.GetDeviceLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UINTLSDKAPI::GetDeviceLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "GetDeviceLevel");

	Params::INTLSDKAPI_GetDeviceLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.GetEncryptUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           URL                                                    (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UINTLSDKAPI::GetEncryptUrl(const class FString& URL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "GetEncryptUrl");

	Params::INTLSDKAPI_GetEncryptUrl Parms{};

	Parms.URL = std::move(URL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.GetFINTLAuthResult
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FINTLAuthResult                  ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FINTLAuthResult UINTLSDKAPI::GetFINTLAuthResult()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "GetFINTLAuthResult");

	Params::INTLSDKAPI_GetFINTLAuthResult Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.GetIDTokenResult
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FINTLIDTokenResult               JwtRet                                                 (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::GetIDTokenResult(struct FINTLIDTokenResult* JwtRet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "GetIDTokenResult");

	Params::INTLSDKAPI_GetIDTokenResult Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (JwtRet != nullptr)
		*JwtRet = std::move(Parms.JwtRet);

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.GetInstanceID
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Channel                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UINTLSDKAPI::GetInstanceID(const class FString& Channel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "GetInstanceID");

	Params::INTLSDKAPI_GetInstanceID Parms{};

	Parms.Channel = std::move(Channel);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.GetInstanceIDAsync
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Channel                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UINTLSDKAPI::GetInstanceIDAsync(const class FString& Channel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "GetInstanceIDAsync");

	Params::INTLSDKAPI_GetInstanceIDAsync Parms{};

	Parms.Channel = std::move(Channel);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.GetIpByHost
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Host                                                   (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UINTLSDKAPI::GetIpByHost(const class FString& Host)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "GetIpByHost");

	Params::INTLSDKAPI_GetIpByHost Parms{};

	Parms.Host = std::move(Host);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.GetLIUidAndTokenForAdultCert
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::GetLIUidAndTokenForAdultCert()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "GetLIUidAndTokenForAdultCert");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.GetRewardExtraJson
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UINTLSDKAPI::GetRewardExtraJson()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "GetRewardExtraJson");

	Params::INTLSDKAPI_GetRewardExtraJson Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.GetSDKVersion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UINTLSDKAPI::GetSDKVersion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "GetSDKVersion");

	Params::INTLSDKAPI_GetSDKVersion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.GetStoreChannel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UINTLSDKAPI::GetStoreChannel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "GetStoreChannel");

	Params::INTLSDKAPI_GetStoreChannel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.GotoSystemSetting
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<EPermissionType>                 PermissionTypeArray                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UINTLSDKAPI::GotoSystemSetting(const TArray<EPermissionType>& PermissionTypeArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "GotoSystemSetting");

	Params::INTLSDKAPI_GotoSystemSetting Parms{};

	Parms.PermissionTypeArray = std::move(PermissionTypeArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.Init
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::Init()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "Init");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.InitAnalytics
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::InitAnalytics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "InitAnalytics");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.InitCustomer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FINTLCustomerUserProfile         UserProfile                                            (Parm, OutParm, NativeAccessSpecifierPublic)

void UINTLSDKAPI::InitCustomer(struct FINTLCustomerUserProfile* UserProfile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "InitCustomer");

	Params::INTLSDKAPI_InitCustomer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (UserProfile != nullptr)
		*UserProfile = std::move(Parms.UserProfile);
}


// Function INTLPlugin.INTLSDKAPI.InitFirebaseSDK
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::InitFirebaseSDK()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "InitFirebaseSDK");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.IsAppInstalled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Channel                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExtraJson                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::IsAppInstalled(const class FString& Channel, const class FString& ExtraJson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "IsAppInstalled");

	Params::INTLSDKAPI_IsAppInstalled Parms{};

	Parms.Channel = std::move(Channel);
	Parms.ExtraJson = std::move(ExtraJson);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.LaunchAccountUI
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Type                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExtraJson                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::LaunchAccountUI(const int32 Type, const class FString& ExtraJson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "LaunchAccountUI");

	Params::INTLSDKAPI_LaunchAccountUI Parms{};

	Parms.Type = Type;
	Parms.ExtraJson = std::move(ExtraJson);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.LaunchLoginUI
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::LaunchLoginUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "LaunchLoginUI");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.LoadCutoutData
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::LoadCutoutData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "LoadCutoutData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.LogCrashInfo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EINTLCrashLevel                         Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Tag                                                    (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Log                                                    (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::LogCrashInfo(EINTLCrashLevel Level, const class FString& Tag, const class FString& Log)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "LogCrashInfo");

	Params::INTLSDKAPI_LogCrashInfo Parms{};

	Parms.Level = Level;
	Parms.Tag = std::move(Tag);
	Parms.Log = std::move(Log);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.Login
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EINTLLoginChannel                       Channel                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Permissions                                            (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExtraJson                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::Login(const EINTLLoginChannel Channel, const class FString& Permissions, const class FString& ExtraJson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "Login");

	Params::INTLSDKAPI_Login Parms{};

	Parms.Channel = Channel;
	Parms.Permissions = std::move(Permissions);
	Parms.ExtraJson = std::move(ExtraJson);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.LoginChannelOnly
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EINTLLoginChannel                       Channel                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Permissions                                            (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExtraJson                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::LoginChannelOnly(const EINTLLoginChannel Channel, const class FString& Permissions, const class FString& ExtraJson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "LoginChannelOnly");

	Params::INTLSDKAPI_LoginChannelOnly Parms{};

	Parms.Channel = Channel;
	Parms.Permissions = std::move(Permissions);
	Parms.ExtraJson = std::move(ExtraJson);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.LoginForLI
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EINTLLoginChannel                       Channel                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Permissions                                            (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExtraJson                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::LoginForLI(const EINTLLoginChannel Channel, const class FString& Permissions, const class FString& ExtraJson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "LoginForLI");

	Params::INTLSDKAPI_LoginForLI Parms{};

	Parms.Channel = Channel;
	Parms.Permissions = std::move(Permissions);
	Parms.ExtraJson = std::move(ExtraJson);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.LoginUsePluginCache
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::LoginUsePluginCache()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "LoginUsePluginCache");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.LoginWithBoundChannel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EINTLLoginChannel                       Channel                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           LoginMode                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::LoginWithBoundChannel(const EINTLLoginChannel Channel, const class FString& LoginMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "LoginWithBoundChannel");

	Params::INTLSDKAPI_LoginWithBoundChannel Parms{};

	Parms.Channel = Channel;
	Parms.LoginMode = std::move(LoginMode);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.LoginWithChannel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EINTLLoginChannel                       Channel                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           LoginMode                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::LoginWithChannel(const EINTLLoginChannel Channel, const class FString& LoginMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "LoginWithChannel");

	Params::INTLSDKAPI_LoginWithChannel Parms{};

	Parms.Channel = Channel;
	Parms.LoginMode = std::move(LoginMode);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.LoginWithConfirmCode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ActionType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ConfirmCode                                            (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExtraJson                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::LoginWithConfirmCode(const int32 ActionType, const class FString& ConfirmCode, const class FString& ExtraJson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "LoginWithConfirmCode");

	Params::INTLSDKAPI_LoginWithConfirmCode Parms{};

	Parms.ActionType = ActionType;
	Parms.ConfirmCode = std::move(ConfirmCode);
	Parms.ExtraJson = std::move(ExtraJson);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.LoginWithMappedChannel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EINTLLoginChannel                       Channel                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           LoginMode                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Permissions                                            (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::LoginWithMappedChannel(const EINTLLoginChannel Channel, const class FString& LoginMode, const class FString& Permissions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "LoginWithMappedChannel");

	Params::INTLSDKAPI_LoginWithMappedChannel Parms{};

	Parms.Channel = Channel;
	Parms.LoginMode = std::move(LoginMode);
	Parms.Permissions = std::move(Permissions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.LoginWithPassword
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EINTLLoginChannel                       Channel                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Account                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PassWord                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PhoneAreaCode                                          (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PermissionList                                         (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::LoginWithPassword(const EINTLLoginChannel Channel, const class FString& Account, const class FString& PassWord, const class FString& PhoneAreaCode, const class FString& PermissionList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "LoginWithPassword");

	Params::INTLSDKAPI_LoginWithPassword Parms{};

	Parms.Channel = Channel;
	Parms.Account = std::move(Account);
	Parms.PassWord = std::move(PassWord);
	Parms.PhoneAreaCode = std::move(PhoneAreaCode);
	Parms.PermissionList = std::move(PermissionList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.LoginWithVerifyCode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EINTLLoginChannel                       Channel                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Account                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PassWord                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           VerifyCode                                             (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PhoneAreaCode                                          (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PermissionList                                         (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   OnlyLoginType                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::LoginWithVerifyCode(const EINTLLoginChannel Channel, const class FString& Account, const class FString& PassWord, const class FString& VerifyCode, const class FString& PhoneAreaCode, const class FString& PermissionList, const uint8 OnlyLoginType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "LoginWithVerifyCode");

	Params::INTLSDKAPI_LoginWithVerifyCode Parms{};

	Parms.Channel = Channel;
	Parms.Account = std::move(Account);
	Parms.PassWord = std::move(PassWord);
	Parms.VerifyCode = std::move(VerifyCode);
	Parms.PhoneAreaCode = std::move(PhoneAreaCode);
	Parms.PermissionList = std::move(PermissionList);
	Parms.OnlyLoginType = OnlyLoginType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.Logout
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EINTLLoginChannel                       Channel                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::Logout(const EINTLLoginChannel Channel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "Logout");

	Params::INTLSDKAPI_Logout Parms{};

	Parms.Channel = Channel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.MarkSessionClosed
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::MarkSessionClosed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "MarkSessionClosed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.MarkSessionLoad
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           SessionName                                            (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Extra_json                                             (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::MarkSessionLoad(const class FString& SessionName, const class FString& Extra_json)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "MarkSessionLoad");

	Params::INTLSDKAPI_MarkSessionLoad Parms{};

	Parms.SessionName = std::move(SessionName);
	Parms.Extra_json = std::move(Extra_json);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.MNAInit
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::MNAInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "MNAInit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.ModifyAccountWithLoginState
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           OldPhoneAreaCode                                       (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NewAccount                                             (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NewAccountVerifyCode                                   (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NewPhoneAreaCode                                       (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExtraJson                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::ModifyAccountWithLoginState(const class FString& OldPhoneAreaCode, const class FString& NewAccount, const class FString& NewAccountVerifyCode, const class FString& NewPhoneAreaCode, const class FString& ExtraJson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ModifyAccountWithLoginState");

	Params::INTLSDKAPI_ModifyAccountWithLoginState Parms{};

	Parms.OldPhoneAreaCode = std::move(OldPhoneAreaCode);
	Parms.NewAccount = std::move(NewAccount);
	Parms.NewAccountVerifyCode = std::move(NewAccountVerifyCode);
	Parms.NewPhoneAreaCode = std::move(NewPhoneAreaCode);
	Parms.ExtraJson = std::move(ExtraJson);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.ModifyAccountWithPassword
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           OldAccount                                             (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OldPhoneAreaCode                                       (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PassWord                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NewAccount                                             (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NewAccountVerifyCode                                   (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NewPhoneAreaCode                                       (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExtraJson                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::ModifyAccountWithPassword(const class FString& OldAccount, const class FString& OldPhoneAreaCode, const class FString& PassWord, const class FString& NewAccount, const class FString& NewAccountVerifyCode, const class FString& NewPhoneAreaCode, const class FString& ExtraJson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ModifyAccountWithPassword");

	Params::INTLSDKAPI_ModifyAccountWithPassword Parms{};

	Parms.OldAccount = std::move(OldAccount);
	Parms.OldPhoneAreaCode = std::move(OldPhoneAreaCode);
	Parms.PassWord = std::move(PassWord);
	Parms.NewAccount = std::move(NewAccount);
	Parms.NewAccountVerifyCode = std::move(NewAccountVerifyCode);
	Parms.NewPhoneAreaCode = std::move(NewPhoneAreaCode);
	Parms.ExtraJson = std::move(ExtraJson);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.ModifyAccountWithVerifyCode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           OldAccount                                             (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OldAccountVerifyCode                                   (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OldPhoneAreaCode                                       (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NewAccount                                             (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NewAccountVerifyCode                                   (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NewPhoneAreaCode                                       (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExtraJson                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::ModifyAccountWithVerifyCode(const class FString& OldAccount, const class FString& OldAccountVerifyCode, const class FString& OldPhoneAreaCode, const class FString& NewAccount, const class FString& NewAccountVerifyCode, const class FString& NewPhoneAreaCode, const class FString& ExtraJson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ModifyAccountWithVerifyCode");

	Params::INTLSDKAPI_ModifyAccountWithVerifyCode Parms{};

	Parms.OldAccount = std::move(OldAccount);
	Parms.OldAccountVerifyCode = std::move(OldAccountVerifyCode);
	Parms.OldPhoneAreaCode = std::move(OldPhoneAreaCode);
	Parms.NewAccount = std::move(NewAccount);
	Parms.NewAccountVerifyCode = std::move(NewAccountVerifyCode);
	Parms.NewPhoneAreaCode = std::move(NewPhoneAreaCode);
	Parms.ExtraJson = std::move(ExtraJson);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.ModifyDataProtectionAcceptance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           PPVersion                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           TOSVersion                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::ModifyDataProtectionAcceptance(const class FString& PPVersion, const class FString& TOSVersion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ModifyDataProtectionAcceptance");

	Params::INTLSDKAPI_ModifyDataProtectionAcceptance Parms{};

	Parms.PPVersion = std::move(PPVersion);
	Parms.TOSVersion = std::move(TOSVersion);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.ModifyDownloadPriority
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   RepoID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TaskId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DownloadPriority                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::ModifyDownloadPriority(int32 RepoID, int32 TaskId, int32 DownloadPriority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ModifyDownloadPriority");

	Params::INTLSDKAPI_ModifyDownloadPriority Parms{};

	Parms.RepoID = RepoID;
	Parms.TaskId = TaskId;
	Parms.DownloadPriority = DownloadPriority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.ModifyLegalDocumentsAcceptedVersion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           AcceptedVersionsJson                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::ModifyLegalDocumentsAcceptedVersion(const class FString& AcceptedVersionsJson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ModifyLegalDocumentsAcceptedVersion");

	Params::INTLSDKAPI_ModifyLegalDocumentsAcceptedVersion Parms{};

	Parms.AcceptedVersionsJson = std::move(AcceptedVersionsJson);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.ModifyProfile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FINTLAccountProfile              UserProfile                                            (ConstParm, Parm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::ModifyProfile(const struct FINTLAccountProfile& UserProfile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ModifyProfile");

	Params::INTLSDKAPI_ModifyProfile Parms{};

	Parms.UserProfile = std::move(UserProfile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.NoticeRequestData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Region                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           LangType                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExtraJson                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UINTLSDKAPI::NoticeRequestData(const class FString& Region, const class FString& LangType, const class FString& ExtraJson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "NoticeRequestData");

	Params::INTLSDKAPI_NoticeRequestData Parms{};

	Parms.Region = std::move(Region);
	Parms.LangType = std::move(LangType);
	Parms.ExtraJson = std::move(ExtraJson);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.OnTickEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::OnTickEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "OnTickEvent");

	Params::INTLSDKAPI_OnTickEvent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.OpenUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           URL                                                    (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EINTLWebViewOrientation                 ScreenOrientation                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    FullScreenEnable                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    EncryptEnable                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SystemBrowserEnable                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExtraJson                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::OpenUrl(const class FString& URL, EINTLWebViewOrientation ScreenOrientation, bool FullScreenEnable, bool EncryptEnable, bool SystemBrowserEnable, const class FString& ExtraJson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "OpenUrl");

	Params::INTLSDKAPI_OpenUrl Parms{};

	Parms.URL = std::move(URL);
	Parms.ScreenOrientation = ScreenOrientation;
	Parms.FullScreenEnable = FullScreenEnable;
	Parms.EncryptEnable = EncryptEnable;
	Parms.SystemBrowserEnable = SystemBrowserEnable;
	Parms.ExtraJson = std::move(ExtraJson);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.PostFrameTimeInSession
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::PostFrameTimeInSession(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "PostFrameTimeInSession");

	Params::INTLSDKAPI_PostFrameTimeInSession Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.PostNetworkLatencyInSession
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   LatencyMs                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::PostNetworkLatencyInSession(int32 LatencyMs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "PostNetworkLatencyInSession");

	Params::INTLSDKAPI_PostNetworkLatencyInSession Parms{};

	Parms.LatencyMs = LatencyMs;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.QueryAccountProfile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::QueryAccountProfile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "QueryAccountProfile");

	Params::INTLSDKAPI_QueryAccountProfile Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.QueryAccountRegistrationInfo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::QueryAccountRegistrationInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "QueryAccountRegistrationInfo");

	Params::INTLSDKAPI_QueryAccountRegistrationInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.QueryActiveUser
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::QueryActiveUser()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "QueryActiveUser");

	Params::INTLSDKAPI_QueryActiveUser Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.QueryBindInfo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::QueryBindInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "QueryBindInfo");

	Params::INTLSDKAPI_QueryBindInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.QueryBindRewardStatus
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           EventID                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::QueryBindRewardStatus(const class FString& EventID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "QueryBindRewardStatus");

	Params::INTLSDKAPI_QueryBindRewardStatus Parms{};

	Parms.EventID = std::move(EventID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.QueryCanBind
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ChannelID                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AccountPlatType                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Account                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PhoneAreaCode                                          (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExtraJson                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::QueryCanBind(const int32 ChannelID, const int32 AccountPlatType, const class FString& Account, const class FString& PhoneAreaCode, const class FString& ExtraJson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "QueryCanBind");

	Params::INTLSDKAPI_QueryCanBind Parms{};

	Parms.ChannelID = ChannelID;
	Parms.AccountPlatType = AccountPlatType;
	Parms.Account = std::move(Account);
	Parms.PhoneAreaCode = std::move(PhoneAreaCode);
	Parms.ExtraJson = std::move(ExtraJson);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.QueryDataProtectionAcceptance
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::QueryDataProtectionAcceptance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "QueryDataProtectionAcceptance");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.QueryDeviceLevel
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::QueryDeviceLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "QueryDeviceLevel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.QueryDirNode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   TreeId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NodeId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::QueryDirNode(int32 TreeId, int32 NodeId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "QueryDirNode");

	Params::INTLSDKAPI_QueryDirNode Parms{};

	Parms.TreeId = TreeId;
	Parms.NodeId = NodeId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.QueryDirTree
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   TreeId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::QueryDirTree(int32 TreeId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "QueryDirTree");

	Params::INTLSDKAPI_QueryDirTree Parms{};

	Parms.TreeId = TreeId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.QueryFriends
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EINTLLoginChannel                       Channel                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Page                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsInGame                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExtraJson                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::QueryFriends(const EINTLLoginChannel Channel, const int32 Page, const int32 Count, const bool IsInGame, const class FString& ExtraJson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "QueryFriends");

	Params::INTLSDKAPI_QueryFriends Parms{};

	Parms.Channel = Channel;
	Parms.Page = Page;
	Parms.Count = Count;
	Parms.IsInGame = IsInGame;
	Parms.ExtraJson = std::move(ExtraJson);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.QueryIDToken
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::QueryIDToken()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "QueryIDToken");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.QueryIpByHost
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Host                                                   (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::QueryIpByHost(const class FString& Host)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "QueryIpByHost");

	Params::INTLSDKAPI_QueryIpByHost Parms{};

	Parms.Host = std::move(Host);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.QueryIsEEA
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Region                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::QueryIsEEA(const class FString& Region)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "QueryIsEEA");

	Params::INTLSDKAPI_QueryIsEEA Parms{};

	Parms.Region = std::move(Region);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.QueryIsReceiveEmail
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Account                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PhoneAreaCode                                          (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExtraJson                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::QueryIsReceiveEmail(const class FString& Account, const class FString& PhoneAreaCode, const class FString& ExtraJson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "QueryIsReceiveEmail");

	Params::INTLSDKAPI_QueryIsReceiveEmail Parms{};

	Parms.Account = std::move(Account);
	Parms.PhoneAreaCode = std::move(PhoneAreaCode);
	Parms.ExtraJson = std::move(ExtraJson);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.QueryLegalDocumentsAcceptedVersion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::QueryLegalDocumentsAcceptedVersion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "QueryLegalDocumentsAcceptedVersion");

	Params::INTLSDKAPI_QueryLegalDocumentsAcceptedVersion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.QueryLoginRecord
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::QueryLoginRecord()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "QueryLoginRecord");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.QueryNeedUpgradeAndProvisionInfo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::QueryNeedUpgradeAndProvisionInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "QueryNeedUpgradeAndProvisionInfo");

	Params::INTLSDKAPI_QueryNeedUpgradeAndProvisionInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.QueryRegisterStatus
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Account                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PhoneAreaCode                                          (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExtraJson                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::QueryRegisterStatus(const class FString& Account, const class FString& PhoneAreaCode, const class FString& ExtraJson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "QueryRegisterStatus");

	Params::INTLSDKAPI_QueryRegisterStatus Parms{};

	Parms.Account = std::move(Account);
	Parms.PhoneAreaCode = std::move(PhoneAreaCode);
	Parms.ExtraJson = std::move(ExtraJson);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.QueryRewardListStatus
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           EventIds                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExtraJson                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::QueryRewardListStatus(const class FString& EventIds, const class FString& ExtraJson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "QueryRewardListStatus");

	Params::INTLSDKAPI_QueryRewardListStatus Parms{};

	Parms.EventIds = std::move(EventIds);
	Parms.ExtraJson = std::move(ExtraJson);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.QueryTransferCode
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::QueryTransferCode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "QueryTransferCode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.QueryUserInfo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::QueryUserInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "QueryUserInfo");

	Params::INTLSDKAPI_QueryUserInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.QueryUserInfoWithOpenId
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           OpenID                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Is_openid                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Channel_id                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::QueryUserInfoWithOpenId(const class FString& OpenID, const bool& Is_openid, const int32& Channel_id)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "QueryUserInfoWithOpenId");

	Params::INTLSDKAPI_QueryUserInfoWithOpenId Parms{};

	Parms.OpenID = std::move(OpenID);
	Parms.Is_openid = Is_openid;
	Parms.Channel_id = Channel_id;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.QueryUserNameStatus
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           UserName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::QueryUserNameStatus(const class FString& UserName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "QueryUserNameStatus");

	Params::INTLSDKAPI_QueryUserNameStatus Parms{};

	Parms.UserName = std::move(UserName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.QueryVerifyCodeStatus
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Account                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           VerifyCode                                             (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVerifyCodeType                         CodeType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PhoneAreaCode                                          (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExtraJson                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::QueryVerifyCodeStatus(const class FString& Account, const class FString& VerifyCode, const EVerifyCodeType CodeType, const class FString& PhoneAreaCode, const class FString& ExtraJson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "QueryVerifyCodeStatus");

	Params::INTLSDKAPI_QueryVerifyCodeStatus Parms{};

	Parms.Account = std::move(Account);
	Parms.VerifyCode = std::move(VerifyCode);
	Parms.CodeType = CodeType;
	Parms.PhoneAreaCode = std::move(PhoneAreaCode);
	Parms.ExtraJson = std::move(ExtraJson);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.Register
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Account                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PassWord                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           VerifyCode                                             (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PhoneAreaCode                                          (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FINTLAccountProfile              UserProfile                                            (ConstParm, Parm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::Register(const class FString& Account, const class FString& PassWord, const class FString& VerifyCode, const class FString& PhoneAreaCode, const struct FINTLAccountProfile& UserProfile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "Register");

	Params::INTLSDKAPI_Register Parms{};

	Parms.Account = std::move(Account);
	Parms.PassWord = std::move(PassWord);
	Parms.VerifyCode = std::move(VerifyCode);
	Parms.PhoneAreaCode = std::move(PhoneAreaCode);
	Parms.UserProfile = std::move(UserProfile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.RegisterPush
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Channel                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Account                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::RegisterPush(const class FString& Channel, const class FString& Account)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "RegisterPush");

	Params::INTLSDKAPI_RegisterPush Parms{};

	Parms.Channel = std::move(Channel);
	Parms.Account = std::move(Account);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.RemoveHostCache
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Host                                                   (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::RemoveHostCache(const class FString& Host)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "RemoveHostCache");

	Params::INTLSDKAPI_RemoveHostCache Parms{};

	Parms.Host = std::move(Host);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.RemoveObserver
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IINTLPluginObserver>Observer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)

void UINTLSDKAPI::RemoveObserver(TScriptInterface<class IINTLPluginObserver> Observer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "RemoveObserver");

	Params::INTLSDKAPI_RemoveObserver Parms{};

	Parms.Observer = Observer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.ReportBinary
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           EventName                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Data                                                   (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Length                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SpecificChannel                                        (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::ReportBinary(const class FString& EventName, const class FString& Data, int32 Length, const class FString& SpecificChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ReportBinary");

	Params::INTLSDKAPI_ReportBinary Parms{};

	Parms.EventName = std::move(EventName);
	Parms.Data = std::move(Data);
	Parms.Length = Length;
	Parms.SpecificChannel = std::move(SpecificChannel);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.ReportCustomEventStep
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           EventName                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Step                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           StepName                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Result                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ErrorCode                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, class FString>      ParamsMap                                              (ConstParm, Parm, NativeAccessSpecifierPublic)

void UINTLSDKAPI::ReportCustomEventStep(const class FString& EventName, int32 Step, const class FString& StepName, bool Result, int32 ErrorCode, const TMap<class FString, class FString>& ParamsMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ReportCustomEventStep");

	Params::INTLSDKAPI_ReportCustomEventStep Parms{};

	Parms.EventName = std::move(EventName);
	Parms.Step = Step;
	Parms.StepName = std::move(StepName);
	Parms.Result = Result;
	Parms.ErrorCode = ErrorCode;
	Parms.ParamsMap = std::move(ParamsMap);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.ReportEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           EventName                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, class FString>      ParamsMap                                              (Parm, NativeAccessSpecifierPublic)
// class FString                           SpecificChannel                                        (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExtraJson                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::ReportEvent(const class FString& EventName, const TMap<class FString, class FString>& ParamsMap, const class FString& SpecificChannel, const class FString& ExtraJson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ReportEvent");

	Params::INTLSDKAPI_ReportEvent Parms{};

	Parms.EventName = std::move(EventName);
	Parms.ParamsMap = std::move(ParamsMap);
	Parms.SpecificChannel = std::move(SpecificChannel);
	Parms.ExtraJson = std::move(ExtraJson);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.ReportException
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExceptionName                                          (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExceptionMsg                                           (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExceptionStack                                         (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, class FString>      ExtInfo                                                (Parm, NativeAccessSpecifierPublic)

void UINTLSDKAPI::ReportException(int32 Type, const class FString& ExceptionName, const class FString& ExceptionMsg, const class FString& ExceptionStack, const TMap<class FString, class FString>& ExtInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ReportException");

	Params::INTLSDKAPI_ReportException Parms{};

	Parms.Type = Type;
	Parms.ExceptionName = std::move(ExceptionName);
	Parms.ExceptionMsg = std::move(ExceptionMsg);
	Parms.ExceptionStack = std::move(ExceptionStack);
	Parms.ExtInfo = std::move(ExtInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.ReportFunnel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EFINTLFunnelStep                        Step_name                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Error_code                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::ReportFunnel(EFINTLFunnelStep Step_name, int32 Error_code)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ReportFunnel");

	Params::INTLSDKAPI_ReportFunnel Parms{};

	Parms.Step_name = Step_name;
	Parms.Error_code = Error_code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.ReportLoginStep
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Step                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           StepName                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Result                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ErrorCode                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, class FString>      ParamsMap                                              (ConstParm, Parm, NativeAccessSpecifierPublic)

void UINTLSDKAPI::ReportLoginStep(int32 Step, const class FString& StepName, bool Result, int32 ErrorCode, const TMap<class FString, class FString>& ParamsMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ReportLoginStep");

	Params::INTLSDKAPI_ReportLoginStep Parms{};

	Parms.Step = Step;
	Parms.StepName = std::move(StepName);
	Parms.Result = Result;
	Parms.ErrorCode = ErrorCode;
	Parms.ParamsMap = std::move(ParamsMap);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.ReportPayStep
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Step                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           StepName                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Result                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ErrorCode                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, class FString>      ParamsMap                                              (ConstParm, Parm, NativeAccessSpecifierPublic)

void UINTLSDKAPI::ReportPayStep(int32 Step, const class FString& StepName, bool Result, int32 ErrorCode, const TMap<class FString, class FString>& ParamsMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ReportPayStep");

	Params::INTLSDKAPI_ReportPayStep Parms{};

	Parms.Step = Step;
	Parms.StepName = std::move(StepName);
	Parms.Result = Result;
	Parms.ErrorCode = ErrorCode;
	Parms.ParamsMap = std::move(ParamsMap);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.ReportRevenue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           EventName                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Currency                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           RevenueValue                                           (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, class FString>      ParamsMap                                              (Parm, NativeAccessSpecifierPublic)
// class FString                           SpecificChannel                                        (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExtraJson                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::ReportRevenue(const class FString& EventName, const class FString& Currency, const class FString& RevenueValue, const TMap<class FString, class FString>& ParamsMap, const class FString& SpecificChannel, const class FString& ExtraJson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ReportRevenue");

	Params::INTLSDKAPI_ReportRevenue Parms{};

	Parms.EventName = std::move(EventName);
	Parms.Currency = std::move(Currency);
	Parms.RevenueValue = std::move(RevenueValue);
	Parms.ParamsMap = std::move(ParamsMap);
	Parms.SpecificChannel = std::move(SpecificChannel);
	Parms.ExtraJson = std::move(ExtraJson);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.RequestAccountInfo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Extra_json                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::RequestAccountInfo(const class FString& Extra_json)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "RequestAccountInfo");

	Params::INTLSDKAPI_RequestAccountInfo Parms{};

	Parms.Extra_json = std::move(Extra_json);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.RequestIPInfo
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::RequestIPInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "RequestIPInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.RequestPermission
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<EPermissionType>                 PermissionTypeArray                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UINTLSDKAPI::RequestPermission(const TArray<EPermissionType>& PermissionTypeArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "RequestPermission");

	Params::INTLSDKAPI_RequestPermission Parms{};

	Parms.PermissionTypeArray = std::move(PermissionTypeArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.RequestTracking
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::RequestTracking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "RequestTracking");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.RequestTrackingAuthorization
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::RequestTrackingAuthorization()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "RequestTrackingAuthorization");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.RequestVerifyCode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Account                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVerifyCodeType                         CodeType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PhoneAreaCode                                          (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExtraJson                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::RequestVerifyCode(const class FString& Account, const EVerifyCodeType CodeType, const class FString& PhoneAreaCode, const class FString& ExtraJson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "RequestVerifyCode");

	Params::INTLSDKAPI_RequestVerifyCode Parms{};

	Parms.Account = std::move(Account);
	Parms.CodeType = CodeType;
	Parms.PhoneAreaCode = std::move(PhoneAreaCode);
	Parms.ExtraJson = std::move(ExtraJson);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.ResetGuest
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::ResetGuest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ResetGuest");

	Params::INTLSDKAPI_ResetGuest Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.ResetPasswordWithOldPassword
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Account                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OldPassword                                            (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PhoneAreaCode                                          (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NewPassword                                            (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExtraJson                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::ResetPasswordWithOldPassword(const class FString& Account, const class FString& OldPassword, const class FString& PhoneAreaCode, const class FString& NewPassword, const class FString& ExtraJson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ResetPasswordWithOldPassword");

	Params::INTLSDKAPI_ResetPasswordWithOldPassword Parms{};

	Parms.Account = std::move(Account);
	Parms.OldPassword = std::move(OldPassword);
	Parms.PhoneAreaCode = std::move(PhoneAreaCode);
	Parms.NewPassword = std::move(NewPassword);
	Parms.ExtraJson = std::move(ExtraJson);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.ResetPasswordWithVerifyCode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Account                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           VerifyCode                                             (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PhoneAreaCode                                          (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NewPassword                                            (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExtraJson                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::ResetPasswordWithVerifyCode(const class FString& Account, const class FString& VerifyCode, const class FString& PhoneAreaCode, const class FString& NewPassword, const class FString& ExtraJson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ResetPasswordWithVerifyCode");

	Params::INTLSDKAPI_ResetPasswordWithVerifyCode Parms{};

	Parms.Account = std::move(Account);
	Parms.VerifyCode = std::move(VerifyCode);
	Parms.PhoneAreaCode = std::move(PhoneAreaCode);
	Parms.NewPassword = std::move(NewPassword);
	Parms.ExtraJson = std::move(ExtraJson);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.Restart
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::Restart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "Restart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.RevokeChannelToken
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::RevokeChannelToken()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "RevokeChannelToken");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.SendBindReward
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           EventID                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExtraJson                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::SendBindReward(const class FString& EventID, const class FString& ExtraJson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "SendBindReward");

	Params::INTLSDKAPI_SendBindReward Parms{};

	Parms.EventID = std::move(EventID);
	Parms.ExtraJson = std::move(ExtraJson);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.SendMessage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FINTLFriendReqInfo               Info                                                   (ConstParm, Parm, NativeAccessSpecifierPublic)
// class FString                           Channel                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::SendMessage(const struct FINTLFriendReqInfo& Info, const class FString& Channel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "SendMessage");

	Params::INTLSDKAPI_SendMessage Parms{};

	Parms.Info = std::move(Info);
	Parms.Channel = std::move(Channel);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.SetAccountInfo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EINTLLoginChannel                       Channel                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ChannelID                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           LangType                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AccountPlatType                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::SetAccountInfo(const EINTLLoginChannel Channel, const int32 ChannelID, const class FString& LangType, const int32 AccountPlatType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "SetAccountInfo");

	Params::INTLSDKAPI_SetAccountInfo Parms{};

	Parms.Channel = Channel;
	Parms.ChannelID = ChannelID;
	Parms.LangType = std::move(LangType);
	Parms.AccountPlatType = AccountPlatType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.SetAuthEncryptData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Auth_data                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Overwrite                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::SetAuthEncryptData(const class FString& Auth_data, bool Overwrite)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "SetAuthEncryptData");

	Params::INTLSDKAPI_SetAuthEncryptData Parms{};

	Parms.Auth_data = std::move(Auth_data);
	Parms.Overwrite = Overwrite;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.SetBackgroundUpdateNotificationContentTitle
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Title                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::SetBackgroundUpdateNotificationContentTitle(const class FString& Title)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "SetBackgroundUpdateNotificationContentTitle");

	Params::INTLSDKAPI_SetBackgroundUpdateNotificationContentTitle Parms{};

	Parms.Title = std::move(Title);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.SetCrashSightAppVersion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           AppVersion                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::SetCrashSightAppVersion(const class FString& AppVersion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "SetCrashSightAppVersion");

	Params::INTLSDKAPI_SetCrashSightAppVersion Parms{};

	Parms.AppVersion = std::move(AppVersion);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.SetCrashUserId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           UserId                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::SetCrashUserId(const class FString& UserId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "SetCrashUserId");

	Params::INTLSDKAPI_SetCrashUserId Parms{};

	Parms.UserId = std::move(UserId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.SetCrashUserValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Key                                                    (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Value                                                  (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::SetCrashUserValue(const class FString& Key, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "SetCrashUserValue");

	Params::INTLSDKAPI_SetCrashUserValue Parms{};

	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.SetDefaultSharedStorageDirectory
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Dir                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::SetDefaultSharedStorageDirectory(const class FString& Dir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "SetDefaultSharedStorageDirectory");

	Params::INTLSDKAPI_SetDefaultSharedStorageDirectory Parms{};

	Parms.Dir = std::move(Dir);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.SetDefaultUserStorageDirectory
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Dir                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::SetDefaultUserStorageDirectory(const class FString& Dir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "SetDefaultUserStorageDirectory");

	Params::INTLSDKAPI_SetDefaultUserStorageDirectory Parms{};

	Parms.Dir = std::move(Dir);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.SetDeviceLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::SetDeviceLevel(int32 Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "SetDeviceLevel");

	Params::INTLSDKAPI_SetDeviceLevel Parms{};

	Parms.Level = Level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.SetDNSRegion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Region                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::SetDNSRegion(const class FString& Region)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "SetDNSRegion");

	Params::INTLSDKAPI_SetDNSRegion Parms{};

	Parms.Region = std::move(Region);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.SetMaxDownloadSpeed
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Speed                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::SetMaxDownloadSpeed(int32 Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "SetMaxDownloadSpeed");

	Params::INTLSDKAPI_SetMaxDownloadSpeed Parms{};

	Parms.Speed = Speed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.SetProvision
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           UserAgreedGameTos                                      (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           UserAgreedGamePP                                       (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           UserAgreedLiPP                                         (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           UserAgreedLiDt                                         (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           UserAgreedLiTos                                        (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   IsRecvEmail                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::SetProvision(const class FString& UserAgreedGameTos, const class FString& UserAgreedGamePP, const class FString& UserAgreedLiPP, const class FString& UserAgreedLiDt, const class FString& UserAgreedLiTos, const int32 IsRecvEmail)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "SetProvision");

	Params::INTLSDKAPI_SetProvision Parms{};

	Parms.UserAgreedGameTos = std::move(UserAgreedGameTos);
	Parms.UserAgreedGamePP = std::move(UserAgreedGamePP);
	Parms.UserAgreedLiPP = std::move(UserAgreedLiPP);
	Parms.UserAgreedLiDt = std::move(UserAgreedLiDt);
	Parms.UserAgreedLiTos = std::move(UserAgreedLiTos);
	Parms.IsRecvEmail = IsRecvEmail;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.SetRewardExtraJson
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ExtraJson                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::SetRewardExtraJson(const class FString& ExtraJson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "SetRewardExtraJson");

	Params::INTLSDKAPI_SetRewardExtraJson Parms{};

	Parms.ExtraJson = std::move(ExtraJson);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.SetSessionExtraParam
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Extra_json                                             (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::SetSessionExtraParam(const class FString& Extra_json)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "SetSessionExtraParam");

	Params::INTLSDKAPI_SetSessionExtraParam Parms{};

	Parms.Extra_json = std::move(Extra_json);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.SetTag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Channel                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Tag                                                    (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::SetTag(const class FString& Channel, const class FString& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "SetTag");

	Params::INTLSDKAPI_SetTag Parms{};

	Parms.Channel = std::move(Channel);
	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.Share
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FINTLFriendReqInfo               Info                                                   (ConstParm, Parm, NativeAccessSpecifierPublic)
// class FString                           Channel                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::Share(const struct FINTLFriendReqInfo& Info, const class FString& Channel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "Share");

	Params::INTLSDKAPI_Share Parms{};

	Parms.Info = std::move(Info);
	Parms.Channel = std::move(Channel);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.ShowAccountPicker
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::ShowAccountPicker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ShowAccountPicker");

	Params::INTLSDKAPI_ShowAccountPicker Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.ShowAllFAQSections
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::ShowAllFAQSections()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ShowAllFAQSections");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.ShowFaqSection
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           SectionID                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::ShowFaqSection(const class FString& SectionID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ShowFaqSection");

	Params::INTLSDKAPI_ShowFaqSection Parms{};

	Parms.SectionID = std::move(SectionID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.ShowGroupAgreementWindow
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Channel                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::ShowGroupAgreementWindow(const class FString& Channel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ShowGroupAgreementWindow");

	Params::INTLSDKAPI_ShowGroupAgreementWindow Parms{};

	Parms.Channel = std::move(Channel);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.ShowGroupChatRoom
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FINTLGroupReqInfo                Req_info                                               (Parm, NativeAccessSpecifierPublic)
// class FString                           Channel                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::ShowGroupChatRoom(const struct FINTLGroupReqInfo& Req_info, const class FString& Channel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ShowGroupChatRoom");

	Params::INTLSDKAPI_ShowGroupChatRoom Parms{};

	Parms.Req_info = std::move(Req_info);
	Parms.Channel = std::move(Channel);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.ShowSingleFAQ
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           FaqId                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::ShowSingleFAQ(const class FString& FaqId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ShowSingleFAQ");

	Params::INTLSDKAPI_ShowSingleFAQ Parms{};

	Parms.FaqId = std::move(FaqId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.ShutDown
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::ShutDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ShutDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.StartDetectNetwork
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ID                                                     (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::StartDetectNetwork(const class FString& ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "StartDetectNetwork");

	Params::INTLSDKAPI_StartDetectNetwork Parms{};

	Parms.ID = std::move(ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.StartTraceRoute
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ID                                                     (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UINTLSDKAPI::StartTraceRoute(const class FString& ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "StartTraceRoute");

	Params::INTLSDKAPI_StartTraceRoute Parms{};

	Parms.ID = std::move(ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.StopTraceRoute
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UINTLSDKAPI::StopTraceRoute()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "StopTraceRoute");

	Params::INTLSDKAPI_StopTraceRoute Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.SyncGetBestIpGroup
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FINTLSourceIpReqInfo             IpReqInfo                                              (ConstParm, Parm, NativeAccessSpecifierPublic)
// int32                                   Timeout                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Scene                                                  (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ProtocolType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FINTLBestIpResult                Result                                                 (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::SyncGetBestIpGroup(const struct FINTLSourceIpReqInfo& IpReqInfo, int32 Timeout, const class FString& Scene, int32 ProtocolType, struct FINTLBestIpResult* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "SyncGetBestIpGroup");

	Params::INTLSDKAPI_SyncGetBestIpGroup Parms{};

	Parms.IpReqInfo = std::move(IpReqInfo);
	Parms.Timeout = Timeout;
	Parms.Scene = std::move(Scene);
	Parms.ProtocolType = ProtocolType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = std::move(Parms.Result);

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.TabGetExpInfoByLayerCode
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FINTLTabExpEntity                Entity                                                 (Parm, OutParm, NativeAccessSpecifierPublic)
// class FString                           LayerCode                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsReport                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::TabGetExpInfoByLayerCode(struct FINTLTabExpEntity* Entity, const class FString& LayerCode, const bool IsReport)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "TabGetExpInfoByLayerCode");

	Params::INTLSDKAPI_TabGetExpInfoByLayerCode Parms{};

	Parms.LayerCode = std::move(LayerCode);
	Parms.IsReport = IsReport;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Entity != nullptr)
		*Entity = std::move(Parms.Entity);

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.TabGetExpInfoByName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FINTLTabExpEntity                Entity                                                 (Parm, OutParm, NativeAccessSpecifierPublic)
// class FString                           ExpName                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsReport                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::TabGetExpInfoByName(struct FINTLTabExpEntity* Entity, const class FString& ExpName, const bool IsReport)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "TabGetExpInfoByName");

	Params::INTLSDKAPI_TabGetExpInfoByName Parms{};

	Parms.ExpName = std::move(ExpName);
	Parms.IsReport = IsReport;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Entity != nullptr)
		*Entity = std::move(Parms.Entity);

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.TabInit
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Guid                                                   (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SceneID                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsAutoPoll                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsAutoReport                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::TabInit(const class FString& Guid, const class FString& SceneID, const bool IsAutoPoll, const bool IsAutoReport)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "TabInit");

	Params::INTLSDKAPI_TabInit Parms{};

	Parms.Guid = std::move(Guid);
	Parms.SceneID = std::move(SceneID);
	Parms.IsAutoPoll = IsAutoPoll;
	Parms.IsAutoReport = IsAutoReport;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.TabRefresh
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::TabRefresh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "TabRefresh");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.TabStart
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::TabStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "TabStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.TabSwitchGuid
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Guid                                                   (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::TabSwitchGuid(const class FString& Guid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "TabSwitchGuid");

	Params::INTLSDKAPI_TabSwitchGuid Parms{};

	Parms.Guid = std::move(Guid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.TestJudgeCustomDeviceLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ParseJson                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UINTLSDKAPI::TestJudgeCustomDeviceLevel(const class FString& ParseJson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "TestJudgeCustomDeviceLevel");

	Params::INTLSDKAPI_TestJudgeCustomDeviceLevel Parms{};

	Parms.ParseJson = std::move(ParseJson);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.ToggleBackgroundUpdate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::ToggleBackgroundUpdate(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "ToggleBackgroundUpdate");

	Params::INTLSDKAPI_ToggleBackgroundUpdate Parms{};

	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.TransferAccount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           TransferCode                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PassWord                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::TransferAccount(const class FString& TransferCode, const class FString& PassWord)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "TransferAccount");

	Params::INTLSDKAPI_TransferAccount Parms{};

	Parms.TransferCode = std::move(TransferCode);
	Parms.PassWord = std::move(PassWord);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.Unbind
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EINTLLoginChannel                       Channel                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Uid                                                    (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExtraJson                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::Unbind(const EINTLLoginChannel Channel, const class FString& Uid, const class FString& ExtraJson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "Unbind");

	Params::INTLSDKAPI_Unbind Parms{};

	Parms.Channel = Channel;
	Parms.Uid = std::move(Uid);
	Parms.ExtraJson = std::move(ExtraJson);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.UnregisterPush
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Channel                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLSDKAPI::UnregisterPush(const class FString& Channel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "UnregisterPush");

	Params::INTLSDKAPI_UnregisterPush Parms{};

	Parms.Channel = std::move(Channel);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLSDKAPI.UpdateConfig
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TMap<class FString, class FString>      Cfg                                                    (Parm, NativeAccessSpecifierPublic)
// class FString                           Project                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::UpdateConfig(const TMap<class FString, class FString>& Cfg, const class FString& Project)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "UpdateConfig");

	Params::INTLSDKAPI_UpdateConfig Parms{};

	Parms.Cfg = std::move(Cfg);
	Parms.Project = std::move(Project);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.UpdateContinue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   RepoID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::UpdateContinue(int32 RepoID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "UpdateContinue");

	Params::INTLSDKAPI_UpdateContinue Parms{};

	Parms.RepoID = RepoID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.UpdateStart
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FINTLUpdateInitInfo              Info                                                   (Parm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::UpdateStart(const struct FINTLUpdateInitInfo& Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "UpdateStart");

	Params::INTLSDKAPI_UpdateStart Parms{};

	Parms.Info = std::move(Info);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.UpdateStop
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   RepoID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TaskId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLSDKAPI::UpdateStop(int32 RepoID, int32 TaskId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "UpdateStop");

	Params::INTLSDKAPI_UpdateStop Parms{};

	Parms.RepoID = RepoID;
	Parms.TaskId = TaskId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLSDKAPI.UpgradeSaccToLI
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLSDKAPI::UpgradeSaccToLI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLSDKAPI", "UpgradeSaccToLI");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLUtility.AddSystemBrowserFireWallRule
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Port                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           RuleName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UINTLUtility::AddSystemBrowserFireWallRule(int32 Port, const class FString& RuleName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLUtility", "AddSystemBrowserFireWallRule");

	Params::INTLUtility_AddSystemBrowserFireWallRule Parms{};

	Parms.Port = Port;
	Parms.RuleName = std::move(RuleName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLUtility.ForceCrash
// (Final, Native, Static, Public, BlueprintCallable)

void UINTLUtility::ForceCrash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLUtility", "ForceCrash");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function INTLPlugin.INTLUtility.GetNewToastOrder
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UINTLUtility::GetNewToastOrder()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLUtility", "GetNewToastOrder");

	Params::INTLUtility_GetNewToastOrder Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLUtility.RefreshCurToastCnt
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ChangeCnt                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UINTLUtility::RefreshCurToastCnt(int32 ChangeCnt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLUtility", "RefreshCurToastCnt");

	Params::INTLUtility_RefreshCurToastCnt Parms{};

	Parms.ChangeCnt = ChangeCnt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function INTLPlugin.INTLUtility.Regular
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Str                                                    (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Reg                                                    (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UINTLUtility::Regular(const class FString& Str, const class FString& Reg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("INTLUtility", "Regular");

	Params::INTLUtility_Regular Parms{};

	Parms.Str = std::move(Str);
	Parms.Reg = std::move(Reg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

