#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Nuwa

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum Nuwa.ENuwaGraphLine
// NumValues: 0x0004
enum class ENuwaGraphLine : uint8
{
	Line                                     = 0,
	Bezier                                   = 1,
	Polyline                                 = 2,
	ENuwaGraphLine_MAX                       = 3,
};

// Enum Nuwa.ENuwaGraphTangent
// NumValues: 0x0004
enum class ENuwaGraphTangent : uint8
{
	None                                     = 0,
	Arrive                                   = 1,
	Leave                                    = 2,
	ENuwaGraphTangent_MAX                    = 3,
};

// Enum Nuwa.EExpressionEyePrefab
// NumValues: 0x0005
enum class EExpressionEyePrefab : uint8
{
	EEP_EYE_NORMAL                           = 0,
	EEP_EYE_UP                               = 1,
	EEP_EYE_RIGHT                            = 2,
	EEP_NUM                                  = 3,
	EEP_MAX                                  = 4,
};

// Enum Nuwa.EExpressionPrefab
// NumValues: 0x000B
enum class EExpressionPrefab : uint8
{
	EEP_NORMAL                               = 0,
	EEP_SAD                                  = 1,
	EEP_ANGRY                                = 2,
	EEP_SURPRISE                             = 3,
	EEP_HAPPY                                = 4,
	EEP_SMILE                                = 5,
	EEP_RELAX                                = 6,
	EEP_TIRED                                = 7,
	EEP_HATE                                 = 8,
	EEP_NUM                                  = 9,
	EEP_MAX                                  = 10,
};

// ScriptStruct Nuwa.NuwaCurve
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x08) FNuwaCurve final
{
public:
	struct FVector2D                              LeaveTangentPoint;                                 // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ArriveTangentPoint;                                // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19A9[0x38];                                    // 0x0010(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNuwaCurve) == 0x000008, "Wrong alignment on FNuwaCurve");
static_assert(sizeof(FNuwaCurve) == 0x000048, "Wrong size on FNuwaCurve");
static_assert(offsetof(FNuwaCurve, LeaveTangentPoint) == 0x000000, "Member 'FNuwaCurve::LeaveTangentPoint' has a wrong offset!");
static_assert(offsetof(FNuwaCurve, ArriveTangentPoint) == 0x000008, "Member 'FNuwaCurve::ArriveTangentPoint' has a wrong offset!");

// ScriptStruct Nuwa.ExpressionMorphWinkTargetInfo
// 0x0010 (0x0010 - 0x0000)
struct FExpressionMorphWinkTargetInfo final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Uid;                                               // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19AA[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Weight;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExpressionMorphWinkTargetInfo) == 0x000004, "Wrong alignment on FExpressionMorphWinkTargetInfo");
static_assert(sizeof(FExpressionMorphWinkTargetInfo) == 0x000010, "Wrong size on FExpressionMorphWinkTargetInfo");
static_assert(offsetof(FExpressionMorphWinkTargetInfo, Name) == 0x000000, "Member 'FExpressionMorphWinkTargetInfo::Name' has a wrong offset!");
static_assert(offsetof(FExpressionMorphWinkTargetInfo, Uid) == 0x000008, "Member 'FExpressionMorphWinkTargetInfo::Uid' has a wrong offset!");
static_assert(offsetof(FExpressionMorphWinkTargetInfo, Weight) == 0x00000C, "Member 'FExpressionMorphWinkTargetInfo::Weight' has a wrong offset!");

// ScriptStruct Nuwa.ExpressionKeyMorphWink
// 0x0028 (0x0028 - 0x0000)
struct FExpressionKeyMorphWink final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19AB[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FExpressionMorphWinkTargetInfo> MorphWinks;                                        // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ArriveTangent;                                     // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeaveTangent;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENuwaGraphLine                                LineType;                                          // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19AC[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FExpressionKeyMorphWink) == 0x000008, "Wrong alignment on FExpressionKeyMorphWink");
static_assert(sizeof(FExpressionKeyMorphWink) == 0x000028, "Wrong size on FExpressionKeyMorphWink");
static_assert(offsetof(FExpressionKeyMorphWink, Time) == 0x000000, "Member 'FExpressionKeyMorphWink::Time' has a wrong offset!");
static_assert(offsetof(FExpressionKeyMorphWink, MorphWinks) == 0x000008, "Member 'FExpressionKeyMorphWink::MorphWinks' has a wrong offset!");
static_assert(offsetof(FExpressionKeyMorphWink, ArriveTangent) == 0x000018, "Member 'FExpressionKeyMorphWink::ArriveTangent' has a wrong offset!");
static_assert(offsetof(FExpressionKeyMorphWink, LeaveTangent) == 0x00001C, "Member 'FExpressionKeyMorphWink::LeaveTangent' has a wrong offset!");
static_assert(offsetof(FExpressionKeyMorphWink, LineType) == 0x000020, "Member 'FExpressionKeyMorphWink::LineType' has a wrong offset!");

// ScriptStruct Nuwa.ExpressionMorphTargetInfo
// 0x0014 (0x0014 - 0x0000)
struct FExpressionMorphTargetInfo final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Uid;                                               // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19AD[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Weight;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfVerts;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExpressionMorphTargetInfo) == 0x000004, "Wrong alignment on FExpressionMorphTargetInfo");
static_assert(sizeof(FExpressionMorphTargetInfo) == 0x000014, "Wrong size on FExpressionMorphTargetInfo");
static_assert(offsetof(FExpressionMorphTargetInfo, Name) == 0x000000, "Member 'FExpressionMorphTargetInfo::Name' has a wrong offset!");
static_assert(offsetof(FExpressionMorphTargetInfo, Uid) == 0x000008, "Member 'FExpressionMorphTargetInfo::Uid' has a wrong offset!");
static_assert(offsetof(FExpressionMorphTargetInfo, Weight) == 0x00000C, "Member 'FExpressionMorphTargetInfo::Weight' has a wrong offset!");
static_assert(offsetof(FExpressionMorphTargetInfo, NumberOfVerts) == 0x000010, "Member 'FExpressionMorphTargetInfo::NumberOfVerts' has a wrong offset!");

// ScriptStruct Nuwa.ExpressionKeyMorph
// 0x0028 (0x0028 - 0x0000)
struct FExpressionKeyMorph final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19AE[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FExpressionMorphTargetInfo>     Morphs;                                            // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ArriveTangent;                                     // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeaveTangent;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENuwaGraphLine                                LineType;                                          // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19AF[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FExpressionKeyMorph) == 0x000008, "Wrong alignment on FExpressionKeyMorph");
static_assert(sizeof(FExpressionKeyMorph) == 0x000028, "Wrong size on FExpressionKeyMorph");
static_assert(offsetof(FExpressionKeyMorph, Time) == 0x000000, "Member 'FExpressionKeyMorph::Time' has a wrong offset!");
static_assert(offsetof(FExpressionKeyMorph, Morphs) == 0x000008, "Member 'FExpressionKeyMorph::Morphs' has a wrong offset!");
static_assert(offsetof(FExpressionKeyMorph, ArriveTangent) == 0x000018, "Member 'FExpressionKeyMorph::ArriveTangent' has a wrong offset!");
static_assert(offsetof(FExpressionKeyMorph, LeaveTangent) == 0x00001C, "Member 'FExpressionKeyMorph::LeaveTangent' has a wrong offset!");
static_assert(offsetof(FExpressionKeyMorph, LineType) == 0x000020, "Member 'FExpressionKeyMorph::LineType' has a wrong offset!");

// ScriptStruct Nuwa.MakeupPropertyData
// 0x0058 (0x0058 - 0x0000)
struct FMakeupPropertyData final
{
public:
	class FString                                 GroupName;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19B0[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScalarParameterValue;                              // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           VectorParameterValue;                              // 0x002C(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19B1[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               TextureParameterValue;                             // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParameterType;                                     // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialIndex;                                     // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19B2[0x8];                                     // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMakeupPropertyData) == 0x000008, "Wrong alignment on FMakeupPropertyData");
static_assert(sizeof(FMakeupPropertyData) == 0x000058, "Wrong size on FMakeupPropertyData");
static_assert(offsetof(FMakeupPropertyData, GroupName) == 0x000000, "Member 'FMakeupPropertyData::GroupName' has a wrong offset!");
static_assert(offsetof(FMakeupPropertyData, Index) == 0x000010, "Member 'FMakeupPropertyData::Index' has a wrong offset!");
static_assert(offsetof(FMakeupPropertyData, Name) == 0x000018, "Member 'FMakeupPropertyData::Name' has a wrong offset!");
static_assert(offsetof(FMakeupPropertyData, ScalarParameterValue) == 0x000028, "Member 'FMakeupPropertyData::ScalarParameterValue' has a wrong offset!");
static_assert(offsetof(FMakeupPropertyData, VectorParameterValue) == 0x00002C, "Member 'FMakeupPropertyData::VectorParameterValue' has a wrong offset!");
static_assert(offsetof(FMakeupPropertyData, TextureParameterValue) == 0x000040, "Member 'FMakeupPropertyData::TextureParameterValue' has a wrong offset!");
static_assert(offsetof(FMakeupPropertyData, ParameterType) == 0x000048, "Member 'FMakeupPropertyData::ParameterType' has a wrong offset!");
static_assert(offsetof(FMakeupPropertyData, MaterialIndex) == 0x00004C, "Member 'FMakeupPropertyData::MaterialIndex' has a wrong offset!");

// ScriptStruct Nuwa.MakeupGroupPrefab
// 0x0020 (0x0020 - 0x0000)
struct FMakeupGroupPrefab final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMakeupPropertyData>            Properties;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMakeupGroupPrefab) == 0x000008, "Wrong alignment on FMakeupGroupPrefab");
static_assert(sizeof(FMakeupGroupPrefab) == 0x000020, "Wrong size on FMakeupGroupPrefab");
static_assert(offsetof(FMakeupGroupPrefab, Name) == 0x000000, "Member 'FMakeupGroupPrefab::Name' has a wrong offset!");
static_assert(offsetof(FMakeupGroupPrefab, Properties) == 0x000010, "Member 'FMakeupGroupPrefab::Properties' has a wrong offset!");

// ScriptStruct Nuwa.MakeupGroupData
// 0x00D0 (0x00D0 - 0x0000)
struct FMakeupGroupData final
{
public:
	int32                                         Index;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19B3[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsExpanded;                                        // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19B4[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMakeupGroupPrefab                     Preview;                                           // 0x0020(0x0020)(Edit, NativeAccessSpecifierPublic)
	TMap<class FString, struct FMakeupGroupPrefab> Prefabs;                                           // 0x0040(0x0050)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_19B5[0x40];                                    // 0x0090(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMakeupGroupData) == 0x000008, "Wrong alignment on FMakeupGroupData");
static_assert(sizeof(FMakeupGroupData) == 0x0000D0, "Wrong size on FMakeupGroupData");
static_assert(offsetof(FMakeupGroupData, Index) == 0x000000, "Member 'FMakeupGroupData::Index' has a wrong offset!");
static_assert(offsetof(FMakeupGroupData, Name) == 0x000008, "Member 'FMakeupGroupData::Name' has a wrong offset!");
static_assert(offsetof(FMakeupGroupData, IsExpanded) == 0x000018, "Member 'FMakeupGroupData::IsExpanded' has a wrong offset!");
static_assert(offsetof(FMakeupGroupData, Preview) == 0x000020, "Member 'FMakeupGroupData::Preview' has a wrong offset!");
static_assert(offsetof(FMakeupGroupData, Prefabs) == 0x000040, "Member 'FMakeupGroupData::Prefabs' has a wrong offset!");

// ScriptStruct Nuwa.MakeupDataEx
// 0x0050 (0x0050 - 0x0000)
struct FMakeupDataEx final
{
public:
	TMap<class FString, struct FMakeupGroupData>  Groups;                                            // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMakeupDataEx) == 0x000008, "Wrong alignment on FMakeupDataEx");
static_assert(sizeof(FMakeupDataEx) == 0x000050, "Wrong size on FMakeupDataEx");
static_assert(offsetof(FMakeupDataEx, Groups) == 0x000000, "Member 'FMakeupDataEx::Groups' has a wrong offset!");

// ScriptStruct Nuwa.SkeletonStateData
// 0x0024 (0x0024 - 0x0000)
struct FSkeletonStateData final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0018(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkeletonStateData) == 0x000004, "Wrong alignment on FSkeletonStateData");
static_assert(sizeof(FSkeletonStateData) == 0x000024, "Wrong size on FSkeletonStateData");
static_assert(offsetof(FSkeletonStateData, Position) == 0x000000, "Member 'FSkeletonStateData::Position' has a wrong offset!");
static_assert(offsetof(FSkeletonStateData, Rotation) == 0x00000C, "Member 'FSkeletonStateData::Rotation' has a wrong offset!");
static_assert(offsetof(FSkeletonStateData, Scale) == 0x000018, "Member 'FSkeletonStateData::Scale' has a wrong offset!");

// ScriptStruct Nuwa.SkeletonData
// 0x0088 (0x0088 - 0x0000)
struct FSkeletonData final
{
public:
	class FString                                 BoneName;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSkeletonStateData                     Min;                                               // 0x0010(0x0024)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkeletonStateData                     Max;                                               // 0x0034(0x0024)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkeletonStateData                     Cur;                                               // 0x0058(0x0024)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         OriginRatio;                                       // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurRatio;                                          // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19B6[0x4];                                     // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkeletonData) == 0x000008, "Wrong alignment on FSkeletonData");
static_assert(sizeof(FSkeletonData) == 0x000088, "Wrong size on FSkeletonData");
static_assert(offsetof(FSkeletonData, BoneName) == 0x000000, "Member 'FSkeletonData::BoneName' has a wrong offset!");
static_assert(offsetof(FSkeletonData, Min) == 0x000010, "Member 'FSkeletonData::Min' has a wrong offset!");
static_assert(offsetof(FSkeletonData, Max) == 0x000034, "Member 'FSkeletonData::Max' has a wrong offset!");
static_assert(offsetof(FSkeletonData, Cur) == 0x000058, "Member 'FSkeletonData::Cur' has a wrong offset!");
static_assert(offsetof(FSkeletonData, OriginRatio) == 0x00007C, "Member 'FSkeletonData::OriginRatio' has a wrong offset!");
static_assert(offsetof(FSkeletonData, CurRatio) == 0x000080, "Member 'FSkeletonData::CurRatio' has a wrong offset!");

// ScriptStruct Nuwa.AreaDataEx
// 0x0098 (0x0098 - 0x0000)
struct FAreaDataEx final
{
public:
	bool                                          IsExpanded;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19B7[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParentIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ChildrenIndex;                                     // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OriginValue;                                       // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0038(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FSkeletonData>     Skeletons;                                         // 0x0048(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAreaDataEx) == 0x000008, "Wrong alignment on FAreaDataEx");
static_assert(sizeof(FAreaDataEx) == 0x000098, "Wrong size on FAreaDataEx");
static_assert(offsetof(FAreaDataEx, IsExpanded) == 0x000000, "Member 'FAreaDataEx::IsExpanded' has a wrong offset!");
static_assert(offsetof(FAreaDataEx, Level) == 0x000004, "Member 'FAreaDataEx::Level' has a wrong offset!");
static_assert(offsetof(FAreaDataEx, ParentIndex) == 0x000008, "Member 'FAreaDataEx::ParentIndex' has a wrong offset!");
static_assert(offsetof(FAreaDataEx, Index) == 0x00000C, "Member 'FAreaDataEx::Index' has a wrong offset!");
static_assert(offsetof(FAreaDataEx, ChildrenIndex) == 0x000010, "Member 'FAreaDataEx::ChildrenIndex' has a wrong offset!");
static_assert(offsetof(FAreaDataEx, Name) == 0x000020, "Member 'FAreaDataEx::Name' has a wrong offset!");
static_assert(offsetof(FAreaDataEx, Value) == 0x000030, "Member 'FAreaDataEx::Value' has a wrong offset!");
static_assert(offsetof(FAreaDataEx, OriginValue) == 0x000034, "Member 'FAreaDataEx::OriginValue' has a wrong offset!");
static_assert(offsetof(FAreaDataEx, Color) == 0x000038, "Member 'FAreaDataEx::Color' has a wrong offset!");
static_assert(offsetof(FAreaDataEx, Skeletons) == 0x000048, "Member 'FAreaDataEx::Skeletons' has a wrong offset!");

// ScriptStruct Nuwa.FaceData
// 0x0058 (0x0058 - 0x0000)
struct FFaceData final
{
public:
	int32                                         MaxLevel;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19B8[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FAreaDataEx>               Areas;                                             // 0x0008(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFaceData) == 0x000008, "Wrong alignment on FFaceData");
static_assert(sizeof(FFaceData) == 0x000058, "Wrong size on FFaceData");
static_assert(offsetof(FFaceData, MaxLevel) == 0x000000, "Member 'FFaceData::MaxLevel' has a wrong offset!");
static_assert(offsetof(FFaceData, Areas) == 0x000008, "Member 'FFaceData::Areas' has a wrong offset!");

}

