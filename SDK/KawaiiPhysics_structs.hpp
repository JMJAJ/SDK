#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KawaiiPhysics

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum KawaiiPhysics.EPlanarConstraint
// NumValues: 0x0005
enum class EPlanarConstraint : uint8
{
	None                                     = 0,
	X                                        = 1,
	Y                                        = 2,
	Z                                        = 3,
	EPlanarConstraint_MAX                    = 4,
};

// ScriptStruct KawaiiPhysics.KawaiiPhysicsSettings
// 0x0018 (0x0018 - 0x0000)
struct FKawaiiPhysicsSettings final
{
public:
	float                                         Damping;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldDampingLocation;                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldDampingRotation;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stiffness;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitAngle;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKawaiiPhysicsSettings) == 0x000004, "Wrong alignment on FKawaiiPhysicsSettings");
static_assert(sizeof(FKawaiiPhysicsSettings) == 0x000018, "Wrong size on FKawaiiPhysicsSettings");
static_assert(offsetof(FKawaiiPhysicsSettings, Damping) == 0x000000, "Member 'FKawaiiPhysicsSettings::Damping' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsSettings, WorldDampingLocation) == 0x000004, "Member 'FKawaiiPhysicsSettings::WorldDampingLocation' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsSettings, WorldDampingRotation) == 0x000008, "Member 'FKawaiiPhysicsSettings::WorldDampingRotation' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsSettings, Stiffness) == 0x00000C, "Member 'FKawaiiPhysicsSettings::Stiffness' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsSettings, Radius) == 0x000010, "Member 'FKawaiiPhysicsSettings::Radius' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsSettings, LimitAngle) == 0x000014, "Member 'FKawaiiPhysicsSettings::LimitAngle' has a wrong offset!");

// ScriptStruct KawaiiPhysics.AnimNode_BoneModify
// 0x0018 (0x0018 - 0x0000)
struct FAnimNode_BoneModify final
{
public:
	struct FBoneReference                         BoneToModify;                                      // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EBoneModificationMode                         TranslationMode;                                   // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneModificationMode                         RotationMode;                                      // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneModificationMode                         ScaleMode;                                         // 0x0012(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             TranslationSpace;                                  // 0x0013(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             RotationSpace;                                     // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             ScaleSpace;                                        // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BFD[0x2];                                     // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_BoneModify) == 0x000004, "Wrong alignment on FAnimNode_BoneModify");
static_assert(sizeof(FAnimNode_BoneModify) == 0x000018, "Wrong size on FAnimNode_BoneModify");
static_assert(offsetof(FAnimNode_BoneModify, BoneToModify) == 0x000000, "Member 'FAnimNode_BoneModify::BoneToModify' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneModify, TranslationMode) == 0x000010, "Member 'FAnimNode_BoneModify::TranslationMode' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneModify, RotationMode) == 0x000011, "Member 'FAnimNode_BoneModify::RotationMode' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneModify, ScaleMode) == 0x000012, "Member 'FAnimNode_BoneModify::ScaleMode' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneModify, TranslationSpace) == 0x000013, "Member 'FAnimNode_BoneModify::TranslationSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneModify, RotationSpace) == 0x000014, "Member 'FAnimNode_BoneModify::RotationSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneModify, ScaleSpace) == 0x000015, "Member 'FAnimNode_BoneModify::ScaleSpace' has a wrong offset!");

// ScriptStruct KawaiiPhysics.AnimNode_BoneData
// 0x0028 (0x0028 - 0x0000)
struct FAnimNode_BoneData final
{
public:
	struct FVector                                Translation;                                       // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScaleAffectChilren;                               // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BFE[0x3];                                     // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_BoneData) == 0x000004, "Wrong alignment on FAnimNode_BoneData");
static_assert(sizeof(FAnimNode_BoneData) == 0x000028, "Wrong size on FAnimNode_BoneData");
static_assert(offsetof(FAnimNode_BoneData, Translation) == 0x000000, "Member 'FAnimNode_BoneData::Translation' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneData, Rotation) == 0x00000C, "Member 'FAnimNode_BoneData::Rotation' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneData, Scale) == 0x000018, "Member 'FAnimNode_BoneData::Scale' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneData, bScaleAffectChilren) == 0x000024, "Member 'FAnimNode_BoneData::bScaleAffectChilren' has a wrong offset!");

// ScriptStruct KawaiiPhysics.AnimNode_BodyData
// 0x0010 (0x0010 - 0x0000)
struct FAnimNode_BodyData final
{
public:
	TArray<struct FAnimNode_BoneData>             BoneDatas;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_BodyData) == 0x000008, "Wrong alignment on FAnimNode_BodyData");
static_assert(sizeof(FAnimNode_BodyData) == 0x000010, "Wrong size on FAnimNode_BodyData");
static_assert(offsetof(FAnimNode_BodyData, BoneDatas) == 0x000000, "Member 'FAnimNode_BodyData::BoneDatas' has a wrong offset!");

// ScriptStruct KawaiiPhysics.AnimNode_CustomBoneModify
// 0x0020 (0x00E8 - 0x00C8)
struct FAnimNode_CustomBoneModify final : public FAnimNode_SkeletalControlBase
{
public:
	TArray<struct FAnimNode_BoneModify>           BoneModifies;                                      // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAnimNode_BodyData                     BodyData;                                          // 0x00D8(0x0010)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_CustomBoneModify) == 0x000008, "Wrong alignment on FAnimNode_CustomBoneModify");
static_assert(sizeof(FAnimNode_CustomBoneModify) == 0x0000E8, "Wrong size on FAnimNode_CustomBoneModify");
static_assert(offsetof(FAnimNode_CustomBoneModify, BoneModifies) == 0x0000C8, "Member 'FAnimNode_CustomBoneModify::BoneModifies' has a wrong offset!");
static_assert(offsetof(FAnimNode_CustomBoneModify, BodyData) == 0x0000D8, "Member 'FAnimNode_CustomBoneModify::BodyData' has a wrong offset!");

// ScriptStruct KawaiiPhysics.AnimNode_HottaBonesModify
// 0x0038 (0x0100 - 0x00C8)
struct FAnimNode_HottaBonesModify final : public FAnimNode_SkeletalControlBase
{
public:
	TArray<struct FAnimNode_BoneModify>           BoneModifies;                                      // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                Translation;                                       // 0x00D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x00E4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x00F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BFF[0x4];                                     // 0x00FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_HottaBonesModify) == 0x000008, "Wrong alignment on FAnimNode_HottaBonesModify");
static_assert(sizeof(FAnimNode_HottaBonesModify) == 0x000100, "Wrong size on FAnimNode_HottaBonesModify");
static_assert(offsetof(FAnimNode_HottaBonesModify, BoneModifies) == 0x0000C8, "Member 'FAnimNode_HottaBonesModify::BoneModifies' has a wrong offset!");
static_assert(offsetof(FAnimNode_HottaBonesModify, Translation) == 0x0000D8, "Member 'FAnimNode_HottaBonesModify::Translation' has a wrong offset!");
static_assert(offsetof(FAnimNode_HottaBonesModify, Rotation) == 0x0000E4, "Member 'FAnimNode_HottaBonesModify::Rotation' has a wrong offset!");
static_assert(offsetof(FAnimNode_HottaBonesModify, Scale) == 0x0000F0, "Member 'FAnimNode_HottaBonesModify::Scale' has a wrong offset!");

// ScriptStruct KawaiiPhysics.CollisionLimitBase
// 0x0050 (0x0050 - 0x0000)
struct FCollisionLimitBase
{
public:
	struct FBoneReference                         DrivingBone;                                       // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   BodyBoneName;                                      // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OffsetLocation;                                    // 0x0018(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OffsetRotation;                                    // 0x0024(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C00[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Rotation;                                          // 0x0040(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCollisionLimitBase) == 0x000010, "Wrong alignment on FCollisionLimitBase");
static_assert(sizeof(FCollisionLimitBase) == 0x000050, "Wrong size on FCollisionLimitBase");
static_assert(offsetof(FCollisionLimitBase, DrivingBone) == 0x000000, "Member 'FCollisionLimitBase::DrivingBone' has a wrong offset!");
static_assert(offsetof(FCollisionLimitBase, BodyBoneName) == 0x000010, "Member 'FCollisionLimitBase::BodyBoneName' has a wrong offset!");
static_assert(offsetof(FCollisionLimitBase, OffsetLocation) == 0x000018, "Member 'FCollisionLimitBase::OffsetLocation' has a wrong offset!");
static_assert(offsetof(FCollisionLimitBase, OffsetRotation) == 0x000024, "Member 'FCollisionLimitBase::OffsetRotation' has a wrong offset!");
static_assert(offsetof(FCollisionLimitBase, Location) == 0x000030, "Member 'FCollisionLimitBase::Location' has a wrong offset!");
static_assert(offsetof(FCollisionLimitBase, Rotation) == 0x000040, "Member 'FCollisionLimitBase::Rotation' has a wrong offset!");

// ScriptStruct KawaiiPhysics.PlanarLimit
// 0x0010 (0x0060 - 0x0050)
struct FPlanarLimit final : public FCollisionLimitBase
{
public:
	struct FPlane                                 Plane;                                             // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlanarLimit) == 0x000010, "Wrong alignment on FPlanarLimit");
static_assert(sizeof(FPlanarLimit) == 0x000060, "Wrong size on FPlanarLimit");
static_assert(offsetof(FPlanarLimit, Plane) == 0x000050, "Member 'FPlanarLimit::Plane' has a wrong offset!");

// ScriptStruct KawaiiPhysics.SphericalLimit
// 0x0010 (0x0060 - 0x0050)
struct FSphericalLimit final : public FCollisionLimitBase
{
public:
	float                                         Radius;                                            // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESphericalLimitType                           LimitType;                                         // 0x0054(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C01[0xB];                                     // 0x0055(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSphericalLimit) == 0x000010, "Wrong alignment on FSphericalLimit");
static_assert(sizeof(FSphericalLimit) == 0x000060, "Wrong size on FSphericalLimit");
static_assert(offsetof(FSphericalLimit, Radius) == 0x000050, "Member 'FSphericalLimit::Radius' has a wrong offset!");
static_assert(offsetof(FSphericalLimit, LimitType) == 0x000054, "Member 'FSphericalLimit::LimitType' has a wrong offset!");

// ScriptStruct KawaiiPhysics.CapsuleLimit
// 0x0010 (0x0060 - 0x0050)
struct FCapsuleLimit final : public FCollisionLimitBase
{
public:
	float                                         Radius;                                            // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C02[0x8];                                     // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCapsuleLimit) == 0x000010, "Wrong alignment on FCapsuleLimit");
static_assert(sizeof(FCapsuleLimit) == 0x000060, "Wrong size on FCapsuleLimit");
static_assert(offsetof(FCapsuleLimit, Radius) == 0x000050, "Member 'FCapsuleLimit::Radius' has a wrong offset!");
static_assert(offsetof(FCapsuleLimit, Length) == 0x000054, "Member 'FCapsuleLimit::Length' has a wrong offset!");

// ScriptStruct KawaiiPhysics.RoundConeLimit
// 0x0010 (0x0060 - 0x0050)
struct FRoundConeLimit final : public FCollisionLimitBase
{
public:
	float                                         RadiusA;                                           // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusB;                                           // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C03[0x4];                                     // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRoundConeLimit) == 0x000010, "Wrong alignment on FRoundConeLimit");
static_assert(sizeof(FRoundConeLimit) == 0x000060, "Wrong size on FRoundConeLimit");
static_assert(offsetof(FRoundConeLimit, RadiusA) == 0x000050, "Member 'FRoundConeLimit::RadiusA' has a wrong offset!");
static_assert(offsetof(FRoundConeLimit, RadiusB) == 0x000054, "Member 'FRoundConeLimit::RadiusB' has a wrong offset!");
static_assert(offsetof(FRoundConeLimit, Length) == 0x000058, "Member 'FRoundConeLimit::Length' has a wrong offset!");

// ScriptStruct KawaiiPhysics.KawaiiHairCollision
// 0x0090 (0x0090 - 0x0000)
struct FKawaiiHairCollision final
{
public:
	TArray<struct FSphericalLimit>                SphericalLimits;                                   // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCapsuleLimit>                  CapsuleLimits;                                     // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPlanarLimit>                   PlanarLimits;                                      // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRoundConeLimit>                RoundConeLimits;                                   // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FTransform>          BonesTransform;                                    // 0x0040(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKawaiiHairCollision) == 0x000008, "Wrong alignment on FKawaiiHairCollision");
static_assert(sizeof(FKawaiiHairCollision) == 0x000090, "Wrong size on FKawaiiHairCollision");
static_assert(offsetof(FKawaiiHairCollision, SphericalLimits) == 0x000000, "Member 'FKawaiiHairCollision::SphericalLimits' has a wrong offset!");
static_assert(offsetof(FKawaiiHairCollision, CapsuleLimits) == 0x000010, "Member 'FKawaiiHairCollision::CapsuleLimits' has a wrong offset!");
static_assert(offsetof(FKawaiiHairCollision, PlanarLimits) == 0x000020, "Member 'FKawaiiHairCollision::PlanarLimits' has a wrong offset!");
static_assert(offsetof(FKawaiiHairCollision, RoundConeLimits) == 0x000030, "Member 'FKawaiiHairCollision::RoundConeLimits' has a wrong offset!");
static_assert(offsetof(FKawaiiHairCollision, BonesTransform) == 0x000040, "Member 'FKawaiiHairCollision::BonesTransform' has a wrong offset!");

// ScriptStruct KawaiiPhysics.KawaiiPhysicsModifyBone
// 0x00B0 (0x00B0 - 0x0000)
struct FKawaiiPhysicsModifyBone final
{
public:
	struct FBoneReference                         BoneRef;                                           // 0x0000(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ParentIndex;                                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C04[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ChildIndexs;                                       // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FKawaiiPhysicsSettings                 PhysicsSettings;                                   // 0x0028(0x0018)(NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PrevLocation;                                      // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C05[0x8];                                     // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  PrevRotation;                                      // 0x0060(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                PoseLocation;                                      // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C06[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  PoseRotation;                                      // 0x0080(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                PoseScale;                                         // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LengthFromRoot;                                    // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDummy;                                            // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C07[0xF];                                     // 0x00A1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKawaiiPhysicsModifyBone) == 0x000010, "Wrong alignment on FKawaiiPhysicsModifyBone");
static_assert(sizeof(FKawaiiPhysicsModifyBone) == 0x0000B0, "Wrong size on FKawaiiPhysicsModifyBone");
static_assert(offsetof(FKawaiiPhysicsModifyBone, BoneRef) == 0x000000, "Member 'FKawaiiPhysicsModifyBone::BoneRef' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, ParentIndex) == 0x000010, "Member 'FKawaiiPhysicsModifyBone::ParentIndex' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, ChildIndexs) == 0x000018, "Member 'FKawaiiPhysicsModifyBone::ChildIndexs' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, PhysicsSettings) == 0x000028, "Member 'FKawaiiPhysicsModifyBone::PhysicsSettings' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, Location) == 0x000040, "Member 'FKawaiiPhysicsModifyBone::Location' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, PrevLocation) == 0x00004C, "Member 'FKawaiiPhysicsModifyBone::PrevLocation' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, PrevRotation) == 0x000060, "Member 'FKawaiiPhysicsModifyBone::PrevRotation' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, PoseLocation) == 0x000070, "Member 'FKawaiiPhysicsModifyBone::PoseLocation' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, PoseRotation) == 0x000080, "Member 'FKawaiiPhysicsModifyBone::PoseRotation' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, PoseScale) == 0x000090, "Member 'FKawaiiPhysicsModifyBone::PoseScale' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, LengthFromRoot) == 0x00009C, "Member 'FKawaiiPhysicsModifyBone::LengthFromRoot' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, bDummy) == 0x0000A0, "Member 'FKawaiiPhysicsModifyBone::bDummy' has a wrong offset!");

// ScriptStruct KawaiiPhysics.AnimNode_KawaiiPhysics
// 0x0258 (0x0320 - 0x00C8)
struct FAnimNode_KawaiiPhysics final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         RootBone;                                          // 0x00C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FBoneReference>                 ExcludeBones;                                      // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         TargetFramerate;                                   // 0x00E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideTargetFramerate;                           // 0x00EC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C08[0x3];                                     // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaTimeMinFPS;                                   // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               HairRotateRotator;                                 // 0x00F4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                HairRotateForceDir;                                // 0x0100(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HairRotateMin;                                     // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HairRotateMax;                                     // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionPushDist;                                 // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKawaiiPhysicsSettings                 PhysicsSettings;                                   // 0x0118(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class UCurveFloat*                            DampingCurve;                                      // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            WorldDampingLocationCurve;                         // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            WorldDampingRotationCurve;                         // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            StiffnessCurve;                                    // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            RadiusCurve;                                       // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            LimitAngleCurve;                                   // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdatePhysicsSettingsInGame;                      // 0x0160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C09[0x3];                                     // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DummyBoneLength;                                   // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlanarConstraint                             PlanarConstraint;                                  // 0x0168(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RunTime_Debug;                                     // 0x0169(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0A[0x6];                                     // 0x016A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSphericalLimit>                SphericalLimits;                                   // 0x0170(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCapsuleLimit>                  CapsuleLimits;                                     // 0x0180(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPlanarLimit>                   PlanarLimits;                                      // 0x0190(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRoundConeLimit>                RoundConeLimits;                                   // 0x01A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0B[0x40];                                    // 0x01B0(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKawaiiHairCollision                   HairCollision;                                     // 0x01F0(0x0090)(Edit, NativeAccessSpecifierPublic)
	float                                         TeleportDistanceThreshold;                         // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeleportRotationThreshold;                         // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Gravity;                                           // 0x0288(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableWind;                                       // 0x0294(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0C[0x3];                                     // 0x0295(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindScale;                                         // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0D[0x4];                                     // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKawaiiPhysicsModifyBone>       ModifyBones;                                       // 0x02A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         TotalBoneLength;                                   // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C0E[0xC];                                     // 0x02B4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PreSkelCompTransform;                              // 0x02C0(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	bool                                          bInitPhysicsSettings;                              // 0x02F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C0F[0x2F];                                    // 0x02F1(0x002F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_KawaiiPhysics) == 0x000010, "Wrong alignment on FAnimNode_KawaiiPhysics");
static_assert(sizeof(FAnimNode_KawaiiPhysics) == 0x000320, "Wrong size on FAnimNode_KawaiiPhysics");
static_assert(offsetof(FAnimNode_KawaiiPhysics, RootBone) == 0x0000C8, "Member 'FAnimNode_KawaiiPhysics::RootBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, ExcludeBones) == 0x0000D8, "Member 'FAnimNode_KawaiiPhysics::ExcludeBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, TargetFramerate) == 0x0000E8, "Member 'FAnimNode_KawaiiPhysics::TargetFramerate' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, OverrideTargetFramerate) == 0x0000EC, "Member 'FAnimNode_KawaiiPhysics::OverrideTargetFramerate' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, DeltaTimeMinFPS) == 0x0000F0, "Member 'FAnimNode_KawaiiPhysics::DeltaTimeMinFPS' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, HairRotateRotator) == 0x0000F4, "Member 'FAnimNode_KawaiiPhysics::HairRotateRotator' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, HairRotateForceDir) == 0x000100, "Member 'FAnimNode_KawaiiPhysics::HairRotateForceDir' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, HairRotateMin) == 0x00010C, "Member 'FAnimNode_KawaiiPhysics::HairRotateMin' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, HairRotateMax) == 0x000110, "Member 'FAnimNode_KawaiiPhysics::HairRotateMax' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, CollisionPushDist) == 0x000114, "Member 'FAnimNode_KawaiiPhysics::CollisionPushDist' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, PhysicsSettings) == 0x000118, "Member 'FAnimNode_KawaiiPhysics::PhysicsSettings' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, DampingCurve) == 0x000130, "Member 'FAnimNode_KawaiiPhysics::DampingCurve' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, WorldDampingLocationCurve) == 0x000138, "Member 'FAnimNode_KawaiiPhysics::WorldDampingLocationCurve' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, WorldDampingRotationCurve) == 0x000140, "Member 'FAnimNode_KawaiiPhysics::WorldDampingRotationCurve' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, StiffnessCurve) == 0x000148, "Member 'FAnimNode_KawaiiPhysics::StiffnessCurve' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, RadiusCurve) == 0x000150, "Member 'FAnimNode_KawaiiPhysics::RadiusCurve' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, LimitAngleCurve) == 0x000158, "Member 'FAnimNode_KawaiiPhysics::LimitAngleCurve' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, bUpdatePhysicsSettingsInGame) == 0x000160, "Member 'FAnimNode_KawaiiPhysics::bUpdatePhysicsSettingsInGame' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, DummyBoneLength) == 0x000164, "Member 'FAnimNode_KawaiiPhysics::DummyBoneLength' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, PlanarConstraint) == 0x000168, "Member 'FAnimNode_KawaiiPhysics::PlanarConstraint' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, RunTime_Debug) == 0x000169, "Member 'FAnimNode_KawaiiPhysics::RunTime_Debug' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, SphericalLimits) == 0x000170, "Member 'FAnimNode_KawaiiPhysics::SphericalLimits' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, CapsuleLimits) == 0x000180, "Member 'FAnimNode_KawaiiPhysics::CapsuleLimits' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, PlanarLimits) == 0x000190, "Member 'FAnimNode_KawaiiPhysics::PlanarLimits' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, RoundConeLimits) == 0x0001A0, "Member 'FAnimNode_KawaiiPhysics::RoundConeLimits' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, HairCollision) == 0x0001F0, "Member 'FAnimNode_KawaiiPhysics::HairCollision' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, TeleportDistanceThreshold) == 0x000280, "Member 'FAnimNode_KawaiiPhysics::TeleportDistanceThreshold' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, TeleportRotationThreshold) == 0x000284, "Member 'FAnimNode_KawaiiPhysics::TeleportRotationThreshold' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, Gravity) == 0x000288, "Member 'FAnimNode_KawaiiPhysics::Gravity' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, bEnableWind) == 0x000294, "Member 'FAnimNode_KawaiiPhysics::bEnableWind' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, WindScale) == 0x000298, "Member 'FAnimNode_KawaiiPhysics::WindScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, ModifyBones) == 0x0002A0, "Member 'FAnimNode_KawaiiPhysics::ModifyBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, TotalBoneLength) == 0x0002B0, "Member 'FAnimNode_KawaiiPhysics::TotalBoneLength' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, PreSkelCompTransform) == 0x0002C0, "Member 'FAnimNode_KawaiiPhysics::PreSkelCompTransform' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, bInitPhysicsSettings) == 0x0002F0, "Member 'FAnimNode_KawaiiPhysics::bInitPhysicsSettings' has a wrong offset!");

}

