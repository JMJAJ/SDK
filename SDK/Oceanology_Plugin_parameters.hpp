#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Oceanology_Plugin

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function Oceanology_Plugin.AOceanologyLightControl.InitQuadTreeHeightfog
// 0x0050 (0x0050 - 0x0000)
struct AOceanologyLightControl_InitQuadTreeHeightfog final
{
public:
	class AExponentialHeightFog*                  HeightFogActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogDensity;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogHeightFalloff;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogMaxOpacity;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogInscatteringColor;                              // 0x0014(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDistance;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogCutoffDistance;                                 // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FExponentialHeightFogData              SeData;                                            // 0x002C(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringExponent;                   // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringStartDistance;              // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DirectionalInscatteringColor;                      // 0x0040(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AOceanologyLightControl_InitQuadTreeHeightfog) == 0x000008, "Wrong alignment on AOceanologyLightControl_InitQuadTreeHeightfog");
static_assert(sizeof(AOceanologyLightControl_InitQuadTreeHeightfog) == 0x000050, "Wrong size on AOceanologyLightControl_InitQuadTreeHeightfog");
static_assert(offsetof(AOceanologyLightControl_InitQuadTreeHeightfog, HeightFogActor) == 0x000000, "Member 'AOceanologyLightControl_InitQuadTreeHeightfog::HeightFogActor' has a wrong offset!");
static_assert(offsetof(AOceanologyLightControl_InitQuadTreeHeightfog, FogDensity) == 0x000008, "Member 'AOceanologyLightControl_InitQuadTreeHeightfog::FogDensity' has a wrong offset!");
static_assert(offsetof(AOceanologyLightControl_InitQuadTreeHeightfog, FogHeightFalloff) == 0x00000C, "Member 'AOceanologyLightControl_InitQuadTreeHeightfog::FogHeightFalloff' has a wrong offset!");
static_assert(offsetof(AOceanologyLightControl_InitQuadTreeHeightfog, FogMaxOpacity) == 0x000010, "Member 'AOceanologyLightControl_InitQuadTreeHeightfog::FogMaxOpacity' has a wrong offset!");
static_assert(offsetof(AOceanologyLightControl_InitQuadTreeHeightfog, FogInscatteringColor) == 0x000014, "Member 'AOceanologyLightControl_InitQuadTreeHeightfog::FogInscatteringColor' has a wrong offset!");
static_assert(offsetof(AOceanologyLightControl_InitQuadTreeHeightfog, StartDistance) == 0x000024, "Member 'AOceanologyLightControl_InitQuadTreeHeightfog::StartDistance' has a wrong offset!");
static_assert(offsetof(AOceanologyLightControl_InitQuadTreeHeightfog, FogCutoffDistance) == 0x000028, "Member 'AOceanologyLightControl_InitQuadTreeHeightfog::FogCutoffDistance' has a wrong offset!");
static_assert(offsetof(AOceanologyLightControl_InitQuadTreeHeightfog, SeData) == 0x00002C, "Member 'AOceanologyLightControl_InitQuadTreeHeightfog::SeData' has a wrong offset!");
static_assert(offsetof(AOceanologyLightControl_InitQuadTreeHeightfog, DirectionalInscatteringExponent) == 0x000038, "Member 'AOceanologyLightControl_InitQuadTreeHeightfog::DirectionalInscatteringExponent' has a wrong offset!");
static_assert(offsetof(AOceanologyLightControl_InitQuadTreeHeightfog, DirectionalInscatteringStartDistance) == 0x00003C, "Member 'AOceanologyLightControl_InitQuadTreeHeightfog::DirectionalInscatteringStartDistance' has a wrong offset!");
static_assert(offsetof(AOceanologyLightControl_InitQuadTreeHeightfog, DirectionalInscatteringColor) == 0x000040, "Member 'AOceanologyLightControl_InitQuadTreeHeightfog::DirectionalInscatteringColor' has a wrong offset!");

// Function Oceanology_Plugin.AOceanologyLightControl.InitQuadTreelightInfo
// 0x0040 (0x0040 - 0x0000)
struct AOceanologyLightControl_InitQuadTreelightInfo final
{
public:
	class ALight*                                 Light;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightDensity;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightColor;                                        // 0x000C(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1767[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASkyLight*                              SkyLight;                                          // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkylightDensity;                                   // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkyLightColor;                                     // 0x002C(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1768[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AOceanologyLightControl_InitQuadTreelightInfo) == 0x000008, "Wrong alignment on AOceanologyLightControl_InitQuadTreelightInfo");
static_assert(sizeof(AOceanologyLightControl_InitQuadTreelightInfo) == 0x000040, "Wrong size on AOceanologyLightControl_InitQuadTreelightInfo");
static_assert(offsetof(AOceanologyLightControl_InitQuadTreelightInfo, Light) == 0x000000, "Member 'AOceanologyLightControl_InitQuadTreelightInfo::Light' has a wrong offset!");
static_assert(offsetof(AOceanologyLightControl_InitQuadTreelightInfo, LightDensity) == 0x000008, "Member 'AOceanologyLightControl_InitQuadTreelightInfo::LightDensity' has a wrong offset!");
static_assert(offsetof(AOceanologyLightControl_InitQuadTreelightInfo, LightColor) == 0x00000C, "Member 'AOceanologyLightControl_InitQuadTreelightInfo::LightColor' has a wrong offset!");
static_assert(offsetof(AOceanologyLightControl_InitQuadTreelightInfo, SkyLight) == 0x000020, "Member 'AOceanologyLightControl_InitQuadTreelightInfo::SkyLight' has a wrong offset!");
static_assert(offsetof(AOceanologyLightControl_InitQuadTreelightInfo, SkylightDensity) == 0x000028, "Member 'AOceanologyLightControl_InitQuadTreelightInfo::SkylightDensity' has a wrong offset!");
static_assert(offsetof(AOceanologyLightControl_InitQuadTreelightInfo, SkyLightColor) == 0x00002C, "Member 'AOceanologyLightControl_InitQuadTreelightInfo::SkyLightColor' has a wrong offset!");

// Function Oceanology_Plugin.AOceanologyLightControl.UpdateSkylight
// 0x0014 (0x0014 - 0x0000)
struct AOceanologyLightControl_UpdateSkylight final
{
public:
	float                                         Intensity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AOceanologyLightControl_UpdateSkylight) == 0x000004, "Wrong alignment on AOceanologyLightControl_UpdateSkylight");
static_assert(sizeof(AOceanologyLightControl_UpdateSkylight) == 0x000014, "Wrong size on AOceanologyLightControl_UpdateSkylight");
static_assert(offsetof(AOceanologyLightControl_UpdateSkylight, Intensity) == 0x000000, "Member 'AOceanologyLightControl_UpdateSkylight::Intensity' has a wrong offset!");
static_assert(offsetof(AOceanologyLightControl_UpdateSkylight, Color) == 0x000004, "Member 'AOceanologyLightControl_UpdateSkylight::Color' has a wrong offset!");

// Function Oceanology_Plugin.AOceanologyLightControl.UpdateSunlightIntensity
// 0x0004 (0x0004 - 0x0000)
struct AOceanologyLightControl_UpdateSunlightIntensity final
{
public:
	float                                         Intensity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AOceanologyLightControl_UpdateSunlightIntensity) == 0x000004, "Wrong alignment on AOceanologyLightControl_UpdateSunlightIntensity");
static_assert(sizeof(AOceanologyLightControl_UpdateSunlightIntensity) == 0x000004, "Wrong size on AOceanologyLightControl_UpdateSunlightIntensity");
static_assert(offsetof(AOceanologyLightControl_UpdateSunlightIntensity, Intensity) == 0x000000, "Member 'AOceanologyLightControl_UpdateSunlightIntensity::Intensity' has a wrong offset!");

// Function Oceanology_Plugin.HottaSwimmingComponent.GetReferenceToOceanology
// 0x0008 (0x0008 - 0x0000)
struct HottaSwimmingComponent_GetReferenceToOceanology final
{
public:
	class AQuadTree*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HottaSwimmingComponent_GetReferenceToOceanology) == 0x000008, "Wrong alignment on HottaSwimmingComponent_GetReferenceToOceanology");
static_assert(sizeof(HottaSwimmingComponent_GetReferenceToOceanology) == 0x000008, "Wrong size on HottaSwimmingComponent_GetReferenceToOceanology");
static_assert(offsetof(HottaSwimmingComponent_GetReferenceToOceanology, ReturnValue) == 0x000000, "Member 'HottaSwimmingComponent_GetReferenceToOceanology::ReturnValue' has a wrong offset!");

// Function Oceanology_Plugin.Infinite_Compound.GetCamLoction
// 0x000C (0x000C - 0x0000)
struct Infinite_Compound_GetCamLoction final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Infinite_Compound_GetCamLoction) == 0x000004, "Wrong alignment on Infinite_Compound_GetCamLoction");
static_assert(sizeof(Infinite_Compound_GetCamLoction) == 0x00000C, "Wrong size on Infinite_Compound_GetCamLoction");
static_assert(offsetof(Infinite_Compound_GetCamLoction, ReturnValue) == 0x000000, "Member 'Infinite_Compound_GetCamLoction::ReturnValue' has a wrong offset!");

// Function Oceanology_Plugin.Infinite_Compound.GetCamRotator
// 0x000C (0x000C - 0x0000)
struct Infinite_Compound_GetCamRotator final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Infinite_Compound_GetCamRotator) == 0x000004, "Wrong alignment on Infinite_Compound_GetCamRotator");
static_assert(sizeof(Infinite_Compound_GetCamRotator) == 0x00000C, "Wrong size on Infinite_Compound_GetCamRotator");
static_assert(offsetof(Infinite_Compound_GetCamRotator, ReturnValue) == 0x000000, "Member 'Infinite_Compound_GetCamRotator::ReturnValue' has a wrong offset!");

// Function Oceanology_Plugin.Oceanology_PluginBPLibrary.Oceanology_PluginSampleFunction
// 0x0008 (0x0008 - 0x0000)
struct Oceanology_PluginBPLibrary_Oceanology_PluginSampleFunction final
{
public:
	float                                         Param;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Oceanology_PluginBPLibrary_Oceanology_PluginSampleFunction) == 0x000004, "Wrong alignment on Oceanology_PluginBPLibrary_Oceanology_PluginSampleFunction");
static_assert(sizeof(Oceanology_PluginBPLibrary_Oceanology_PluginSampleFunction) == 0x000008, "Wrong size on Oceanology_PluginBPLibrary_Oceanology_PluginSampleFunction");
static_assert(offsetof(Oceanology_PluginBPLibrary_Oceanology_PluginSampleFunction, Param) == 0x000000, "Member 'Oceanology_PluginBPLibrary_Oceanology_PluginSampleFunction::Param' has a wrong offset!");
static_assert(offsetof(Oceanology_PluginBPLibrary_Oceanology_PluginSampleFunction, ReturnValue) == 0x000004, "Member 'Oceanology_PluginBPLibrary_Oceanology_PluginSampleFunction::ReturnValue' has a wrong offset!");

// Function Oceanology_Plugin.QuadTree.BluePrintTick
// 0x0004 (0x0004 - 0x0000)
struct QuadTree_BluePrintTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuadTree_BluePrintTick) == 0x000004, "Wrong alignment on QuadTree_BluePrintTick");
static_assert(sizeof(QuadTree_BluePrintTick) == 0x000004, "Wrong size on QuadTree_BluePrintTick");
static_assert(offsetof(QuadTree_BluePrintTick, DeltaSeconds) == 0x000000, "Member 'QuadTree_BluePrintTick::DeltaSeconds' has a wrong offset!");

// Function Oceanology_Plugin.QuadTree.EditorTick
// 0x0004 (0x0004 - 0x0000)
struct QuadTree_EditorTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuadTree_EditorTick) == 0x000004, "Wrong alignment on QuadTree_EditorTick");
static_assert(sizeof(QuadTree_EditorTick) == 0x000004, "Wrong size on QuadTree_EditorTick");
static_assert(offsetof(QuadTree_EditorTick, DeltaSeconds) == 0x000000, "Member 'QuadTree_EditorTick::DeltaSeconds' has a wrong offset!");

// Function Oceanology_Plugin.QuadTree.GetWaveHeightEvent
// 0x000C (0x000C - 0x0000)
struct QuadTree_GetWaveHeightEvent final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuadTree_GetWaveHeightEvent) == 0x000004, "Wrong alignment on QuadTree_GetWaveHeightEvent");
static_assert(sizeof(QuadTree_GetWaveHeightEvent) == 0x00000C, "Wrong size on QuadTree_GetWaveHeightEvent");
static_assert(offsetof(QuadTree_GetWaveHeightEvent, Pos) == 0x000000, "Member 'QuadTree_GetWaveHeightEvent::Pos' has a wrong offset!");

// Function Oceanology_Plugin.QuadTree.GetWaveHeightHotta
// 0x000C (0x000C - 0x0000)
struct QuadTree_GetWaveHeightHotta final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuadTree_GetWaveHeightHotta) == 0x000004, "Wrong alignment on QuadTree_GetWaveHeightHotta");
static_assert(sizeof(QuadTree_GetWaveHeightHotta) == 0x00000C, "Wrong size on QuadTree_GetWaveHeightHotta");
static_assert(offsetof(QuadTree_GetWaveHeightHotta, Pos) == 0x000000, "Member 'QuadTree_GetWaveHeightHotta::Pos' has a wrong offset!");

// Function Oceanology_Plugin.QuadTree.InitPostProcess
// 0x0018 (0x0018 - 0x0000)
struct QuadTree_InitPostProcess final
{
public:
	class UPostProcessComponent*                  PostProcessVolume;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               Custom1;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               Custom2;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuadTree_InitPostProcess) == 0x000008, "Wrong alignment on QuadTree_InitPostProcess");
static_assert(sizeof(QuadTree_InitPostProcess) == 0x000018, "Wrong size on QuadTree_InitPostProcess");
static_assert(offsetof(QuadTree_InitPostProcess, PostProcessVolume) == 0x000000, "Member 'QuadTree_InitPostProcess::PostProcessVolume' has a wrong offset!");
static_assert(offsetof(QuadTree_InitPostProcess, Custom1) == 0x000008, "Member 'QuadTree_InitPostProcess::Custom1' has a wrong offset!");
static_assert(offsetof(QuadTree_InitPostProcess, Custom2) == 0x000010, "Member 'QuadTree_InitPostProcess::Custom2' has a wrong offset!");

// Function Oceanology_Plugin.QuadTree.IsUnderWater
// 0x0001 (0x0001 - 0x0000)
struct QuadTree_IsUnderWater final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuadTree_IsUnderWater) == 0x000001, "Wrong alignment on QuadTree_IsUnderWater");
static_assert(sizeof(QuadTree_IsUnderWater) == 0x000001, "Wrong size on QuadTree_IsUnderWater");
static_assert(offsetof(QuadTree_IsUnderWater, ReturnValue) == 0x000000, "Member 'QuadTree_IsUnderWater::ReturnValue' has a wrong offset!");

// Function Oceanology_Plugin.QuadTree.PostProcessMaterialWeight
// 0x0010 (0x0010 - 0x0000)
struct QuadTree_PostProcessMaterialWeight final
{
public:
	class UPostProcessComponent*                  PostProcessVolume;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnderWater;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1779[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuadTree_PostProcessMaterialWeight) == 0x000008, "Wrong alignment on QuadTree_PostProcessMaterialWeight");
static_assert(sizeof(QuadTree_PostProcessMaterialWeight) == 0x000010, "Wrong size on QuadTree_PostProcessMaterialWeight");
static_assert(offsetof(QuadTree_PostProcessMaterialWeight, PostProcessVolume) == 0x000000, "Member 'QuadTree_PostProcessMaterialWeight::PostProcessVolume' has a wrong offset!");
static_assert(offsetof(QuadTree_PostProcessMaterialWeight, bUnderWater) == 0x000008, "Member 'QuadTree_PostProcessMaterialWeight::bUnderWater' has a wrong offset!");

// Function Oceanology_Plugin.QuadTree.Procedural
// 0x0018 (0x0018 - 0x0000)
struct QuadTree_Procedural final
{
public:
	class UHierarchicalInstancedStaticMeshComponent* HISMC;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GridSize;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GridTiles;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CellSize;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_177A[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuadTree_Procedural) == 0x000008, "Wrong alignment on QuadTree_Procedural");
static_assert(sizeof(QuadTree_Procedural) == 0x000018, "Wrong size on QuadTree_Procedural");
static_assert(offsetof(QuadTree_Procedural, HISMC) == 0x000000, "Member 'QuadTree_Procedural::HISMC' has a wrong offset!");
static_assert(offsetof(QuadTree_Procedural, GridSize) == 0x000008, "Member 'QuadTree_Procedural::GridSize' has a wrong offset!");
static_assert(offsetof(QuadTree_Procedural, GridTiles) == 0x00000C, "Member 'QuadTree_Procedural::GridTiles' has a wrong offset!");
static_assert(offsetof(QuadTree_Procedural, CellSize) == 0x000010, "Member 'QuadTree_Procedural::CellSize' has a wrong offset!");

// Function Oceanology_Plugin.QuadTree.SetEditorTickEnabled
// 0x0001 (0x0001 - 0x0000)
struct QuadTree_SetEditorTickEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuadTree_SetEditorTickEnabled) == 0x000001, "Wrong alignment on QuadTree_SetEditorTickEnabled");
static_assert(sizeof(QuadTree_SetEditorTickEnabled) == 0x000001, "Wrong size on QuadTree_SetEditorTickEnabled");
static_assert(offsetof(QuadTree_SetEditorTickEnabled, bEnabled) == 0x000000, "Member 'QuadTree_SetEditorTickEnabled::bEnabled' has a wrong offset!");

}

