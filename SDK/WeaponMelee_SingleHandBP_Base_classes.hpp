#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WeaponMelee_SingleHandBP_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "HottaFramework_structs.hpp"
#include "HottaFramework_classes.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass WeaponMelee_SingleHandBP_Base.WeaponMelee_SingleHandBP_Base_C
// 0x0030 (0x1330 - 0x1300)
#pragma pack(push, 0x1)
class alignas(0x10) AWeaponMelee_SingleHandBP_Base_C : public AMeleeBase
{
public:
	uint8                                         Pad_565F[0x8];                                     // 0x12F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x1300(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          RhandBox;                                          // 0x1308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_NewTrack_0_5C76075C404128E806C446B18329B575; // 0x1310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_5C76075C404128E806C446B18329B575; // 0x1314(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5660[0x3];                                     // 0x1315(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x1318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x1320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WeaponMelee_SingleHandBP_Base(int32 EntryPoint);
	void K2_TriggerHiddenEffect(bool bOnHand);
	void K2_TriggerDissolveShowEffect(bool bStarted);
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void CreatPointLight(const struct FLinearColor& Color, float ColorIntensity);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WeaponMelee_SingleHandBP_Base_C">();
	}
	static class AWeaponMelee_SingleHandBP_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWeaponMelee_SingleHandBP_Base_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(AWeaponMelee_SingleHandBP_Base_C) == 0x000010, "Wrong alignment on AWeaponMelee_SingleHandBP_Base_C");
static_assert(sizeof(AWeaponMelee_SingleHandBP_Base_C) == 0x001330, "Wrong size on AWeaponMelee_SingleHandBP_Base_C");
static_assert(offsetof(AWeaponMelee_SingleHandBP_Base_C, UberGraphFrame) == 0x001300, "Member 'AWeaponMelee_SingleHandBP_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AWeaponMelee_SingleHandBP_Base_C, RhandBox) == 0x001308, "Member 'AWeaponMelee_SingleHandBP_Base_C::RhandBox' has a wrong offset!");
static_assert(offsetof(AWeaponMelee_SingleHandBP_Base_C, Timeline_0_NewTrack_0_5C76075C404128E806C446B18329B575) == 0x001310, "Member 'AWeaponMelee_SingleHandBP_Base_C::Timeline_0_NewTrack_0_5C76075C404128E806C446B18329B575' has a wrong offset!");
static_assert(offsetof(AWeaponMelee_SingleHandBP_Base_C, Timeline_0__Direction_5C76075C404128E806C446B18329B575) == 0x001314, "Member 'AWeaponMelee_SingleHandBP_Base_C::Timeline_0__Direction_5C76075C404128E806C446B18329B575' has a wrong offset!");
static_assert(offsetof(AWeaponMelee_SingleHandBP_Base_C, Timeline_0) == 0x001318, "Member 'AWeaponMelee_SingleHandBP_Base_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(AWeaponMelee_SingleHandBP_Base_C, PointLight) == 0x001320, "Member 'AWeaponMelee_SingleHandBP_Base_C::PointLight' has a wrong offset!");

}

