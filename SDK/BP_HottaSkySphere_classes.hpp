#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HottaSkySphere

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Oceanology_Plugin_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "HottaFramework_structs.hpp"
#include "HottaFramework_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HottaSkySphere.BP_HottaSkySphere_C
// 0x00C0 (0x1BB0 - 0x1AF0)
class ABP_HottaSkySphere_C final : public AHottaSkyActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x1AF0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         LightInitIntensity;                                // 0x1AF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SkyInitLightIntensity;                             // 0x1AFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Fog_Density;                                       // 0x1B00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Fog_Height_Falloff;                                // 0x1B04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Fog_Max_Opacity;                                   // 0x1B08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Fog_Inscattering_Color;                            // 0x1B0C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Start_Distance;                                    // 0x1B1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Fog_Cutoff_Distance;                               // 0x1B20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FExponentialHeightFogData              Se_Data;                                           // 0x1B24(0x000C)(Edit, BlueprintVisible, NoDestructor)
	float                                         Directional_Inscattering_Exponent;                 // 0x1B30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Directional_Inscattering_Start_Distance;           // 0x1B34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Directional_Inscattering_Color;                    // 0x1B38(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AExponentialHeightFog*                  HeightfogTest;                                     // 0x1B48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            SkylihgtCurveSave;                                 // 0x1B50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InitFogHeight;                                     // 0x1B58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVolumetricFog                         VolumetricFog;                                     // 0x1B5C(0x0030)(Edit, BlueprintVisible, NoDestructor)
	struct FLightShafts                           LightShafts;                                       // 0x1B8C(0x0020)(Edit, BlueprintVisible, NoDestructor)

public:
	void LightControlUpdate();
	void InitlightInfo();
	void UserConstructionScript();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void ExecuteUbergraph_BP_HottaSkySphere(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HottaSkySphere_C">();
	}
	static class ABP_HottaSkySphere_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HottaSkySphere_C>();
	}
};
static_assert(alignof(ABP_HottaSkySphere_C) == 0x000008, "Wrong alignment on ABP_HottaSkySphere_C");
static_assert(sizeof(ABP_HottaSkySphere_C) == 0x001BB0, "Wrong size on ABP_HottaSkySphere_C");
static_assert(offsetof(ABP_HottaSkySphere_C, UberGraphFrame) == 0x001AF0, "Member 'ABP_HottaSkySphere_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_HottaSkySphere_C, LightInitIntensity) == 0x001AF8, "Member 'ABP_HottaSkySphere_C::LightInitIntensity' has a wrong offset!");
static_assert(offsetof(ABP_HottaSkySphere_C, SkyInitLightIntensity) == 0x001AFC, "Member 'ABP_HottaSkySphere_C::SkyInitLightIntensity' has a wrong offset!");
static_assert(offsetof(ABP_HottaSkySphere_C, Fog_Density) == 0x001B00, "Member 'ABP_HottaSkySphere_C::Fog_Density' has a wrong offset!");
static_assert(offsetof(ABP_HottaSkySphere_C, Fog_Height_Falloff) == 0x001B04, "Member 'ABP_HottaSkySphere_C::Fog_Height_Falloff' has a wrong offset!");
static_assert(offsetof(ABP_HottaSkySphere_C, Fog_Max_Opacity) == 0x001B08, "Member 'ABP_HottaSkySphere_C::Fog_Max_Opacity' has a wrong offset!");
static_assert(offsetof(ABP_HottaSkySphere_C, Fog_Inscattering_Color) == 0x001B0C, "Member 'ABP_HottaSkySphere_C::Fog_Inscattering_Color' has a wrong offset!");
static_assert(offsetof(ABP_HottaSkySphere_C, Start_Distance) == 0x001B1C, "Member 'ABP_HottaSkySphere_C::Start_Distance' has a wrong offset!");
static_assert(offsetof(ABP_HottaSkySphere_C, Fog_Cutoff_Distance) == 0x001B20, "Member 'ABP_HottaSkySphere_C::Fog_Cutoff_Distance' has a wrong offset!");
static_assert(offsetof(ABP_HottaSkySphere_C, Se_Data) == 0x001B24, "Member 'ABP_HottaSkySphere_C::Se_Data' has a wrong offset!");
static_assert(offsetof(ABP_HottaSkySphere_C, Directional_Inscattering_Exponent) == 0x001B30, "Member 'ABP_HottaSkySphere_C::Directional_Inscattering_Exponent' has a wrong offset!");
static_assert(offsetof(ABP_HottaSkySphere_C, Directional_Inscattering_Start_Distance) == 0x001B34, "Member 'ABP_HottaSkySphere_C::Directional_Inscattering_Start_Distance' has a wrong offset!");
static_assert(offsetof(ABP_HottaSkySphere_C, Directional_Inscattering_Color) == 0x001B38, "Member 'ABP_HottaSkySphere_C::Directional_Inscattering_Color' has a wrong offset!");
static_assert(offsetof(ABP_HottaSkySphere_C, HeightfogTest) == 0x001B48, "Member 'ABP_HottaSkySphere_C::HeightfogTest' has a wrong offset!");
static_assert(offsetof(ABP_HottaSkySphere_C, SkylihgtCurveSave) == 0x001B50, "Member 'ABP_HottaSkySphere_C::SkylihgtCurveSave' has a wrong offset!");
static_assert(offsetof(ABP_HottaSkySphere_C, InitFogHeight) == 0x001B58, "Member 'ABP_HottaSkySphere_C::InitFogHeight' has a wrong offset!");
static_assert(offsetof(ABP_HottaSkySphere_C, VolumetricFog) == 0x001B5C, "Member 'ABP_HottaSkySphere_C::VolumetricFog' has a wrong offset!");
static_assert(offsetof(ABP_HottaSkySphere_C, LightShafts) == 0x001B8C, "Member 'ABP_HottaSkySphere_C::LightShafts' has a wrong offset!");

}

