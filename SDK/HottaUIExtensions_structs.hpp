#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HottaUIExtensions

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum HottaUIExtensions.EScrollDirectionType
// NumValues: 0x0004
enum class EScrollDirectionType : uint8
{
	None                                     = 0,
	Horizontal                               = 1,
	Vertical                                 = 2,
	EScrollDirectionType_MAX                 = 3,
};

// Enum HottaUIExtensions.ESpringType
// NumValues: 0x0005
enum class ESpringType : uint8
{
	None                                     = 0,
	CriticallyDamped                         = 1,
	UnderDamped                              = 2,
	OverDamped                               = 3,
	ESpringType_MAX                          = 4,
};

// Enum HottaUIExtensions.EInputActionState
// NumValues: 0x0005
enum class EInputActionState : uint8
{
	Enabled                                  = 0,
	Disabled                                 = 1,
	Hidden                                   = 2,
	HiddenAndDisabled                        = 3,
	EInputActionState_MAX                    = 4,
};

// ScriptStruct HottaUIExtensions.SpringDescription
// 0x000C (0x000C - 0x0000)
struct FSpringDescription final
{
public:
	float                                         Mass;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stiffness;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damping;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpringDescription) == 0x000004, "Wrong alignment on FSpringDescription");
static_assert(sizeof(FSpringDescription) == 0x00000C, "Wrong size on FSpringDescription");
static_assert(offsetof(FSpringDescription, Mass) == 0x000000, "Member 'FSpringDescription::Mass' has a wrong offset!");
static_assert(offsetof(FSpringDescription, Stiffness) == 0x000004, "Member 'FSpringDescription::Stiffness' has a wrong offset!");
static_assert(offsetof(FSpringDescription, Damping) == 0x000008, "Member 'FSpringDescription::Damping' has a wrong offset!");

// ScriptStruct HottaUIExtensions.Tolerance
// 0x000C (0x000C - 0x0000)
struct FTolerance final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Velocity;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTolerance) == 0x000004, "Wrong alignment on FTolerance");
static_assert(sizeof(FTolerance) == 0x00000C, "Wrong size on FTolerance");
static_assert(offsetof(FTolerance, Distance) == 0x000000, "Member 'FTolerance::Distance' has a wrong offset!");
static_assert(offsetof(FTolerance, Time) == 0x000004, "Member 'FTolerance::Time' has a wrong offset!");
static_assert(offsetof(FTolerance, Velocity) == 0x000008, "Member 'FTolerance::Velocity' has a wrong offset!");

// ScriptStruct HottaUIExtensions.UICircleViewChildWidgetInfo
// 0x0010 (0x0010 - 0x0000)
struct FUICircleViewChildWidgetInfo final
{
public:
	int32                                         ChildIndex;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RelativePosition;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUICircleViewChildWidgetInfo) == 0x000004, "Wrong alignment on FUICircleViewChildWidgetInfo");
static_assert(sizeof(FUICircleViewChildWidgetInfo) == 0x000010, "Wrong size on FUICircleViewChildWidgetInfo");
static_assert(offsetof(FUICircleViewChildWidgetInfo, ChildIndex) == 0x000000, "Member 'FUICircleViewChildWidgetInfo::ChildIndex' has a wrong offset!");
static_assert(offsetof(FUICircleViewChildWidgetInfo, Angle) == 0x000004, "Member 'FUICircleViewChildWidgetInfo::Angle' has a wrong offset!");
static_assert(offsetof(FUICircleViewChildWidgetInfo, RelativePosition) == 0x000008, "Member 'FUICircleViewChildWidgetInfo::RelativePosition' has a wrong offset!");

// ScriptStruct HottaUIExtensions.VelocityTracker
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FVelocityTracker final
{
public:
	uint8                                         Pad_1157[0x18];                                    // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVelocityTracker) == 0x000008, "Wrong alignment on FVelocityTracker");
static_assert(sizeof(FVelocityTracker) == 0x000018, "Wrong size on FVelocityTracker");

}

