#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FlyingNavSystem

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "FlyingNavSystem_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function FlyingNavSystem.CatmullRomSpline.GenerateSpline
// 0x0018 (0x0018 - 0x0000)
struct CatmullRomSpline_GenerateSpline final
{
public:
	TArray<struct FVector>                        PathPoints;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1821[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CatmullRomSpline_GenerateSpline) == 0x000008, "Wrong alignment on CatmullRomSpline_GenerateSpline");
static_assert(sizeof(CatmullRomSpline_GenerateSpline) == 0x000018, "Wrong size on CatmullRomSpline_GenerateSpline");
static_assert(offsetof(CatmullRomSpline_GenerateSpline, PathPoints) == 0x000000, "Member 'CatmullRomSpline_GenerateSpline::PathPoints' has a wrong offset!");
static_assert(offsetof(CatmullRomSpline_GenerateSpline, ReturnValue) == 0x000010, "Member 'CatmullRomSpline_GenerateSpline::ReturnValue' has a wrong offset!");

// Function FlyingNavSystem.CatmullRomSpline.EquidistantSamples
// 0x0018 (0x0018 - 0x0000)
struct CatmullRomSpline_EquidistantSamples final
{
public:
	float                                         SampleLength;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1822[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CatmullRomSpline_EquidistantSamples) == 0x000008, "Wrong alignment on CatmullRomSpline_EquidistantSamples");
static_assert(sizeof(CatmullRomSpline_EquidistantSamples) == 0x000018, "Wrong size on CatmullRomSpline_EquidistantSamples");
static_assert(offsetof(CatmullRomSpline_EquidistantSamples, SampleLength) == 0x000000, "Member 'CatmullRomSpline_EquidistantSamples::SampleLength' has a wrong offset!");
static_assert(offsetof(CatmullRomSpline_EquidistantSamples, ReturnValue) == 0x000008, "Member 'CatmullRomSpline_EquidistantSamples::ReturnValue' has a wrong offset!");

// Function FlyingNavSystem.CatmullRomSpline.FindParameterForDistance
// 0x0008 (0x0008 - 0x0000)
struct CatmullRomSpline_FindParameterForDistance final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CatmullRomSpline_FindParameterForDistance) == 0x000004, "Wrong alignment on CatmullRomSpline_FindParameterForDistance");
static_assert(sizeof(CatmullRomSpline_FindParameterForDistance) == 0x000008, "Wrong size on CatmullRomSpline_FindParameterForDistance");
static_assert(offsetof(CatmullRomSpline_FindParameterForDistance, Distance) == 0x000000, "Member 'CatmullRomSpline_FindParameterForDistance::Distance' has a wrong offset!");
static_assert(offsetof(CatmullRomSpline_FindParameterForDistance, ReturnValue) == 0x000004, "Member 'CatmullRomSpline_FindParameterForDistance::ReturnValue' has a wrong offset!");

// Function FlyingNavSystem.CatmullRomSpline.GetArcLength
// 0x0004 (0x0004 - 0x0000)
struct CatmullRomSpline_GetArcLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CatmullRomSpline_GetArcLength) == 0x000004, "Wrong alignment on CatmullRomSpline_GetArcLength");
static_assert(sizeof(CatmullRomSpline_GetArcLength) == 0x000004, "Wrong size on CatmullRomSpline_GetArcLength");
static_assert(offsetof(CatmullRomSpline_GetArcLength, ReturnValue) == 0x000000, "Member 'CatmullRomSpline_GetArcLength::ReturnValue' has a wrong offset!");

// Function FlyingNavSystem.CatmullRomSpline.SampleSplineByDistance
// 0x0010 (0x0010 - 0x0000)
struct CatmullRomSpline_SampleSplineByDistance final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CatmullRomSpline_SampleSplineByDistance) == 0x000004, "Wrong alignment on CatmullRomSpline_SampleSplineByDistance");
static_assert(sizeof(CatmullRomSpline_SampleSplineByDistance) == 0x000010, "Wrong size on CatmullRomSpline_SampleSplineByDistance");
static_assert(offsetof(CatmullRomSpline_SampleSplineByDistance, Distance) == 0x000000, "Member 'CatmullRomSpline_SampleSplineByDistance::Distance' has a wrong offset!");
static_assert(offsetof(CatmullRomSpline_SampleSplineByDistance, ReturnValue) == 0x000004, "Member 'CatmullRomSpline_SampleSplineByDistance::ReturnValue' has a wrong offset!");

// Function FlyingNavSystem.CatmullRomSpline.SampleSplineByParameter
// 0x0010 (0x0010 - 0x0000)
struct CatmullRomSpline_SampleSplineByParameter final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CatmullRomSpline_SampleSplineByParameter) == 0x000004, "Wrong alignment on CatmullRomSpline_SampleSplineByParameter");
static_assert(sizeof(CatmullRomSpline_SampleSplineByParameter) == 0x000010, "Wrong size on CatmullRomSpline_SampleSplineByParameter");
static_assert(offsetof(CatmullRomSpline_SampleSplineByParameter, T) == 0x000000, "Member 'CatmullRomSpline_SampleSplineByParameter::T' has a wrong offset!");
static_assert(offsetof(CatmullRomSpline_SampleSplineByParameter, ReturnValue) == 0x000004, "Member 'CatmullRomSpline_SampleSplineByParameter::ReturnValue' has a wrong offset!");

// Function FlyingNavSystem.FlyingNavFunctionLibrary.DrawNavPath
// 0x0030 (0x0030 - 0x0000)
struct FlyingNavFunctionLibrary_DrawNavPath final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNavigationPath*                        NavPath;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PathColor;                                         // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PathOffset;                                        // 0x0020(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPersistent;                                       // 0x002C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1823[0x3];                                     // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlyingNavFunctionLibrary_DrawNavPath) == 0x000008, "Wrong alignment on FlyingNavFunctionLibrary_DrawNavPath");
static_assert(sizeof(FlyingNavFunctionLibrary_DrawNavPath) == 0x000030, "Wrong size on FlyingNavFunctionLibrary_DrawNavPath");
static_assert(offsetof(FlyingNavFunctionLibrary_DrawNavPath, WorldContextObject) == 0x000000, "Member 'FlyingNavFunctionLibrary_DrawNavPath::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FlyingNavFunctionLibrary_DrawNavPath, NavPath) == 0x000008, "Member 'FlyingNavFunctionLibrary_DrawNavPath::NavPath' has a wrong offset!");
static_assert(offsetof(FlyingNavFunctionLibrary_DrawNavPath, PathColor) == 0x000010, "Member 'FlyingNavFunctionLibrary_DrawNavPath::PathColor' has a wrong offset!");
static_assert(offsetof(FlyingNavFunctionLibrary_DrawNavPath, PathOffset) == 0x000020, "Member 'FlyingNavFunctionLibrary_DrawNavPath::PathOffset' has a wrong offset!");
static_assert(offsetof(FlyingNavFunctionLibrary_DrawNavPath, bPersistent) == 0x00002C, "Member 'FlyingNavFunctionLibrary_DrawNavPath::bPersistent' has a wrong offset!");

// Function FlyingNavSystem.FlyingNavFunctionLibrary.FindPathToActorAsynchronously
// 0x0058 (0x0058 - 0x0000)
struct FlyingNavFunctionLibrary_FindPathToActorAsynchronously final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                PathStart;                                         // 0x0020(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1824[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 GoalActor;                                         // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TetherDistance;                                    // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1825[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 PathfindingContext;                                // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNavigationPath*                        ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlyingNavFunctionLibrary_FindPathToActorAsynchronously) == 0x000008, "Wrong alignment on FlyingNavFunctionLibrary_FindPathToActorAsynchronously");
static_assert(sizeof(FlyingNavFunctionLibrary_FindPathToActorAsynchronously) == 0x000058, "Wrong size on FlyingNavFunctionLibrary_FindPathToActorAsynchronously");
static_assert(offsetof(FlyingNavFunctionLibrary_FindPathToActorAsynchronously, WorldContextObject) == 0x000000, "Member 'FlyingNavFunctionLibrary_FindPathToActorAsynchronously::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FlyingNavFunctionLibrary_FindPathToActorAsynchronously, LatentInfo) == 0x000008, "Member 'FlyingNavFunctionLibrary_FindPathToActorAsynchronously::LatentInfo' has a wrong offset!");
static_assert(offsetof(FlyingNavFunctionLibrary_FindPathToActorAsynchronously, PathStart) == 0x000020, "Member 'FlyingNavFunctionLibrary_FindPathToActorAsynchronously::PathStart' has a wrong offset!");
static_assert(offsetof(FlyingNavFunctionLibrary_FindPathToActorAsynchronously, GoalActor) == 0x000030, "Member 'FlyingNavFunctionLibrary_FindPathToActorAsynchronously::GoalActor' has a wrong offset!");
static_assert(offsetof(FlyingNavFunctionLibrary_FindPathToActorAsynchronously, TetherDistance) == 0x000038, "Member 'FlyingNavFunctionLibrary_FindPathToActorAsynchronously::TetherDistance' has a wrong offset!");
static_assert(offsetof(FlyingNavFunctionLibrary_FindPathToActorAsynchronously, PathfindingContext) == 0x000040, "Member 'FlyingNavFunctionLibrary_FindPathToActorAsynchronously::PathfindingContext' has a wrong offset!");
static_assert(offsetof(FlyingNavFunctionLibrary_FindPathToActorAsynchronously, FilterClass) == 0x000048, "Member 'FlyingNavFunctionLibrary_FindPathToActorAsynchronously::FilterClass' has a wrong offset!");
static_assert(offsetof(FlyingNavFunctionLibrary_FindPathToActorAsynchronously, ReturnValue) == 0x000050, "Member 'FlyingNavFunctionLibrary_FindPathToActorAsynchronously::ReturnValue' has a wrong offset!");

// Function FlyingNavSystem.FlyingNavFunctionLibrary.FindPathToLocationAsynchronously
// 0x0050 (0x0050 - 0x0000)
struct FlyingNavFunctionLibrary_FindPathToLocationAsynchronously final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                PathStart;                                         // 0x0020(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PathEnd;                                           // 0x002C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 PathfindingContext;                                // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNavigationPath*                        ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlyingNavFunctionLibrary_FindPathToLocationAsynchronously) == 0x000008, "Wrong alignment on FlyingNavFunctionLibrary_FindPathToLocationAsynchronously");
static_assert(sizeof(FlyingNavFunctionLibrary_FindPathToLocationAsynchronously) == 0x000050, "Wrong size on FlyingNavFunctionLibrary_FindPathToLocationAsynchronously");
static_assert(offsetof(FlyingNavFunctionLibrary_FindPathToLocationAsynchronously, WorldContextObject) == 0x000000, "Member 'FlyingNavFunctionLibrary_FindPathToLocationAsynchronously::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FlyingNavFunctionLibrary_FindPathToLocationAsynchronously, LatentInfo) == 0x000008, "Member 'FlyingNavFunctionLibrary_FindPathToLocationAsynchronously::LatentInfo' has a wrong offset!");
static_assert(offsetof(FlyingNavFunctionLibrary_FindPathToLocationAsynchronously, PathStart) == 0x000020, "Member 'FlyingNavFunctionLibrary_FindPathToLocationAsynchronously::PathStart' has a wrong offset!");
static_assert(offsetof(FlyingNavFunctionLibrary_FindPathToLocationAsynchronously, PathEnd) == 0x00002C, "Member 'FlyingNavFunctionLibrary_FindPathToLocationAsynchronously::PathEnd' has a wrong offset!");
static_assert(offsetof(FlyingNavFunctionLibrary_FindPathToLocationAsynchronously, PathfindingContext) == 0x000038, "Member 'FlyingNavFunctionLibrary_FindPathToLocationAsynchronously::PathfindingContext' has a wrong offset!");
static_assert(offsetof(FlyingNavFunctionLibrary_FindPathToLocationAsynchronously, FilterClass) == 0x000040, "Member 'FlyingNavFunctionLibrary_FindPathToLocationAsynchronously::FilterClass' has a wrong offset!");
static_assert(offsetof(FlyingNavFunctionLibrary_FindPathToLocationAsynchronously, ReturnValue) == 0x000048, "Member 'FlyingNavFunctionLibrary_FindPathToLocationAsynchronously::ReturnValue' has a wrong offset!");

// Function FlyingNavSystem.FlyingNavFunctionLibrary.GetActorFeetLocation
// 0x0018 (0x0018 - 0x0000)
struct FlyingNavFunctionLibrary_GetActorFeetLocation final
{
public:
	const class APawn*                            Pawn;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1826[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlyingNavFunctionLibrary_GetActorFeetLocation) == 0x000008, "Wrong alignment on FlyingNavFunctionLibrary_GetActorFeetLocation");
static_assert(sizeof(FlyingNavFunctionLibrary_GetActorFeetLocation) == 0x000018, "Wrong size on FlyingNavFunctionLibrary_GetActorFeetLocation");
static_assert(offsetof(FlyingNavFunctionLibrary_GetActorFeetLocation, Pawn) == 0x000000, "Member 'FlyingNavFunctionLibrary_GetActorFeetLocation::Pawn' has a wrong offset!");
static_assert(offsetof(FlyingNavFunctionLibrary_GetActorFeetLocation, ReturnValue) == 0x000008, "Member 'FlyingNavFunctionLibrary_GetActorFeetLocation::ReturnValue' has a wrong offset!");

// Function FlyingNavSystem.FlyingNavFunctionLibrary.GetActorFeetOffset
// 0x0018 (0x0018 - 0x0000)
struct FlyingNavFunctionLibrary_GetActorFeetOffset final
{
public:
	const class APawn*                            Pawn;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1827[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlyingNavFunctionLibrary_GetActorFeetOffset) == 0x000008, "Wrong alignment on FlyingNavFunctionLibrary_GetActorFeetOffset");
static_assert(sizeof(FlyingNavFunctionLibrary_GetActorFeetOffset) == 0x000018, "Wrong size on FlyingNavFunctionLibrary_GetActorFeetOffset");
static_assert(offsetof(FlyingNavFunctionLibrary_GetActorFeetOffset, Pawn) == 0x000000, "Member 'FlyingNavFunctionLibrary_GetActorFeetOffset::Pawn' has a wrong offset!");
static_assert(offsetof(FlyingNavFunctionLibrary_GetActorFeetOffset, ReturnValue) == 0x000008, "Member 'FlyingNavFunctionLibrary_GetActorFeetOffset::ReturnValue' has a wrong offset!");

// Function FlyingNavSystem.FlyingNavFunctionLibrary.GetFlyingNavigationData
// 0x0010 (0x0010 - 0x0000)
struct FlyingNavFunctionLibrary_GetFlyingNavigationData final
{
public:
	const class APawn*                            NavAgent;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFlyingNavigationData*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlyingNavFunctionLibrary_GetFlyingNavigationData) == 0x000008, "Wrong alignment on FlyingNavFunctionLibrary_GetFlyingNavigationData");
static_assert(sizeof(FlyingNavFunctionLibrary_GetFlyingNavigationData) == 0x000010, "Wrong size on FlyingNavFunctionLibrary_GetFlyingNavigationData");
static_assert(offsetof(FlyingNavFunctionLibrary_GetFlyingNavigationData, NavAgent) == 0x000000, "Member 'FlyingNavFunctionLibrary_GetFlyingNavigationData::NavAgent' has a wrong offset!");
static_assert(offsetof(FlyingNavFunctionLibrary_GetFlyingNavigationData, ReturnValue) == 0x000008, "Member 'FlyingNavFunctionLibrary_GetFlyingNavigationData::ReturnValue' has a wrong offset!");

// Function FlyingNavSystem.FlyingNavFunctionLibrary.GetPathfindingResult
// 0x0010 (0x0010 - 0x0000)
struct FlyingNavFunctionLibrary_GetPathfindingResult final
{
public:
	class UNavigationPath*                        Path;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPathfindingResult                            ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1828[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlyingNavFunctionLibrary_GetPathfindingResult) == 0x000008, "Wrong alignment on FlyingNavFunctionLibrary_GetPathfindingResult");
static_assert(sizeof(FlyingNavFunctionLibrary_GetPathfindingResult) == 0x000010, "Wrong size on FlyingNavFunctionLibrary_GetPathfindingResult");
static_assert(offsetof(FlyingNavFunctionLibrary_GetPathfindingResult, Path) == 0x000000, "Member 'FlyingNavFunctionLibrary_GetPathfindingResult::Path' has a wrong offset!");
static_assert(offsetof(FlyingNavFunctionLibrary_GetPathfindingResult, ReturnValue) == 0x000008, "Member 'FlyingNavFunctionLibrary_GetPathfindingResult::ReturnValue' has a wrong offset!");

// Function FlyingNavSystem.FlyingNavFunctionLibrary.IsPositionAValidEndpoint
// 0x0018 (0x0018 - 0x0000)
struct FlyingNavFunctionLibrary_IsPositionAValidEndpoint final
{
public:
	const class APawn*                            NavAgent;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowBlocked;                                     // 0x0014(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1829[0x2];                                     // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlyingNavFunctionLibrary_IsPositionAValidEndpoint) == 0x000008, "Wrong alignment on FlyingNavFunctionLibrary_IsPositionAValidEndpoint");
static_assert(sizeof(FlyingNavFunctionLibrary_IsPositionAValidEndpoint) == 0x000018, "Wrong size on FlyingNavFunctionLibrary_IsPositionAValidEndpoint");
static_assert(offsetof(FlyingNavFunctionLibrary_IsPositionAValidEndpoint, NavAgent) == 0x000000, "Member 'FlyingNavFunctionLibrary_IsPositionAValidEndpoint::NavAgent' has a wrong offset!");
static_assert(offsetof(FlyingNavFunctionLibrary_IsPositionAValidEndpoint, Position) == 0x000008, "Member 'FlyingNavFunctionLibrary_IsPositionAValidEndpoint::Position' has a wrong offset!");
static_assert(offsetof(FlyingNavFunctionLibrary_IsPositionAValidEndpoint, bAllowBlocked) == 0x000014, "Member 'FlyingNavFunctionLibrary_IsPositionAValidEndpoint::bAllowBlocked' has a wrong offset!");
static_assert(offsetof(FlyingNavFunctionLibrary_IsPositionAValidEndpoint, ReturnValue) == 0x000015, "Member 'FlyingNavFunctionLibrary_IsPositionAValidEndpoint::ReturnValue' has a wrong offset!");

// Function FlyingNavSystem.FlyingNavFunctionLibrary.MakeCatmullRomSpline
// 0x0018 (0x0018 - 0x0000)
struct FlyingNavFunctionLibrary_MakeCatmullRomSpline final
{
public:
	TArray<struct FVector>                        PathPoints;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UCatmullRomSpline*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlyingNavFunctionLibrary_MakeCatmullRomSpline) == 0x000008, "Wrong alignment on FlyingNavFunctionLibrary_MakeCatmullRomSpline");
static_assert(sizeof(FlyingNavFunctionLibrary_MakeCatmullRomSpline) == 0x000018, "Wrong size on FlyingNavFunctionLibrary_MakeCatmullRomSpline");
static_assert(offsetof(FlyingNavFunctionLibrary_MakeCatmullRomSpline, PathPoints) == 0x000000, "Member 'FlyingNavFunctionLibrary_MakeCatmullRomSpline::PathPoints' has a wrong offset!");
static_assert(offsetof(FlyingNavFunctionLibrary_MakeCatmullRomSpline, ReturnValue) == 0x000010, "Member 'FlyingNavFunctionLibrary_MakeCatmullRomSpline::ReturnValue' has a wrong offset!");

// Function FlyingNavSystem.FlyingNavFunctionLibrary.RebuildAllFlyingNavigation
// 0x0008 (0x0008 - 0x0000)
struct FlyingNavFunctionLibrary_RebuildAllFlyingNavigation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlyingNavFunctionLibrary_RebuildAllFlyingNavigation) == 0x000008, "Wrong alignment on FlyingNavFunctionLibrary_RebuildAllFlyingNavigation");
static_assert(sizeof(FlyingNavFunctionLibrary_RebuildAllFlyingNavigation) == 0x000008, "Wrong size on FlyingNavFunctionLibrary_RebuildAllFlyingNavigation");
static_assert(offsetof(FlyingNavFunctionLibrary_RebuildAllFlyingNavigation, WorldContextObject) == 0x000000, "Member 'FlyingNavFunctionLibrary_RebuildAllFlyingNavigation::WorldContextObject' has a wrong offset!");

// Function FlyingNavSystem.FlyingNavFunctionLibrary.RequestMove
// 0x0010 (0x0010 - 0x0000)
struct FlyingNavFunctionLibrary_RequestMove final
{
public:
	class UNavigationPath*                        PathToFollow;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AAIController*                          Controller;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlyingNavFunctionLibrary_RequestMove) == 0x000008, "Wrong alignment on FlyingNavFunctionLibrary_RequestMove");
static_assert(sizeof(FlyingNavFunctionLibrary_RequestMove) == 0x000010, "Wrong size on FlyingNavFunctionLibrary_RequestMove");
static_assert(offsetof(FlyingNavFunctionLibrary_RequestMove, PathToFollow) == 0x000000, "Member 'FlyingNavFunctionLibrary_RequestMove::PathToFollow' has a wrong offset!");
static_assert(offsetof(FlyingNavFunctionLibrary_RequestMove, Controller) == 0x000008, "Member 'FlyingNavFunctionLibrary_RequestMove::Controller' has a wrong offset!");

// Function FlyingNavSystem.FlyingNavFunctionLibrary.SetNavigationPathPoints
// 0x0028 (0x0028 - 0x0000)
struct FlyingNavFunctionLibrary_SetNavigationPathPoints final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNavigationPath*                        NavPath;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        PathPoints;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UNavigationPath*                        ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlyingNavFunctionLibrary_SetNavigationPathPoints) == 0x000008, "Wrong alignment on FlyingNavFunctionLibrary_SetNavigationPathPoints");
static_assert(sizeof(FlyingNavFunctionLibrary_SetNavigationPathPoints) == 0x000028, "Wrong size on FlyingNavFunctionLibrary_SetNavigationPathPoints");
static_assert(offsetof(FlyingNavFunctionLibrary_SetNavigationPathPoints, WorldContextObject) == 0x000000, "Member 'FlyingNavFunctionLibrary_SetNavigationPathPoints::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FlyingNavFunctionLibrary_SetNavigationPathPoints, NavPath) == 0x000008, "Member 'FlyingNavFunctionLibrary_SetNavigationPathPoints::NavPath' has a wrong offset!");
static_assert(offsetof(FlyingNavFunctionLibrary_SetNavigationPathPoints, PathPoints) == 0x000010, "Member 'FlyingNavFunctionLibrary_SetNavigationPathPoints::PathPoints' has a wrong offset!");
static_assert(offsetof(FlyingNavFunctionLibrary_SetNavigationPathPoints, ReturnValue) == 0x000020, "Member 'FlyingNavFunctionLibrary_SetNavigationPathPoints::ReturnValue' has a wrong offset!");

// Function FlyingNavSystem.FlyingNavFunctionLibrary.SmoothPath
// 0x0020 (0x0020 - 0x0000)
struct FlyingNavFunctionLibrary_SmoothPath final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNavigationPath*                        Path;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SampleLength;                                      // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_182A[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNavigationPath*                        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlyingNavFunctionLibrary_SmoothPath) == 0x000008, "Wrong alignment on FlyingNavFunctionLibrary_SmoothPath");
static_assert(sizeof(FlyingNavFunctionLibrary_SmoothPath) == 0x000020, "Wrong size on FlyingNavFunctionLibrary_SmoothPath");
static_assert(offsetof(FlyingNavFunctionLibrary_SmoothPath, WorldContextObject) == 0x000000, "Member 'FlyingNavFunctionLibrary_SmoothPath::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FlyingNavFunctionLibrary_SmoothPath, Path) == 0x000008, "Member 'FlyingNavFunctionLibrary_SmoothPath::Path' has a wrong offset!");
static_assert(offsetof(FlyingNavFunctionLibrary_SmoothPath, SampleLength) == 0x000010, "Member 'FlyingNavFunctionLibrary_SmoothPath::SampleLength' has a wrong offset!");
static_assert(offsetof(FlyingNavFunctionLibrary_SmoothPath, ReturnValue) == 0x000018, "Member 'FlyingNavFunctionLibrary_SmoothPath::ReturnValue' has a wrong offset!");

// Function FlyingNavSystem.FlyingNavFunctionLibrary.SmoothPathPoints
// 0x0028 (0x0028 - 0x0000)
struct FlyingNavFunctionLibrary_SmoothPathPoints final
{
public:
	TArray<struct FVector>                        PathPoints;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         SampleLength;                                      // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_182B[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlyingNavFunctionLibrary_SmoothPathPoints) == 0x000008, "Wrong alignment on FlyingNavFunctionLibrary_SmoothPathPoints");
static_assert(sizeof(FlyingNavFunctionLibrary_SmoothPathPoints) == 0x000028, "Wrong size on FlyingNavFunctionLibrary_SmoothPathPoints");
static_assert(offsetof(FlyingNavFunctionLibrary_SmoothPathPoints, PathPoints) == 0x000000, "Member 'FlyingNavFunctionLibrary_SmoothPathPoints::PathPoints' has a wrong offset!");
static_assert(offsetof(FlyingNavFunctionLibrary_SmoothPathPoints, SampleLength) == 0x000010, "Member 'FlyingNavFunctionLibrary_SmoothPathPoints::SampleLength' has a wrong offset!");
static_assert(offsetof(FlyingNavFunctionLibrary_SmoothPathPoints, ReturnValue) == 0x000018, "Member 'FlyingNavFunctionLibrary_SmoothPathPoints::ReturnValue' has a wrong offset!");

// Function FlyingNavSystem.FlyingNavigationData.RebuildFlyingNavigation
// 0x0020 (0x0020 - 0x0000)
struct FlyingNavigationData_RebuildFlyingNavigation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlyingNavigationData_RebuildFlyingNavigation) == 0x000008, "Wrong alignment on FlyingNavigationData_RebuildFlyingNavigation");
static_assert(sizeof(FlyingNavigationData_RebuildFlyingNavigation) == 0x000020, "Wrong size on FlyingNavigationData_RebuildFlyingNavigation");
static_assert(offsetof(FlyingNavigationData_RebuildFlyingNavigation, WorldContextObject) == 0x000000, "Member 'FlyingNavigationData_RebuildFlyingNavigation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FlyingNavigationData_RebuildFlyingNavigation, LatentInfo) == 0x000008, "Member 'FlyingNavigationData_RebuildFlyingNavigation::LatentInfo' has a wrong offset!");

// Function FlyingNavSystem.FlyingNavigationData.CurrentlyBuiltVoxelSize
// 0x0004 (0x0004 - 0x0000)
struct FlyingNavigationData_CurrentlyBuiltVoxelSize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlyingNavigationData_CurrentlyBuiltVoxelSize) == 0x000004, "Wrong alignment on FlyingNavigationData_CurrentlyBuiltVoxelSize");
static_assert(sizeof(FlyingNavigationData_CurrentlyBuiltVoxelSize) == 0x000004, "Wrong size on FlyingNavigationData_CurrentlyBuiltVoxelSize");
static_assert(offsetof(FlyingNavigationData_CurrentlyBuiltVoxelSize, ReturnValue) == 0x000000, "Member 'FlyingNavigationData_CurrentlyBuiltVoxelSize::ReturnValue' has a wrong offset!");

// Function FlyingNavSystem.FlyingNavigationData.IsNavigationDataBuilt
// 0x0001 (0x0001 - 0x0000)
struct FlyingNavigationData_IsNavigationDataBuilt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlyingNavigationData_IsNavigationDataBuilt) == 0x000001, "Wrong alignment on FlyingNavigationData_IsNavigationDataBuilt");
static_assert(sizeof(FlyingNavigationData_IsNavigationDataBuilt) == 0x000001, "Wrong size on FlyingNavigationData_IsNavigationDataBuilt");
static_assert(offsetof(FlyingNavigationData_IsNavigationDataBuilt, ReturnValue) == 0x000000, "Member 'FlyingNavigationData_IsNavigationDataBuilt::ReturnValue' has a wrong offset!");

// Function FlyingNavSystem.FlyingNavigationData.OctreeRaycast
// 0x0028 (0x0028 - 0x0000)
struct FlyingNavigationData_OctreeRaycast final
{
public:
	struct FVector                                RayStart;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RayEnd;                                            // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1833[0x3];                                     // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlyingNavigationData_OctreeRaycast) == 0x000004, "Wrong alignment on FlyingNavigationData_OctreeRaycast");
static_assert(sizeof(FlyingNavigationData_OctreeRaycast) == 0x000028, "Wrong size on FlyingNavigationData_OctreeRaycast");
static_assert(offsetof(FlyingNavigationData_OctreeRaycast, RayStart) == 0x000000, "Member 'FlyingNavigationData_OctreeRaycast::RayStart' has a wrong offset!");
static_assert(offsetof(FlyingNavigationData_OctreeRaycast, RayEnd) == 0x00000C, "Member 'FlyingNavigationData_OctreeRaycast::RayEnd' has a wrong offset!");
static_assert(offsetof(FlyingNavigationData_OctreeRaycast, HitLocation) == 0x000018, "Member 'FlyingNavigationData_OctreeRaycast::HitLocation' has a wrong offset!");
static_assert(offsetof(FlyingNavigationData_OctreeRaycast, ReturnValue) == 0x000024, "Member 'FlyingNavigationData_OctreeRaycast::ReturnValue' has a wrong offset!");

// Function FlyingNavSystem.FlyingObjectInterface.GetPathfindingQuerySettings
// 0x0030 (0x0030 - 0x0000)
struct FlyingObjectInterface_GetPathfindingQuerySettings final
{
public:
	struct FSVOQuerySettings                      ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlyingObjectInterface_GetPathfindingQuerySettings) == 0x000008, "Wrong alignment on FlyingObjectInterface_GetPathfindingQuerySettings");
static_assert(sizeof(FlyingObjectInterface_GetPathfindingQuerySettings) == 0x000030, "Wrong size on FlyingObjectInterface_GetPathfindingQuerySettings");
static_assert(offsetof(FlyingObjectInterface_GetPathfindingQuerySettings, ReturnValue) == 0x000000, "Member 'FlyingObjectInterface_GetPathfindingQuerySettings::ReturnValue' has a wrong offset!");

}

