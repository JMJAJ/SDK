#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FFMPEGMediaFactory

#include "Basic.hpp"

#include "FFMPEGMediaFactory_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class FFMPEGMediaFactory.FFMPEGMediaSettings
// 0x0018 (0x0040 - 0x0028)
class UFFMPEGMediaSettings final : public UObject
{
public:
	bool                                          UseInfiniteBuffer;                                 // 0x0028(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowFrameDrop;                                    // 0x0029(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseHardwareAcceleratedCodecs;                      // 0x002A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableAudio;                                      // 0x002B(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ZeroLatencyStreaming;                              // 0x002C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERTSPTransport                                RtspTransport;                                     // 0x002D(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SpeedUpTricks;                                     // 0x002E(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_177B[0x1];                                     // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AudioThreads;                                      // 0x0030(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VideoThreads;                                      // 0x0034(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESynchronizationType                          SyncType;                                          // 0x0038(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_177C[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FFMPEGMediaSettings">();
	}
	static class UFFMPEGMediaSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFFMPEGMediaSettings>();
	}
};
static_assert(alignof(UFFMPEGMediaSettings) == 0x000008, "Wrong alignment on UFFMPEGMediaSettings");
static_assert(sizeof(UFFMPEGMediaSettings) == 0x000040, "Wrong size on UFFMPEGMediaSettings");
static_assert(offsetof(UFFMPEGMediaSettings, UseInfiniteBuffer) == 0x000028, "Member 'UFFMPEGMediaSettings::UseInfiniteBuffer' has a wrong offset!");
static_assert(offsetof(UFFMPEGMediaSettings, AllowFrameDrop) == 0x000029, "Member 'UFFMPEGMediaSettings::AllowFrameDrop' has a wrong offset!");
static_assert(offsetof(UFFMPEGMediaSettings, UseHardwareAcceleratedCodecs) == 0x00002A, "Member 'UFFMPEGMediaSettings::UseHardwareAcceleratedCodecs' has a wrong offset!");
static_assert(offsetof(UFFMPEGMediaSettings, DisableAudio) == 0x00002B, "Member 'UFFMPEGMediaSettings::DisableAudio' has a wrong offset!");
static_assert(offsetof(UFFMPEGMediaSettings, ZeroLatencyStreaming) == 0x00002C, "Member 'UFFMPEGMediaSettings::ZeroLatencyStreaming' has a wrong offset!");
static_assert(offsetof(UFFMPEGMediaSettings, RtspTransport) == 0x00002D, "Member 'UFFMPEGMediaSettings::RtspTransport' has a wrong offset!");
static_assert(offsetof(UFFMPEGMediaSettings, SpeedUpTricks) == 0x00002E, "Member 'UFFMPEGMediaSettings::SpeedUpTricks' has a wrong offset!");
static_assert(offsetof(UFFMPEGMediaSettings, AudioThreads) == 0x000030, "Member 'UFFMPEGMediaSettings::AudioThreads' has a wrong offset!");
static_assert(offsetof(UFFMPEGMediaSettings, VideoThreads) == 0x000034, "Member 'UFFMPEGMediaSettings::VideoThreads' has a wrong offset!");
static_assert(offsetof(UFFMPEGMediaSettings, SyncType) == 0x000038, "Member 'UFFMPEGMediaSettings::SyncType' has a wrong offset!");

}

