#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VehicleSystemPlugin

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum VehicleSystemPlugin.NetworkRoles
// NumValues: 0x0006
enum class ENetworkRoles : uint8
{
	None                                     = 0,
	Owner                                    = 1,
	Server                                   = 2,
	Client                                   = 3,
	ClientSpawned                            = 4,
	NetworkRoles_MAX                         = 5,
};

// ScriptStruct VehicleSystemPlugin.VehicleGear
// 0x0020 (0x0020 - 0x0000)
struct FVehicleGear final
{
public:
	float                                         EndSpeed;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartSpeed;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpShift;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownShift;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HighRPM;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowRPM;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTorque;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinTorque;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleGear) == 0x000004, "Wrong alignment on FVehicleGear");
static_assert(sizeof(FVehicleGear) == 0x000020, "Wrong size on FVehicleGear");
static_assert(offsetof(FVehicleGear, EndSpeed) == 0x000000, "Member 'FVehicleGear::EndSpeed' has a wrong offset!");
static_assert(offsetof(FVehicleGear, StartSpeed) == 0x000004, "Member 'FVehicleGear::StartSpeed' has a wrong offset!");
static_assert(offsetof(FVehicleGear, UpShift) == 0x000008, "Member 'FVehicleGear::UpShift' has a wrong offset!");
static_assert(offsetof(FVehicleGear, DownShift) == 0x00000C, "Member 'FVehicleGear::DownShift' has a wrong offset!");
static_assert(offsetof(FVehicleGear, HighRPM) == 0x000010, "Member 'FVehicleGear::HighRPM' has a wrong offset!");
static_assert(offsetof(FVehicleGear, LowRPM) == 0x000014, "Member 'FVehicleGear::LowRPM' has a wrong offset!");
static_assert(offsetof(FVehicleGear, MaxTorque) == 0x000018, "Member 'FVehicleGear::MaxTorque' has a wrong offset!");
static_assert(offsetof(FVehicleGear, MinTorque) == 0x00001C, "Member 'FVehicleGear::MinTorque' has a wrong offset!");

// ScriptStruct VehicleSystemPlugin.NetState
// 0x0038 (0x0038 - 0x0000)
struct FNetState final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Localtimestamp;                                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AngularVelocity;                                   // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetState) == 0x000004, "Wrong alignment on FNetState");
static_assert(sizeof(FNetState) == 0x000038, "Wrong size on FNetState");
static_assert(offsetof(FNetState, Timestamp) == 0x000000, "Member 'FNetState::Timestamp' has a wrong offset!");
static_assert(offsetof(FNetState, Localtimestamp) == 0x000004, "Member 'FNetState::Localtimestamp' has a wrong offset!");
static_assert(offsetof(FNetState, Position) == 0x000008, "Member 'FNetState::Position' has a wrong offset!");
static_assert(offsetof(FNetState, Rotation) == 0x000014, "Member 'FNetState::Rotation' has a wrong offset!");
static_assert(offsetof(FNetState, Velocity) == 0x000020, "Member 'FNetState::Velocity' has a wrong offset!");
static_assert(offsetof(FNetState, AngularVelocity) == 0x00002C, "Member 'FNetState::AngularVelocity' has a wrong offset!");

}

