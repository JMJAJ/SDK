#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Blu

#include "Basic.hpp"

#include "Blu_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class Blu.BluEye
// 0x00E0 (0x0108 - 0x0028)
class UBluEye final : public UObject
{
public:
	uint8                                         Pad_189E[0x10];                                    // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBluEyeSettings                        Settings;                                          // 0x0038(0x0014)(NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   TextureParameterName;                              // 0x004C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_189F[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             LogEventEmitter;                                   // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UTexture2D*                             ViewTexture;                                       // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             PopupTexture;                                      // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               MaterialInstance;                                  // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18A0[0x88];                                    // 0x0080(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CharKeyDownUp(const struct FCharacterEvent& CharEvent);
	void CharKeyInput(const struct FCharacterEvent& CharEvent);
	void CloseBrowser();
	void Destory();
	class FString GetCurrentURL();
	float GetZoom();
	void Init();
	bool IsBrowserLoading();
	void KeyDown(const struct FKeyEvent& InKey);
	void KeyPress(const struct FKeyEvent& InKey);
	void KeyUp(const struct FKeyEvent& InKey);
	void LoadURL(const class FString& NewURL);
	void NavBack();
	void NavForward();
	void RawCharKeyPress(const class FString& CharToPress, bool IsRepeat, bool LeftShiftDown, bool RightShiftDown, bool LeftControlDown, bool RightControlDown, bool LeftAltDown, bool RightAltDown, bool LeftCommandDown, bool RightCommandDown, bool CapsLocksOn);
	void ReloadBrowser(bool IgnoreCache);
	void ResizeBrowser(const int32 NewWidth, const int32 NewHeight);
	class UBluEye* SetProperties(const int32 SetWidth, const int32 SetHeight, const bool SetIsTransparent, const bool SetEnabled, const bool SetWebGL, const class FString& SetDefaultURL, const class FName& SetTextureParameterName, class UMaterialInterface* SetBaseMaterial);
	void SetZoom(const float Scale);
	void SpecialKeyPress(EBluSpecialKeys Key, bool LeftShiftDown, bool RightShiftDown, bool LeftControlDown, bool RightControlDown, bool LeftAltDown, bool RightAltDown, bool LeftCommandDown, bool RightCommandDown, bool CapsLocksOn);
	void TriggerCaptureLost();
	void TriggerFocusChange(bool Focus);
	void TriggerLeftClick(const struct FVector2D& Pos, const float Scale);
	void TriggerLeftDoubleClick(const struct FVector2D& Pos, const float Scale);
	void TriggerLeftMouseDown(const struct FVector2D& Pos, const float Scale);
	void TriggerLeftMouseUp(const struct FVector2D& Pos, const float Scale);
	void TriggerMouseMove(const struct FVector2D& Pos, const float Scale);
	void TriggerMouseWheel(const float MouseWheelDelta, const struct FVector2D& Pos, const float Scale);
	void TriggerRightClick(const struct FVector2D& Pos, const float Scale);
	void TriggerRightDoubleClick(const struct FVector2D& Pos, const float Scale);
	void TriggerRightMouseDown(const struct FVector2D& Pos, const float Scale);
	void TriggerRightMouseUp(const struct FVector2D& Pos, const float Scale);

	class UTexture2D* GetPopupTexture() const;
	class UTexture2D* GetTexture() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BluEye">();
	}
	static class UBluEye* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBluEye>();
	}
};
static_assert(alignof(UBluEye) == 0x000008, "Wrong alignment on UBluEye");
static_assert(sizeof(UBluEye) == 0x000108, "Wrong size on UBluEye");
static_assert(offsetof(UBluEye, Settings) == 0x000038, "Member 'UBluEye::Settings' has a wrong offset!");
static_assert(offsetof(UBluEye, TextureParameterName) == 0x00004C, "Member 'UBluEye::TextureParameterName' has a wrong offset!");
static_assert(offsetof(UBluEye, LogEventEmitter) == 0x000058, "Member 'UBluEye::LogEventEmitter' has a wrong offset!");
static_assert(offsetof(UBluEye, ViewTexture) == 0x000068, "Member 'UBluEye::ViewTexture' has a wrong offset!");
static_assert(offsetof(UBluEye, PopupTexture) == 0x000070, "Member 'UBluEye::PopupTexture' has a wrong offset!");
static_assert(offsetof(UBluEye, MaterialInstance) == 0x000078, "Member 'UBluEye::MaterialInstance' has a wrong offset!");

}

