#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MonsterCharacterBP_Base

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function MonsterCharacterBP_Base.MonsterCharacterBP_Base_C.ExecuteUbergraph_MonsterCharacterBP_Base
// 0x0078 (0x0078 - 0x0000)
struct MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_57AF[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetComponentBounds_Origin;                // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_BoxExtent;             // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetComponentBounds_SphereRadius;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Inverse;                              // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_57B0[0x3];                                     // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_PlayRate;                             // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bHide;                                // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base) == 0x000004, "Wrong alignment on MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base");
static_assert(sizeof(MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base) == 0x000078, "Wrong size on MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base");
static_assert(offsetof(MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base, EntryPoint) == 0x000000, "Member 'MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base, K2Node_SwitchEnum_CmpSuccess) == 0x000004, "Member 'MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base, CallFunc_GetComponentBounds_Origin) == 0x000008, "Member 'MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base::CallFunc_GetComponentBounds_Origin' has a wrong offset!");
static_assert(offsetof(MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base, CallFunc_GetComponentBounds_BoxExtent) == 0x000014, "Member 'MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base::CallFunc_GetComponentBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base, CallFunc_GetComponentBounds_SphereRadius) == 0x000020, "Member 'MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base::CallFunc_GetComponentBounds_SphereRadius' has a wrong offset!");
static_assert(offsetof(MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base, CallFunc_BreakVector_X) == 0x000024, "Member 'MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base, CallFunc_BreakVector_Y) == 0x000028, "Member 'MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base, CallFunc_BreakVector_Z) == 0x00002C, "Member 'MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000030, "Member 'MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x00003C, "Member 'MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base, CallFunc_Add_VectorVector_ReturnValue) == 0x000048, "Member 'MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000054, "Member 'MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base, CallFunc_VLerp_ReturnValue) == 0x000060, "Member 'MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base, K2Node_Event_Inverse) == 0x00006C, "Member 'MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base::K2Node_Event_Inverse' has a wrong offset!");
static_assert(offsetof(MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base, K2Node_Event_PlayRate) == 0x000070, "Member 'MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base::K2Node_Event_PlayRate' has a wrong offset!");
static_assert(offsetof(MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base, K2Node_Event_bHide) == 0x000074, "Member 'MonsterCharacterBP_Base_C_ExecuteUbergraph_MonsterCharacterBP_Base::K2Node_Event_bHide' has a wrong offset!");

// Function MonsterCharacterBP_Base.MonsterCharacterBP_Base_C.K2_HandleOnTransparencyAttributeChange
// 0x0001 (0x0001 - 0x0000)
struct MonsterCharacterBP_Base_C_K2_HandleOnTransparencyAttributeChange final
{
public:
	bool                                          bHide;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MonsterCharacterBP_Base_C_K2_HandleOnTransparencyAttributeChange) == 0x000001, "Wrong alignment on MonsterCharacterBP_Base_C_K2_HandleOnTransparencyAttributeChange");
static_assert(sizeof(MonsterCharacterBP_Base_C_K2_HandleOnTransparencyAttributeChange) == 0x000001, "Wrong size on MonsterCharacterBP_Base_C_K2_HandleOnTransparencyAttributeChange");
static_assert(offsetof(MonsterCharacterBP_Base_C_K2_HandleOnTransparencyAttributeChange, bHide) == 0x000000, "Member 'MonsterCharacterBP_Base_C_K2_HandleOnTransparencyAttributeChange::bHide' has a wrong offset!");

// Function MonsterCharacterBP_Base.MonsterCharacterBP_Base_C.PlayDirDissolveEffect
// 0x0008 (0x0008 - 0x0000)
struct MonsterCharacterBP_Base_C_PlayDirDissolveEffect final
{
public:
	bool                                          Inverse;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_57B1[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayRate;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MonsterCharacterBP_Base_C_PlayDirDissolveEffect) == 0x000004, "Wrong alignment on MonsterCharacterBP_Base_C_PlayDirDissolveEffect");
static_assert(sizeof(MonsterCharacterBP_Base_C_PlayDirDissolveEffect) == 0x000008, "Wrong size on MonsterCharacterBP_Base_C_PlayDirDissolveEffect");
static_assert(offsetof(MonsterCharacterBP_Base_C_PlayDirDissolveEffect, Inverse) == 0x000000, "Member 'MonsterCharacterBP_Base_C_PlayDirDissolveEffect::Inverse' has a wrong offset!");
static_assert(offsetof(MonsterCharacterBP_Base_C_PlayDirDissolveEffect, PlayRate) == 0x000004, "Member 'MonsterCharacterBP_Base_C_PlayDirDissolveEffect::PlayRate' has a wrong offset!");

}

