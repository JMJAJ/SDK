#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Oceanology_Plugin

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Oceanology_Plugin_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class Oceanology_Plugin.AOceanologyLightControl
// 0x0220 (0x0458 - 0x0238)
class AAOceanologyLightControl final : public AActor
{
public:
	class ADirectionalLight*                      OceanologyDirectionalLight;                        // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OceanologyDirectionalLightIntensity;               // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OceanologyDirectionalLightColor;                   // 0x0244(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalLightIntensity;                         // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASkyLight*                              OceanologySkyLightActor;                           // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OceanologySkyLightIntensity;                       // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OceanologySkyLightColor;                           // 0x0264(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1763[0x4];                                     // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialParameterCollection*           MPC_LightData_Mobile;                              // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialParameterCollection*           MPC_Waves;                                         // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AQuadTree*                              QuadTree;                                          // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunChangeTime;                                     // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1764[0x4];                                     // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SunChangeDepth;                                    // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GridChangeDepth;                                   // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enablecontrol;                                     // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1765[0x6F];                                    // 0x02A1(0x006F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOceanHeightfog                        UnderWaterHeightFog;                               // 0x0310(0x0080)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1766[0xC8];                                    // 0x0390(0x00C8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitQuadTreeHeightfog(class AExponentialHeightFog* HeightFogActor, float FogDensity, float FogHeightFalloff, float FogMaxOpacity, const struct FLinearColor& FogInscatteringColor, float StartDistance, float FogCutoffDistance, const struct FExponentialHeightFogData& SeData, float DirectionalInscatteringExponent, float DirectionalInscatteringStartDistance, const struct FLinearColor& DirectionalInscatteringColor);
	void InitQuadTreelightInfo(class ALight* Light, float LightDensity, const struct FLinearColor& LightColor, class ASkyLight* SkyLight, float SkylightDensity, const struct FLinearColor& SkyLightColor);
	void UpdateSkylight(float Intensity, const struct FLinearColor& Color);
	void UpdateSunlightIntensity(float Intensity);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AOceanologyLightControl">();
	}
	static class AAOceanologyLightControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAOceanologyLightControl>();
	}
};
static_assert(alignof(AAOceanologyLightControl) == 0x000008, "Wrong alignment on AAOceanologyLightControl");
static_assert(sizeof(AAOceanologyLightControl) == 0x000458, "Wrong size on AAOceanologyLightControl");
static_assert(offsetof(AAOceanologyLightControl, OceanologyDirectionalLight) == 0x000238, "Member 'AAOceanologyLightControl::OceanologyDirectionalLight' has a wrong offset!");
static_assert(offsetof(AAOceanologyLightControl, OceanologyDirectionalLightIntensity) == 0x000240, "Member 'AAOceanologyLightControl::OceanologyDirectionalLightIntensity' has a wrong offset!");
static_assert(offsetof(AAOceanologyLightControl, OceanologyDirectionalLightColor) == 0x000244, "Member 'AAOceanologyLightControl::OceanologyDirectionalLightColor' has a wrong offset!");
static_assert(offsetof(AAOceanologyLightControl, DirectionalLightIntensity) == 0x000254, "Member 'AAOceanologyLightControl::DirectionalLightIntensity' has a wrong offset!");
static_assert(offsetof(AAOceanologyLightControl, OceanologySkyLightActor) == 0x000258, "Member 'AAOceanologyLightControl::OceanologySkyLightActor' has a wrong offset!");
static_assert(offsetof(AAOceanologyLightControl, OceanologySkyLightIntensity) == 0x000260, "Member 'AAOceanologyLightControl::OceanologySkyLightIntensity' has a wrong offset!");
static_assert(offsetof(AAOceanologyLightControl, OceanologySkyLightColor) == 0x000264, "Member 'AAOceanologyLightControl::OceanologySkyLightColor' has a wrong offset!");
static_assert(offsetof(AAOceanologyLightControl, MPC_LightData_Mobile) == 0x000278, "Member 'AAOceanologyLightControl::MPC_LightData_Mobile' has a wrong offset!");
static_assert(offsetof(AAOceanologyLightControl, MPC_Waves) == 0x000280, "Member 'AAOceanologyLightControl::MPC_Waves' has a wrong offset!");
static_assert(offsetof(AAOceanologyLightControl, QuadTree) == 0x000288, "Member 'AAOceanologyLightControl::QuadTree' has a wrong offset!");
static_assert(offsetof(AAOceanologyLightControl, SunChangeTime) == 0x000290, "Member 'AAOceanologyLightControl::SunChangeTime' has a wrong offset!");
static_assert(offsetof(AAOceanologyLightControl, SunChangeDepth) == 0x000298, "Member 'AAOceanologyLightControl::SunChangeDepth' has a wrong offset!");
static_assert(offsetof(AAOceanologyLightControl, GridChangeDepth) == 0x00029C, "Member 'AAOceanologyLightControl::GridChangeDepth' has a wrong offset!");
static_assert(offsetof(AAOceanologyLightControl, Enablecontrol) == 0x0002A0, "Member 'AAOceanologyLightControl::Enablecontrol' has a wrong offset!");
static_assert(offsetof(AAOceanologyLightControl, UnderWaterHeightFog) == 0x000310, "Member 'AAOceanologyLightControl::UnderWaterHeightFog' has a wrong offset!");

// Class Oceanology_Plugin.AUnderWaterVolume
// 0x0228 (0x0498 - 0x0270)
class AAUnderWaterVolume final : public AVolume
{
public:
	uint8                                         Pad_1769[0x8];                                     // 0x0270(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EVolumeTiggerType                             TiggerType;                                        // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_176A[0x3];                                     // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendRadius;                                       // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendWeight;                                       // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnabled : 1;                                      // 0x0288(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUnbound : 1;                                      // 0x0288(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_176B[0x3];                                     // 0x0289(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUnderWaterBlur                        UnderWaterBlur;                                    // 0x028C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUnderWaterDistortion                  UnderWaterDistortion;                              // 0x0298(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUnderWaterFog                         UnderWaterFog;                                     // 0x02A4(0x0024)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUnderWaterSun                         UnderWaterSun;                                     // 0x02C8(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUnderWaterSunOnFog                    UnderWaterSunOnFog;                                // 0x02D4(0x001C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUnderWaterTopDownFog                  UnderWaterTopDownFog;                              // 0x02F0(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUnderWaterFogDepthCurve               UnderWaterFogDepthCurve;                           // 0x0318(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPostPrcessDof                         UnderWaterPostPressDof;                            // 0x0328(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPostPrcessMobileDof                   UnderWaterMobilePostPressDof;                      // 0x0334(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         UnderWaterDepht;                                   // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDirectionalLightVolume                UnderWaterDirectionalLight;                        // 0x0350(0x0060)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FOceanHeightfog                        UnderWaterHeightFog;                               // 0x03B0(0x0080)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InHouseFade;                                       // 0x0430(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InHouseFallOff;                                    // 0x0434(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHouseLight>                    HouseLight;                                        // 0x0438(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FHouseSphereReflectionCapture>  HouseReflectionCapture;                            // 0x0448(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         GadRayHeight;                                      // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GodRayColor;                                       // 0x045C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableGodRays;                                     // 0x046C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_176C[0x3];                                     // 0x046D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UParticleSystem>         OceanVolumPatricle;                                // 0x0470(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AUnderWaterVolume">();
	}
	static class AAUnderWaterVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAUnderWaterVolume>();
	}
};
static_assert(alignof(AAUnderWaterVolume) == 0x000008, "Wrong alignment on AAUnderWaterVolume");
static_assert(sizeof(AAUnderWaterVolume) == 0x000498, "Wrong size on AAUnderWaterVolume");
static_assert(offsetof(AAUnderWaterVolume, TiggerType) == 0x000278, "Member 'AAUnderWaterVolume::TiggerType' has a wrong offset!");
static_assert(offsetof(AAUnderWaterVolume, BlendRadius) == 0x00027C, "Member 'AAUnderWaterVolume::BlendRadius' has a wrong offset!");
static_assert(offsetof(AAUnderWaterVolume, BlendTime) == 0x000280, "Member 'AAUnderWaterVolume::BlendTime' has a wrong offset!");
static_assert(offsetof(AAUnderWaterVolume, BlendWeight) == 0x000284, "Member 'AAUnderWaterVolume::BlendWeight' has a wrong offset!");
static_assert(offsetof(AAUnderWaterVolume, UnderWaterBlur) == 0x00028C, "Member 'AAUnderWaterVolume::UnderWaterBlur' has a wrong offset!");
static_assert(offsetof(AAUnderWaterVolume, UnderWaterDistortion) == 0x000298, "Member 'AAUnderWaterVolume::UnderWaterDistortion' has a wrong offset!");
static_assert(offsetof(AAUnderWaterVolume, UnderWaterFog) == 0x0002A4, "Member 'AAUnderWaterVolume::UnderWaterFog' has a wrong offset!");
static_assert(offsetof(AAUnderWaterVolume, UnderWaterSun) == 0x0002C8, "Member 'AAUnderWaterVolume::UnderWaterSun' has a wrong offset!");
static_assert(offsetof(AAUnderWaterVolume, UnderWaterSunOnFog) == 0x0002D4, "Member 'AAUnderWaterVolume::UnderWaterSunOnFog' has a wrong offset!");
static_assert(offsetof(AAUnderWaterVolume, UnderWaterTopDownFog) == 0x0002F0, "Member 'AAUnderWaterVolume::UnderWaterTopDownFog' has a wrong offset!");
static_assert(offsetof(AAUnderWaterVolume, UnderWaterFogDepthCurve) == 0x000318, "Member 'AAUnderWaterVolume::UnderWaterFogDepthCurve' has a wrong offset!");
static_assert(offsetof(AAUnderWaterVolume, UnderWaterPostPressDof) == 0x000328, "Member 'AAUnderWaterVolume::UnderWaterPostPressDof' has a wrong offset!");
static_assert(offsetof(AAUnderWaterVolume, UnderWaterMobilePostPressDof) == 0x000334, "Member 'AAUnderWaterVolume::UnderWaterMobilePostPressDof' has a wrong offset!");
static_assert(offsetof(AAUnderWaterVolume, UnderWaterDepht) == 0x00034C, "Member 'AAUnderWaterVolume::UnderWaterDepht' has a wrong offset!");
static_assert(offsetof(AAUnderWaterVolume, UnderWaterDirectionalLight) == 0x000350, "Member 'AAUnderWaterVolume::UnderWaterDirectionalLight' has a wrong offset!");
static_assert(offsetof(AAUnderWaterVolume, UnderWaterHeightFog) == 0x0003B0, "Member 'AAUnderWaterVolume::UnderWaterHeightFog' has a wrong offset!");
static_assert(offsetof(AAUnderWaterVolume, InHouseFade) == 0x000430, "Member 'AAUnderWaterVolume::InHouseFade' has a wrong offset!");
static_assert(offsetof(AAUnderWaterVolume, InHouseFallOff) == 0x000434, "Member 'AAUnderWaterVolume::InHouseFallOff' has a wrong offset!");
static_assert(offsetof(AAUnderWaterVolume, HouseLight) == 0x000438, "Member 'AAUnderWaterVolume::HouseLight' has a wrong offset!");
static_assert(offsetof(AAUnderWaterVolume, HouseReflectionCapture) == 0x000448, "Member 'AAUnderWaterVolume::HouseReflectionCapture' has a wrong offset!");
static_assert(offsetof(AAUnderWaterVolume, GadRayHeight) == 0x000458, "Member 'AAUnderWaterVolume::GadRayHeight' has a wrong offset!");
static_assert(offsetof(AAUnderWaterVolume, GodRayColor) == 0x00045C, "Member 'AAUnderWaterVolume::GodRayColor' has a wrong offset!");
static_assert(offsetof(AAUnderWaterVolume, EnableGodRays) == 0x00046C, "Member 'AAUnderWaterVolume::EnableGodRays' has a wrong offset!");
static_assert(offsetof(AAUnderWaterVolume, OceanVolumPatricle) == 0x000470, "Member 'AAUnderWaterVolume::OceanVolumPatricle' has a wrong offset!");

// Class Oceanology_Plugin.AWaterUnderMaskActor
// 0x0000 (0x0238 - 0x0238)
class AAWaterUnderMaskActor final : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AWaterUnderMaskActor">();
	}
	static class AAWaterUnderMaskActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAWaterUnderMaskActor>();
	}
};
static_assert(alignof(AAWaterUnderMaskActor) == 0x000008, "Wrong alignment on AAWaterUnderMaskActor");
static_assert(sizeof(AAWaterUnderMaskActor) == 0x000238, "Wrong size on AAWaterUnderMaskActor");

// Class Oceanology_Plugin.HottaSwimmingComponent
// 0x0008 (0x00C0 - 0x00B8)
class UHottaSwimmingComponent : public UActorComponent
{
public:
	uint8                                         Pad_176D[0x8];                                     // 0x00B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class AQuadTree* GetReferenceToOceanology();
	void SetReferenceToOceanology();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HottaSwimmingComponent">();
	}
	static class UHottaSwimmingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHottaSwimmingComponent>();
	}
};
static_assert(alignof(UHottaSwimmingComponent) == 0x000008, "Wrong alignment on UHottaSwimmingComponent");
static_assert(sizeof(UHottaSwimmingComponent) == 0x0000C0, "Wrong size on UHottaSwimmingComponent");

// Class Oceanology_Plugin.Infinite_Compound
// 0x0070 (0x0280 - 0x0210)
class UInfinite_Compound final : public USceneComponent
{
public:
	bool                                          RealTime;                                          // 0x0208(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_176E[0x3];                                     // 0x0209(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeJump;                                          // 0x020C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CamLocOffset;                                      // 0x0210(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceCamLocOffset;                                 // 0x021C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceLandScapeOffset;                              // 0x0228(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShorelineRang;                                     // 0x0234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Shoreline;                                         // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_176F[0x4];                                     // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADirectionalLight*                      Sunlight;                                          // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInfinityCategory                             InfinityCategory;                                  // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1770[0x37];                                    // 0x0249(0x0037)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FVector GetCamLoction();
	struct FRotator GetCamRotator();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Infinite_Compound">();
	}
	static class UInfinite_Compound* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInfinite_Compound>();
	}
};
static_assert(alignof(UInfinite_Compound) == 0x000010, "Wrong alignment on UInfinite_Compound");
static_assert(sizeof(UInfinite_Compound) == 0x000280, "Wrong size on UInfinite_Compound");
static_assert(offsetof(UInfinite_Compound, RealTime) == 0x000208, "Member 'UInfinite_Compound::RealTime' has a wrong offset!");
static_assert(offsetof(UInfinite_Compound, TimeJump) == 0x00020C, "Member 'UInfinite_Compound::TimeJump' has a wrong offset!");
static_assert(offsetof(UInfinite_Compound, CamLocOffset) == 0x000210, "Member 'UInfinite_Compound::CamLocOffset' has a wrong offset!");
static_assert(offsetof(UInfinite_Compound, TraceCamLocOffset) == 0x00021C, "Member 'UInfinite_Compound::TraceCamLocOffset' has a wrong offset!");
static_assert(offsetof(UInfinite_Compound, TraceLandScapeOffset) == 0x000228, "Member 'UInfinite_Compound::TraceLandScapeOffset' has a wrong offset!");
static_assert(offsetof(UInfinite_Compound, ShorelineRang) == 0x000234, "Member 'UInfinite_Compound::ShorelineRang' has a wrong offset!");
static_assert(offsetof(UInfinite_Compound, Shoreline) == 0x000238, "Member 'UInfinite_Compound::Shoreline' has a wrong offset!");
static_assert(offsetof(UInfinite_Compound, Sunlight) == 0x000240, "Member 'UInfinite_Compound::Sunlight' has a wrong offset!");
static_assert(offsetof(UInfinite_Compound, InfinityCategory) == 0x000248, "Member 'UInfinite_Compound::InfinityCategory' has a wrong offset!");

// Class Oceanology_Plugin.Oceanology_PluginBPLibrary
// 0x0000 (0x0028 - 0x0028)
class UOceanology_PluginBPLibrary final : public UBlueprintFunctionLibrary
{
public:
	static float Oceanology_PluginSampleFunction(float Param);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Oceanology_PluginBPLibrary">();
	}
	static class UOceanology_PluginBPLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOceanology_PluginBPLibrary>();
	}
};
static_assert(alignof(UOceanology_PluginBPLibrary) == 0x000008, "Wrong alignment on UOceanology_PluginBPLibrary");
static_assert(sizeof(UOceanology_PluginBPLibrary) == 0x000028, "Wrong size on UOceanology_PluginBPLibrary");

// Class Oceanology_Plugin.OceanologySwimVolume
// 0x0000 (0x0280 - 0x0280)
class AOceanologySwimVolume : public APhysicsVolume
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OceanologySwimVolume">();
	}
	static class AOceanologySwimVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AOceanologySwimVolume>();
	}
};
static_assert(alignof(AOceanologySwimVolume) == 0x000008, "Wrong alignment on AOceanologySwimVolume");
static_assert(sizeof(AOceanologySwimVolume) == 0x000280, "Wrong size on AOceanologySwimVolume");

// Class Oceanology_Plugin.QuadTree
// 0x0B58 (0x0D90 - 0x0238)
class AQuadTree final : public AActor
{
public:
	class APostProcessVolume*                     PPostProcessVolume;                                // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0240(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               CustomPostProcessDyn;                              // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               CustomPostProcessDynDis;                           // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUnderWaterBlur                        UnderWaterBlur;                                    // 0x0258(0x000C)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUnderWaterDistortion                  UnderWaterDistortion;                              // 0x0264(0x000C)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUnderWaterFog                         UnderWaterFog;                                     // 0x0270(0x0024)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUnderWaterSun                         UnderWaterSun;                                     // 0x0294(0x000C)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUnderWaterSunOnFog                    UnderWaterSunOnFog;                                // 0x02A0(0x001C)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUnderWaterTopDownFog                  UnderWaterTopDownFog;                              // 0x02BC(0x0028)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         UnderWaterDepht;                                   // 0x02E4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUnderWaterFogDepthCurve               UnderWaterFogDepthCurve;                           // 0x02E8(0x0010)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPostPrcessDof                         UnderWaterPostPressDof;                            // 0x02F8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPostPrcessMobileDof                   UnderWaterMobilePostPressDof;                      // 0x0304(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1771[0xFC];                                    // 0x031C(0x00FC)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bEnableOceanlightAndHeightfog;                     // 0x0418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlayerUnderWater;                                // 0x0419(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1772[0x6];                                     // 0x041A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               GadRayDynMaterial;                                 // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GadRayHeight;                                      // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GodRayColor;                                       // 0x042C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableGodRays;                                     // 0x043C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1773[0x3];                                     // 0x043D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DoGadRayHeight;                                    // 0x0440(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WaterPreviewGridPos;                               // 0x0444(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1774[0x3C0];                                   // 0x0450(0x03C0)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUnderWaterBlur                        CurrentDoUnderWaterBlur;                           // 0x0810(0x000C)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUnderWaterDistortion                  CurrentDoUnderWaterDistortion;                     // 0x081C(0x000C)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUnderWaterFog                         CurrentDoUnderWaterFog;                            // 0x0828(0x0024)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUnderWaterSun                         CurrentDoUnderWaterSun;                            // 0x084C(0x000C)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUnderWaterSunOnFog                    CurrentDoUnderWaterSunOnFog;                       // 0x0858(0x001C)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUnderWaterTopDownFog                  CurrentDoUnderWaterTopDownFog;                     // 0x0874(0x0028)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1775[0x4];                                     // 0x089C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUnderWaterFogDepthCurve               CurrentUnderWaterfogDepthCurve;                    // 0x08A0(0x0010)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CurrentDoUnderWaterDepht;                          // 0x08B0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1776[0x4];                                     // 0x08B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDirectionalLightVolume                CurrentunderWaterDirectionalLight;                 // 0x08B8(0x0060)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FOceanHeightfog                        CurrentunderunderWaterHeightfog;                   // 0x0918(0x0080)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1777[0x3F0];                                   // 0x0998(0x03F0)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayerWaveHeight;                                  // 0x0D88(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EditorTickIsEnabled;                               // 0x0D8C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1778[0x3];                                     // 0x0D8D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BluePrintTick(float DeltaSeconds);
	void EditorTick(float DeltaSeconds);
	void GetWaveHeightEvent(const struct FVector& Pos);
	void GetWaveHeightHotta(const struct FVector& Pos);
	void InitPostProcess(class UPostProcessComponent* PostProcessVolume, class UMaterialInstanceDynamic* Custom1, class UMaterialInstanceDynamic* Custom2);
	bool IsUnderWater();
	void PostProcessMaterialWeight(class UPostProcessComponent* PostProcessVolume, bool bUnderWater);
	void Procedural(class UHierarchicalInstancedStaticMeshComponent* HISMC, float GridSize, int32 GridTiles, float CellSize);
	void SetEditorTickEnabled(bool bEnabled);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuadTree">();
	}
	static class AQuadTree* GetDefaultObj()
	{
		return GetDefaultObjImpl<AQuadTree>();
	}
};
static_assert(alignof(AQuadTree) == 0x000008, "Wrong alignment on AQuadTree");
static_assert(sizeof(AQuadTree) == 0x000D90, "Wrong size on AQuadTree");
static_assert(offsetof(AQuadTree, PPostProcessVolume) == 0x000238, "Member 'AQuadTree::PPostProcessVolume' has a wrong offset!");
static_assert(offsetof(AQuadTree, DefaultSceneRoot) == 0x000240, "Member 'AQuadTree::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AQuadTree, CustomPostProcessDyn) == 0x000248, "Member 'AQuadTree::CustomPostProcessDyn' has a wrong offset!");
static_assert(offsetof(AQuadTree, CustomPostProcessDynDis) == 0x000250, "Member 'AQuadTree::CustomPostProcessDynDis' has a wrong offset!");
static_assert(offsetof(AQuadTree, UnderWaterBlur) == 0x000258, "Member 'AQuadTree::UnderWaterBlur' has a wrong offset!");
static_assert(offsetof(AQuadTree, UnderWaterDistortion) == 0x000264, "Member 'AQuadTree::UnderWaterDistortion' has a wrong offset!");
static_assert(offsetof(AQuadTree, UnderWaterFog) == 0x000270, "Member 'AQuadTree::UnderWaterFog' has a wrong offset!");
static_assert(offsetof(AQuadTree, UnderWaterSun) == 0x000294, "Member 'AQuadTree::UnderWaterSun' has a wrong offset!");
static_assert(offsetof(AQuadTree, UnderWaterSunOnFog) == 0x0002A0, "Member 'AQuadTree::UnderWaterSunOnFog' has a wrong offset!");
static_assert(offsetof(AQuadTree, UnderWaterTopDownFog) == 0x0002BC, "Member 'AQuadTree::UnderWaterTopDownFog' has a wrong offset!");
static_assert(offsetof(AQuadTree, UnderWaterDepht) == 0x0002E4, "Member 'AQuadTree::UnderWaterDepht' has a wrong offset!");
static_assert(offsetof(AQuadTree, UnderWaterFogDepthCurve) == 0x0002E8, "Member 'AQuadTree::UnderWaterFogDepthCurve' has a wrong offset!");
static_assert(offsetof(AQuadTree, UnderWaterPostPressDof) == 0x0002F8, "Member 'AQuadTree::UnderWaterPostPressDof' has a wrong offset!");
static_assert(offsetof(AQuadTree, UnderWaterMobilePostPressDof) == 0x000304, "Member 'AQuadTree::UnderWaterMobilePostPressDof' has a wrong offset!");
static_assert(offsetof(AQuadTree, bEnableOceanlightAndHeightfog) == 0x000418, "Member 'AQuadTree::bEnableOceanlightAndHeightfog' has a wrong offset!");
static_assert(offsetof(AQuadTree, IsPlayerUnderWater) == 0x000419, "Member 'AQuadTree::IsPlayerUnderWater' has a wrong offset!");
static_assert(offsetof(AQuadTree, GadRayDynMaterial) == 0x000420, "Member 'AQuadTree::GadRayDynMaterial' has a wrong offset!");
static_assert(offsetof(AQuadTree, GadRayHeight) == 0x000428, "Member 'AQuadTree::GadRayHeight' has a wrong offset!");
static_assert(offsetof(AQuadTree, GodRayColor) == 0x00042C, "Member 'AQuadTree::GodRayColor' has a wrong offset!");
static_assert(offsetof(AQuadTree, EnableGodRays) == 0x00043C, "Member 'AQuadTree::EnableGodRays' has a wrong offset!");
static_assert(offsetof(AQuadTree, DoGadRayHeight) == 0x000440, "Member 'AQuadTree::DoGadRayHeight' has a wrong offset!");
static_assert(offsetof(AQuadTree, WaterPreviewGridPos) == 0x000444, "Member 'AQuadTree::WaterPreviewGridPos' has a wrong offset!");
static_assert(offsetof(AQuadTree, CurrentDoUnderWaterBlur) == 0x000810, "Member 'AQuadTree::CurrentDoUnderWaterBlur' has a wrong offset!");
static_assert(offsetof(AQuadTree, CurrentDoUnderWaterDistortion) == 0x00081C, "Member 'AQuadTree::CurrentDoUnderWaterDistortion' has a wrong offset!");
static_assert(offsetof(AQuadTree, CurrentDoUnderWaterFog) == 0x000828, "Member 'AQuadTree::CurrentDoUnderWaterFog' has a wrong offset!");
static_assert(offsetof(AQuadTree, CurrentDoUnderWaterSun) == 0x00084C, "Member 'AQuadTree::CurrentDoUnderWaterSun' has a wrong offset!");
static_assert(offsetof(AQuadTree, CurrentDoUnderWaterSunOnFog) == 0x000858, "Member 'AQuadTree::CurrentDoUnderWaterSunOnFog' has a wrong offset!");
static_assert(offsetof(AQuadTree, CurrentDoUnderWaterTopDownFog) == 0x000874, "Member 'AQuadTree::CurrentDoUnderWaterTopDownFog' has a wrong offset!");
static_assert(offsetof(AQuadTree, CurrentUnderWaterfogDepthCurve) == 0x0008A0, "Member 'AQuadTree::CurrentUnderWaterfogDepthCurve' has a wrong offset!");
static_assert(offsetof(AQuadTree, CurrentDoUnderWaterDepht) == 0x0008B0, "Member 'AQuadTree::CurrentDoUnderWaterDepht' has a wrong offset!");
static_assert(offsetof(AQuadTree, CurrentunderWaterDirectionalLight) == 0x0008B8, "Member 'AQuadTree::CurrentunderWaterDirectionalLight' has a wrong offset!");
static_assert(offsetof(AQuadTree, CurrentunderunderWaterHeightfog) == 0x000918, "Member 'AQuadTree::CurrentunderunderWaterHeightfog' has a wrong offset!");
static_assert(offsetof(AQuadTree, PlayerWaveHeight) == 0x000D88, "Member 'AQuadTree::PlayerWaveHeight' has a wrong offset!");
static_assert(offsetof(AQuadTree, EditorTickIsEnabled) == 0x000D8C, "Member 'AQuadTree::EditorTickIsEnabled' has a wrong offset!");

}

