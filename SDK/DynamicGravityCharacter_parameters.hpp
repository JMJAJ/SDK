#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DynamicGravityCharacter

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "DynamicGravityCharacter_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function DynamicGravityCharacter.DGCharacter.AddForwardPlanarMovementInput
// 0x0014 (0x0014 - 0x0000)
struct DGCharacter_AddForwardPlanarMovementInput final
{
public:
	struct FRotator                               WorldRotation;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ScaleValue;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_180F[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DGCharacter_AddForwardPlanarMovementInput) == 0x000004, "Wrong alignment on DGCharacter_AddForwardPlanarMovementInput");
static_assert(sizeof(DGCharacter_AddForwardPlanarMovementInput) == 0x000014, "Wrong size on DGCharacter_AddForwardPlanarMovementInput");
static_assert(offsetof(DGCharacter_AddForwardPlanarMovementInput, WorldRotation) == 0x000000, "Member 'DGCharacter_AddForwardPlanarMovementInput::WorldRotation' has a wrong offset!");
static_assert(offsetof(DGCharacter_AddForwardPlanarMovementInput, ScaleValue) == 0x00000C, "Member 'DGCharacter_AddForwardPlanarMovementInput::ScaleValue' has a wrong offset!");
static_assert(offsetof(DGCharacter_AddForwardPlanarMovementInput, bForce) == 0x000010, "Member 'DGCharacter_AddForwardPlanarMovementInput::bForce' has a wrong offset!");

// Function DynamicGravityCharacter.DGCharacter.AddForwardPlanarMovementInputWithViewRotationAsWorldRotation
// 0x0008 (0x0008 - 0x0000)
struct DGCharacter_AddForwardPlanarMovementInputWithViewRotationAsWorldRotation final
{
public:
	float                                         ScaleValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1810[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DGCharacter_AddForwardPlanarMovementInputWithViewRotationAsWorldRotation) == 0x000004, "Wrong alignment on DGCharacter_AddForwardPlanarMovementInputWithViewRotationAsWorldRotation");
static_assert(sizeof(DGCharacter_AddForwardPlanarMovementInputWithViewRotationAsWorldRotation) == 0x000008, "Wrong size on DGCharacter_AddForwardPlanarMovementInputWithViewRotationAsWorldRotation");
static_assert(offsetof(DGCharacter_AddForwardPlanarMovementInputWithViewRotationAsWorldRotation, ScaleValue) == 0x000000, "Member 'DGCharacter_AddForwardPlanarMovementInputWithViewRotationAsWorldRotation::ScaleValue' has a wrong offset!");
static_assert(offsetof(DGCharacter_AddForwardPlanarMovementInputWithViewRotationAsWorldRotation, bForce) == 0x000004, "Member 'DGCharacter_AddForwardPlanarMovementInputWithViewRotationAsWorldRotation::bForce' has a wrong offset!");

// Function DynamicGravityCharacter.DGCharacter.AddForwardRadialMovementInput
// 0x0014 (0x0014 - 0x0000)
struct DGCharacter_AddForwardRadialMovementInput final
{
public:
	struct FRotator                               WorldRotation;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ScaleValue;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1811[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DGCharacter_AddForwardRadialMovementInput) == 0x000004, "Wrong alignment on DGCharacter_AddForwardRadialMovementInput");
static_assert(sizeof(DGCharacter_AddForwardRadialMovementInput) == 0x000014, "Wrong size on DGCharacter_AddForwardRadialMovementInput");
static_assert(offsetof(DGCharacter_AddForwardRadialMovementInput, WorldRotation) == 0x000000, "Member 'DGCharacter_AddForwardRadialMovementInput::WorldRotation' has a wrong offset!");
static_assert(offsetof(DGCharacter_AddForwardRadialMovementInput, ScaleValue) == 0x00000C, "Member 'DGCharacter_AddForwardRadialMovementInput::ScaleValue' has a wrong offset!");
static_assert(offsetof(DGCharacter_AddForwardRadialMovementInput, bForce) == 0x000010, "Member 'DGCharacter_AddForwardRadialMovementInput::bForce' has a wrong offset!");

// Function DynamicGravityCharacter.DGCharacter.AddForwardRadialMovementInputWithViewRotationAsWorldRotation
// 0x0008 (0x0008 - 0x0000)
struct DGCharacter_AddForwardRadialMovementInputWithViewRotationAsWorldRotation final
{
public:
	float                                         ScaleValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1812[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DGCharacter_AddForwardRadialMovementInputWithViewRotationAsWorldRotation) == 0x000004, "Wrong alignment on DGCharacter_AddForwardRadialMovementInputWithViewRotationAsWorldRotation");
static_assert(sizeof(DGCharacter_AddForwardRadialMovementInputWithViewRotationAsWorldRotation) == 0x000008, "Wrong size on DGCharacter_AddForwardRadialMovementInputWithViewRotationAsWorldRotation");
static_assert(offsetof(DGCharacter_AddForwardRadialMovementInputWithViewRotationAsWorldRotation, ScaleValue) == 0x000000, "Member 'DGCharacter_AddForwardRadialMovementInputWithViewRotationAsWorldRotation::ScaleValue' has a wrong offset!");
static_assert(offsetof(DGCharacter_AddForwardRadialMovementInputWithViewRotationAsWorldRotation, bForce) == 0x000004, "Member 'DGCharacter_AddForwardRadialMovementInputWithViewRotationAsWorldRotation::bForce' has a wrong offset!");

// Function DynamicGravityCharacter.DGCharacter.AddRightPlanarMovementInput
// 0x0014 (0x0014 - 0x0000)
struct DGCharacter_AddRightPlanarMovementInput final
{
public:
	struct FRotator                               WorldRotation;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ScaleValue;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1813[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DGCharacter_AddRightPlanarMovementInput) == 0x000004, "Wrong alignment on DGCharacter_AddRightPlanarMovementInput");
static_assert(sizeof(DGCharacter_AddRightPlanarMovementInput) == 0x000014, "Wrong size on DGCharacter_AddRightPlanarMovementInput");
static_assert(offsetof(DGCharacter_AddRightPlanarMovementInput, WorldRotation) == 0x000000, "Member 'DGCharacter_AddRightPlanarMovementInput::WorldRotation' has a wrong offset!");
static_assert(offsetof(DGCharacter_AddRightPlanarMovementInput, ScaleValue) == 0x00000C, "Member 'DGCharacter_AddRightPlanarMovementInput::ScaleValue' has a wrong offset!");
static_assert(offsetof(DGCharacter_AddRightPlanarMovementInput, bForce) == 0x000010, "Member 'DGCharacter_AddRightPlanarMovementInput::bForce' has a wrong offset!");

// Function DynamicGravityCharacter.DGCharacter.AddRightPlanarMovementInputWithViewRotationAsWorldRotation
// 0x0008 (0x0008 - 0x0000)
struct DGCharacter_AddRightPlanarMovementInputWithViewRotationAsWorldRotation final
{
public:
	float                                         ScaleValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1814[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DGCharacter_AddRightPlanarMovementInputWithViewRotationAsWorldRotation) == 0x000004, "Wrong alignment on DGCharacter_AddRightPlanarMovementInputWithViewRotationAsWorldRotation");
static_assert(sizeof(DGCharacter_AddRightPlanarMovementInputWithViewRotationAsWorldRotation) == 0x000008, "Wrong size on DGCharacter_AddRightPlanarMovementInputWithViewRotationAsWorldRotation");
static_assert(offsetof(DGCharacter_AddRightPlanarMovementInputWithViewRotationAsWorldRotation, ScaleValue) == 0x000000, "Member 'DGCharacter_AddRightPlanarMovementInputWithViewRotationAsWorldRotation::ScaleValue' has a wrong offset!");
static_assert(offsetof(DGCharacter_AddRightPlanarMovementInputWithViewRotationAsWorldRotation, bForce) == 0x000004, "Member 'DGCharacter_AddRightPlanarMovementInputWithViewRotationAsWorldRotation::bForce' has a wrong offset!");

// Function DynamicGravityCharacter.DGCharacter.AddRightRadialMovementInput
// 0x0014 (0x0014 - 0x0000)
struct DGCharacter_AddRightRadialMovementInput final
{
public:
	struct FRotator                               WorldRotation;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ScaleValue;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1815[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DGCharacter_AddRightRadialMovementInput) == 0x000004, "Wrong alignment on DGCharacter_AddRightRadialMovementInput");
static_assert(sizeof(DGCharacter_AddRightRadialMovementInput) == 0x000014, "Wrong size on DGCharacter_AddRightRadialMovementInput");
static_assert(offsetof(DGCharacter_AddRightRadialMovementInput, WorldRotation) == 0x000000, "Member 'DGCharacter_AddRightRadialMovementInput::WorldRotation' has a wrong offset!");
static_assert(offsetof(DGCharacter_AddRightRadialMovementInput, ScaleValue) == 0x00000C, "Member 'DGCharacter_AddRightRadialMovementInput::ScaleValue' has a wrong offset!");
static_assert(offsetof(DGCharacter_AddRightRadialMovementInput, bForce) == 0x000010, "Member 'DGCharacter_AddRightRadialMovementInput::bForce' has a wrong offset!");

// Function DynamicGravityCharacter.DGCharacter.AddRightRadialMovementInputWithViewRotationAsWorldRotation
// 0x0008 (0x0008 - 0x0000)
struct DGCharacter_AddRightRadialMovementInputWithViewRotationAsWorldRotation final
{
public:
	float                                         ScaleValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1816[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DGCharacter_AddRightRadialMovementInputWithViewRotationAsWorldRotation) == 0x000004, "Wrong alignment on DGCharacter_AddRightRadialMovementInputWithViewRotationAsWorldRotation");
static_assert(sizeof(DGCharacter_AddRightRadialMovementInputWithViewRotationAsWorldRotation) == 0x000008, "Wrong size on DGCharacter_AddRightRadialMovementInputWithViewRotationAsWorldRotation");
static_assert(offsetof(DGCharacter_AddRightRadialMovementInputWithViewRotationAsWorldRotation, ScaleValue) == 0x000000, "Member 'DGCharacter_AddRightRadialMovementInputWithViewRotationAsWorldRotation::ScaleValue' has a wrong offset!");
static_assert(offsetof(DGCharacter_AddRightRadialMovementInputWithViewRotationAsWorldRotation, bForce) == 0x000004, "Member 'DGCharacter_AddRightRadialMovementInputWithViewRotationAsWorldRotation::bForce' has a wrong offset!");

// Function DynamicGravityCharacter.DGCharacter.HorizontalAndVerticalVelocities
// 0x0018 (0x0018 - 0x0000)
struct DGCharacter_HorizontalAndVerticalVelocities final
{
public:
	struct DynamicGravityCharacter::FHorizontalAndVerticalVelocities ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DGCharacter_HorizontalAndVerticalVelocities) == 0x000004, "Wrong alignment on DGCharacter_HorizontalAndVerticalVelocities");
static_assert(sizeof(DGCharacter_HorizontalAndVerticalVelocities) == 0x000018, "Wrong size on DGCharacter_HorizontalAndVerticalVelocities");
static_assert(offsetof(DGCharacter_HorizontalAndVerticalVelocities, ReturnValue) == 0x000000, "Member 'DGCharacter_HorizontalAndVerticalVelocities::ReturnValue' has a wrong offset!");

// Function DynamicGravityCharacter.DGCharacter.HorizontalSpeed
// 0x0004 (0x0004 - 0x0000)
struct DGCharacter_HorizontalSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DGCharacter_HorizontalSpeed) == 0x000004, "Wrong alignment on DGCharacter_HorizontalSpeed");
static_assert(sizeof(DGCharacter_HorizontalSpeed) == 0x000004, "Wrong size on DGCharacter_HorizontalSpeed");
static_assert(offsetof(DGCharacter_HorizontalSpeed, ReturnValue) == 0x000000, "Member 'DGCharacter_HorizontalSpeed::ReturnValue' has a wrong offset!");

// Function DynamicGravityCharacter.DGCharacter.HorizontalVelocity
// 0x000C (0x000C - 0x0000)
struct DGCharacter_HorizontalVelocity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DGCharacter_HorizontalVelocity) == 0x000004, "Wrong alignment on DGCharacter_HorizontalVelocity");
static_assert(sizeof(DGCharacter_HorizontalVelocity) == 0x00000C, "Wrong size on DGCharacter_HorizontalVelocity");
static_assert(offsetof(DGCharacter_HorizontalVelocity, ReturnValue) == 0x000000, "Member 'DGCharacter_HorizontalVelocity::ReturnValue' has a wrong offset!");

// Function DynamicGravityCharacter.DGCharacter.SetViewRotationBaseMode
// 0x0001 (0x0001 - 0x0000)
struct DGCharacter_SetViewRotationBaseMode final
{
public:
	EViewRotationBaseMode                         NewViewRotationBaseMode;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DGCharacter_SetViewRotationBaseMode) == 0x000001, "Wrong alignment on DGCharacter_SetViewRotationBaseMode");
static_assert(sizeof(DGCharacter_SetViewRotationBaseMode) == 0x000001, "Wrong size on DGCharacter_SetViewRotationBaseMode");
static_assert(offsetof(DGCharacter_SetViewRotationBaseMode, NewViewRotationBaseMode) == 0x000000, "Member 'DGCharacter_SetViewRotationBaseMode::NewViewRotationBaseMode' has a wrong offset!");

// Function DynamicGravityCharacter.DGCharacter.Speed
// 0x0004 (0x0004 - 0x0000)
struct DGCharacter_Speed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DGCharacter_Speed) == 0x000004, "Wrong alignment on DGCharacter_Speed");
static_assert(sizeof(DGCharacter_Speed) == 0x000004, "Wrong size on DGCharacter_Speed");
static_assert(offsetof(DGCharacter_Speed, ReturnValue) == 0x000000, "Member 'DGCharacter_Speed::ReturnValue' has a wrong offset!");

// Function DynamicGravityCharacter.DGCharacter.VerticalSpeed
// 0x0004 (0x0004 - 0x0000)
struct DGCharacter_VerticalSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DGCharacter_VerticalSpeed) == 0x000004, "Wrong alignment on DGCharacter_VerticalSpeed");
static_assert(sizeof(DGCharacter_VerticalSpeed) == 0x000004, "Wrong size on DGCharacter_VerticalSpeed");
static_assert(offsetof(DGCharacter_VerticalSpeed, ReturnValue) == 0x000000, "Member 'DGCharacter_VerticalSpeed::ReturnValue' has a wrong offset!");

// Function DynamicGravityCharacter.DGCharacter.VerticalVelocity
// 0x000C (0x000C - 0x0000)
struct DGCharacter_VerticalVelocity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DGCharacter_VerticalVelocity) == 0x000004, "Wrong alignment on DGCharacter_VerticalVelocity");
static_assert(sizeof(DGCharacter_VerticalVelocity) == 0x00000C, "Wrong size on DGCharacter_VerticalVelocity");
static_assert(offsetof(DGCharacter_VerticalVelocity, ReturnValue) == 0x000000, "Member 'DGCharacter_VerticalVelocity::ReturnValue' has a wrong offset!");

// Function DynamicGravityCharacter.DGCharacter.GetViewRotation
// 0x000C (0x000C - 0x0000)
struct DGCharacter_GetViewRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DGCharacter_GetViewRotation) == 0x000004, "Wrong alignment on DGCharacter_GetViewRotation");
static_assert(sizeof(DGCharacter_GetViewRotation) == 0x00000C, "Wrong size on DGCharacter_GetViewRotation");
static_assert(offsetof(DGCharacter_GetViewRotation, ReturnValue) == 0x000000, "Member 'DGCharacter_GetViewRotation::ReturnValue' has a wrong offset!");

// Function DynamicGravityCharacter.DGCharacter.GetViewRotationBaseMode
// 0x0001 (0x0001 - 0x0000)
struct DGCharacter_GetViewRotationBaseMode final
{
public:
	EViewRotationBaseMode                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DGCharacter_GetViewRotationBaseMode) == 0x000001, "Wrong alignment on DGCharacter_GetViewRotationBaseMode");
static_assert(sizeof(DGCharacter_GetViewRotationBaseMode) == 0x000001, "Wrong size on DGCharacter_GetViewRotationBaseMode");
static_assert(offsetof(DGCharacter_GetViewRotationBaseMode, ReturnValue) == 0x000000, "Member 'DGCharacter_GetViewRotationBaseMode::ReturnValue' has a wrong offset!");

// Function DynamicGravityCharacter.DGCharacterMovementComponent.SetCustomJumpDirection
// 0x000C (0x000C - 0x0000)
struct DGCharacterMovementComponent_SetCustomJumpDirection final
{
public:
	struct FVector                                NewJumpDirection;                                  // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DGCharacterMovementComponent_SetCustomJumpDirection) == 0x000004, "Wrong alignment on DGCharacterMovementComponent_SetCustomJumpDirection");
static_assert(sizeof(DGCharacterMovementComponent_SetCustomJumpDirection) == 0x00000C, "Wrong size on DGCharacterMovementComponent_SetCustomJumpDirection");
static_assert(offsetof(DGCharacterMovementComponent_SetCustomJumpDirection, NewJumpDirection) == 0x000000, "Member 'DGCharacterMovementComponent_SetCustomJumpDirection::NewJumpDirection' has a wrong offset!");

// Function DynamicGravityCharacter.DGCharacterMovementComponent.SetCustomWalkableFloorNormal
// 0x000C (0x000C - 0x0000)
struct DGCharacterMovementComponent_SetCustomWalkableFloorNormal final
{
public:
	struct FVector                                NewFloorDirection;                                 // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DGCharacterMovementComponent_SetCustomWalkableFloorNormal) == 0x000004, "Wrong alignment on DGCharacterMovementComponent_SetCustomWalkableFloorNormal");
static_assert(sizeof(DGCharacterMovementComponent_SetCustomWalkableFloorNormal) == 0x00000C, "Wrong size on DGCharacterMovementComponent_SetCustomWalkableFloorNormal");
static_assert(offsetof(DGCharacterMovementComponent_SetCustomWalkableFloorNormal, NewFloorDirection) == 0x000000, "Member 'DGCharacterMovementComponent_SetCustomWalkableFloorNormal::NewFloorDirection' has a wrong offset!");

// Function DynamicGravityCharacter.DGCharacterMovementComponent.ComputeFloorDist
// 0x00C8 (0x00C8 - 0x0000)
struct DGCharacterMovementComponent_ComputeFloorDist final
{
public:
	struct FVector                                WalkableNormal;                                    // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CapsuleRotation;                                   // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                CapsuleLocation;                                   // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineDistance;                                      // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SweepDistance;                                     // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SweepRadius;                                       // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFindFloorResult                       FloorResult;                                       // 0x0030(0x0098)(Parm, OutParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DGCharacterMovementComponent_ComputeFloorDist) == 0x000004, "Wrong alignment on DGCharacterMovementComponent_ComputeFloorDist");
static_assert(sizeof(DGCharacterMovementComponent_ComputeFloorDist) == 0x0000C8, "Wrong size on DGCharacterMovementComponent_ComputeFloorDist");
static_assert(offsetof(DGCharacterMovementComponent_ComputeFloorDist, WalkableNormal) == 0x000000, "Member 'DGCharacterMovementComponent_ComputeFloorDist::WalkableNormal' has a wrong offset!");
static_assert(offsetof(DGCharacterMovementComponent_ComputeFloorDist, CapsuleRotation) == 0x00000C, "Member 'DGCharacterMovementComponent_ComputeFloorDist::CapsuleRotation' has a wrong offset!");
static_assert(offsetof(DGCharacterMovementComponent_ComputeFloorDist, CapsuleLocation) == 0x000018, "Member 'DGCharacterMovementComponent_ComputeFloorDist::CapsuleLocation' has a wrong offset!");
static_assert(offsetof(DGCharacterMovementComponent_ComputeFloorDist, LineDistance) == 0x000024, "Member 'DGCharacterMovementComponent_ComputeFloorDist::LineDistance' has a wrong offset!");
static_assert(offsetof(DGCharacterMovementComponent_ComputeFloorDist, SweepDistance) == 0x000028, "Member 'DGCharacterMovementComponent_ComputeFloorDist::SweepDistance' has a wrong offset!");
static_assert(offsetof(DGCharacterMovementComponent_ComputeFloorDist, SweepRadius) == 0x00002C, "Member 'DGCharacterMovementComponent_ComputeFloorDist::SweepRadius' has a wrong offset!");
static_assert(offsetof(DGCharacterMovementComponent_ComputeFloorDist, FloorResult) == 0x000030, "Member 'DGCharacterMovementComponent_ComputeFloorDist::FloorResult' has a wrong offset!");

// Function DynamicGravityCharacter.DGCharacterMovementComponent.DynamicGravityNormal
// 0x000C (0x000C - 0x0000)
struct DGCharacterMovementComponent_DynamicGravityNormal final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DGCharacterMovementComponent_DynamicGravityNormal) == 0x000004, "Wrong alignment on DGCharacterMovementComponent_DynamicGravityNormal");
static_assert(sizeof(DGCharacterMovementComponent_DynamicGravityNormal) == 0x00000C, "Wrong size on DGCharacterMovementComponent_DynamicGravityNormal");
static_assert(offsetof(DGCharacterMovementComponent_DynamicGravityNormal, ReturnValue) == 0x000000, "Member 'DGCharacterMovementComponent_DynamicGravityNormal::ReturnValue' has a wrong offset!");

// Function DynamicGravityCharacter.DGCharacterMovementComponent.FindFloor
// 0x00BC (0x00BC - 0x0000)
struct DGCharacterMovementComponent_FindFloor final
{
public:
	struct FVector                                WalkableNormal;                                    // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CapsuleRotation;                                   // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                CapsuleLocation;                                   // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFindFloorResult                       FloorResult;                                       // 0x0024(0x0098)(Parm, OutParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DGCharacterMovementComponent_FindFloor) == 0x000004, "Wrong alignment on DGCharacterMovementComponent_FindFloor");
static_assert(sizeof(DGCharacterMovementComponent_FindFloor) == 0x0000BC, "Wrong size on DGCharacterMovementComponent_FindFloor");
static_assert(offsetof(DGCharacterMovementComponent_FindFloor, WalkableNormal) == 0x000000, "Member 'DGCharacterMovementComponent_FindFloor::WalkableNormal' has a wrong offset!");
static_assert(offsetof(DGCharacterMovementComponent_FindFloor, CapsuleRotation) == 0x00000C, "Member 'DGCharacterMovementComponent_FindFloor::CapsuleRotation' has a wrong offset!");
static_assert(offsetof(DGCharacterMovementComponent_FindFloor, CapsuleLocation) == 0x000018, "Member 'DGCharacterMovementComponent_FindFloor::CapsuleLocation' has a wrong offset!");
static_assert(offsetof(DGCharacterMovementComponent_FindFloor, FloorResult) == 0x000024, "Member 'DGCharacterMovementComponent_FindFloor::FloorResult' has a wrong offset!");

// Function DynamicGravityCharacter.DGCharacterMovementComponent.GetCustomJumpDirection
// 0x000C (0x000C - 0x0000)
struct DGCharacterMovementComponent_GetCustomJumpDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DGCharacterMovementComponent_GetCustomJumpDirection) == 0x000004, "Wrong alignment on DGCharacterMovementComponent_GetCustomJumpDirection");
static_assert(sizeof(DGCharacterMovementComponent_GetCustomJumpDirection) == 0x00000C, "Wrong size on DGCharacterMovementComponent_GetCustomJumpDirection");
static_assert(offsetof(DGCharacterMovementComponent_GetCustomJumpDirection, ReturnValue) == 0x000000, "Member 'DGCharacterMovementComponent_GetCustomJumpDirection::ReturnValue' has a wrong offset!");

// Function DynamicGravityCharacter.DGCharacterMovementComponent.GetCustomWalkableFloorNormal
// 0x000C (0x000C - 0x0000)
struct DGCharacterMovementComponent_GetCustomWalkableFloorNormal final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DGCharacterMovementComponent_GetCustomWalkableFloorNormal) == 0x000004, "Wrong alignment on DGCharacterMovementComponent_GetCustomWalkableFloorNormal");
static_assert(sizeof(DGCharacterMovementComponent_GetCustomWalkableFloorNormal) == 0x00000C, "Wrong size on DGCharacterMovementComponent_GetCustomWalkableFloorNormal");
static_assert(offsetof(DGCharacterMovementComponent_GetCustomWalkableFloorNormal, ReturnValue) == 0x000000, "Member 'DGCharacterMovementComponent_GetCustomWalkableFloorNormal::ReturnValue' has a wrong offset!");

// Function DynamicGravityCharacter.DGCharacterMovementComponent.Gravity
// 0x000C (0x000C - 0x0000)
struct DGCharacterMovementComponent_Gravity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DGCharacterMovementComponent_Gravity) == 0x000004, "Wrong alignment on DGCharacterMovementComponent_Gravity");
static_assert(sizeof(DGCharacterMovementComponent_Gravity) == 0x00000C, "Wrong size on DGCharacterMovementComponent_Gravity");
static_assert(offsetof(DGCharacterMovementComponent_Gravity, ReturnValue) == 0x000000, "Member 'DGCharacterMovementComponent_Gravity::ReturnValue' has a wrong offset!");

// Function DynamicGravityCharacter.DGCharacterMovementComponent.GravityNormal
// 0x000C (0x000C - 0x0000)
struct DGCharacterMovementComponent_GravityNormal final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DGCharacterMovementComponent_GravityNormal) == 0x000004, "Wrong alignment on DGCharacterMovementComponent_GravityNormal");
static_assert(sizeof(DGCharacterMovementComponent_GravityNormal) == 0x00000C, "Wrong size on DGCharacterMovementComponent_GravityNormal");
static_assert(offsetof(DGCharacterMovementComponent_GravityNormal, ReturnValue) == 0x000000, "Member 'DGCharacterMovementComponent_GravityNormal::ReturnValue' has a wrong offset!");

// Function DynamicGravityCharacter.DGCharacterMovementComponent.JumpDirection
// 0x000C (0x000C - 0x0000)
struct DGCharacterMovementComponent_JumpDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DGCharacterMovementComponent_JumpDirection) == 0x000004, "Wrong alignment on DGCharacterMovementComponent_JumpDirection");
static_assert(sizeof(DGCharacterMovementComponent_JumpDirection) == 0x00000C, "Wrong size on DGCharacterMovementComponent_JumpDirection");
static_assert(offsetof(DGCharacterMovementComponent_JumpDirection, ReturnValue) == 0x000000, "Member 'DGCharacterMovementComponent_JumpDirection::ReturnValue' has a wrong offset!");

// Function DynamicGravityCharacter.DGCharacterMovementComponent.WalkableFloorNormal
// 0x000C (0x000C - 0x0000)
struct DGCharacterMovementComponent_WalkableFloorNormal final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DGCharacterMovementComponent_WalkableFloorNormal) == 0x000004, "Wrong alignment on DGCharacterMovementComponent_WalkableFloorNormal");
static_assert(sizeof(DGCharacterMovementComponent_WalkableFloorNormal) == 0x00000C, "Wrong size on DGCharacterMovementComponent_WalkableFloorNormal");
static_assert(offsetof(DGCharacterMovementComponent_WalkableFloorNormal, ReturnValue) == 0x000000, "Member 'DGCharacterMovementComponent_WalkableFloorNormal::ReturnValue' has a wrong offset!");

// Function DynamicGravityCharacter.DGCharacterMovementComponent.WorldGravity
// 0x000C (0x000C - 0x0000)
struct DGCharacterMovementComponent_WorldGravity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DGCharacterMovementComponent_WorldGravity) == 0x000004, "Wrong alignment on DGCharacterMovementComponent_WorldGravity");
static_assert(sizeof(DGCharacterMovementComponent_WorldGravity) == 0x00000C, "Wrong size on DGCharacterMovementComponent_WorldGravity");
static_assert(offsetof(DGCharacterMovementComponent_WorldGravity, ReturnValue) == 0x000000, "Member 'DGCharacterMovementComponent_WorldGravity::ReturnValue' has a wrong offset!");

// Function DynamicGravityCharacter.DGCharacterMovementComponent.WorldGravityNormal
// 0x000C (0x000C - 0x0000)
struct DGCharacterMovementComponent_WorldGravityNormal final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DGCharacterMovementComponent_WorldGravityNormal) == 0x000004, "Wrong alignment on DGCharacterMovementComponent_WorldGravityNormal");
static_assert(sizeof(DGCharacterMovementComponent_WorldGravityNormal) == 0x00000C, "Wrong size on DGCharacterMovementComponent_WorldGravityNormal");
static_assert(offsetof(DGCharacterMovementComponent_WorldGravityNormal, ReturnValue) == 0x000000, "Member 'DGCharacterMovementComponent_WorldGravityNormal::ReturnValue' has a wrong offset!");

}

