#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BreakableBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "HottaFramework_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BreakableBase.BP_BreakableBase_C
// 0x0020 (0x0BE0 - 0x0BC0)
class ABP_BreakableBase_C : public ABreakableActor
{
public:
	uint8                                         Pad_6CD4[0x8];                                     // 0x0BB8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0BC0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UControllable_BP_Base_C*                Controllable_BP_Base;                              // 0x0BC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleY;                                            // 0x0BD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleZ;                                            // 0x0BD4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysicsTime;                                       // 0x0BD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_BreakableBase(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BreakableBase_C">();
	}
	static class ABP_BreakableBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BreakableBase_C>();
	}
};
static_assert(alignof(ABP_BreakableBase_C) == 0x000010, "Wrong alignment on ABP_BreakableBase_C");
static_assert(sizeof(ABP_BreakableBase_C) == 0x000BE0, "Wrong size on ABP_BreakableBase_C");
static_assert(offsetof(ABP_BreakableBase_C, UberGraphFrame) == 0x000BC0, "Member 'ABP_BreakableBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BreakableBase_C, Controllable_BP_Base) == 0x000BC8, "Member 'ABP_BreakableBase_C::Controllable_BP_Base' has a wrong offset!");
static_assert(offsetof(ABP_BreakableBase_C, ScaleY) == 0x000BD0, "Member 'ABP_BreakableBase_C::ScaleY' has a wrong offset!");
static_assert(offsetof(ABP_BreakableBase_C, ScaleZ) == 0x000BD4, "Member 'ABP_BreakableBase_C::ScaleZ' has a wrong offset!");
static_assert(offsetof(ABP_BreakableBase_C, PhysicsTime) == 0x000BD8, "Member 'ABP_BreakableBase_C::PhysicsTime' has a wrong offset!");

}

