#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_SpawnProjectileBase_Bow

#include "Basic.hpp"

#include "GA_HottaSkillBase_classes.hpp"
#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_SpawnProjectileBase_Bow.GA_SpawnProjectileBase_Bow_C
// 0x0040 (0x0D20 - 0x0CE0)
class UGA_SpawnProjectileBase_Bow_C : public UGA_HottaSkillBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_GA_SpawnProjectileBase_Bow_C;       // 0x0CE0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          InputReleased;                                     // 0x0CE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          TimeHold;                                          // 0x0CE9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B65[0x6];                                     // 0x0CEA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UHottaAbilityTask_WaitDelay*            HottaWaitDelayTask;                                // 0x0CF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LeftShoot;                                         // 0x0CF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B66[0x3];                                     // 0x0CF9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LoopAKPlayingID;                                   // 0x0CFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           LoopSoundCmp;                                      // 0x0D00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Attach_Point_Name;                                 // 0x0D08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          SpawnLoopSoundEvent;                               // 0x0D10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TriggerSpawnOnlyServerHottaActor;                  // 0x0D18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_GA_SpawnProjectileBase_Bow(int32 EntryPoint);
	void K2_OnEndAbility(bool bWasCancelled);
	void K2_ActivateAbility();
	void K2_TriggerJumpSection(class FName JumpSectionName);
	void OnActivate_965F2EEC4CB8A2F0620BB79D0D61CB26(class UGameplayAbility* ActivatedAbility);
	void OnChange_9EC49D6546CBE50E832E95900003EAFD(EMovementMode NewMovementMode);
	void OnFinish_0E48054E43A39466CFF799AD55356EDE(const struct FGameplayTag& TriggerTag);
	void OnCompleted_7A8EF72E4607207AD2BB7995EC45B8AC(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData);
	void OnBlendOut_7A8EF72E4607207AD2BB7995EC45B8AC(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData);
	void OnInterrupted_7A8EF72E4607207AD2BB7995EC45B8AC(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData);
	void OnCancelled_7A8EF72E4607207AD2BB7995EC45B8AC(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData);
	void EventReceived_7A8EF72E4607207AD2BB7995EC45B8AC(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData);
	void OnPress_453B56D840776A6AF6523B86F504F656(float TimeWaited);
	void OnCompleted_76DC73E24046F28B0059A0ABEEAED111(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData);
	void OnBlendOut_76DC73E24046F28B0059A0ABEEAED111(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData);
	void OnInterrupted_76DC73E24046F28B0059A0ABEEAED111(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData);
	void OnCancelled_76DC73E24046F28B0059A0ABEEAED111(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData);
	void EventReceived_76DC73E24046F28B0059A0ABEEAED111(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData);
	void OnIsAimming_B4F0A6104F28C9192668CE881CC515C4(bool IsAmming, const struct FVector& PlayerLocation, const struct FVector& AimmingLocation);
	void ReceiveLocationInfo_B4F0A6104F28C9192668CE881CC515C4(bool IsAmming, const struct FVector& PlayerLocation, const struct FVector& AimmingLocation);
	void OnTriggerNextSection_73BAAAD3414233E8E348A4AE00AE3B66(class FName NextSectionName);
	void OnRelease_524990B645B7993F758EADA898E1AC28(float TimeHeld, bool bAuto);
	void OnRelease_D4EB494046F43656A8D142BE2BF92A95(float TimeHeld, bool bAuto);
	void PlayBowShootAinim();
	void PlayCarrierAim();
	void Enter_Aimming_State();
	void LeaveAimmingState();
	void TriggerMontageEvent(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData);
	void ActivatePowerAttack(bool IsAssist);
	void SpawnForceAimming_AKEvent();
	void StopLoopSoundEvent();
	void LeftShootPress();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_SpawnProjectileBase_Bow_C">();
	}
	static class UGA_SpawnProjectileBase_Bow_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_SpawnProjectileBase_Bow_C>();
	}
};
static_assert(alignof(UGA_SpawnProjectileBase_Bow_C) == 0x000010, "Wrong alignment on UGA_SpawnProjectileBase_Bow_C");
static_assert(sizeof(UGA_SpawnProjectileBase_Bow_C) == 0x000D20, "Wrong size on UGA_SpawnProjectileBase_Bow_C");
static_assert(offsetof(UGA_SpawnProjectileBase_Bow_C, UberGraphFrame_GA_SpawnProjectileBase_Bow_C) == 0x000CE0, "Member 'UGA_SpawnProjectileBase_Bow_C::UberGraphFrame_GA_SpawnProjectileBase_Bow_C' has a wrong offset!");
static_assert(offsetof(UGA_SpawnProjectileBase_Bow_C, InputReleased) == 0x000CE8, "Member 'UGA_SpawnProjectileBase_Bow_C::InputReleased' has a wrong offset!");
static_assert(offsetof(UGA_SpawnProjectileBase_Bow_C, TimeHold) == 0x000CE9, "Member 'UGA_SpawnProjectileBase_Bow_C::TimeHold' has a wrong offset!");
static_assert(offsetof(UGA_SpawnProjectileBase_Bow_C, HottaWaitDelayTask) == 0x000CF0, "Member 'UGA_SpawnProjectileBase_Bow_C::HottaWaitDelayTask' has a wrong offset!");
static_assert(offsetof(UGA_SpawnProjectileBase_Bow_C, LeftShoot) == 0x000CF8, "Member 'UGA_SpawnProjectileBase_Bow_C::LeftShoot' has a wrong offset!");
static_assert(offsetof(UGA_SpawnProjectileBase_Bow_C, LoopAKPlayingID) == 0x000CFC, "Member 'UGA_SpawnProjectileBase_Bow_C::LoopAKPlayingID' has a wrong offset!");
static_assert(offsetof(UGA_SpawnProjectileBase_Bow_C, LoopSoundCmp) == 0x000D00, "Member 'UGA_SpawnProjectileBase_Bow_C::LoopSoundCmp' has a wrong offset!");
static_assert(offsetof(UGA_SpawnProjectileBase_Bow_C, Attach_Point_Name) == 0x000D08, "Member 'UGA_SpawnProjectileBase_Bow_C::Attach_Point_Name' has a wrong offset!");
static_assert(offsetof(UGA_SpawnProjectileBase_Bow_C, SpawnLoopSoundEvent) == 0x000D10, "Member 'UGA_SpawnProjectileBase_Bow_C::SpawnLoopSoundEvent' has a wrong offset!");
static_assert(offsetof(UGA_SpawnProjectileBase_Bow_C, TriggerSpawnOnlyServerHottaActor) == 0x000D18, "Member 'UGA_SpawnProjectileBase_Bow_C::TriggerSpawnOnlyServerHottaActor' has a wrong offset!");

}

