#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HottaFoundation

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum HottaFoundation.EPSOBatchPlace
// NumValues: 0x0004
enum class EPSOBatchPlace : uint8
{
	Cinematics                               = 0,
	LoadingScreen                            = 1,
	Num                                      = 2,
	EPSOBatchPlace_MAX                       = 3,
};

// ScriptStruct HottaFoundation.SkeletalMeshMergeSectionMapping
// 0x0010 (0x0010 - 0x0000)
struct FSkeletalMeshMergeSectionMapping final
{
public:
	TArray<int32>                                 SectionIDs;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkeletalMeshMergeSectionMapping) == 0x000008, "Wrong alignment on FSkeletalMeshMergeSectionMapping");
static_assert(sizeof(FSkeletalMeshMergeSectionMapping) == 0x000010, "Wrong size on FSkeletalMeshMergeSectionMapping");
static_assert(offsetof(FSkeletalMeshMergeSectionMapping, SectionIDs) == 0x000000, "Member 'FSkeletalMeshMergeSectionMapping::SectionIDs' has a wrong offset!");

// ScriptStruct HottaFoundation.SkeletalMeshMergeUVTransforms
// 0x0010 (0x0010 - 0x0000)
struct FSkeletalMeshMergeUVTransforms final
{
public:
	TArray<struct FTransform>                     UVTransforms;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkeletalMeshMergeUVTransforms) == 0x000008, "Wrong alignment on FSkeletalMeshMergeUVTransforms");
static_assert(sizeof(FSkeletalMeshMergeUVTransforms) == 0x000010, "Wrong size on FSkeletalMeshMergeUVTransforms");
static_assert(offsetof(FSkeletalMeshMergeUVTransforms, UVTransforms) == 0x000000, "Member 'FSkeletalMeshMergeUVTransforms::UVTransforms' has a wrong offset!");

// ScriptStruct HottaFoundation.SkeletalMeshMergeUVTransformsMapping
// 0x0010 (0x0010 - 0x0000)
struct FSkeletalMeshMergeUVTransformsMapping final
{
public:
	TArray<struct FSkeletalMeshMergeUVTransforms> UVTransformsPerMesh;                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkeletalMeshMergeUVTransformsMapping) == 0x000008, "Wrong alignment on FSkeletalMeshMergeUVTransformsMapping");
static_assert(sizeof(FSkeletalMeshMergeUVTransformsMapping) == 0x000010, "Wrong size on FSkeletalMeshMergeUVTransformsMapping");
static_assert(offsetof(FSkeletalMeshMergeUVTransformsMapping, UVTransformsPerMesh) == 0x000000, "Member 'FSkeletalMeshMergeUVTransformsMapping::UVTransformsPerMesh' has a wrong offset!");

// ScriptStruct HottaFoundation.SkeletalMeshMergeOptions
// 0x0048 (0x0048 - 0x0000)
struct FSkeletalMeshMergeOptions final
{
public:
	TArray<struct FSkeletalMeshMergeSectionMapping> MeshSectionMappings;                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSkeletalMeshMergeUVTransformsMapping> UVTransformsPerMesh;                               // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class USkeletalMesh*>                  MeshesToMerge;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bNeedsCpuAccess : 1;                               // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_F06[0x3];                                      // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StripTopLODS;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bSkeletonBefore : 1;                               // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_F07[0x7];                                      // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeleton*                              Skeleton;                                          // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkeletalMeshMergeOptions) == 0x000008, "Wrong alignment on FSkeletalMeshMergeOptions");
static_assert(sizeof(FSkeletalMeshMergeOptions) == 0x000048, "Wrong size on FSkeletalMeshMergeOptions");
static_assert(offsetof(FSkeletalMeshMergeOptions, MeshSectionMappings) == 0x000000, "Member 'FSkeletalMeshMergeOptions::MeshSectionMappings' has a wrong offset!");
static_assert(offsetof(FSkeletalMeshMergeOptions, UVTransformsPerMesh) == 0x000010, "Member 'FSkeletalMeshMergeOptions::UVTransformsPerMesh' has a wrong offset!");
static_assert(offsetof(FSkeletalMeshMergeOptions, MeshesToMerge) == 0x000020, "Member 'FSkeletalMeshMergeOptions::MeshesToMerge' has a wrong offset!");
static_assert(offsetof(FSkeletalMeshMergeOptions, StripTopLODS) == 0x000034, "Member 'FSkeletalMeshMergeOptions::StripTopLODS' has a wrong offset!");
static_assert(offsetof(FSkeletalMeshMergeOptions, Skeleton) == 0x000040, "Member 'FSkeletalMeshMergeOptions::Skeleton' has a wrong offset!");

}

