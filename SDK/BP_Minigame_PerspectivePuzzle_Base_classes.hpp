#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Minigame_PerspectivePuzzle_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "HottaFramework_structs.hpp"
#include "HottaFramework_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Minigame_PerspectivePuzzle_Base.BP_Minigame_PerspectivePuzzle_Base_C
// 0x0040 (0x05E0 - 0x05A0)
class ABP_Minigame_PerspectivePuzzle_Base_C : public AHottaVisualActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x05A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          GuideTriggerBox;                                   // 0x05A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UQRSLChangeMeshColorComponent*          PerspectivePuzzleChangeColor;                      // 0x05B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        CheckArrow;                                        // 0x05B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       SphereTrigger;                                     // 0x05C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           PerspectiveCheckTimer;                             // 0x05C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AHottaVisualSpawnManager*               RewardManager;                                     // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CheckDotFloat;                                     // 0x05D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSucceed;                                         // 0x05DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_Minigame_PerspectivePuzzle_Base(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void BndEvt__BP_Minigame_PerspectivePuzzle_Base_SphereTrigger_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BP_Minigame_PerspectivePuzzle_Base_SphereTrigger_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void CheckDotEvent();
	void BPOnMainRoleLoadFinished(class AHottaPlayerCharacter* MainPlayer);
	void BndEvt__BP_Minigame_PerspectivePuzzle_1_RewardManager_K2Node_ComponentBoundEvent_0_AllVisualsHarvestedSignature__DelegateSignature(class AHottaVisualSpawnManager* InstigateSpawner);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Minigame_PerspectivePuzzle_Base_C">();
	}
	static class ABP_Minigame_PerspectivePuzzle_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Minigame_PerspectivePuzzle_Base_C>();
	}
};
static_assert(alignof(ABP_Minigame_PerspectivePuzzle_Base_C) == 0x000010, "Wrong alignment on ABP_Minigame_PerspectivePuzzle_Base_C");
static_assert(sizeof(ABP_Minigame_PerspectivePuzzle_Base_C) == 0x0005E0, "Wrong size on ABP_Minigame_PerspectivePuzzle_Base_C");
static_assert(offsetof(ABP_Minigame_PerspectivePuzzle_Base_C, UberGraphFrame) == 0x0005A0, "Member 'ABP_Minigame_PerspectivePuzzle_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_PerspectivePuzzle_Base_C, GuideTriggerBox) == 0x0005A8, "Member 'ABP_Minigame_PerspectivePuzzle_Base_C::GuideTriggerBox' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_PerspectivePuzzle_Base_C, PerspectivePuzzleChangeColor) == 0x0005B0, "Member 'ABP_Minigame_PerspectivePuzzle_Base_C::PerspectivePuzzleChangeColor' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_PerspectivePuzzle_Base_C, CheckArrow) == 0x0005B8, "Member 'ABP_Minigame_PerspectivePuzzle_Base_C::CheckArrow' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_PerspectivePuzzle_Base_C, SphereTrigger) == 0x0005C0, "Member 'ABP_Minigame_PerspectivePuzzle_Base_C::SphereTrigger' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_PerspectivePuzzle_Base_C, PerspectiveCheckTimer) == 0x0005C8, "Member 'ABP_Minigame_PerspectivePuzzle_Base_C::PerspectiveCheckTimer' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_PerspectivePuzzle_Base_C, RewardManager) == 0x0005D0, "Member 'ABP_Minigame_PerspectivePuzzle_Base_C::RewardManager' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_PerspectivePuzzle_Base_C, CheckDotFloat) == 0x0005D8, "Member 'ABP_Minigame_PerspectivePuzzle_Base_C::CheckDotFloat' has a wrong offset!");
static_assert(offsetof(ABP_Minigame_PerspectivePuzzle_Base_C, IsSucceed) == 0x0005DC, "Member 'ABP_Minigame_PerspectivePuzzle_Base_C::IsSucceed' has a wrong offset!");

}

