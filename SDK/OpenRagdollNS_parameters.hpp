#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OpenRagdollNS

#include "Basic.hpp"


namespace SDK::Params
{

// Function OpenRagdollNS.OpenRagdollNS_C.Received_Notify
// 0x0050 (0x0050 - 0x0000)
struct OpenRagdollNS_C_Received_Notify final
{
public:
	class USkeletalMeshComponent*                 MeshComp;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Animation;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5795[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RagdollrootBoneName;                               // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5796[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           K2Node_DynamicCast_As_____;                        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5797[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMonsterCharacterBP_Base_C*             K2Node_DynamicCast_AsMonster_Character_BP_Base;    // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_ReturnValue;                       // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(OpenRagdollNS_C_Received_Notify) == 0x000008, "Wrong alignment on OpenRagdollNS_C_Received_Notify");
static_assert(sizeof(OpenRagdollNS_C_Received_Notify) == 0x000050, "Wrong size on OpenRagdollNS_C_Received_Notify");
static_assert(offsetof(OpenRagdollNS_C_Received_Notify, MeshComp) == 0x000000, "Member 'OpenRagdollNS_C_Received_Notify::MeshComp' has a wrong offset!");
static_assert(offsetof(OpenRagdollNS_C_Received_Notify, Animation) == 0x000008, "Member 'OpenRagdollNS_C_Received_Notify::Animation' has a wrong offset!");
static_assert(offsetof(OpenRagdollNS_C_Received_Notify, ReturnValue) == 0x000010, "Member 'OpenRagdollNS_C_Received_Notify::ReturnValue' has a wrong offset!");
static_assert(offsetof(OpenRagdollNS_C_Received_Notify, RagdollrootBoneName) == 0x000014, "Member 'OpenRagdollNS_C_Received_Notify::RagdollrootBoneName' has a wrong offset!");
static_assert(offsetof(OpenRagdollNS_C_Received_Notify, K2Node_DynamicCast_As_____) == 0x000020, "Member 'OpenRagdollNS_C_Received_Notify::K2Node_DynamicCast_As_____' has a wrong offset!");
static_assert(offsetof(OpenRagdollNS_C_Received_Notify, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'OpenRagdollNS_C_Received_Notify::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(OpenRagdollNS_C_Received_Notify, CallFunc_GetAnimInstance_ReturnValue) == 0x000030, "Member 'OpenRagdollNS_C_Received_Notify::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(OpenRagdollNS_C_Received_Notify, CallFunc_GetOwner_ReturnValue) == 0x000038, "Member 'OpenRagdollNS_C_Received_Notify::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(OpenRagdollNS_C_Received_Notify, K2Node_DynamicCast_AsMonster_Character_BP_Base) == 0x000040, "Member 'OpenRagdollNS_C_Received_Notify::K2Node_DynamicCast_AsMonster_Character_BP_Base' has a wrong offset!");
static_assert(offsetof(OpenRagdollNS_C_Received_Notify, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'OpenRagdollNS_C_Received_Notify::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(OpenRagdollNS_C_Received_Notify, CallFunc_IsDead_ReturnValue) == 0x000049, "Member 'OpenRagdollNS_C_Received_Notify::CallFunc_IsDead_ReturnValue' has a wrong offset!");

}

