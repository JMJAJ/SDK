#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RangeMarkRobAppear2

#include "Basic.hpp"

#include "RangeMarkRobAppear2_classes.hpp"
#include "RangeMarkRobAppear2_parameters.hpp"


namespace SDK
{

// Function RangeMarkRobAppear2.RangeMarkRobAppear2_C.K2_EndGetTargets
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class AActor*                           OwningActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           TargetingActor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayEventData               EventData                                              (BlueprintVisible, BlueprintReadOnly, Parm)
// TArray<struct FHitResult>               InHitResults                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// TArray<struct FHitResult>               OutHitResults                                          (Parm, OutParm, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool URangeMarkRobAppear2_C::K2_EndGetTargets(class AActor* OwningActor, class AActor* TargetingActor, const struct FGameplayEventData& EventData, const TArray<struct FHitResult>& InHitResults, TArray<struct FHitResult>* OutHitResults) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RangeMarkRobAppear2_C", "K2_EndGetTargets");

	Params::RangeMarkRobAppear2_C_K2_EndGetTargets Parms{};

	Parms.OwningActor = OwningActor;
	Parms.TargetingActor = TargetingActor;
	Parms.EventData = std::move(EventData);
	Parms.InHitResults = std::move(InHitResults);

	UObject::ProcessEvent(Func, &Parms);

	if (OutHitResults != nullptr)
		*OutHitResults = std::move(Parms.OutHitResults);

	return Parms.ReturnValue;
}

}

