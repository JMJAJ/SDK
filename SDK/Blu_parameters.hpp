#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Blu

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Blu_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function Blu.BluEye.CharKeyDownUp
// 0x0020 (0x0020 - 0x0000)
struct BluEye_CharKeyDownUp final
{
public:
	struct FCharacterEvent                        CharEvent;                                         // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BluEye_CharKeyDownUp) == 0x000008, "Wrong alignment on BluEye_CharKeyDownUp");
static_assert(sizeof(BluEye_CharKeyDownUp) == 0x000020, "Wrong size on BluEye_CharKeyDownUp");
static_assert(offsetof(BluEye_CharKeyDownUp, CharEvent) == 0x000000, "Member 'BluEye_CharKeyDownUp::CharEvent' has a wrong offset!");

// Function Blu.BluEye.CharKeyInput
// 0x0020 (0x0020 - 0x0000)
struct BluEye_CharKeyInput final
{
public:
	struct FCharacterEvent                        CharEvent;                                         // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BluEye_CharKeyInput) == 0x000008, "Wrong alignment on BluEye_CharKeyInput");
static_assert(sizeof(BluEye_CharKeyInput) == 0x000020, "Wrong size on BluEye_CharKeyInput");
static_assert(offsetof(BluEye_CharKeyInput, CharEvent) == 0x000000, "Member 'BluEye_CharKeyInput::CharEvent' has a wrong offset!");

// Function Blu.BluEye.GetCurrentURL
// 0x0010 (0x0010 - 0x0000)
struct BluEye_GetCurrentURL final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BluEye_GetCurrentURL) == 0x000008, "Wrong alignment on BluEye_GetCurrentURL");
static_assert(sizeof(BluEye_GetCurrentURL) == 0x000010, "Wrong size on BluEye_GetCurrentURL");
static_assert(offsetof(BluEye_GetCurrentURL, ReturnValue) == 0x000000, "Member 'BluEye_GetCurrentURL::ReturnValue' has a wrong offset!");

// Function Blu.BluEye.GetZoom
// 0x0004 (0x0004 - 0x0000)
struct BluEye_GetZoom final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BluEye_GetZoom) == 0x000004, "Wrong alignment on BluEye_GetZoom");
static_assert(sizeof(BluEye_GetZoom) == 0x000004, "Wrong size on BluEye_GetZoom");
static_assert(offsetof(BluEye_GetZoom, ReturnValue) == 0x000000, "Member 'BluEye_GetZoom::ReturnValue' has a wrong offset!");

// Function Blu.BluEye.IsBrowserLoading
// 0x0001 (0x0001 - 0x0000)
struct BluEye_IsBrowserLoading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BluEye_IsBrowserLoading) == 0x000001, "Wrong alignment on BluEye_IsBrowserLoading");
static_assert(sizeof(BluEye_IsBrowserLoading) == 0x000001, "Wrong size on BluEye_IsBrowserLoading");
static_assert(offsetof(BluEye_IsBrowserLoading, ReturnValue) == 0x000000, "Member 'BluEye_IsBrowserLoading::ReturnValue' has a wrong offset!");

// Function Blu.BluEye.KeyDown
// 0x0038 (0x0038 - 0x0000)
struct BluEye_KeyDown final
{
public:
	struct FKeyEvent                              InKey;                                             // 0x0000(0x0038)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BluEye_KeyDown) == 0x000008, "Wrong alignment on BluEye_KeyDown");
static_assert(sizeof(BluEye_KeyDown) == 0x000038, "Wrong size on BluEye_KeyDown");
static_assert(offsetof(BluEye_KeyDown, InKey) == 0x000000, "Member 'BluEye_KeyDown::InKey' has a wrong offset!");

// Function Blu.BluEye.KeyPress
// 0x0038 (0x0038 - 0x0000)
struct BluEye_KeyPress final
{
public:
	struct FKeyEvent                              InKey;                                             // 0x0000(0x0038)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BluEye_KeyPress) == 0x000008, "Wrong alignment on BluEye_KeyPress");
static_assert(sizeof(BluEye_KeyPress) == 0x000038, "Wrong size on BluEye_KeyPress");
static_assert(offsetof(BluEye_KeyPress, InKey) == 0x000000, "Member 'BluEye_KeyPress::InKey' has a wrong offset!");

// Function Blu.BluEye.KeyUp
// 0x0038 (0x0038 - 0x0000)
struct BluEye_KeyUp final
{
public:
	struct FKeyEvent                              InKey;                                             // 0x0000(0x0038)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BluEye_KeyUp) == 0x000008, "Wrong alignment on BluEye_KeyUp");
static_assert(sizeof(BluEye_KeyUp) == 0x000038, "Wrong size on BluEye_KeyUp");
static_assert(offsetof(BluEye_KeyUp, InKey) == 0x000000, "Member 'BluEye_KeyUp::InKey' has a wrong offset!");

// Function Blu.BluEye.LoadURL
// 0x0010 (0x0010 - 0x0000)
struct BluEye_LoadURL final
{
public:
	class FString                                 NewURL;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BluEye_LoadURL) == 0x000008, "Wrong alignment on BluEye_LoadURL");
static_assert(sizeof(BluEye_LoadURL) == 0x000010, "Wrong size on BluEye_LoadURL");
static_assert(offsetof(BluEye_LoadURL, NewURL) == 0x000000, "Member 'BluEye_LoadURL::NewURL' has a wrong offset!");

// Function Blu.BluEye.RawCharKeyPress
// 0x0020 (0x0020 - 0x0000)
struct BluEye_RawCharKeyPress final
{
public:
	class FString                                 CharToPress;                                       // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRepeat;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftShiftDown;                                     // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RightShiftDown;                                    // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftControlDown;                                   // 0x0013(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RightControlDown;                                  // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftAltDown;                                       // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RightAltDown;                                      // 0x0016(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftCommandDown;                                   // 0x0017(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RightCommandDown;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CapsLocksOn;                                       // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18A1[0x6];                                     // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BluEye_RawCharKeyPress) == 0x000008, "Wrong alignment on BluEye_RawCharKeyPress");
static_assert(sizeof(BluEye_RawCharKeyPress) == 0x000020, "Wrong size on BluEye_RawCharKeyPress");
static_assert(offsetof(BluEye_RawCharKeyPress, CharToPress) == 0x000000, "Member 'BluEye_RawCharKeyPress::CharToPress' has a wrong offset!");
static_assert(offsetof(BluEye_RawCharKeyPress, IsRepeat) == 0x000010, "Member 'BluEye_RawCharKeyPress::IsRepeat' has a wrong offset!");
static_assert(offsetof(BluEye_RawCharKeyPress, LeftShiftDown) == 0x000011, "Member 'BluEye_RawCharKeyPress::LeftShiftDown' has a wrong offset!");
static_assert(offsetof(BluEye_RawCharKeyPress, RightShiftDown) == 0x000012, "Member 'BluEye_RawCharKeyPress::RightShiftDown' has a wrong offset!");
static_assert(offsetof(BluEye_RawCharKeyPress, LeftControlDown) == 0x000013, "Member 'BluEye_RawCharKeyPress::LeftControlDown' has a wrong offset!");
static_assert(offsetof(BluEye_RawCharKeyPress, RightControlDown) == 0x000014, "Member 'BluEye_RawCharKeyPress::RightControlDown' has a wrong offset!");
static_assert(offsetof(BluEye_RawCharKeyPress, LeftAltDown) == 0x000015, "Member 'BluEye_RawCharKeyPress::LeftAltDown' has a wrong offset!");
static_assert(offsetof(BluEye_RawCharKeyPress, RightAltDown) == 0x000016, "Member 'BluEye_RawCharKeyPress::RightAltDown' has a wrong offset!");
static_assert(offsetof(BluEye_RawCharKeyPress, LeftCommandDown) == 0x000017, "Member 'BluEye_RawCharKeyPress::LeftCommandDown' has a wrong offset!");
static_assert(offsetof(BluEye_RawCharKeyPress, RightCommandDown) == 0x000018, "Member 'BluEye_RawCharKeyPress::RightCommandDown' has a wrong offset!");
static_assert(offsetof(BluEye_RawCharKeyPress, CapsLocksOn) == 0x000019, "Member 'BluEye_RawCharKeyPress::CapsLocksOn' has a wrong offset!");

// Function Blu.BluEye.ReloadBrowser
// 0x0001 (0x0001 - 0x0000)
struct BluEye_ReloadBrowser final
{
public:
	bool                                          IgnoreCache;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BluEye_ReloadBrowser) == 0x000001, "Wrong alignment on BluEye_ReloadBrowser");
static_assert(sizeof(BluEye_ReloadBrowser) == 0x000001, "Wrong size on BluEye_ReloadBrowser");
static_assert(offsetof(BluEye_ReloadBrowser, IgnoreCache) == 0x000000, "Member 'BluEye_ReloadBrowser::IgnoreCache' has a wrong offset!");

// Function Blu.BluEye.ResizeBrowser
// 0x0008 (0x0008 - 0x0000)
struct BluEye_ResizeBrowser final
{
public:
	int32                                         NewWidth;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewHeight;                                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BluEye_ResizeBrowser) == 0x000004, "Wrong alignment on BluEye_ResizeBrowser");
static_assert(sizeof(BluEye_ResizeBrowser) == 0x000008, "Wrong size on BluEye_ResizeBrowser");
static_assert(offsetof(BluEye_ResizeBrowser, NewWidth) == 0x000000, "Member 'BluEye_ResizeBrowser::NewWidth' has a wrong offset!");
static_assert(offsetof(BluEye_ResizeBrowser, NewHeight) == 0x000004, "Member 'BluEye_ResizeBrowser::NewHeight' has a wrong offset!");

// Function Blu.BluEye.SetProperties
// 0x0038 (0x0038 - 0x0000)
struct BluEye_SetProperties final
{
public:
	int32                                         SetWidth;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SetHeight;                                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetIsTransparent;                                  // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetEnabled;                                        // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetWebGL;                                          // 0x000A(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18A2[0x5];                                     // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SetDefaultURL;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SetTextureParameterName;                           // 0x0020(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     SetBaseMaterial;                                   // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBluEye*                                ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BluEye_SetProperties) == 0x000008, "Wrong alignment on BluEye_SetProperties");
static_assert(sizeof(BluEye_SetProperties) == 0x000038, "Wrong size on BluEye_SetProperties");
static_assert(offsetof(BluEye_SetProperties, SetWidth) == 0x000000, "Member 'BluEye_SetProperties::SetWidth' has a wrong offset!");
static_assert(offsetof(BluEye_SetProperties, SetHeight) == 0x000004, "Member 'BluEye_SetProperties::SetHeight' has a wrong offset!");
static_assert(offsetof(BluEye_SetProperties, SetIsTransparent) == 0x000008, "Member 'BluEye_SetProperties::SetIsTransparent' has a wrong offset!");
static_assert(offsetof(BluEye_SetProperties, SetEnabled) == 0x000009, "Member 'BluEye_SetProperties::SetEnabled' has a wrong offset!");
static_assert(offsetof(BluEye_SetProperties, SetWebGL) == 0x00000A, "Member 'BluEye_SetProperties::SetWebGL' has a wrong offset!");
static_assert(offsetof(BluEye_SetProperties, SetDefaultURL) == 0x000010, "Member 'BluEye_SetProperties::SetDefaultURL' has a wrong offset!");
static_assert(offsetof(BluEye_SetProperties, SetTextureParameterName) == 0x000020, "Member 'BluEye_SetProperties::SetTextureParameterName' has a wrong offset!");
static_assert(offsetof(BluEye_SetProperties, SetBaseMaterial) == 0x000028, "Member 'BluEye_SetProperties::SetBaseMaterial' has a wrong offset!");
static_assert(offsetof(BluEye_SetProperties, ReturnValue) == 0x000030, "Member 'BluEye_SetProperties::ReturnValue' has a wrong offset!");

// Function Blu.BluEye.SetZoom
// 0x0004 (0x0004 - 0x0000)
struct BluEye_SetZoom final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BluEye_SetZoom) == 0x000004, "Wrong alignment on BluEye_SetZoom");
static_assert(sizeof(BluEye_SetZoom) == 0x000004, "Wrong size on BluEye_SetZoom");
static_assert(offsetof(BluEye_SetZoom, Scale) == 0x000000, "Member 'BluEye_SetZoom::Scale' has a wrong offset!");

// Function Blu.BluEye.SpecialKeyPress
// 0x000A (0x000A - 0x0000)
struct BluEye_SpecialKeyPress final
{
public:
	EBluSpecialKeys                               Key;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftShiftDown;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RightShiftDown;                                    // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftControlDown;                                   // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RightControlDown;                                  // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftAltDown;                                       // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RightAltDown;                                      // 0x0006(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftCommandDown;                                   // 0x0007(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RightCommandDown;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CapsLocksOn;                                       // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BluEye_SpecialKeyPress) == 0x000001, "Wrong alignment on BluEye_SpecialKeyPress");
static_assert(sizeof(BluEye_SpecialKeyPress) == 0x00000A, "Wrong size on BluEye_SpecialKeyPress");
static_assert(offsetof(BluEye_SpecialKeyPress, Key) == 0x000000, "Member 'BluEye_SpecialKeyPress::Key' has a wrong offset!");
static_assert(offsetof(BluEye_SpecialKeyPress, LeftShiftDown) == 0x000001, "Member 'BluEye_SpecialKeyPress::LeftShiftDown' has a wrong offset!");
static_assert(offsetof(BluEye_SpecialKeyPress, RightShiftDown) == 0x000002, "Member 'BluEye_SpecialKeyPress::RightShiftDown' has a wrong offset!");
static_assert(offsetof(BluEye_SpecialKeyPress, LeftControlDown) == 0x000003, "Member 'BluEye_SpecialKeyPress::LeftControlDown' has a wrong offset!");
static_assert(offsetof(BluEye_SpecialKeyPress, RightControlDown) == 0x000004, "Member 'BluEye_SpecialKeyPress::RightControlDown' has a wrong offset!");
static_assert(offsetof(BluEye_SpecialKeyPress, LeftAltDown) == 0x000005, "Member 'BluEye_SpecialKeyPress::LeftAltDown' has a wrong offset!");
static_assert(offsetof(BluEye_SpecialKeyPress, RightAltDown) == 0x000006, "Member 'BluEye_SpecialKeyPress::RightAltDown' has a wrong offset!");
static_assert(offsetof(BluEye_SpecialKeyPress, LeftCommandDown) == 0x000007, "Member 'BluEye_SpecialKeyPress::LeftCommandDown' has a wrong offset!");
static_assert(offsetof(BluEye_SpecialKeyPress, RightCommandDown) == 0x000008, "Member 'BluEye_SpecialKeyPress::RightCommandDown' has a wrong offset!");
static_assert(offsetof(BluEye_SpecialKeyPress, CapsLocksOn) == 0x000009, "Member 'BluEye_SpecialKeyPress::CapsLocksOn' has a wrong offset!");

// Function Blu.BluEye.TriggerFocusChange
// 0x0001 (0x0001 - 0x0000)
struct BluEye_TriggerFocusChange final
{
public:
	bool                                          Focus;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BluEye_TriggerFocusChange) == 0x000001, "Wrong alignment on BluEye_TriggerFocusChange");
static_assert(sizeof(BluEye_TriggerFocusChange) == 0x000001, "Wrong size on BluEye_TriggerFocusChange");
static_assert(offsetof(BluEye_TriggerFocusChange, Focus) == 0x000000, "Member 'BluEye_TriggerFocusChange::Focus' has a wrong offset!");

// Function Blu.BluEye.TriggerLeftClick
// 0x000C (0x000C - 0x0000)
struct BluEye_TriggerLeftClick final
{
public:
	struct FVector2D                              Pos;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BluEye_TriggerLeftClick) == 0x000004, "Wrong alignment on BluEye_TriggerLeftClick");
static_assert(sizeof(BluEye_TriggerLeftClick) == 0x00000C, "Wrong size on BluEye_TriggerLeftClick");
static_assert(offsetof(BluEye_TriggerLeftClick, Pos) == 0x000000, "Member 'BluEye_TriggerLeftClick::Pos' has a wrong offset!");
static_assert(offsetof(BluEye_TriggerLeftClick, Scale) == 0x000008, "Member 'BluEye_TriggerLeftClick::Scale' has a wrong offset!");

// Function Blu.BluEye.TriggerLeftDoubleClick
// 0x000C (0x000C - 0x0000)
struct BluEye_TriggerLeftDoubleClick final
{
public:
	struct FVector2D                              Pos;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BluEye_TriggerLeftDoubleClick) == 0x000004, "Wrong alignment on BluEye_TriggerLeftDoubleClick");
static_assert(sizeof(BluEye_TriggerLeftDoubleClick) == 0x00000C, "Wrong size on BluEye_TriggerLeftDoubleClick");
static_assert(offsetof(BluEye_TriggerLeftDoubleClick, Pos) == 0x000000, "Member 'BluEye_TriggerLeftDoubleClick::Pos' has a wrong offset!");
static_assert(offsetof(BluEye_TriggerLeftDoubleClick, Scale) == 0x000008, "Member 'BluEye_TriggerLeftDoubleClick::Scale' has a wrong offset!");

// Function Blu.BluEye.TriggerLeftMouseDown
// 0x000C (0x000C - 0x0000)
struct BluEye_TriggerLeftMouseDown final
{
public:
	struct FVector2D                              Pos;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BluEye_TriggerLeftMouseDown) == 0x000004, "Wrong alignment on BluEye_TriggerLeftMouseDown");
static_assert(sizeof(BluEye_TriggerLeftMouseDown) == 0x00000C, "Wrong size on BluEye_TriggerLeftMouseDown");
static_assert(offsetof(BluEye_TriggerLeftMouseDown, Pos) == 0x000000, "Member 'BluEye_TriggerLeftMouseDown::Pos' has a wrong offset!");
static_assert(offsetof(BluEye_TriggerLeftMouseDown, Scale) == 0x000008, "Member 'BluEye_TriggerLeftMouseDown::Scale' has a wrong offset!");

// Function Blu.BluEye.TriggerLeftMouseUp
// 0x000C (0x000C - 0x0000)
struct BluEye_TriggerLeftMouseUp final
{
public:
	struct FVector2D                              Pos;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BluEye_TriggerLeftMouseUp) == 0x000004, "Wrong alignment on BluEye_TriggerLeftMouseUp");
static_assert(sizeof(BluEye_TriggerLeftMouseUp) == 0x00000C, "Wrong size on BluEye_TriggerLeftMouseUp");
static_assert(offsetof(BluEye_TriggerLeftMouseUp, Pos) == 0x000000, "Member 'BluEye_TriggerLeftMouseUp::Pos' has a wrong offset!");
static_assert(offsetof(BluEye_TriggerLeftMouseUp, Scale) == 0x000008, "Member 'BluEye_TriggerLeftMouseUp::Scale' has a wrong offset!");

// Function Blu.BluEye.TriggerMouseMove
// 0x000C (0x000C - 0x0000)
struct BluEye_TriggerMouseMove final
{
public:
	struct FVector2D                              Pos;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BluEye_TriggerMouseMove) == 0x000004, "Wrong alignment on BluEye_TriggerMouseMove");
static_assert(sizeof(BluEye_TriggerMouseMove) == 0x00000C, "Wrong size on BluEye_TriggerMouseMove");
static_assert(offsetof(BluEye_TriggerMouseMove, Pos) == 0x000000, "Member 'BluEye_TriggerMouseMove::Pos' has a wrong offset!");
static_assert(offsetof(BluEye_TriggerMouseMove, Scale) == 0x000008, "Member 'BluEye_TriggerMouseMove::Scale' has a wrong offset!");

// Function Blu.BluEye.TriggerMouseWheel
// 0x0010 (0x0010 - 0x0000)
struct BluEye_TriggerMouseWheel final
{
public:
	float                                         MouseWheelDelta;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Pos;                                               // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BluEye_TriggerMouseWheel) == 0x000004, "Wrong alignment on BluEye_TriggerMouseWheel");
static_assert(sizeof(BluEye_TriggerMouseWheel) == 0x000010, "Wrong size on BluEye_TriggerMouseWheel");
static_assert(offsetof(BluEye_TriggerMouseWheel, MouseWheelDelta) == 0x000000, "Member 'BluEye_TriggerMouseWheel::MouseWheelDelta' has a wrong offset!");
static_assert(offsetof(BluEye_TriggerMouseWheel, Pos) == 0x000004, "Member 'BluEye_TriggerMouseWheel::Pos' has a wrong offset!");
static_assert(offsetof(BluEye_TriggerMouseWheel, Scale) == 0x00000C, "Member 'BluEye_TriggerMouseWheel::Scale' has a wrong offset!");

// Function Blu.BluEye.TriggerRightClick
// 0x000C (0x000C - 0x0000)
struct BluEye_TriggerRightClick final
{
public:
	struct FVector2D                              Pos;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BluEye_TriggerRightClick) == 0x000004, "Wrong alignment on BluEye_TriggerRightClick");
static_assert(sizeof(BluEye_TriggerRightClick) == 0x00000C, "Wrong size on BluEye_TriggerRightClick");
static_assert(offsetof(BluEye_TriggerRightClick, Pos) == 0x000000, "Member 'BluEye_TriggerRightClick::Pos' has a wrong offset!");
static_assert(offsetof(BluEye_TriggerRightClick, Scale) == 0x000008, "Member 'BluEye_TriggerRightClick::Scale' has a wrong offset!");

// Function Blu.BluEye.TriggerRightDoubleClick
// 0x000C (0x000C - 0x0000)
struct BluEye_TriggerRightDoubleClick final
{
public:
	struct FVector2D                              Pos;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BluEye_TriggerRightDoubleClick) == 0x000004, "Wrong alignment on BluEye_TriggerRightDoubleClick");
static_assert(sizeof(BluEye_TriggerRightDoubleClick) == 0x00000C, "Wrong size on BluEye_TriggerRightDoubleClick");
static_assert(offsetof(BluEye_TriggerRightDoubleClick, Pos) == 0x000000, "Member 'BluEye_TriggerRightDoubleClick::Pos' has a wrong offset!");
static_assert(offsetof(BluEye_TriggerRightDoubleClick, Scale) == 0x000008, "Member 'BluEye_TriggerRightDoubleClick::Scale' has a wrong offset!");

// Function Blu.BluEye.TriggerRightMouseDown
// 0x000C (0x000C - 0x0000)
struct BluEye_TriggerRightMouseDown final
{
public:
	struct FVector2D                              Pos;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BluEye_TriggerRightMouseDown) == 0x000004, "Wrong alignment on BluEye_TriggerRightMouseDown");
static_assert(sizeof(BluEye_TriggerRightMouseDown) == 0x00000C, "Wrong size on BluEye_TriggerRightMouseDown");
static_assert(offsetof(BluEye_TriggerRightMouseDown, Pos) == 0x000000, "Member 'BluEye_TriggerRightMouseDown::Pos' has a wrong offset!");
static_assert(offsetof(BluEye_TriggerRightMouseDown, Scale) == 0x000008, "Member 'BluEye_TriggerRightMouseDown::Scale' has a wrong offset!");

// Function Blu.BluEye.TriggerRightMouseUp
// 0x000C (0x000C - 0x0000)
struct BluEye_TriggerRightMouseUp final
{
public:
	struct FVector2D                              Pos;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BluEye_TriggerRightMouseUp) == 0x000004, "Wrong alignment on BluEye_TriggerRightMouseUp");
static_assert(sizeof(BluEye_TriggerRightMouseUp) == 0x00000C, "Wrong size on BluEye_TriggerRightMouseUp");
static_assert(offsetof(BluEye_TriggerRightMouseUp, Pos) == 0x000000, "Member 'BluEye_TriggerRightMouseUp::Pos' has a wrong offset!");
static_assert(offsetof(BluEye_TriggerRightMouseUp, Scale) == 0x000008, "Member 'BluEye_TriggerRightMouseUp::Scale' has a wrong offset!");

// Function Blu.BluEye.GetPopupTexture
// 0x0008 (0x0008 - 0x0000)
struct BluEye_GetPopupTexture final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BluEye_GetPopupTexture) == 0x000008, "Wrong alignment on BluEye_GetPopupTexture");
static_assert(sizeof(BluEye_GetPopupTexture) == 0x000008, "Wrong size on BluEye_GetPopupTexture");
static_assert(offsetof(BluEye_GetPopupTexture, ReturnValue) == 0x000000, "Member 'BluEye_GetPopupTexture::ReturnValue' has a wrong offset!");

// Function Blu.BluEye.GetTexture
// 0x0008 (0x0008 - 0x0000)
struct BluEye_GetTexture final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BluEye_GetTexture) == 0x000008, "Wrong alignment on BluEye_GetTexture");
static_assert(sizeof(BluEye_GetTexture) == 0x000008, "Wrong size on BluEye_GetTexture");
static_assert(offsetof(BluEye_GetTexture, ReturnValue) == 0x000000, "Member 'BluEye_GetTexture::ReturnValue' has a wrong offset!");

}

