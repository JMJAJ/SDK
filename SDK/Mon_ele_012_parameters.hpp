#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Mon_ele_012

#include "Basic.hpp"


namespace SDK::Params
{

// Function mon_ele_012.mon_ele_012_C.ExecuteUbergraph_mon_ele_012
// 0x0030 (0x0030 - 0x0000)
struct Mon_ele_012_C_ExecuteUbergraph_mon_ele_012 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6DF6[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_Event_HitComp;                              // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_OtherActor;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_Event_OtherComp;                            // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHottaPlayerCharacter*                  K2Node_Event_ByPlayer;                             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Mon_ele_012_C_ExecuteUbergraph_mon_ele_012) == 0x000008, "Wrong alignment on Mon_ele_012_C_ExecuteUbergraph_mon_ele_012");
static_assert(sizeof(Mon_ele_012_C_ExecuteUbergraph_mon_ele_012) == 0x000030, "Wrong size on Mon_ele_012_C_ExecuteUbergraph_mon_ele_012");
static_assert(offsetof(Mon_ele_012_C_ExecuteUbergraph_mon_ele_012, EntryPoint) == 0x000000, "Member 'Mon_ele_012_C_ExecuteUbergraph_mon_ele_012::EntryPoint' has a wrong offset!");
static_assert(offsetof(Mon_ele_012_C_ExecuteUbergraph_mon_ele_012, K2Node_Event_HitComp) == 0x000008, "Member 'Mon_ele_012_C_ExecuteUbergraph_mon_ele_012::K2Node_Event_HitComp' has a wrong offset!");
static_assert(offsetof(Mon_ele_012_C_ExecuteUbergraph_mon_ele_012, K2Node_Event_OtherActor) == 0x000010, "Member 'Mon_ele_012_C_ExecuteUbergraph_mon_ele_012::K2Node_Event_OtherActor' has a wrong offset!");
static_assert(offsetof(Mon_ele_012_C_ExecuteUbergraph_mon_ele_012, K2Node_Event_OtherComp) == 0x000018, "Member 'Mon_ele_012_C_ExecuteUbergraph_mon_ele_012::K2Node_Event_OtherComp' has a wrong offset!");
static_assert(offsetof(Mon_ele_012_C_ExecuteUbergraph_mon_ele_012, K2Node_Event_ByPlayer) == 0x000020, "Member 'Mon_ele_012_C_ExecuteUbergraph_mon_ele_012::K2Node_Event_ByPlayer' has a wrong offset!");
static_assert(offsetof(Mon_ele_012_C_ExecuteUbergraph_mon_ele_012, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000028, "Member 'Mon_ele_012_C_ExecuteUbergraph_mon_ele_012::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(Mon_ele_012_C_ExecuteUbergraph_mon_ele_012, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000029, "Member 'Mon_ele_012_C_ExecuteUbergraph_mon_ele_012::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function mon_ele_012.mon_ele_012_C.BPOnThrow
// 0x0008 (0x0008 - 0x0000)
struct Mon_ele_012_C_BPOnThrow final
{
public:
	class AHottaPlayerCharacter*                  ByPlayer;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Mon_ele_012_C_BPOnThrow) == 0x000008, "Wrong alignment on Mon_ele_012_C_BPOnThrow");
static_assert(sizeof(Mon_ele_012_C_BPOnThrow) == 0x000008, "Wrong size on Mon_ele_012_C_BPOnThrow");
static_assert(offsetof(Mon_ele_012_C_BPOnThrow, ByPlayer) == 0x000000, "Member 'Mon_ele_012_C_BPOnThrow::ByPlayer' has a wrong offset!");

// Function mon_ele_012.mon_ele_012_C.BPOnThrowingHit
// 0x0018 (0x0018 - 0x0000)
struct Mon_ele_012_C_BPOnThrowingHit final
{
public:
	class UPrimitiveComponent*                    HitComp;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Mon_ele_012_C_BPOnThrowingHit) == 0x000008, "Wrong alignment on Mon_ele_012_C_BPOnThrowingHit");
static_assert(sizeof(Mon_ele_012_C_BPOnThrowingHit) == 0x000018, "Wrong size on Mon_ele_012_C_BPOnThrowingHit");
static_assert(offsetof(Mon_ele_012_C_BPOnThrowingHit, HitComp) == 0x000000, "Member 'Mon_ele_012_C_BPOnThrowingHit::HitComp' has a wrong offset!");
static_assert(offsetof(Mon_ele_012_C_BPOnThrowingHit, OtherActor) == 0x000008, "Member 'Mon_ele_012_C_BPOnThrowingHit::OtherActor' has a wrong offset!");
static_assert(offsetof(Mon_ele_012_C_BPOnThrowingHit, OtherComp) == 0x000010, "Member 'Mon_ele_012_C_BPOnThrowingHit::OtherComp' has a wrong offset!");

}

