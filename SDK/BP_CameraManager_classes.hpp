#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CameraManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "QRSL_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CameraManager.BP_CameraManager_C
// 0x0020 (0x7F30 - 0x7F10)
class ABP_CameraManager_C final : public AQRSLPlayerCameraManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x7F10(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        Scene;                                             // 0x7F18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             Player;                                            // 0x7F20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayingSequence;                                 // 0x7F28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_588A[0x3];                                     // 0x7F29(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ViewTargetIsPlayer;                                // 0x7F2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	bool BlueprintUpdateCamera(class AActor* CameraTarget, struct FVector* NewCameraLocation, struct FRotator* NewCameraRotation, float* NewCameraFOV);
	void ReceiveTick(float DeltaSeconds);
	void ExecuteUbergraph_BP_CameraManager(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CameraManager_C">();
	}
	static class ABP_CameraManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CameraManager_C>();
	}
};
static_assert(alignof(ABP_CameraManager_C) == 0x000010, "Wrong alignment on ABP_CameraManager_C");
static_assert(sizeof(ABP_CameraManager_C) == 0x007F30, "Wrong size on ABP_CameraManager_C");
static_assert(offsetof(ABP_CameraManager_C, UberGraphFrame) == 0x007F10, "Member 'ABP_CameraManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CameraManager_C, Scene) == 0x007F18, "Member 'ABP_CameraManager_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_CameraManager_C, Player) == 0x007F20, "Member 'ABP_CameraManager_C::Player' has a wrong offset!");
static_assert(offsetof(ABP_CameraManager_C, IsPlayingSequence) == 0x007F28, "Member 'ABP_CameraManager_C::IsPlayingSequence' has a wrong offset!");
static_assert(offsetof(ABP_CameraManager_C, ViewTargetIsPlayer) == 0x007F2C, "Member 'ABP_CameraManager_C::ViewTargetIsPlayer' has a wrong offset!");

}

