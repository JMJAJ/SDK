#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Oceanology_Plugin

#include "Basic.hpp"

#include "Oceanology_Plugin_classes.hpp"
#include "Oceanology_Plugin_parameters.hpp"


namespace SDK
{

// Function Oceanology_Plugin.AOceanologyLightControl.InitQuadTreeHeightfog
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AExponentialHeightFog*            HeightFogActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FogDensity                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FogHeightFalloff                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FogMaxOpacity                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     FogInscatteringColor                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartDistance                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FogCutoffDistance                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FExponentialHeightFogData        SeData                                                 (Parm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   DirectionalInscatteringExponent                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DirectionalInscatteringStartDistance                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     DirectionalInscatteringColor                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAOceanologyLightControl::InitQuadTreeHeightfog(class AExponentialHeightFog* HeightFogActor, float FogDensity, float FogHeightFalloff, float FogMaxOpacity, const struct FLinearColor& FogInscatteringColor, float StartDistance, float FogCutoffDistance, const struct FExponentialHeightFogData& SeData, float DirectionalInscatteringExponent, float DirectionalInscatteringStartDistance, const struct FLinearColor& DirectionalInscatteringColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AOceanologyLightControl", "InitQuadTreeHeightfog");

	Params::AOceanologyLightControl_InitQuadTreeHeightfog Parms{};

	Parms.HeightFogActor = HeightFogActor;
	Parms.FogDensity = FogDensity;
	Parms.FogHeightFalloff = FogHeightFalloff;
	Parms.FogMaxOpacity = FogMaxOpacity;
	Parms.FogInscatteringColor = std::move(FogInscatteringColor);
	Parms.StartDistance = StartDistance;
	Parms.FogCutoffDistance = FogCutoffDistance;
	Parms.SeData = std::move(SeData);
	Parms.DirectionalInscatteringExponent = DirectionalInscatteringExponent;
	Parms.DirectionalInscatteringStartDistance = DirectionalInscatteringStartDistance;
	Parms.DirectionalInscatteringColor = std::move(DirectionalInscatteringColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Oceanology_Plugin.AOceanologyLightControl.InitQuadTreelightInfo
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ALight*                           Light                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LightDensity                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     LightColor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASkyLight*                        SkyLight                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SkylightDensity                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     SkyLightColor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAOceanologyLightControl::InitQuadTreelightInfo(class ALight* Light, float LightDensity, const struct FLinearColor& LightColor, class ASkyLight* SkyLight, float SkylightDensity, const struct FLinearColor& SkyLightColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AOceanologyLightControl", "InitQuadTreelightInfo");

	Params::AOceanologyLightControl_InitQuadTreelightInfo Parms{};

	Parms.Light = Light;
	Parms.LightDensity = LightDensity;
	Parms.LightColor = std::move(LightColor);
	Parms.SkyLight = SkyLight;
	Parms.SkylightDensity = SkylightDensity;
	Parms.SkyLightColor = std::move(SkyLightColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Oceanology_Plugin.AOceanologyLightControl.UpdateSkylight
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// float                                   Intensity                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAOceanologyLightControl::UpdateSkylight(float Intensity, const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AOceanologyLightControl", "UpdateSkylight");

	Params::AOceanologyLightControl_UpdateSkylight Parms{};

	Parms.Intensity = Intensity;
	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Oceanology_Plugin.AOceanologyLightControl.UpdateSunlightIntensity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Intensity                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAOceanologyLightControl::UpdateSunlightIntensity(float Intensity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AOceanologyLightControl", "UpdateSunlightIntensity");

	Params::AOceanologyLightControl_UpdateSunlightIntensity Parms{};

	Parms.Intensity = Intensity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Oceanology_Plugin.HottaSwimmingComponent.GetReferenceToOceanology
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AQuadTree*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AQuadTree* UHottaSwimmingComponent::GetReferenceToOceanology()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HottaSwimmingComponent", "GetReferenceToOceanology");

	Params::HottaSwimmingComponent_GetReferenceToOceanology Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Oceanology_Plugin.HottaSwimmingComponent.SetReferenceToOceanology
// (Final, Native, Public, BlueprintCallable)

void UHottaSwimmingComponent::SetReferenceToOceanology()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HottaSwimmingComponent", "SetReferenceToOceanology");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Oceanology_Plugin.Infinite_Compound.GetCamLoction
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UInfinite_Compound::GetCamLoction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Infinite_Compound", "GetCamLoction");

	Params::Infinite_Compound_GetCamLoction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Oceanology_Plugin.Infinite_Compound.GetCamRotator
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UInfinite_Compound::GetCamRotator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Infinite_Compound", "GetCamRotator");

	Params::Infinite_Compound_GetCamRotator Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Oceanology_Plugin.Oceanology_PluginBPLibrary.Oceanology_PluginSampleFunction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   Param                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOceanology_PluginBPLibrary::Oceanology_PluginSampleFunction(float Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("Oceanology_PluginBPLibrary", "Oceanology_PluginSampleFunction");

	Params::Oceanology_PluginBPLibrary_Oceanology_PluginSampleFunction Parms{};

	Parms.Param = Param;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Oceanology_Plugin.QuadTree.BluePrintTick
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AQuadTree::BluePrintTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuadTree", "BluePrintTick");

	Params::QuadTree_BluePrintTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Oceanology_Plugin.QuadTree.EditorTick
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AQuadTree::EditorTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuadTree", "EditorTick");

	Params::QuadTree_EditorTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Oceanology_Plugin.QuadTree.GetWaveHeightEvent
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          Pos                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AQuadTree::GetWaveHeightEvent(const struct FVector& Pos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuadTree", "GetWaveHeightEvent");

	Params::QuadTree_GetWaveHeightEvent Parms{};

	Parms.Pos = std::move(Pos);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Oceanology_Plugin.QuadTree.GetWaveHeightHotta
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Pos                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AQuadTree::GetWaveHeightHotta(const struct FVector& Pos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuadTree", "GetWaveHeightHotta");

	Params::QuadTree_GetWaveHeightHotta Parms{};

	Parms.Pos = std::move(Pos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Oceanology_Plugin.QuadTree.InitPostProcess
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPostProcessComponent*            PostProcessVolume                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic*         Custom1                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic*         Custom2                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AQuadTree::InitPostProcess(class UPostProcessComponent* PostProcessVolume, class UMaterialInstanceDynamic* Custom1, class UMaterialInstanceDynamic* Custom2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuadTree", "InitPostProcess");

	Params::QuadTree_InitPostProcess Parms{};

	Parms.PostProcessVolume = PostProcessVolume;
	Parms.Custom1 = Custom1;
	Parms.Custom2 = Custom2;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Oceanology_Plugin.QuadTree.IsUnderWater
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AQuadTree::IsUnderWater()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuadTree", "IsUnderWater");

	Params::QuadTree_IsUnderWater Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Oceanology_Plugin.QuadTree.PostProcessMaterialWeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPostProcessComponent*            PostProcessVolume                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUnderWater                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AQuadTree::PostProcessMaterialWeight(class UPostProcessComponent* PostProcessVolume, bool bUnderWater)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuadTree", "PostProcessMaterialWeight");

	Params::QuadTree_PostProcessMaterialWeight Parms{};

	Parms.PostProcessVolume = PostProcessVolume;
	Parms.bUnderWater = bUnderWater;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Oceanology_Plugin.QuadTree.Procedural
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UHierarchicalInstancedStaticMeshComponent*HISMC                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GridSize                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   GridTiles                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CellSize                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AQuadTree::Procedural(class UHierarchicalInstancedStaticMeshComponent* HISMC, float GridSize, int32 GridTiles, float CellSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuadTree", "Procedural");

	Params::QuadTree_Procedural Parms{};

	Parms.HISMC = HISMC;
	Parms.GridSize = GridSize;
	Parms.GridTiles = GridTiles;
	Parms.CellSize = CellSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Oceanology_Plugin.QuadTree.SetEditorTickEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AQuadTree::SetEditorTickEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuadTree", "SetEditorTickEnabled");

	Params::QuadTree_SetEditorTickEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

