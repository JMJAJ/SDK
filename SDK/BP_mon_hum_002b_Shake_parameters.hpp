#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_mon_hum_002b_Shake

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_mon_hum_002b_Shake.BP_mon_hum_002b_Shake_C.ExecuteUbergraph_BP_mon_hum_002b_Shake
// 0x0060 (0x0060 - 0x0000)
struct BP_mon_hum_002b_Shake_C_ExecuteUbergraph_BP_mon_hum_002b_Shake final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_3;       // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_4;       // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_5;       // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_6;       // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_mon_hum_002b_Shake_C_ExecuteUbergraph_BP_mon_hum_002b_Shake) == 0x000004, "Wrong alignment on BP_mon_hum_002b_Shake_C_ExecuteUbergraph_BP_mon_hum_002b_Shake");
static_assert(sizeof(BP_mon_hum_002b_Shake_C_ExecuteUbergraph_BP_mon_hum_002b_Shake) == 0x000060, "Wrong size on BP_mon_hum_002b_Shake_C_ExecuteUbergraph_BP_mon_hum_002b_Shake");
static_assert(offsetof(BP_mon_hum_002b_Shake_C_ExecuteUbergraph_BP_mon_hum_002b_Shake, EntryPoint) == 0x000000, "Member 'BP_mon_hum_002b_Shake_C_ExecuteUbergraph_BP_mon_hum_002b_Shake::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_mon_hum_002b_Shake_C_ExecuteUbergraph_BP_mon_hum_002b_Shake, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_mon_hum_002b_Shake_C_ExecuteUbergraph_BP_mon_hum_002b_Shake::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_mon_hum_002b_Shake_C_ExecuteUbergraph_BP_mon_hum_002b_Shake, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000008, "Member 'BP_mon_hum_002b_Shake_C_ExecuteUbergraph_BP_mon_hum_002b_Shake::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_mon_hum_002b_Shake_C_ExecuteUbergraph_BP_mon_hum_002b_Shake, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00000C, "Member 'BP_mon_hum_002b_Shake_C_ExecuteUbergraph_BP_mon_hum_002b_Shake::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_mon_hum_002b_Shake_C_ExecuteUbergraph_BP_mon_hum_002b_Shake, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000018, "Member 'BP_mon_hum_002b_Shake_C_ExecuteUbergraph_BP_mon_hum_002b_Shake::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_mon_hum_002b_Shake_C_ExecuteUbergraph_BP_mon_hum_002b_Shake, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000024, "Member 'BP_mon_hum_002b_Shake_C_ExecuteUbergraph_BP_mon_hum_002b_Shake::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_mon_hum_002b_Shake_C_ExecuteUbergraph_BP_mon_hum_002b_Shake, CallFunc_Multiply_VectorFloat_ReturnValue_3) == 0x000030, "Member 'BP_mon_hum_002b_Shake_C_ExecuteUbergraph_BP_mon_hum_002b_Shake::CallFunc_Multiply_VectorFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_mon_hum_002b_Shake_C_ExecuteUbergraph_BP_mon_hum_002b_Shake, CallFunc_Multiply_VectorFloat_ReturnValue_4) == 0x00003C, "Member 'BP_mon_hum_002b_Shake_C_ExecuteUbergraph_BP_mon_hum_002b_Shake::CallFunc_Multiply_VectorFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_mon_hum_002b_Shake_C_ExecuteUbergraph_BP_mon_hum_002b_Shake, CallFunc_Multiply_VectorFloat_ReturnValue_5) == 0x000048, "Member 'BP_mon_hum_002b_Shake_C_ExecuteUbergraph_BP_mon_hum_002b_Shake::CallFunc_Multiply_VectorFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_mon_hum_002b_Shake_C_ExecuteUbergraph_BP_mon_hum_002b_Shake, CallFunc_Multiply_VectorFloat_ReturnValue_6) == 0x000054, "Member 'BP_mon_hum_002b_Shake_C_ExecuteUbergraph_BP_mon_hum_002b_Shake::CallFunc_Multiply_VectorFloat_ReturnValue_6' has a wrong offset!");

// Function BP_mon_hum_002b_Shake.BP_mon_hum_002b_Shake_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct BP_mon_hum_002b_Shake_C_AnimGraph final
{
public:
	struct FPoseLink                              Param_AnimGraph;                                   // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(BP_mon_hum_002b_Shake_C_AnimGraph) == 0x000008, "Wrong alignment on BP_mon_hum_002b_Shake_C_AnimGraph");
static_assert(sizeof(BP_mon_hum_002b_Shake_C_AnimGraph) == 0x000010, "Wrong size on BP_mon_hum_002b_Shake_C_AnimGraph");
static_assert(offsetof(BP_mon_hum_002b_Shake_C_AnimGraph, Param_AnimGraph) == 0x000000, "Member 'BP_mon_hum_002b_Shake_C_AnimGraph::Param_AnimGraph' has a wrong offset!");

// Function BP_mon_hum_002b_Shake.BP_mon_hum_002b_Shake_C.BoneShakeLayer
// 0x0028 (0x0028 - 0x0000)
struct BP_mon_hum_002b_Shake_C_BoneShakeLayer final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	float                                         Param_PushScale;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param_BlendAlpha;                                  // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPoseLink                              Param_BoneShakeLayer;                              // 0x0018(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(BP_mon_hum_002b_Shake_C_BoneShakeLayer) == 0x000008, "Wrong alignment on BP_mon_hum_002b_Shake_C_BoneShakeLayer");
static_assert(sizeof(BP_mon_hum_002b_Shake_C_BoneShakeLayer) == 0x000028, "Wrong size on BP_mon_hum_002b_Shake_C_BoneShakeLayer");
static_assert(offsetof(BP_mon_hum_002b_Shake_C_BoneShakeLayer, InPose) == 0x000000, "Member 'BP_mon_hum_002b_Shake_C_BoneShakeLayer::InPose' has a wrong offset!");
static_assert(offsetof(BP_mon_hum_002b_Shake_C_BoneShakeLayer, Param_PushScale) == 0x000010, "Member 'BP_mon_hum_002b_Shake_C_BoneShakeLayer::Param_PushScale' has a wrong offset!");
static_assert(offsetof(BP_mon_hum_002b_Shake_C_BoneShakeLayer, Param_BlendAlpha) == 0x000014, "Member 'BP_mon_hum_002b_Shake_C_BoneShakeLayer::Param_BlendAlpha' has a wrong offset!");
static_assert(offsetof(BP_mon_hum_002b_Shake_C_BoneShakeLayer, Param_BoneShakeLayer) == 0x000018, "Member 'BP_mon_hum_002b_Shake_C_BoneShakeLayer::Param_BoneShakeLayer' has a wrong offset!");

}

