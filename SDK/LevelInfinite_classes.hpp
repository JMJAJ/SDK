#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LevelInfinite

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class LevelInfinite.LevelInfiniteAPI
// 0x0000 (0x0028 - 0x0028)
class ULevelInfiniteAPI final : public UBlueprintFunctionLibrary
{
public:
	static void AutoLogin();
	static void CloseLI();
	static int32 Init(class UGameInstance* Instance, const class FString& Host, const struct FLIUserData& UserData, bool IsTest);
	static void OpenAccountCenter();
	static void OpenLoginPanel();
	static void SetLanguage(const class FString& Language);
	static void SetUIRoot(class UCanvasPanel* UiRoot);
	static void SetUserData(const struct FLIUserData& UserData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelInfiniteAPI">();
	}
	static class ULevelInfiniteAPI* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelInfiniteAPI>();
	}
};
static_assert(alignof(ULevelInfiniteAPI) == 0x000008, "Wrong alignment on ULevelInfiniteAPI");
static_assert(sizeof(ULevelInfiniteAPI) == 0x000028, "Wrong size on ULevelInfiniteAPI");

// Class LevelInfinite.LIHyperLinkTextBlockDecorator
// 0x0500 (0x0528 - 0x0028)
class ULIHyperLinkTextBlockDecorator final : public URichTextBlockDecorator
{
public:
	struct FHyperlinkStyle                        M_Style;                                           // 0x0028(0x0500)(Edit, NativeAccessSpecifierPublic)

public:
	void OnHyperLinkClick(const TMap<class FString, class FString>& MetaData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LIHyperLinkTextBlockDecorator">();
	}
	static class ULIHyperLinkTextBlockDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULIHyperLinkTextBlockDecorator>();
	}
};
static_assert(alignof(ULIHyperLinkTextBlockDecorator) == 0x000008, "Wrong alignment on ULIHyperLinkTextBlockDecorator");
static_assert(sizeof(ULIHyperLinkTextBlockDecorator) == 0x000528, "Wrong size on ULIHyperLinkTextBlockDecorator");
static_assert(offsetof(ULIHyperLinkTextBlockDecorator, M_Style) == 0x000028, "Member 'ULIHyperLinkTextBlockDecorator::M_Style' has a wrong offset!");

// Class LevelInfinite.LISubSystem
// 0x0000 (0x0028 - 0x0028)
class ULISubSystem final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LISubSystem">();
	}
	static class ULISubSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULISubSystem>();
	}
};
static_assert(alignof(ULISubSystem) == 0x000008, "Wrong alignment on ULISubSystem");
static_assert(sizeof(ULISubSystem) == 0x000028, "Wrong size on ULISubSystem");

// Class LevelInfinite.RadarChartWidget
// 0x0078 (0x01A0 - 0x0128)
class URadarChartWidget final : public UWidget
{
public:
	struct FVector2D                              Offset;                                            // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rotation;                                          // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0134(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Segmentation;                                      // 0x0138(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_199C[0x3];                                     // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SegmentationThickness;                             // 0x013C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 SegmentationColor;                                 // 0x0140(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlateOutlineThickness;                             // 0x0144(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 PlateOutlineColor;                                 // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 PlateColor;                                        // 0x014C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ChartColor;                                        // 0x0150(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ChartOutlineColor;                                 // 0x0154(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChartOutlineThickness;                             // 0x0158(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_199D[0x4];                                     // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ChartValues;                                       // 0x0160(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             RadiusDelegate;                                    // 0x0170(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             SegmentationDelegate;                              // 0x0180(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_199E[0x10];                                    // 0x0190(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetChartValue(uint8 Param_Index);
	uint8 GetUInt8__DelegateSignature();
	void SetChartColor(const struct FColor& InColor);
	void SetChartOutlineColor(const struct FColor& InColor);
	void SetChartOutlineThickness(float InThickness);
	void SetChartValue(uint8 Param_Index, float InValue);
	void SetChartValues(const TArray<float>& InValues);
	void SetOffset(const struct FVector2D& InOffset);
	void SetPlateColor(const struct FColor& InColor);
	void SetPlateOutlineColor(const struct FColor& InColor);
	void SetPlateOutlineThickness(float InThickness);
	void SetRadius(float InRadius);
	void SetRotation(float InRotation);
	void SetSegmentation(uint8 InSegmentation);
	void SetSegmentationColor(const struct FColor& InColor);
	void SetSegmentationThickness(float InThickness);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RadarChartWidget">();
	}
	static class URadarChartWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<URadarChartWidget>();
	}
};
static_assert(alignof(URadarChartWidget) == 0x000008, "Wrong alignment on URadarChartWidget");
static_assert(sizeof(URadarChartWidget) == 0x0001A0, "Wrong size on URadarChartWidget");
static_assert(offsetof(URadarChartWidget, Offset) == 0x000128, "Member 'URadarChartWidget::Offset' has a wrong offset!");
static_assert(offsetof(URadarChartWidget, Rotation) == 0x000130, "Member 'URadarChartWidget::Rotation' has a wrong offset!");
static_assert(offsetof(URadarChartWidget, Radius) == 0x000134, "Member 'URadarChartWidget::Radius' has a wrong offset!");
static_assert(offsetof(URadarChartWidget, Segmentation) == 0x000138, "Member 'URadarChartWidget::Segmentation' has a wrong offset!");
static_assert(offsetof(URadarChartWidget, SegmentationThickness) == 0x00013C, "Member 'URadarChartWidget::SegmentationThickness' has a wrong offset!");
static_assert(offsetof(URadarChartWidget, SegmentationColor) == 0x000140, "Member 'URadarChartWidget::SegmentationColor' has a wrong offset!");
static_assert(offsetof(URadarChartWidget, PlateOutlineThickness) == 0x000144, "Member 'URadarChartWidget::PlateOutlineThickness' has a wrong offset!");
static_assert(offsetof(URadarChartWidget, PlateOutlineColor) == 0x000148, "Member 'URadarChartWidget::PlateOutlineColor' has a wrong offset!");
static_assert(offsetof(URadarChartWidget, PlateColor) == 0x00014C, "Member 'URadarChartWidget::PlateColor' has a wrong offset!");
static_assert(offsetof(URadarChartWidget, ChartColor) == 0x000150, "Member 'URadarChartWidget::ChartColor' has a wrong offset!");
static_assert(offsetof(URadarChartWidget, ChartOutlineColor) == 0x000154, "Member 'URadarChartWidget::ChartOutlineColor' has a wrong offset!");
static_assert(offsetof(URadarChartWidget, ChartOutlineThickness) == 0x000158, "Member 'URadarChartWidget::ChartOutlineThickness' has a wrong offset!");
static_assert(offsetof(URadarChartWidget, ChartValues) == 0x000160, "Member 'URadarChartWidget::ChartValues' has a wrong offset!");
static_assert(offsetof(URadarChartWidget, RadiusDelegate) == 0x000170, "Member 'URadarChartWidget::RadiusDelegate' has a wrong offset!");
static_assert(offsetof(URadarChartWidget, SegmentationDelegate) == 0x000180, "Member 'URadarChartWidget::SegmentationDelegate' has a wrong offset!");

}

