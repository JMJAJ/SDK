#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DynamicGravityCharacter

#include "Basic.hpp"

#include "DynamicGravityCharacter_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class DynamicGravityCharacter.DGCharacter
// 0x0030 (0x0500 - 0x04D0)
class ADGCharacter : public ACharacter
{
public:
	uint8                                         Pad_180C[0xC];                                     // 0x04C8(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	EViewRotationBaseMode                         ViewRotationBaseMode;                              // 0x04D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_180D[0x3];                                     // 0x04D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CustomViewRotationBase;                            // 0x04D8(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_180E[0x4];                                     // 0x04E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ViewRotationBase;                                  // 0x04E8(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ViewRotationAdjustIntensity;                       // 0x04F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControlRotationAdjustRate;                         // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResetControlRotationAdjustRate;                    // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void AddForwardPlanarMovementInput(const struct FRotator& WorldRotation, float ScaleValue, bool bForce);
	void AddForwardPlanarMovementInputWithViewRotationAsWorldRotation(float ScaleValue, bool bForce);
	void AddForwardRadialMovementInput(const struct FRotator& WorldRotation, float ScaleValue, bool bForce);
	void AddForwardRadialMovementInputWithViewRotationAsWorldRotation(float ScaleValue, bool bForce);
	void AddRightPlanarMovementInput(const struct FRotator& WorldRotation, float ScaleValue, bool bForce);
	void AddRightPlanarMovementInputWithViewRotationAsWorldRotation(float ScaleValue, bool bForce);
	void AddRightRadialMovementInput(const struct FRotator& WorldRotation, float ScaleValue, bool bForce);
	void AddRightRadialMovementInputWithViewRotationAsWorldRotation(float ScaleValue, bool bForce);
	struct DynamicGravityCharacter::FHorizontalAndVerticalVelocities HorizontalAndVerticalVelocities();
	float HorizontalSpeed();
	struct FVector HorizontalVelocity();
	void ResetControlRotation();
	void ResetControlRotationHorizontally();
	void ResetControlRotationVertically();
	void ResetPitchControlRotation();
	void ResetRollControlRotation();
	void ResetYawControlRotation();
	void SetViewRotationBaseMode(EViewRotationBaseMode NewViewRotationBaseMode);
	float Speed();
	float VerticalSpeed();
	struct FVector VerticalVelocity();

	struct FRotator GetViewRotation() const;
	EViewRotationBaseMode GetViewRotationBaseMode() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DGCharacter">();
	}
	static class ADGCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADGCharacter>();
	}
};
static_assert(alignof(ADGCharacter) == 0x000010, "Wrong alignment on ADGCharacter");
static_assert(sizeof(ADGCharacter) == 0x000500, "Wrong size on ADGCharacter");
static_assert(offsetof(ADGCharacter, ViewRotationBaseMode) == 0x0004D4, "Member 'ADGCharacter::ViewRotationBaseMode' has a wrong offset!");
static_assert(offsetof(ADGCharacter, CustomViewRotationBase) == 0x0004D8, "Member 'ADGCharacter::CustomViewRotationBase' has a wrong offset!");
static_assert(offsetof(ADGCharacter, ViewRotationBase) == 0x0004E8, "Member 'ADGCharacter::ViewRotationBase' has a wrong offset!");
static_assert(offsetof(ADGCharacter, ViewRotationAdjustIntensity) == 0x0004F4, "Member 'ADGCharacter::ViewRotationAdjustIntensity' has a wrong offset!");
static_assert(offsetof(ADGCharacter, ControlRotationAdjustRate) == 0x0004F8, "Member 'ADGCharacter::ControlRotationAdjustRate' has a wrong offset!");
static_assert(offsetof(ADGCharacter, ResetControlRotationAdjustRate) == 0x0004FC, "Member 'ADGCharacter::ResetControlRotationAdjustRate' has a wrong offset!");

// Class DynamicGravityCharacter.DGCharacterMovementComponent
// 0x00A0 (0x0BB0 - 0x0B10)
#pragma pack(push, 0x1)
class alignas(0x10) UDGCharacterMovementComponent : public UCharacterMovementComponent
{
public:
	EWalkableFloorNormalMode                      WalkableFloorNormalMode;                           // 0x0B10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1817[0x3];                                     // 0x0B11(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CustomWalkableFloorNormal;                         // 0x0B14(0x000C)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJumpDirectionMode                            JumpDirectionMode;                                 // 0x0B20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1818[0x3];                                     // 0x0B21(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CustomJumpDirection;                               // 0x0B24(0x000C)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1819[0x50];                                    // 0x0B30(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotationAdjustIntensity;                           // 0x0B80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicsRotationVerticalDirectionMode         PhysicsRotationVerticalDirectionMode;              // 0x0B84(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181A[0x3];                                     // 0x0B85(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                VerticalDirection;                                 // 0x0B88(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreWorldGravityIfDynamicGravityIsNotZero;      // 0x0B94(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181B[0x3];                                     // 0x0B95(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DynamicGravity;                                    // 0x0B98(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181C[0x4];                                     // 0x0BA4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetCustomJumpDirection(const struct FVector& NewJumpDirection);
	void SetCustomWalkableFloorNormal(const struct FVector& NewFloorDirection);

	void ComputeFloorDist(const struct FVector& WalkableNormal, const struct FRotator& CapsuleRotation, const struct FVector& CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, struct FFindFloorResult* FloorResult) const;
	struct FVector DynamicGravityNormal() const;
	void FindFloor(const struct FVector& WalkableNormal, const struct FRotator& CapsuleRotation, const struct FVector& CapsuleLocation, struct FFindFloorResult* FloorResult) const;
	struct FVector GetCustomJumpDirection() const;
	struct FVector GetCustomWalkableFloorNormal() const;
	struct FVector Gravity() const;
	struct FVector GravityNormal() const;
	struct FVector JumpDirection() const;
	struct FVector WalkableFloorNormal() const;
	struct FVector WorldGravity() const;
	struct FVector WorldGravityNormal() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DGCharacterMovementComponent">();
	}
	static class UDGCharacterMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDGCharacterMovementComponent>();
	}
};
#pragma pack(pop)
static_assert(alignof(UDGCharacterMovementComponent) == 0x000010, "Wrong alignment on UDGCharacterMovementComponent");
static_assert(sizeof(UDGCharacterMovementComponent) == 0x000BB0, "Wrong size on UDGCharacterMovementComponent");
static_assert(offsetof(UDGCharacterMovementComponent, WalkableFloorNormalMode) == 0x000B10, "Member 'UDGCharacterMovementComponent::WalkableFloorNormalMode' has a wrong offset!");
static_assert(offsetof(UDGCharacterMovementComponent, CustomWalkableFloorNormal) == 0x000B14, "Member 'UDGCharacterMovementComponent::CustomWalkableFloorNormal' has a wrong offset!");
static_assert(offsetof(UDGCharacterMovementComponent, JumpDirectionMode) == 0x000B20, "Member 'UDGCharacterMovementComponent::JumpDirectionMode' has a wrong offset!");
static_assert(offsetof(UDGCharacterMovementComponent, CustomJumpDirection) == 0x000B24, "Member 'UDGCharacterMovementComponent::CustomJumpDirection' has a wrong offset!");
static_assert(offsetof(UDGCharacterMovementComponent, RotationAdjustIntensity) == 0x000B80, "Member 'UDGCharacterMovementComponent::RotationAdjustIntensity' has a wrong offset!");
static_assert(offsetof(UDGCharacterMovementComponent, PhysicsRotationVerticalDirectionMode) == 0x000B84, "Member 'UDGCharacterMovementComponent::PhysicsRotationVerticalDirectionMode' has a wrong offset!");
static_assert(offsetof(UDGCharacterMovementComponent, VerticalDirection) == 0x000B88, "Member 'UDGCharacterMovementComponent::VerticalDirection' has a wrong offset!");
static_assert(offsetof(UDGCharacterMovementComponent, bIgnoreWorldGravityIfDynamicGravityIsNotZero) == 0x000B94, "Member 'UDGCharacterMovementComponent::bIgnoreWorldGravityIfDynamicGravityIsNotZero' has a wrong offset!");
static_assert(offsetof(UDGCharacterMovementComponent, DynamicGravity) == 0x000B98, "Member 'UDGCharacterMovementComponent::DynamicGravity' has a wrong offset!");

}

