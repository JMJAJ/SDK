#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_GamepadKeyboard_Tips_Single

#include "Basic.hpp"

#include "HottaFramework_structs.hpp"
#include "UMG_structs.hpp"
#include "InputCore_structs.hpp"
#include "Slate_structs.hpp"


namespace SDK::Params
{

// Function WB_GamepadKeyboard_Tips_Single.WB_GamepadKeyboard_Tips_Single_C.ExecuteUbergraph_WB_GamepadKeyboard_Tips_Single
// 0x000C (0x000C - 0x0000)
struct WB_GamepadKeyboard_Tips_Single_C_ExecuteUbergraph_WB_GamepadKeyboard_Tips_Single final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              ___byte_Variable;                                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              ___byte_Variable_1;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_Variable;                                  // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bGamepad;                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_GamepadKeyboard_Tips_Single_C_ExecuteUbergraph_WB_GamepadKeyboard_Tips_Single) == 0x000004, "Wrong alignment on WB_GamepadKeyboard_Tips_Single_C_ExecuteUbergraph_WB_GamepadKeyboard_Tips_Single");
static_assert(sizeof(WB_GamepadKeyboard_Tips_Single_C_ExecuteUbergraph_WB_GamepadKeyboard_Tips_Single) == 0x00000C, "Wrong size on WB_GamepadKeyboard_Tips_Single_C_ExecuteUbergraph_WB_GamepadKeyboard_Tips_Single");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_ExecuteUbergraph_WB_GamepadKeyboard_Tips_Single, EntryPoint) == 0x000000, "Member 'WB_GamepadKeyboard_Tips_Single_C_ExecuteUbergraph_WB_GamepadKeyboard_Tips_Single::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_ExecuteUbergraph_WB_GamepadKeyboard_Tips_Single, ___byte_Variable) == 0x000004, "Member 'WB_GamepadKeyboard_Tips_Single_C_ExecuteUbergraph_WB_GamepadKeyboard_Tips_Single::___byte_Variable' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_ExecuteUbergraph_WB_GamepadKeyboard_Tips_Single, ___byte_Variable_1) == 0x000005, "Member 'WB_GamepadKeyboard_Tips_Single_C_ExecuteUbergraph_WB_GamepadKeyboard_Tips_Single::___byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_ExecuteUbergraph_WB_GamepadKeyboard_Tips_Single, ___bool_Variable) == 0x000006, "Member 'WB_GamepadKeyboard_Tips_Single_C_ExecuteUbergraph_WB_GamepadKeyboard_Tips_Single::___bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_ExecuteUbergraph_WB_GamepadKeyboard_Tips_Single, K2Node_Event_IsDesignTime) == 0x000007, "Member 'WB_GamepadKeyboard_Tips_Single_C_ExecuteUbergraph_WB_GamepadKeyboard_Tips_Single::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_ExecuteUbergraph_WB_GamepadKeyboard_Tips_Single, K2Node_Event_bGamepad) == 0x000008, "Member 'WB_GamepadKeyboard_Tips_Single_C_ExecuteUbergraph_WB_GamepadKeyboard_Tips_Single::K2Node_Event_bGamepad' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_ExecuteUbergraph_WB_GamepadKeyboard_Tips_Single, K2Node_Select_Default) == 0x000009, "Member 'WB_GamepadKeyboard_Tips_Single_C_ExecuteUbergraph_WB_GamepadKeyboard_Tips_Single::K2Node_Select_Default' has a wrong offset!");

// Function WB_GamepadKeyboard_Tips_Single.WB_GamepadKeyboard_Tips_Single_C.BPOnGamepadInputChanged
// 0x0001 (0x0001 - 0x0000)
struct WB_GamepadKeyboard_Tips_Single_C_BPOnGamepadInputChanged final
{
public:
	bool                                          bGamepad;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_GamepadKeyboard_Tips_Single_C_BPOnGamepadInputChanged) == 0x000001, "Wrong alignment on WB_GamepadKeyboard_Tips_Single_C_BPOnGamepadInputChanged");
static_assert(sizeof(WB_GamepadKeyboard_Tips_Single_C_BPOnGamepadInputChanged) == 0x000001, "Wrong size on WB_GamepadKeyboard_Tips_Single_C_BPOnGamepadInputChanged");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_BPOnGamepadInputChanged, bGamepad) == 0x000000, "Member 'WB_GamepadKeyboard_Tips_Single_C_BPOnGamepadInputChanged::bGamepad' has a wrong offset!");

// Function WB_GamepadKeyboard_Tips_Single.WB_GamepadKeyboard_Tips_Single_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WB_GamepadKeyboard_Tips_Single_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_GamepadKeyboard_Tips_Single_C_PreConstruct) == 0x000001, "Wrong alignment on WB_GamepadKeyboard_Tips_Single_C_PreConstruct");
static_assert(sizeof(WB_GamepadKeyboard_Tips_Single_C_PreConstruct) == 0x000001, "Wrong size on WB_GamepadKeyboard_Tips_Single_C_PreConstruct");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WB_GamepadKeyboard_Tips_Single_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WB_GamepadKeyboard_Tips_Single.WB_GamepadKeyboard_Tips_Single_C.SetKeyName
// 0x0018 (0x0018 - 0x0000)
struct WB_GamepadKeyboard_Tips_Single_C_SetKeyName final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WB_GamepadKeyboard_Tips_Single_C_SetKeyName) == 0x000008, "Wrong alignment on WB_GamepadKeyboard_Tips_Single_C_SetKeyName");
static_assert(sizeof(WB_GamepadKeyboard_Tips_Single_C_SetKeyName) == 0x000018, "Wrong size on WB_GamepadKeyboard_Tips_Single_C_SetKeyName");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_SetKeyName, InText) == 0x000000, "Member 'WB_GamepadKeyboard_Tips_Single_C_SetKeyName::InText' has a wrong offset!");

// Function WB_GamepadKeyboard_Tips_Single.WB_GamepadKeyboard_Tips_Single_C.SetIcon
// 0x0048 (0x0048 - 0x0000)
struct WB_GamepadKeyboard_Tips_Single_C_SetIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              Texture;                                           // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          CallFunc_IsGamepadAttached_Attached;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5982[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_LoadAsset_Blocking_ReturnValue;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_DynamicCast_As__2D;                         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_GamepadKeyboard_Tips_Single_C_SetIcon) == 0x000008, "Wrong alignment on WB_GamepadKeyboard_Tips_Single_C_SetIcon");
static_assert(sizeof(WB_GamepadKeyboard_Tips_Single_C_SetIcon) == 0x000048, "Wrong size on WB_GamepadKeyboard_Tips_Single_C_SetIcon");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_SetIcon, Texture) == 0x000000, "Member 'WB_GamepadKeyboard_Tips_Single_C_SetIcon::Texture' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_SetIcon, CallFunc_IsGamepadAttached_Attached) == 0x000028, "Member 'WB_GamepadKeyboard_Tips_Single_C_SetIcon::CallFunc_IsGamepadAttached_Attached' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_SetIcon, CallFunc_LoadAsset_Blocking_ReturnValue) == 0x000030, "Member 'WB_GamepadKeyboard_Tips_Single_C_SetIcon::CallFunc_LoadAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_SetIcon, K2Node_DynamicCast_As__2D) == 0x000038, "Member 'WB_GamepadKeyboard_Tips_Single_C_SetIcon::K2Node_DynamicCast_As__2D' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_SetIcon, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'WB_GamepadKeyboard_Tips_Single_C_SetIcon::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WB_GamepadKeyboard_Tips_Single.WB_GamepadKeyboard_Tips_Single_C.Init
// 0x0048 (0x0048 - 0x0000)
struct WB_GamepadKeyboard_Tips_Single_C_Init final
{
public:
	TSoftObjectPtr<class UTexture2D>              Texture;                                           // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class FText                                   InText;                                            // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_GamepadKeyboard_Tips_Single_C_Init) == 0x000008, "Wrong alignment on WB_GamepadKeyboard_Tips_Single_C_Init");
static_assert(sizeof(WB_GamepadKeyboard_Tips_Single_C_Init) == 0x000048, "Wrong size on WB_GamepadKeyboard_Tips_Single_C_Init");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_Init, Texture) == 0x000000, "Member 'WB_GamepadKeyboard_Tips_Single_C_Init::Texture' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_Init, InText) == 0x000028, "Member 'WB_GamepadKeyboard_Tips_Single_C_Init::InText' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_Init, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000040, "Member 'WB_GamepadKeyboard_Tips_Single_C_Init::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");

// Function WB_GamepadKeyboard_Tips_Single.WB_GamepadKeyboard_Tips_Single_C.IsFuncUnlocked
// 0x0038 (0x0038 - 0x0000)
struct WB_GamepadKeyboard_Tips_Single_C_IsFuncUnlocked final
{
public:
	class FName                                   FuncID;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5983[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHottaPlayerController*                 K2Node_DynamicCast_AsHotta_Player_Controller;      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5984[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHottaPlayerCharacter*                  CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFuncUnlocked_ReturnValue;               // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_GamepadKeyboard_Tips_Single_C_IsFuncUnlocked) == 0x000008, "Wrong alignment on WB_GamepadKeyboard_Tips_Single_C_IsFuncUnlocked");
static_assert(sizeof(WB_GamepadKeyboard_Tips_Single_C_IsFuncUnlocked) == 0x000038, "Wrong size on WB_GamepadKeyboard_Tips_Single_C_IsFuncUnlocked");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_IsFuncUnlocked, FuncID) == 0x000000, "Member 'WB_GamepadKeyboard_Tips_Single_C_IsFuncUnlocked::FuncID' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_IsFuncUnlocked, Ret) == 0x000008, "Member 'WB_GamepadKeyboard_Tips_Single_C_IsFuncUnlocked::Ret' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_IsFuncUnlocked, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000009, "Member 'WB_GamepadKeyboard_Tips_Single_C_IsFuncUnlocked::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_IsFuncUnlocked, CallFunc_GetPlayerController_ReturnValue) == 0x000010, "Member 'WB_GamepadKeyboard_Tips_Single_C_IsFuncUnlocked::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_IsFuncUnlocked, K2Node_DynamicCast_AsHotta_Player_Controller) == 0x000018, "Member 'WB_GamepadKeyboard_Tips_Single_C_IsFuncUnlocked::K2Node_DynamicCast_AsHotta_Player_Controller' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_IsFuncUnlocked, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'WB_GamepadKeyboard_Tips_Single_C_IsFuncUnlocked::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_IsFuncUnlocked, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000028, "Member 'WB_GamepadKeyboard_Tips_Single_C_IsFuncUnlocked::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_IsFuncUnlocked, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'WB_GamepadKeyboard_Tips_Single_C_IsFuncUnlocked::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_IsFuncUnlocked, CallFunc_IsFuncUnlocked_ReturnValue) == 0x000031, "Member 'WB_GamepadKeyboard_Tips_Single_C_IsFuncUnlocked::CallFunc_IsFuncUnlocked_ReturnValue' has a wrong offset!");

// Function WB_GamepadKeyboard_Tips_Single.WB_GamepadKeyboard_Tips_Single_C.SetupCustomKey
// 0x0038 (0x0038 - 0x0000)
struct WB_GamepadKeyboard_Tips_Single_C_SetupCustomKey final
{
public:
	bool                                          CallFunc_IsGamepadAttached_Attached;               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5985[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              CallFunc_GetGamepadIconEx_ReturnValue;             // 0x0008(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsFuncUnlocked_Ret;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_GamepadKeyboard_Tips_Single_C_SetupCustomKey) == 0x000008, "Wrong alignment on WB_GamepadKeyboard_Tips_Single_C_SetupCustomKey");
static_assert(sizeof(WB_GamepadKeyboard_Tips_Single_C_SetupCustomKey) == 0x000038, "Wrong size on WB_GamepadKeyboard_Tips_Single_C_SetupCustomKey");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_SetupCustomKey, CallFunc_IsGamepadAttached_Attached) == 0x000000, "Member 'WB_GamepadKeyboard_Tips_Single_C_SetupCustomKey::CallFunc_IsGamepadAttached_Attached' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_SetupCustomKey, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'WB_GamepadKeyboard_Tips_Single_C_SetupCustomKey::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_SetupCustomKey, CallFunc_GetGamepadIconEx_ReturnValue) == 0x000008, "Member 'WB_GamepadKeyboard_Tips_Single_C_SetupCustomKey::CallFunc_GetGamepadIconEx_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_SetupCustomKey, CallFunc_IsFuncUnlocked_Ret) == 0x000030, "Member 'WB_GamepadKeyboard_Tips_Single_C_SetupCustomKey::CallFunc_IsFuncUnlocked_Ret' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_SetupCustomKey, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000031, "Member 'WB_GamepadKeyboard_Tips_Single_C_SetupCustomKey::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");

// Function WB_GamepadKeyboard_Tips_Single.WB_GamepadKeyboard_Tips_Single_C.BindInputAction
// 0x0080 (0x0080 - 0x0000)
struct WB_GamepadKeyboard_Tips_Single_C_BindInputAction final
{
public:
	bool                                          ___bool_Variable;                                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EGamepadInputActionsType                      ___byte_Variable;                                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGamepadInputActionsType                      ___byte_Variable_1;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGamepadAttached_Attached;               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBreakFateMap_ReturnValue;               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5986[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UQRSLHandleOperationManager*            CallFunc_K2_GetHandleOperatorManager_ReturnValue;  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGamepadInputActionsType                      K2Node_Select_Default;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5987[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UQRSLHandleOperationManager*            CallFunc_K2_GetHandleOperatorManager_ReturnValue_1; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   CallFunc_K2_GetKeyFromActionName_ReturnValue;      // 0x0020(0x0018)(HasGetValueTypeHash)
	struct FInputChord                            K2Node_MakeStruct_InputChord;                      // 0x0038(0x0020)(HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              CallFunc_GetGamepadIcon_ReturnValue;               // 0x0058(0x0028)(UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(WB_GamepadKeyboard_Tips_Single_C_BindInputAction) == 0x000008, "Wrong alignment on WB_GamepadKeyboard_Tips_Single_C_BindInputAction");
static_assert(sizeof(WB_GamepadKeyboard_Tips_Single_C_BindInputAction) == 0x000080, "Wrong size on WB_GamepadKeyboard_Tips_Single_C_BindInputAction");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_BindInputAction, ___bool_Variable) == 0x000000, "Member 'WB_GamepadKeyboard_Tips_Single_C_BindInputAction::___bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_BindInputAction, ___byte_Variable) == 0x000001, "Member 'WB_GamepadKeyboard_Tips_Single_C_BindInputAction::___byte_Variable' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_BindInputAction, ___byte_Variable_1) == 0x000002, "Member 'WB_GamepadKeyboard_Tips_Single_C_BindInputAction::___byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_BindInputAction, CallFunc_IsGamepadAttached_Attached) == 0x000003, "Member 'WB_GamepadKeyboard_Tips_Single_C_BindInputAction::CallFunc_IsGamepadAttached_Attached' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_BindInputAction, CallFunc_IsBreakFateMap_ReturnValue) == 0x000004, "Member 'WB_GamepadKeyboard_Tips_Single_C_BindInputAction::CallFunc_IsBreakFateMap_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_BindInputAction, CallFunc_K2_GetHandleOperatorManager_ReturnValue) == 0x000008, "Member 'WB_GamepadKeyboard_Tips_Single_C_BindInputAction::CallFunc_K2_GetHandleOperatorManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_BindInputAction, K2Node_Select_Default) == 0x000010, "Member 'WB_GamepadKeyboard_Tips_Single_C_BindInputAction::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_BindInputAction, CallFunc_K2_GetHandleOperatorManager_ReturnValue_1) == 0x000018, "Member 'WB_GamepadKeyboard_Tips_Single_C_BindInputAction::CallFunc_K2_GetHandleOperatorManager_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_BindInputAction, CallFunc_K2_GetKeyFromActionName_ReturnValue) == 0x000020, "Member 'WB_GamepadKeyboard_Tips_Single_C_BindInputAction::CallFunc_K2_GetKeyFromActionName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_BindInputAction, K2Node_MakeStruct_InputChord) == 0x000038, "Member 'WB_GamepadKeyboard_Tips_Single_C_BindInputAction::K2Node_MakeStruct_InputChord' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_BindInputAction, CallFunc_GetGamepadIcon_ReturnValue) == 0x000058, "Member 'WB_GamepadKeyboard_Tips_Single_C_BindInputAction::CallFunc_GetGamepadIcon_ReturnValue' has a wrong offset!");

// Function WB_GamepadKeyboard_Tips_Single.WB_GamepadKeyboard_Tips_Single_C.RenameInputActionOnBreakFate
// 0x0038 (0x0038 - 0x0000)
struct WB_GamepadKeyboard_Tips_Single_C_RenameInputActionOnBreakFate final
{
public:
	bool                                          CallFunc_IsBreakFateMap_ReturnValue;               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5988[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5989[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_GamepadKeyboard_Tips_Single_C_RenameInputActionOnBreakFate) == 0x000008, "Wrong alignment on WB_GamepadKeyboard_Tips_Single_C_RenameInputActionOnBreakFate");
static_assert(sizeof(WB_GamepadKeyboard_Tips_Single_C_RenameInputActionOnBreakFate) == 0x000038, "Wrong size on WB_GamepadKeyboard_Tips_Single_C_RenameInputActionOnBreakFate");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_RenameInputActionOnBreakFate, CallFunc_IsBreakFateMap_ReturnValue) == 0x000000, "Member 'WB_GamepadKeyboard_Tips_Single_C_RenameInputActionOnBreakFate::CallFunc_IsBreakFateMap_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_RenameInputActionOnBreakFate, CallFunc_NotEqual_NameName_ReturnValue) == 0x000001, "Member 'WB_GamepadKeyboard_Tips_Single_C_RenameInputActionOnBreakFate::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_RenameInputActionOnBreakFate, CallFunc_Conv_NameToString_ReturnValue) == 0x000008, "Member 'WB_GamepadKeyboard_Tips_Single_C_RenameInputActionOnBreakFate::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_RenameInputActionOnBreakFate, CallFunc_BooleanAND_ReturnValue) == 0x000018, "Member 'WB_GamepadKeyboard_Tips_Single_C_RenameInputActionOnBreakFate::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_RenameInputActionOnBreakFate, CallFunc_Concat_StrStr_ReturnValue) == 0x000020, "Member 'WB_GamepadKeyboard_Tips_Single_C_RenameInputActionOnBreakFate::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_RenameInputActionOnBreakFate, CallFunc_Conv_StringToName_ReturnValue) == 0x000030, "Member 'WB_GamepadKeyboard_Tips_Single_C_RenameInputActionOnBreakFate::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");

// Function WB_GamepadKeyboard_Tips_Single.WB_GamepadKeyboard_Tips_Single_C.SetIconFromKey
// 0x0048 (0x0048 - 0x0000)
struct WB_GamepadKeyboard_Tips_Single_C_SetIconFromKey final
{
public:
	EGamepadInput                                 Gamepad;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGamepadAttached_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_598A[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              CallFunc_GetGamepadIconEx_ReturnValue;             // 0x0008(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	class UObject*                                CallFunc_LoadAsset_Blocking_ReturnValue;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_DynamicCast_As__2D;                         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_GamepadKeyboard_Tips_Single_C_SetIconFromKey) == 0x000008, "Wrong alignment on WB_GamepadKeyboard_Tips_Single_C_SetIconFromKey");
static_assert(sizeof(WB_GamepadKeyboard_Tips_Single_C_SetIconFromKey) == 0x000048, "Wrong size on WB_GamepadKeyboard_Tips_Single_C_SetIconFromKey");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_SetIconFromKey, Gamepad) == 0x000000, "Member 'WB_GamepadKeyboard_Tips_Single_C_SetIconFromKey::Gamepad' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_SetIconFromKey, CallFunc_IsGamepadAttached_ReturnValue) == 0x000001, "Member 'WB_GamepadKeyboard_Tips_Single_C_SetIconFromKey::CallFunc_IsGamepadAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_SetIconFromKey, CallFunc_GetGamepadIconEx_ReturnValue) == 0x000008, "Member 'WB_GamepadKeyboard_Tips_Single_C_SetIconFromKey::CallFunc_GetGamepadIconEx_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_SetIconFromKey, CallFunc_LoadAsset_Blocking_ReturnValue) == 0x000030, "Member 'WB_GamepadKeyboard_Tips_Single_C_SetIconFromKey::CallFunc_LoadAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_SetIconFromKey, K2Node_DynamicCast_As__2D) == 0x000038, "Member 'WB_GamepadKeyboard_Tips_Single_C_SetIconFromKey::K2Node_DynamicCast_As__2D' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_SetIconFromKey, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'WB_GamepadKeyboard_Tips_Single_C_SetIconFromKey::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WB_GamepadKeyboard_Tips_Single.WB_GamepadKeyboard_Tips_Single_C.IsGamepadAttached
// 0x0004 (0x0004 - 0x0000)
struct WB_GamepadKeyboard_Tips_Single_C_IsGamepadAttached final
{
public:
	bool                                          Attached;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsGamepadAttached_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsGamepadAttached_ReturnValue_1;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCloudGame_ReturnValue;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_GamepadKeyboard_Tips_Single_C_IsGamepadAttached) == 0x000001, "Wrong alignment on WB_GamepadKeyboard_Tips_Single_C_IsGamepadAttached");
static_assert(sizeof(WB_GamepadKeyboard_Tips_Single_C_IsGamepadAttached) == 0x000004, "Wrong size on WB_GamepadKeyboard_Tips_Single_C_IsGamepadAttached");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_IsGamepadAttached, Attached) == 0x000000, "Member 'WB_GamepadKeyboard_Tips_Single_C_IsGamepadAttached::Attached' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_IsGamepadAttached, CallFunc_IsGamepadAttached_ReturnValue) == 0x000001, "Member 'WB_GamepadKeyboard_Tips_Single_C_IsGamepadAttached::CallFunc_IsGamepadAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_IsGamepadAttached, CallFunc_IsGamepadAttached_ReturnValue_1) == 0x000002, "Member 'WB_GamepadKeyboard_Tips_Single_C_IsGamepadAttached::CallFunc_IsGamepadAttached_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_GamepadKeyboard_Tips_Single_C_IsGamepadAttached, CallFunc_IsCloudGame_ReturnValue) == 0x000003, "Member 'WB_GamepadKeyboard_Tips_Single_C_IsGamepadAttached::CallFunc_IsCloudGame_ReturnValue' has a wrong offset!");

}

