#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Mon_hum_009

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "HottaFramework_structs.hpp"
#include "MonsterCharacterBP_Base_classes.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass mon_hum_009.mon_hum_009_C
// 0x0080 (0x3BB0 - 0x3B30)
class AMon_hum_009_C final : public AMonsterCharacterBP_Base_C
{
public:
	uint8                                         Pad_55B5[0x4];                                     // 0x3B24(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_Mon_hum_009_C;                      // 0x3B28(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Jumpcheck;                                         // 0x3B30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x3B38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UQRSLChangeMeshColorComponent*          QRSLChangeMeshColor;                               // 0x3B40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSleep;                                           // 0x3B48(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          TempSleep;                                         // 0x3B49(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          NightColor;                                        // 0x3B4A(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55B6[0x1];                                     // 0x3B4B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         JumpSpeed;                                         // 0x3B4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CanJumpFallingSpeed;                               // 0x3B50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalToLaunch;                                    // 0x3B54(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThresholdToVertical;                               // 0x3B60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitDropChance;                                     // 0x3B64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitDropCD;                                         // 0x3B68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastHitDropTime;                                   // 0x3B6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHottaCharacter*                        Player;                                            // 0x3B70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImpactNormal;                                      // 0x3B78(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanBeInclined;                                     // 0x3B84(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55B7[0x3];                                     // 0x3B85(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UnsilentTime;                                      // 0x3B88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AlwaysPeace;                                       // 0x3B8C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55B8[0x3];                                     // 0x3B8D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAIIdleStateEntry>              PeaceIdleStateEntry;                               // 0x3B90(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	class AQRSLMountCharacter*                    MountPlayer;                                       // 0x3BA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OverlapSpeed;                                      // 0x3BA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AlwaysCanBeAttacked;                               // 0x3BAC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_mon_hum_009(int32 EntryPoint);
	void OnTimeHourChange____0(int32 InTimeHour);
	void OnUnsilent____0();
	void OnDamaged(float DamageAmount, const struct FHitResult& HitInfo, const struct FGameplayTagContainer& DamageTags, TSubclassOf<class UGameplayEffect> DamageGameplayEffect, class AHottaCharacter* InstigatorCharacter, class AActor* DamageCauser);
	void OnDeadStateChanged(bool bDeadState, class AHottaCharacter* InstigatorCharacter, class AActor* DamageCauser);
	void ReceiveBeginPlay();
	void BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ChangeBehaviorTreeByState(bool Param_IsSleep);
	void ChangeColorByState(bool Param_IsSleep);
	void ChangeDropBuffByState(bool Param_IsSleep);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"mon_hum_009_C">();
	}
	static class AMon_hum_009_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMon_hum_009_C>();
	}
};
static_assert(alignof(AMon_hum_009_C) == 0x000010, "Wrong alignment on AMon_hum_009_C");
static_assert(sizeof(AMon_hum_009_C) == 0x003BB0, "Wrong size on AMon_hum_009_C");
static_assert(offsetof(AMon_hum_009_C, UberGraphFrame_Mon_hum_009_C) == 0x003B28, "Member 'AMon_hum_009_C::UberGraphFrame_Mon_hum_009_C' has a wrong offset!");
static_assert(offsetof(AMon_hum_009_C, Jumpcheck) == 0x003B30, "Member 'AMon_hum_009_C::Jumpcheck' has a wrong offset!");
static_assert(offsetof(AMon_hum_009_C, Box) == 0x003B38, "Member 'AMon_hum_009_C::Box' has a wrong offset!");
static_assert(offsetof(AMon_hum_009_C, QRSLChangeMeshColor) == 0x003B40, "Member 'AMon_hum_009_C::QRSLChangeMeshColor' has a wrong offset!");
static_assert(offsetof(AMon_hum_009_C, IsSleep) == 0x003B48, "Member 'AMon_hum_009_C::IsSleep' has a wrong offset!");
static_assert(offsetof(AMon_hum_009_C, TempSleep) == 0x003B49, "Member 'AMon_hum_009_C::TempSleep' has a wrong offset!");
static_assert(offsetof(AMon_hum_009_C, NightColor) == 0x003B4A, "Member 'AMon_hum_009_C::NightColor' has a wrong offset!");
static_assert(offsetof(AMon_hum_009_C, JumpSpeed) == 0x003B4C, "Member 'AMon_hum_009_C::JumpSpeed' has a wrong offset!");
static_assert(offsetof(AMon_hum_009_C, CanJumpFallingSpeed) == 0x003B50, "Member 'AMon_hum_009_C::CanJumpFallingSpeed' has a wrong offset!");
static_assert(offsetof(AMon_hum_009_C, NormalToLaunch) == 0x003B54, "Member 'AMon_hum_009_C::NormalToLaunch' has a wrong offset!");
static_assert(offsetof(AMon_hum_009_C, ThresholdToVertical) == 0x003B60, "Member 'AMon_hum_009_C::ThresholdToVertical' has a wrong offset!");
static_assert(offsetof(AMon_hum_009_C, HitDropChance) == 0x003B64, "Member 'AMon_hum_009_C::HitDropChance' has a wrong offset!");
static_assert(offsetof(AMon_hum_009_C, HitDropCD) == 0x003B68, "Member 'AMon_hum_009_C::HitDropCD' has a wrong offset!");
static_assert(offsetof(AMon_hum_009_C, LastHitDropTime) == 0x003B6C, "Member 'AMon_hum_009_C::LastHitDropTime' has a wrong offset!");
static_assert(offsetof(AMon_hum_009_C, Player) == 0x003B70, "Member 'AMon_hum_009_C::Player' has a wrong offset!");
static_assert(offsetof(AMon_hum_009_C, ImpactNormal) == 0x003B78, "Member 'AMon_hum_009_C::ImpactNormal' has a wrong offset!");
static_assert(offsetof(AMon_hum_009_C, CanBeInclined) == 0x003B84, "Member 'AMon_hum_009_C::CanBeInclined' has a wrong offset!");
static_assert(offsetof(AMon_hum_009_C, UnsilentTime) == 0x003B88, "Member 'AMon_hum_009_C::UnsilentTime' has a wrong offset!");
static_assert(offsetof(AMon_hum_009_C, AlwaysPeace) == 0x003B8C, "Member 'AMon_hum_009_C::AlwaysPeace' has a wrong offset!");
static_assert(offsetof(AMon_hum_009_C, PeaceIdleStateEntry) == 0x003B90, "Member 'AMon_hum_009_C::PeaceIdleStateEntry' has a wrong offset!");
static_assert(offsetof(AMon_hum_009_C, MountPlayer) == 0x003BA0, "Member 'AMon_hum_009_C::MountPlayer' has a wrong offset!");
static_assert(offsetof(AMon_hum_009_C, OverlapSpeed) == 0x003BA8, "Member 'AMon_hum_009_C::OverlapSpeed' has a wrong offset!");
static_assert(offsetof(AMon_hum_009_C, AlwaysCanBeAttacked) == 0x003BAC, "Member 'AMon_hum_009_C::AlwaysCanBeAttacked' has a wrong offset!");

}

