#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HottaFoundation

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "HottaFoundation_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function HottaFoundation.HottaGameplayStatics.GetAkComponent
// 0x0030 (0x0030 - 0x0000)
struct HottaGameplayStatics_GetAkComponent final
{
public:
	class USceneComponent*                        AttachToComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ComponentCreated;                                  // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F08[0x3];                                      // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachPointName;                                   // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               LocationType;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F09[0x3];                                      // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OcclusionRefreshInterval;                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkComponent*                           ReturnValue;                                       // 0x0028(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HottaGameplayStatics_GetAkComponent) == 0x000008, "Wrong alignment on HottaGameplayStatics_GetAkComponent");
static_assert(sizeof(HottaGameplayStatics_GetAkComponent) == 0x000030, "Wrong size on HottaGameplayStatics_GetAkComponent");
static_assert(offsetof(HottaGameplayStatics_GetAkComponent, AttachToComponent) == 0x000000, "Member 'HottaGameplayStatics_GetAkComponent::AttachToComponent' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_GetAkComponent, ComponentCreated) == 0x000008, "Member 'HottaGameplayStatics_GetAkComponent::ComponentCreated' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_GetAkComponent, AttachPointName) == 0x00000C, "Member 'HottaGameplayStatics_GetAkComponent::AttachPointName' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_GetAkComponent, Location) == 0x000014, "Member 'HottaGameplayStatics_GetAkComponent::Location' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_GetAkComponent, LocationType) == 0x000020, "Member 'HottaGameplayStatics_GetAkComponent::LocationType' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_GetAkComponent, OcclusionRefreshInterval) == 0x000024, "Member 'HottaGameplayStatics_GetAkComponent::OcclusionRefreshInterval' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_GetAkComponent, ReturnValue) == 0x000028, "Member 'HottaGameplayStatics_GetAkComponent::ReturnValue' has a wrong offset!");

// Function HottaFoundation.HottaGameplayStatics.PostEvent
// 0x0058 (0x0058 - 0x0000)
struct HottaGameplayStatics_PostEvent final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CallbackMask;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> PostEventCallback;                                 // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0A[0x4];                                      // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          ExternalSources;                                   // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAttachedToDestroyed;                      // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0B[0x7];                                      // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventName;                                         // 0x0040(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionRefreshInterval;                          // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0054(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HottaGameplayStatics_PostEvent) == 0x000008, "Wrong alignment on HottaGameplayStatics_PostEvent");
static_assert(sizeof(HottaGameplayStatics_PostEvent) == 0x000058, "Wrong size on HottaGameplayStatics_PostEvent");
static_assert(offsetof(HottaGameplayStatics_PostEvent, AkEvent) == 0x000000, "Member 'HottaGameplayStatics_PostEvent::AkEvent' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_PostEvent, Actor) == 0x000008, "Member 'HottaGameplayStatics_PostEvent::Actor' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_PostEvent, CallbackMask) == 0x000010, "Member 'HottaGameplayStatics_PostEvent::CallbackMask' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_PostEvent, PostEventCallback) == 0x000014, "Member 'HottaGameplayStatics_PostEvent::PostEventCallback' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_PostEvent, ExternalSources) == 0x000028, "Member 'HottaGameplayStatics_PostEvent::ExternalSources' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_PostEvent, bStopWhenAttachedToDestroyed) == 0x000038, "Member 'HottaGameplayStatics_PostEvent::bStopWhenAttachedToDestroyed' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_PostEvent, EventName) == 0x000040, "Member 'HottaGameplayStatics_PostEvent::EventName' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_PostEvent, OcclusionRefreshInterval) == 0x000050, "Member 'HottaGameplayStatics_PostEvent::OcclusionRefreshInterval' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_PostEvent, ReturnValue) == 0x000054, "Member 'HottaGameplayStatics_PostEvent::ReturnValue' has a wrong offset!");

// Function HottaFoundation.HottaGameplayStatics.PostEventAttached
// 0x0038 (0x0038 - 0x0000)
struct HottaGameplayStatics_PostEventAttached final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAttachedToDestroyed;                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0C[0x7];                                      // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventName;                                         // 0x0020(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionRefreshInterval;                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HottaGameplayStatics_PostEventAttached) == 0x000008, "Wrong alignment on HottaGameplayStatics_PostEventAttached");
static_assert(sizeof(HottaGameplayStatics_PostEventAttached) == 0x000038, "Wrong size on HottaGameplayStatics_PostEventAttached");
static_assert(offsetof(HottaGameplayStatics_PostEventAttached, AkEvent) == 0x000000, "Member 'HottaGameplayStatics_PostEventAttached::AkEvent' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_PostEventAttached, Actor) == 0x000008, "Member 'HottaGameplayStatics_PostEventAttached::Actor' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_PostEventAttached, AttachPointName) == 0x000010, "Member 'HottaGameplayStatics_PostEventAttached::AttachPointName' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_PostEventAttached, bStopWhenAttachedToDestroyed) == 0x000018, "Member 'HottaGameplayStatics_PostEventAttached::bStopWhenAttachedToDestroyed' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_PostEventAttached, EventName) == 0x000020, "Member 'HottaGameplayStatics_PostEventAttached::EventName' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_PostEventAttached, OcclusionRefreshInterval) == 0x000030, "Member 'HottaGameplayStatics_PostEventAttached::OcclusionRefreshInterval' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_PostEventAttached, ReturnValue) == 0x000034, "Member 'HottaGameplayStatics_PostEventAttached::ReturnValue' has a wrong offset!");

// Function HottaFoundation.HottaGameplayStatics.SpawnAkComponentAtLocation
// 0x0068 (0x0068 - 0x0000)
struct HottaGameplayStatics_SpawnAkComponentAtLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AkEvent;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAuxBus*                              EarlyReflectionsBus;                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          AutoPost;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0D[0x7];                                      // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventName;                                         // 0x0038(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EarlyReflectionsBusName;                           // 0x0048(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoDestroy;                                       // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0E[0x3];                                      // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OcclusionRefreshInterval;                          // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkComponent*                           ReturnValue;                                       // 0x0060(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HottaGameplayStatics_SpawnAkComponentAtLocation) == 0x000008, "Wrong alignment on HottaGameplayStatics_SpawnAkComponentAtLocation");
static_assert(sizeof(HottaGameplayStatics_SpawnAkComponentAtLocation) == 0x000068, "Wrong size on HottaGameplayStatics_SpawnAkComponentAtLocation");
static_assert(offsetof(HottaGameplayStatics_SpawnAkComponentAtLocation, WorldContextObject) == 0x000000, "Member 'HottaGameplayStatics_SpawnAkComponentAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_SpawnAkComponentAtLocation, AkEvent) == 0x000008, "Member 'HottaGameplayStatics_SpawnAkComponentAtLocation::AkEvent' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_SpawnAkComponentAtLocation, EarlyReflectionsBus) == 0x000010, "Member 'HottaGameplayStatics_SpawnAkComponentAtLocation::EarlyReflectionsBus' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_SpawnAkComponentAtLocation, Location) == 0x000018, "Member 'HottaGameplayStatics_SpawnAkComponentAtLocation::Location' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_SpawnAkComponentAtLocation, Orientation) == 0x000024, "Member 'HottaGameplayStatics_SpawnAkComponentAtLocation::Orientation' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_SpawnAkComponentAtLocation, AutoPost) == 0x000030, "Member 'HottaGameplayStatics_SpawnAkComponentAtLocation::AutoPost' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_SpawnAkComponentAtLocation, EventName) == 0x000038, "Member 'HottaGameplayStatics_SpawnAkComponentAtLocation::EventName' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_SpawnAkComponentAtLocation, EarlyReflectionsBusName) == 0x000048, "Member 'HottaGameplayStatics_SpawnAkComponentAtLocation::EarlyReflectionsBusName' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_SpawnAkComponentAtLocation, AutoDestroy) == 0x000058, "Member 'HottaGameplayStatics_SpawnAkComponentAtLocation::AutoDestroy' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_SpawnAkComponentAtLocation, OcclusionRefreshInterval) == 0x00005C, "Member 'HottaGameplayStatics_SpawnAkComponentAtLocation::OcclusionRefreshInterval' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_SpawnAkComponentAtLocation, ReturnValue) == 0x000060, "Member 'HottaGameplayStatics_SpawnAkComponentAtLocation::ReturnValue' has a wrong offset!");

// Function HottaFoundation.HottaGameplayStatics.SpawnAkcomponentAttacked
// 0x0048 (0x0048 - 0x0000)
struct HottaGameplayStatics_SpawnAkcomponentAttacked final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachToComponent;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> PostEventCallback;                                 // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EAkCallbackType                               CallbackMask;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0F[0x3];                                      // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachPointName;                                   // 0x0024(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x002C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               LocationType;                                      // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F10[0x3];                                      // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OcclusionRefreshInterval;                          // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkComponent*                           ReturnValue;                                       // 0x0040(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HottaGameplayStatics_SpawnAkcomponentAttacked) == 0x000008, "Wrong alignment on HottaGameplayStatics_SpawnAkcomponentAttacked");
static_assert(sizeof(HottaGameplayStatics_SpawnAkcomponentAttacked) == 0x000048, "Wrong size on HottaGameplayStatics_SpawnAkcomponentAttacked");
static_assert(offsetof(HottaGameplayStatics_SpawnAkcomponentAttacked, AkEvent) == 0x000000, "Member 'HottaGameplayStatics_SpawnAkcomponentAttacked::AkEvent' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_SpawnAkcomponentAttacked, AttachToComponent) == 0x000008, "Member 'HottaGameplayStatics_SpawnAkcomponentAttacked::AttachToComponent' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_SpawnAkcomponentAttacked, PostEventCallback) == 0x000010, "Member 'HottaGameplayStatics_SpawnAkcomponentAttacked::PostEventCallback' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_SpawnAkcomponentAttacked, CallbackMask) == 0x000020, "Member 'HottaGameplayStatics_SpawnAkcomponentAttacked::CallbackMask' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_SpawnAkcomponentAttacked, AttachPointName) == 0x000024, "Member 'HottaGameplayStatics_SpawnAkcomponentAttacked::AttachPointName' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_SpawnAkcomponentAttacked, Location) == 0x00002C, "Member 'HottaGameplayStatics_SpawnAkcomponentAttacked::Location' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_SpawnAkcomponentAttacked, LocationType) == 0x000038, "Member 'HottaGameplayStatics_SpawnAkcomponentAttacked::LocationType' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_SpawnAkcomponentAttacked, OcclusionRefreshInterval) == 0x00003C, "Member 'HottaGameplayStatics_SpawnAkcomponentAttacked::OcclusionRefreshInterval' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_SpawnAkcomponentAttacked, ReturnValue) == 0x000040, "Member 'HottaGameplayStatics_SpawnAkcomponentAttacked::ReturnValue' has a wrong offset!");

// Function HottaFoundation.HottaGameplayStatics.SpawnAkcomponentAttacked2
// 0x0050 (0x0050 - 0x0000)
struct HottaGameplayStatics_SpawnAkcomponentAttacked2 final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachToComponent;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutPlayingID;                                      // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> PostEventCallback;                                 // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	EAkCallbackType                               CallbackMask;                                      // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F11[0x3];                                      // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachPointName;                                   // 0x0028(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0030(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               LocationType;                                      // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F12[0x3];                                      // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OcclusionRefreshInterval;                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F13[0x4];                                      // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           ReturnValue;                                       // 0x0048(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HottaGameplayStatics_SpawnAkcomponentAttacked2) == 0x000008, "Wrong alignment on HottaGameplayStatics_SpawnAkcomponentAttacked2");
static_assert(sizeof(HottaGameplayStatics_SpawnAkcomponentAttacked2) == 0x000050, "Wrong size on HottaGameplayStatics_SpawnAkcomponentAttacked2");
static_assert(offsetof(HottaGameplayStatics_SpawnAkcomponentAttacked2, AkEvent) == 0x000000, "Member 'HottaGameplayStatics_SpawnAkcomponentAttacked2::AkEvent' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_SpawnAkcomponentAttacked2, AttachToComponent) == 0x000008, "Member 'HottaGameplayStatics_SpawnAkcomponentAttacked2::AttachToComponent' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_SpawnAkcomponentAttacked2, OutPlayingID) == 0x000010, "Member 'HottaGameplayStatics_SpawnAkcomponentAttacked2::OutPlayingID' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_SpawnAkcomponentAttacked2, PostEventCallback) == 0x000014, "Member 'HottaGameplayStatics_SpawnAkcomponentAttacked2::PostEventCallback' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_SpawnAkcomponentAttacked2, CallbackMask) == 0x000024, "Member 'HottaGameplayStatics_SpawnAkcomponentAttacked2::CallbackMask' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_SpawnAkcomponentAttacked2, AttachPointName) == 0x000028, "Member 'HottaGameplayStatics_SpawnAkcomponentAttacked2::AttachPointName' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_SpawnAkcomponentAttacked2, Location) == 0x000030, "Member 'HottaGameplayStatics_SpawnAkcomponentAttacked2::Location' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_SpawnAkcomponentAttacked2, LocationType) == 0x00003C, "Member 'HottaGameplayStatics_SpawnAkcomponentAttacked2::LocationType' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_SpawnAkcomponentAttacked2, OcclusionRefreshInterval) == 0x000040, "Member 'HottaGameplayStatics_SpawnAkcomponentAttacked2::OcclusionRefreshInterval' has a wrong offset!");
static_assert(offsetof(HottaGameplayStatics_SpawnAkcomponentAttacked2, ReturnValue) == 0x000048, "Member 'HottaGameplayStatics_SpawnAkcomponentAttacked2::ReturnValue' has a wrong offset!");

// Function HottaFoundation.SkeletalMeshMergeFunctionLibrary.MergeSkeletalMeshs
// 0x0060 (0x0060 - 0x0000)
struct SkeletalMeshMergeFunctionLibrary_MergeSkeletalMeshs final
{
public:
	struct FSkeletalMeshMergeOptions              Options;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class USkeletalMesh*>                  CastShadowSkeletalMeshs;                           // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkeletalMeshMergeFunctionLibrary_MergeSkeletalMeshs) == 0x000008, "Wrong alignment on SkeletalMeshMergeFunctionLibrary_MergeSkeletalMeshs");
static_assert(sizeof(SkeletalMeshMergeFunctionLibrary_MergeSkeletalMeshs) == 0x000060, "Wrong size on SkeletalMeshMergeFunctionLibrary_MergeSkeletalMeshs");
static_assert(offsetof(SkeletalMeshMergeFunctionLibrary_MergeSkeletalMeshs, Options) == 0x000000, "Member 'SkeletalMeshMergeFunctionLibrary_MergeSkeletalMeshs::Options' has a wrong offset!");
static_assert(offsetof(SkeletalMeshMergeFunctionLibrary_MergeSkeletalMeshs, CastShadowSkeletalMeshs) == 0x000048, "Member 'SkeletalMeshMergeFunctionLibrary_MergeSkeletalMeshs::CastShadowSkeletalMeshs' has a wrong offset!");
static_assert(offsetof(SkeletalMeshMergeFunctionLibrary_MergeSkeletalMeshs, ReturnValue) == 0x000058, "Member 'SkeletalMeshMergeFunctionLibrary_MergeSkeletalMeshs::ReturnValue' has a wrong offset!");

}

