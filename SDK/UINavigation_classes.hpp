#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UINavigation

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "UINavigation_structs.hpp"
#include "InputCore_structs.hpp"
#include "UMG_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class UINavigation.NavigationWidgetBase
// 0x00E0 (0x0208 - 0x0128)
class UNavigationWidgetBase : public UWidget
{
public:
	struct FMargin                                RectOffset;                                        // 0x0128(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              TouchOffset;                                       // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddToManager;                                     // 0x0140(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreViewportWidgets;                            // 0x0141(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGroup;                                          // 0x0142(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A48[0x5];                                     // 0x0143(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class FName>                             GroupsName;                                        // 0x0148(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A49[0x20];                                    // 0x0198(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FWidgetTags>         Tags;                                              // 0x01B8(0x0050)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)

public:
	bool ContainsAnyTagByDefaultTags(const TSet<class FName>& SubTags);
	bool ContainsTag(class FName MainTag, class FName SubTag);
	bool ContainsTagByDefaultTag(class FName SubTag);
	bool ContainsTagByNavigationTag(class FName SubTag);
	bool ContainsTags(class FName MainTag, TSet<class FName>* SubTags);
	struct FVector2D GetAbsolutePosition();
	struct FVector2D GetDrawSize();
	struct FVector2D GetLocalSize();
	struct FVector2D GetTouchPosition();
	class UWidget* GetUserWidgetChildFromName(class UUserWidget* InUserWidget, class FName InWidgetName);
	struct FVector2D GetWidgetCenterPosition(const class UWidget* InWidget);
	bool IsVisibleRecursive();
	bool IsWidgetReachable(class UWidget* InWidget);

	class UUserWidget* GetOwnerViewportWidget() const;
	class UUserWidget* GetWidgetGeneratedUserWidget(const class UWidget* InWidget) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavigationWidgetBase">();
	}
	static class UNavigationWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavigationWidgetBase>();
	}
};
static_assert(alignof(UNavigationWidgetBase) == 0x000008, "Wrong alignment on UNavigationWidgetBase");
static_assert(sizeof(UNavigationWidgetBase) == 0x000208, "Wrong size on UNavigationWidgetBase");
static_assert(offsetof(UNavigationWidgetBase, RectOffset) == 0x000128, "Member 'UNavigationWidgetBase::RectOffset' has a wrong offset!");
static_assert(offsetof(UNavigationWidgetBase, TouchOffset) == 0x000138, "Member 'UNavigationWidgetBase::TouchOffset' has a wrong offset!");
static_assert(offsetof(UNavigationWidgetBase, bAddToManager) == 0x000140, "Member 'UNavigationWidgetBase::bAddToManager' has a wrong offset!");
static_assert(offsetof(UNavigationWidgetBase, bIgnoreViewportWidgets) == 0x000141, "Member 'UNavigationWidgetBase::bIgnoreViewportWidgets' has a wrong offset!");
static_assert(offsetof(UNavigationWidgetBase, bIsGroup) == 0x000142, "Member 'UNavigationWidgetBase::bIsGroup' has a wrong offset!");
static_assert(offsetof(UNavigationWidgetBase, GroupsName) == 0x000148, "Member 'UNavigationWidgetBase::GroupsName' has a wrong offset!");
static_assert(offsetof(UNavigationWidgetBase, Tags) == 0x0001B8, "Member 'UNavigationWidgetBase::Tags' has a wrong offset!");

// Class UINavigation.CategorySwitcherWidget
// 0x0018 (0x0220 - 0x0208)
class UCategorySwitcherWidget : public UNavigationWidgetBase
{
public:
	class FName                                   CategoryContainerName;                             // 0x0208(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EUINavigationCategoryKey                      CategoryKey;                                       // 0x0210(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A50[0xF];                                     // 0x0211(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SelectCategory(int32 Param_Index);
	bool SelectCategoryFromKey(const struct FKey& Key, EInputEvent InputEvent);
	void SetActivateCategoryIndex(int32 Param_Index);

	int32 GetActivatedCategoryIndex() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CategorySwitcherWidget">();
	}
	static class UCategorySwitcherWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCategorySwitcherWidget>();
	}
};
static_assert(alignof(UCategorySwitcherWidget) == 0x000008, "Wrong alignment on UCategorySwitcherWidget");
static_assert(sizeof(UCategorySwitcherWidget) == 0x000220, "Wrong size on UCategorySwitcherWidget");
static_assert(offsetof(UCategorySwitcherWidget, CategoryContainerName) == 0x000208, "Member 'UCategorySwitcherWidget::CategoryContainerName' has a wrong offset!");
static_assert(offsetof(UCategorySwitcherWidget, CategoryKey) == 0x000210, "Member 'UCategorySwitcherWidget::CategoryKey' has a wrong offset!");

// Class UINavigation.KeysActionWidget
// 0x0160 (0x0368 - 0x0208)
class UKeysActionWidget : public UNavigationWidgetBase
{
public:
	uint8                                         Pad_1A52[0x8];                                     // 0x0208(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EKeysActionInputEvent                         KeysActionInputEvent;                              // 0x0210(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHandledCustomKey;                                 // 0x0211(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableKeyIcon;                                    // 0x0212(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A53[0x5];                                     // 0x0213(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            KeyIcon;                                           // 0x0218(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   WidgetNameToClick;                                 // 0x02A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   GamepadKey;                                        // 0x02A8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   PCKey;                                             // 0x02C0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustomSize;                                       // 0x02D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A54[0x3];                                     // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CustomSize;                                        // 0x02DC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHoldKey;                                        // 0x02E4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A55[0x3];                                     // 0x02E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HoldDuration;                                      // 0x02E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A56[0x4];                                     // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnReceiveActionDelegate;                           // 0x02F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnClickedDelegate;                                 // 0x0300(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A57[0x1];                                     // 0x0310(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsNavigateNextGroup;                              // 0x0311(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A58[0x2];                                     // 0x0312(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   NextGroupName;                                     // 0x0314(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExitCurrentGroup;                                 // 0x031C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A59[0x3];                                     // 0x031D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnClickedDelegateWithObject;                       // 0x0320(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UWidget*                                GamepadContent;                                    // 0x0330(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                KeyboardContent;                                   // 0x0338(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A5A[0x28];                                    // 0x0340(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandledAction(bool InbIsHandled);
	bool HasKeyAction(const struct FKey& Key);
	bool IsGamepadKeyAction();
	bool IsKeyboardKeyAction();
	bool IsPressed();
	bool IsReleased();
	void OnClickedDelegate__DelegateSignature();
	void OnClickedDelegateWithObject__DelegateSignature(class UObject* Object);
	void OnReceiveActionDelegate__DelegateSignature(EInputEvent InputEvent);
	void Rebuild();
	void SetGamepadKeyVisibility(bool NewVisibility);
	void SetPCKeyVisibility(bool NewVisibility);

	bool IsGamepadInputTypeCurrently() const;
	bool IsKeyboardInputTypeCurrently() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KeysActionWidget">();
	}
	static class UKeysActionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKeysActionWidget>();
	}
};
static_assert(alignof(UKeysActionWidget) == 0x000008, "Wrong alignment on UKeysActionWidget");
static_assert(sizeof(UKeysActionWidget) == 0x000368, "Wrong size on UKeysActionWidget");
static_assert(offsetof(UKeysActionWidget, KeysActionInputEvent) == 0x000210, "Member 'UKeysActionWidget::KeysActionInputEvent' has a wrong offset!");
static_assert(offsetof(UKeysActionWidget, bHandledCustomKey) == 0x000211, "Member 'UKeysActionWidget::bHandledCustomKey' has a wrong offset!");
static_assert(offsetof(UKeysActionWidget, bEnableKeyIcon) == 0x000212, "Member 'UKeysActionWidget::bEnableKeyIcon' has a wrong offset!");
static_assert(offsetof(UKeysActionWidget, KeyIcon) == 0x000218, "Member 'UKeysActionWidget::KeyIcon' has a wrong offset!");
static_assert(offsetof(UKeysActionWidget, WidgetNameToClick) == 0x0002A0, "Member 'UKeysActionWidget::WidgetNameToClick' has a wrong offset!");
static_assert(offsetof(UKeysActionWidget, GamepadKey) == 0x0002A8, "Member 'UKeysActionWidget::GamepadKey' has a wrong offset!");
static_assert(offsetof(UKeysActionWidget, PCKey) == 0x0002C0, "Member 'UKeysActionWidget::PCKey' has a wrong offset!");
static_assert(offsetof(UKeysActionWidget, bCustomSize) == 0x0002D8, "Member 'UKeysActionWidget::bCustomSize' has a wrong offset!");
static_assert(offsetof(UKeysActionWidget, CustomSize) == 0x0002DC, "Member 'UKeysActionWidget::CustomSize' has a wrong offset!");
static_assert(offsetof(UKeysActionWidget, bIsHoldKey) == 0x0002E4, "Member 'UKeysActionWidget::bIsHoldKey' has a wrong offset!");
static_assert(offsetof(UKeysActionWidget, HoldDuration) == 0x0002E8, "Member 'UKeysActionWidget::HoldDuration' has a wrong offset!");
static_assert(offsetof(UKeysActionWidget, OnReceiveActionDelegate) == 0x0002F0, "Member 'UKeysActionWidget::OnReceiveActionDelegate' has a wrong offset!");
static_assert(offsetof(UKeysActionWidget, OnClickedDelegate) == 0x000300, "Member 'UKeysActionWidget::OnClickedDelegate' has a wrong offset!");
static_assert(offsetof(UKeysActionWidget, bIsNavigateNextGroup) == 0x000311, "Member 'UKeysActionWidget::bIsNavigateNextGroup' has a wrong offset!");
static_assert(offsetof(UKeysActionWidget, NextGroupName) == 0x000314, "Member 'UKeysActionWidget::NextGroupName' has a wrong offset!");
static_assert(offsetof(UKeysActionWidget, bExitCurrentGroup) == 0x00031C, "Member 'UKeysActionWidget::bExitCurrentGroup' has a wrong offset!");
static_assert(offsetof(UKeysActionWidget, OnClickedDelegateWithObject) == 0x000320, "Member 'UKeysActionWidget::OnClickedDelegateWithObject' has a wrong offset!");
static_assert(offsetof(UKeysActionWidget, GamepadContent) == 0x000330, "Member 'UKeysActionWidget::GamepadContent' has a wrong offset!");
static_assert(offsetof(UKeysActionWidget, KeyboardContent) == 0x000338, "Member 'UKeysActionWidget::KeyboardContent' has a wrong offset!");

// Class UINavigation.NavigationProcessorWidget
// 0x0018 (0x0298 - 0x0280)
class UNavigationProcessorWidget : public UUserWidget
{
public:
	uint8                                         Pad_1A5C[0x10];                                    // 0x0280(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bBindWidgetFocusDelegate;                          // 0x0290(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBindWidgetSelectedDelegate;                       // 0x0291(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bReceiveAxisInput;                                 // 0x0292(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A5D[0x5];                                     // 0x0293(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UWidget* BP_GetWidgetFromName(class UUserWidget* InUserWidget, class FName WidgetName);
	bool BP_HandleInputAxis(const struct FVector2D& LeftStickValue, const struct FVector2D& RightStickValue);
	bool BP_HandleInputKey(const struct FKey& Key, EInputEvent InputEvent);
	bool BP_HandleNavigation(const struct FKey& Key, EInputEvent InputEvent);
	void BP_OnWidgetFocused(class UUINavigationWidget* InWidget);
	void BP_OnWidgetUnFocused(class UUINavigationWidget* InWidget);
	class UUserWidget* GetEntryWidgetFromItem(const class UListView* InListView, const class UObject* InItem);
	class UUserWidget* GetOwnerUserWidget(class UWidget* InWidget);
	class UUserWidget* GetOwnerViewportWidget();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavigationProcessorWidget">();
	}
	static class UNavigationProcessorWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavigationProcessorWidget>();
	}
};
static_assert(alignof(UNavigationProcessorWidget) == 0x000008, "Wrong alignment on UNavigationProcessorWidget");
static_assert(sizeof(UNavigationProcessorWidget) == 0x000298, "Wrong size on UNavigationProcessorWidget");
static_assert(offsetof(UNavigationProcessorWidget, bBindWidgetFocusDelegate) == 0x000290, "Member 'UNavigationProcessorWidget::bBindWidgetFocusDelegate' has a wrong offset!");
static_assert(offsetof(UNavigationProcessorWidget, bBindWidgetSelectedDelegate) == 0x000291, "Member 'UNavigationProcessorWidget::bBindWidgetSelectedDelegate' has a wrong offset!");
static_assert(offsetof(UNavigationProcessorWidget, bReceiveAxisInput) == 0x000292, "Member 'UNavigationProcessorWidget::bReceiveAxisInput' has a wrong offset!");

// Class UINavigation.NavigationWidgetClickInterface
// 0x0000 (0x0028 - 0x0028)
class INavigationWidgetClickInterface final : public IInterface
{
public:
	void BP_NavigationInterface_Click();
	void BP_NavigationInterface_Press();
	void BP_NavigationInterface_Release();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavigationWidgetClickInterface">();
	}
	static class INavigationWidgetClickInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<INavigationWidgetClickInterface>();
	}
};
static_assert(alignof(INavigationWidgetClickInterface) == 0x000008, "Wrong alignment on INavigationWidgetClickInterface");
static_assert(sizeof(INavigationWidgetClickInterface) == 0x000028, "Wrong size on INavigationWidgetClickInterface");

// Class UINavigation.ScrollerProcessorWidget
// 0x0020 (0x0228 - 0x0208)
class UScrollerProcessorWidget final : public UNavigationWidgetBase
{
public:
	TArray<class FName>                           ScrollContainersName;                              // 0x0208(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ScrollRate;                                        // 0x0218(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A61[0xC];                                     // 0x021C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScrollerProcessorWidget">();
	}
	static class UScrollerProcessorWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScrollerProcessorWidget>();
	}
};
static_assert(alignof(UScrollerProcessorWidget) == 0x000008, "Wrong alignment on UScrollerProcessorWidget");
static_assert(sizeof(UScrollerProcessorWidget) == 0x000228, "Wrong size on UScrollerProcessorWidget");
static_assert(offsetof(UScrollerProcessorWidget, ScrollContainersName) == 0x000208, "Member 'UScrollerProcessorWidget::ScrollContainersName' has a wrong offset!");
static_assert(offsetof(UScrollerProcessorWidget, ScrollRate) == 0x000218, "Member 'UScrollerProcessorWidget::ScrollRate' has a wrong offset!");

// Class UINavigation.SliderEditorWidget
// 0x0018 (0x0220 - 0x0208)
class USliderEditorWidget final : public UNavigationWidgetBase
{
public:
	class FName                                   SliderName;                                        // 0x0208(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepSize;                                          // 0x0210(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepMultiplier;                                    // 0x0214(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInverse;                                          // 0x0218(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A62[0x7];                                     // 0x0219(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SliderEditorWidget">();
	}
	static class USliderEditorWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USliderEditorWidget>();
	}
};
static_assert(alignof(USliderEditorWidget) == 0x000008, "Wrong alignment on USliderEditorWidget");
static_assert(sizeof(USliderEditorWidget) == 0x000220, "Wrong size on USliderEditorWidget");
static_assert(offsetof(USliderEditorWidget, SliderName) == 0x000208, "Member 'USliderEditorWidget::SliderName' has a wrong offset!");
static_assert(offsetof(USliderEditorWidget, StepSize) == 0x000210, "Member 'USliderEditorWidget::StepSize' has a wrong offset!");
static_assert(offsetof(USliderEditorWidget, StepMultiplier) == 0x000214, "Member 'USliderEditorWidget::StepMultiplier' has a wrong offset!");
static_assert(offsetof(USliderEditorWidget, bInverse) == 0x000218, "Member 'USliderEditorWidget::bInverse' has a wrong offset!");

// Class UINavigation.UINavigationInterface
// 0x0000 (0x0028 - 0x0028)
class IUINavigationInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UINavigationInterface">();
	}
	static class IUINavigationInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IUINavigationInterface>();
	}
};
static_assert(alignof(IUINavigationInterface) == 0x000008, "Wrong alignment on IUINavigationInterface");
static_assert(sizeof(IUINavigationInterface) == 0x000028, "Wrong size on IUINavigationInterface");

// Class UINavigation.UINavigationSubsystem
// 0x02F0 (0x0320 - 0x0030)
class UUINavigationSubsystem : public ULocalPlayerSubsystem
{
public:
	uint8                                         Pad_1A63[0x2B0];                                   // 0x0030(0x02B0)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CF_CursorSpeed;                                    // 0x02E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A64[0x38];                                    // 0x02E8(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UUINavigationSubsystem* Get(const class ULocalPlayer* LocalPlayer);

	void ActivateTab(class UUINavigationWidget* InNavigationWidget, bool bNavigate);
	class UUserWidget* BuildCommandMenus(TSoftClassPtr<class UClass> CommandMenusWidget);
	class UUserWidget* BuildCommandMenusWithKey(const struct FKey& Key, TSoftClassPtr<class UClass> CommandMenusWidget);
	void CancelFocus();
	void ClearCursorRequireKeys();
	void ClearGroups();
	void EnableEvaluateWindowsMouseCursor(bool bEnable);
	bool ExitCurrentGroup();
	bool ExitGroup(class FName NextGroupName);
	EGamepadCursorMoveMethod GetCursorMoveMethod();
	EGamepadCursorMoveMode GetCursorMoveMode();
	float GetCursorSensitivity();
	struct FVector2D GetCursorSpeed(const struct FVector2D& AxisValue);
	class UUINavigationWidget* GetFocusedWidgetFromTopViewportWidget();
	class UKeysActionWidget* GetKeysAction(class FName WidgetName);
	class UUserWidget* GetTopViewportWidget();
	class UUINavigationWidget* GetUINavigationWidget(class FName WidgetName);
	void HideCursor();
	bool IsKeyDown(const struct FKey& Key);
	bool IsNavigationEnabled();
	bool IsTopViewportWidget(class UUserWidget* InUserWidget);
	void NavigateToWidget(class UUINavigationWidget* InNavigationWidget, bool bCancelFocusedWidget);
	void PushViewportWidget(class UUserWidget* InUserWidget);
	bool ReleaseCommandMenus();
	void RemoveViewportWidget(class UUserWidget* InUserWidget);
	bool RequestNavigateToNextGroup(class FName NextGroupName);
	void ResetCursorRequireKeys();
	void SetCursorMoveMethod(EGamepadCursorMoveMethod MoveMethod);
	void SetCursorMoveMode(EGamepadCursorMoveMode MoveMode);
	void SetCursorSensitivity(float Sensitivity);
	void SetCursorSlowDown(float Value);
	void SetNavigationEnable(bool bEnableNavigation);
	void ShowCursor();
	void ShowOrHideCursor();
	void SimulateTouched(const struct FVector2D& TouchLocation);
	void SimulateTouchEnded(const struct FVector2D& TouchLocation);
	void SimulateTouchMoved(const struct FVector2D& TouchLocation);
	void SimulateTouchStarted(const struct FVector2D& TouchLocation);

	bool IsCursorVisible() const;
	bool IsGamepadInputType() const;
	bool IsKeyboardEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UINavigationSubsystem">();
	}
	static class UUINavigationSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUINavigationSubsystem>();
	}
};
static_assert(alignof(UUINavigationSubsystem) == 0x000008, "Wrong alignment on UUINavigationSubsystem");
static_assert(sizeof(UUINavigationSubsystem) == 0x000320, "Wrong size on UUINavigationSubsystem");
static_assert(offsetof(UUINavigationSubsystem, CF_CursorSpeed) == 0x0002E0, "Member 'UUINavigationSubsystem::CF_CursorSpeed' has a wrong offset!");

// Class UINavigation.UINavigationDataAsset
// 0x0098 (0x00C8 - 0x0030)
class UUINavigationDataAsset final : public UDataAsset
{
public:
	bool                                          bEnableKeyboard;                                   // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlaySoundOnNavigated;                             // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A6B[0x6];                                     // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   CursorWidget;                                      // 0x0038(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           CursorRequireKeys;                                 // 0x0060(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CF_CursorSpeed;                                    // 0x0070(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, TSoftObjectPtr<class UDataTable>> DataTables;                                        // 0x0078(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UINavigationDataAsset">();
	}
	static class UUINavigationDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUINavigationDataAsset>();
	}
};
static_assert(alignof(UUINavigationDataAsset) == 0x000008, "Wrong alignment on UUINavigationDataAsset");
static_assert(sizeof(UUINavigationDataAsset) == 0x0000C8, "Wrong size on UUINavigationDataAsset");
static_assert(offsetof(UUINavigationDataAsset, bEnableKeyboard) == 0x000030, "Member 'UUINavigationDataAsset::bEnableKeyboard' has a wrong offset!");
static_assert(offsetof(UUINavigationDataAsset, bPlaySoundOnNavigated) == 0x000031, "Member 'UUINavigationDataAsset::bPlaySoundOnNavigated' has a wrong offset!");
static_assert(offsetof(UUINavigationDataAsset, CursorWidget) == 0x000038, "Member 'UUINavigationDataAsset::CursorWidget' has a wrong offset!");
static_assert(offsetof(UUINavigationDataAsset, CursorRequireKeys) == 0x000060, "Member 'UUINavigationDataAsset::CursorRequireKeys' has a wrong offset!");
static_assert(offsetof(UUINavigationDataAsset, CF_CursorSpeed) == 0x000070, "Member 'UUINavigationDataAsset::CF_CursorSpeed' has a wrong offset!");
static_assert(offsetof(UUINavigationDataAsset, DataTables) == 0x000078, "Member 'UUINavigationDataAsset::DataTables' has a wrong offset!");

// Class UINavigation.UINavigationWidget
// 0x01B0 (0x03B8 - 0x0208)
class UUINavigationWidget final : public UNavigationWidgetBase
{
public:
	FMulticastInlineDelegateProperty_             ReceiveFocus;                                      // 0x0208(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             LostFocus;                                         // 0x0218(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TDelegate<void()>                             FocusBrushDelegate;                                // 0x0228(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateBrush                            FocusedBrush;                                      // 0x0238(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   WidgetNameToClick;                                 // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTab;                                            // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FocusedOnCreated;                                  // 0x02C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFocusedAnyway;                                    // 0x02CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SelectOnFocused;                                   // 0x02CB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTouchable;                                      // 0x02CC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnFocusOnSelected;                                // 0x02CD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDraggable;                                      // 0x02CE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlaySoundOnFocused;                               // 0x02CF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoundName;                                         // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUINavigatedScrollParams               ScrollParams;                                      // 0x02D8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EUINavigationWidgetType                       FocusWidgetType;                                   // 0x02E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A6C[0x3];                                     // 0x02E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SliderName;                                        // 0x02E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SliderStepSizeMultiplier;                          // 0x02F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepSize;                                          // 0x02F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CustomFocusWidgetType;                             // 0x02F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A6D[0x3];                                     // 0x02F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStaticNavigations                     StaticNavigations;                                 // 0x02FC(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   NameToListenSelectedWidget;                        // 0x0314(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableScrollOnFocused;                            // 0x031C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A6E[0x9B];                                    // 0x031D(0x009B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateTab();
	void DeactivateTab();
	void FocusEventDelegate__DelegateSignature();
	bool IsTabActivated();
	void OnEntryReleased();
	void OnEntrySet();
	void OnLostFocus();
	void OnReceiveFocus();
	void OnSelected();
	void Rebuild();
	void RebuildFromNavigationSubsystem(class UUINavigationSubsystem* UINavigationSubsystem);
	void ReleaseFromNavigationSubsystem(class UUINavigationSubsystem* UINavigationSubsystem);
	void SetEnableFocus(bool bEnableFocus);
	void SetFocusBrush(const struct FSlateBrush& InBrush);
	void SetRectOffset(const struct FMargin& InRectOffset);

	uint8 GetCustomFocusWidgetType() const;
	int32 GetIndexInWrapper() const;
	EUINavigationWidgetType GetNavigationWidgetType() const;
	int32 GetStaticNavigationIndex_Down() const;
	int32 GetStaticNavigationIndex_Left() const;
	int32 GetStaticNavigationIndex_Right() const;
	int32 GetStaticNavigationIndex_Self() const;
	int32 GetStaticNavigationIndex_Up() const;
	bool HasFocus() const;
	bool IsStaticNavigationAutoCalculateLeftOrRight() const;
	bool IsStaticNavigationWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UINavigationWidget">();
	}
	static class UUINavigationWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUINavigationWidget>();
	}
};
static_assert(alignof(UUINavigationWidget) == 0x000008, "Wrong alignment on UUINavigationWidget");
static_assert(sizeof(UUINavigationWidget) == 0x0003B8, "Wrong size on UUINavigationWidget");
static_assert(offsetof(UUINavigationWidget, ReceiveFocus) == 0x000208, "Member 'UUINavigationWidget::ReceiveFocus' has a wrong offset!");
static_assert(offsetof(UUINavigationWidget, LostFocus) == 0x000218, "Member 'UUINavigationWidget::LostFocus' has a wrong offset!");
static_assert(offsetof(UUINavigationWidget, FocusBrushDelegate) == 0x000228, "Member 'UUINavigationWidget::FocusBrushDelegate' has a wrong offset!");
static_assert(offsetof(UUINavigationWidget, FocusedBrush) == 0x000238, "Member 'UUINavigationWidget::FocusedBrush' has a wrong offset!");
static_assert(offsetof(UUINavigationWidget, WidgetNameToClick) == 0x0002C0, "Member 'UUINavigationWidget::WidgetNameToClick' has a wrong offset!");
static_assert(offsetof(UUINavigationWidget, bIsTab) == 0x0002C8, "Member 'UUINavigationWidget::bIsTab' has a wrong offset!");
static_assert(offsetof(UUINavigationWidget, FocusedOnCreated) == 0x0002C9, "Member 'UUINavigationWidget::FocusedOnCreated' has a wrong offset!");
static_assert(offsetof(UUINavigationWidget, bFocusedAnyway) == 0x0002CA, "Member 'UUINavigationWidget::bFocusedAnyway' has a wrong offset!");
static_assert(offsetof(UUINavigationWidget, SelectOnFocused) == 0x0002CB, "Member 'UUINavigationWidget::SelectOnFocused' has a wrong offset!");
static_assert(offsetof(UUINavigationWidget, bIsTouchable) == 0x0002CC, "Member 'UUINavigationWidget::bIsTouchable' has a wrong offset!");
static_assert(offsetof(UUINavigationWidget, bUnFocusOnSelected) == 0x0002CD, "Member 'UUINavigationWidget::bUnFocusOnSelected' has a wrong offset!");
static_assert(offsetof(UUINavigationWidget, bIsDraggable) == 0x0002CE, "Member 'UUINavigationWidget::bIsDraggable' has a wrong offset!");
static_assert(offsetof(UUINavigationWidget, bPlaySoundOnFocused) == 0x0002CF, "Member 'UUINavigationWidget::bPlaySoundOnFocused' has a wrong offset!");
static_assert(offsetof(UUINavigationWidget, SoundName) == 0x0002D0, "Member 'UUINavigationWidget::SoundName' has a wrong offset!");
static_assert(offsetof(UUINavigationWidget, ScrollParams) == 0x0002D8, "Member 'UUINavigationWidget::ScrollParams' has a wrong offset!");
static_assert(offsetof(UUINavigationWidget, FocusWidgetType) == 0x0002E4, "Member 'UUINavigationWidget::FocusWidgetType' has a wrong offset!");
static_assert(offsetof(UUINavigationWidget, SliderName) == 0x0002E8, "Member 'UUINavigationWidget::SliderName' has a wrong offset!");
static_assert(offsetof(UUINavigationWidget, SliderStepSizeMultiplier) == 0x0002F0, "Member 'UUINavigationWidget::SliderStepSizeMultiplier' has a wrong offset!");
static_assert(offsetof(UUINavigationWidget, StepSize) == 0x0002F4, "Member 'UUINavigationWidget::StepSize' has a wrong offset!");
static_assert(offsetof(UUINavigationWidget, CustomFocusWidgetType) == 0x0002F8, "Member 'UUINavigationWidget::CustomFocusWidgetType' has a wrong offset!");
static_assert(offsetof(UUINavigationWidget, StaticNavigations) == 0x0002FC, "Member 'UUINavigationWidget::StaticNavigations' has a wrong offset!");
static_assert(offsetof(UUINavigationWidget, NameToListenSelectedWidget) == 0x000314, "Member 'UUINavigationWidget::NameToListenSelectedWidget' has a wrong offset!");
static_assert(offsetof(UUINavigationWidget, bEnableScrollOnFocused) == 0x00031C, "Member 'UUINavigationWidget::bEnableScrollOnFocused' has a wrong offset!");

}

