#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Oceanology_Plugin

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum Oceanology_Plugin.VolumeTiggerType
// NumValues: 0x0004
enum class EVolumeTiggerType : uint8
{
	VolumeTigger_Distance                    = 0,
	VolumeTigger_Time                        = 1,
	VolumeTigger_House                       = 2,
	VolumeTigger_MAX                         = 3,
};

// Enum Oceanology_Plugin.EInHouseType
// NumValues: 0x0003
enum class EInHouseType : uint8
{
	HT_Camera                                = 1,
	HT_Character                             = 2,
	HT_MAX                                   = 3,
};

// Enum Oceanology_Plugin.EInfinityCategory
// NumValues: 0x0002
enum class EInfinityCategory : uint8
{
	InfiniteOcean                            = 0,
	EInfinityCategory_MAX                    = 1,
};

// Enum Oceanology_Plugin.StandType
// NumValues: 0x0003
enum class EStandType : uint8
{
	ST_LAND                                  = 0,
	ST_Ocean                                 = 1,
	ST_MAX                                   = 2,
};

// ScriptStruct Oceanology_Plugin.HouseLight
// 0x0010 (0x0010 - 0x0000)
struct FHouseLight final
{
public:
	class ALight*                                 Light;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InHouselightDensity;                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutHouselightDensity;                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHouseLight) == 0x000008, "Wrong alignment on FHouseLight");
static_assert(sizeof(FHouseLight) == 0x000010, "Wrong size on FHouseLight");
static_assert(offsetof(FHouseLight, Light) == 0x000000, "Member 'FHouseLight::Light' has a wrong offset!");
static_assert(offsetof(FHouseLight, InHouselightDensity) == 0x000008, "Member 'FHouseLight::InHouselightDensity' has a wrong offset!");
static_assert(offsetof(FHouseLight, OutHouselightDensity) == 0x00000C, "Member 'FHouseLight::OutHouselightDensity' has a wrong offset!");

// ScriptStruct Oceanology_Plugin.PostPrcessMobileDof
// 0x0018 (0x0018 - 0x0000)
struct FPostPrcessMobileDof final
{
public:
	float                                         DepthOfFieldFocalRegion;                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldNearTransitionRegion;                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldFarTransitionRegion;                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldScale;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldNearBlurSize;                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldFarBlurSize;                           // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPostPrcessMobileDof) == 0x000004, "Wrong alignment on FPostPrcessMobileDof");
static_assert(sizeof(FPostPrcessMobileDof) == 0x000018, "Wrong size on FPostPrcessMobileDof");
static_assert(offsetof(FPostPrcessMobileDof, DepthOfFieldFocalRegion) == 0x000000, "Member 'FPostPrcessMobileDof::DepthOfFieldFocalRegion' has a wrong offset!");
static_assert(offsetof(FPostPrcessMobileDof, DepthOfFieldNearTransitionRegion) == 0x000004, "Member 'FPostPrcessMobileDof::DepthOfFieldNearTransitionRegion' has a wrong offset!");
static_assert(offsetof(FPostPrcessMobileDof, DepthOfFieldFarTransitionRegion) == 0x000008, "Member 'FPostPrcessMobileDof::DepthOfFieldFarTransitionRegion' has a wrong offset!");
static_assert(offsetof(FPostPrcessMobileDof, DepthOfFieldScale) == 0x00000C, "Member 'FPostPrcessMobileDof::DepthOfFieldScale' has a wrong offset!");
static_assert(offsetof(FPostPrcessMobileDof, DepthOfFieldNearBlurSize) == 0x000010, "Member 'FPostPrcessMobileDof::DepthOfFieldNearBlurSize' has a wrong offset!");
static_assert(offsetof(FPostPrcessMobileDof, DepthOfFieldFarBlurSize) == 0x000014, "Member 'FPostPrcessMobileDof::DepthOfFieldFarBlurSize' has a wrong offset!");

// ScriptStruct Oceanology_Plugin.PostPrcessDof
// 0x000C (0x000C - 0x0000)
struct FPostPrcessDof final
{
public:
	float                                         FocalDistance;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthBlurkmfor;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthBlurRadius;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPostPrcessDof) == 0x000004, "Wrong alignment on FPostPrcessDof");
static_assert(sizeof(FPostPrcessDof) == 0x00000C, "Wrong size on FPostPrcessDof");
static_assert(offsetof(FPostPrcessDof, FocalDistance) == 0x000000, "Member 'FPostPrcessDof::FocalDistance' has a wrong offset!");
static_assert(offsetof(FPostPrcessDof, DepthBlurkmfor) == 0x000004, "Member 'FPostPrcessDof::DepthBlurkmfor' has a wrong offset!");
static_assert(offsetof(FPostPrcessDof, DepthBlurRadius) == 0x000008, "Member 'FPostPrcessDof::DepthBlurRadius' has a wrong offset!");

// ScriptStruct Oceanology_Plugin.VolumetricFog
// 0x0030 (0x0030 - 0x0000)
struct FVolumetricFog final
{
public:
	float                                         ScatteringDistribution;                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Albedo;                                            // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Emissive;                                          // 0x0014(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtinctionScale;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewDistance;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_175A[0x3];                                     // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVolumetricFog) == 0x000004, "Wrong alignment on FVolumetricFog");
static_assert(sizeof(FVolumetricFog) == 0x000030, "Wrong size on FVolumetricFog");
static_assert(offsetof(FVolumetricFog, ScatteringDistribution) == 0x000000, "Member 'FVolumetricFog::ScatteringDistribution' has a wrong offset!");
static_assert(offsetof(FVolumetricFog, Albedo) == 0x000004, "Member 'FVolumetricFog::Albedo' has a wrong offset!");
static_assert(offsetof(FVolumetricFog, Emissive) == 0x000014, "Member 'FVolumetricFog::Emissive' has a wrong offset!");
static_assert(offsetof(FVolumetricFog, ExtinctionScale) == 0x000024, "Member 'FVolumetricFog::ExtinctionScale' has a wrong offset!");
static_assert(offsetof(FVolumetricFog, ViewDistance) == 0x000028, "Member 'FVolumetricFog::ViewDistance' has a wrong offset!");
static_assert(offsetof(FVolumetricFog, bEnable) == 0x00002C, "Member 'FVolumetricFog::bEnable' has a wrong offset!");

// ScriptStruct Oceanology_Plugin.OceanHeightfog
// 0x0080 (0x0080 - 0x0000)
struct FOceanHeightfog final
{
public:
	float                                         FogHeight;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogDensity;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogHeightFalloff;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FExponentialHeightFogData              SecondFogData;                                     // 0x000C(0x000C)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogInscatteringColor;                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogMaxOpacity;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDistance;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogCutoffDistance;                                 // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringExponent;                   // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringStartDistance;              // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DirectionalInscatteringColor;                      // 0x003C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_175B[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVolumetricFog                         VolumetricFog;                                     // 0x0050(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOceanHeightfog) == 0x000004, "Wrong alignment on FOceanHeightfog");
static_assert(sizeof(FOceanHeightfog) == 0x000080, "Wrong size on FOceanHeightfog");
static_assert(offsetof(FOceanHeightfog, FogHeight) == 0x000000, "Member 'FOceanHeightfog::FogHeight' has a wrong offset!");
static_assert(offsetof(FOceanHeightfog, FogDensity) == 0x000004, "Member 'FOceanHeightfog::FogDensity' has a wrong offset!");
static_assert(offsetof(FOceanHeightfog, FogHeightFalloff) == 0x000008, "Member 'FOceanHeightfog::FogHeightFalloff' has a wrong offset!");
static_assert(offsetof(FOceanHeightfog, SecondFogData) == 0x00000C, "Member 'FOceanHeightfog::SecondFogData' has a wrong offset!");
static_assert(offsetof(FOceanHeightfog, FogInscatteringColor) == 0x000018, "Member 'FOceanHeightfog::FogInscatteringColor' has a wrong offset!");
static_assert(offsetof(FOceanHeightfog, FogMaxOpacity) == 0x000028, "Member 'FOceanHeightfog::FogMaxOpacity' has a wrong offset!");
static_assert(offsetof(FOceanHeightfog, StartDistance) == 0x00002C, "Member 'FOceanHeightfog::StartDistance' has a wrong offset!");
static_assert(offsetof(FOceanHeightfog, FogCutoffDistance) == 0x000030, "Member 'FOceanHeightfog::FogCutoffDistance' has a wrong offset!");
static_assert(offsetof(FOceanHeightfog, DirectionalInscatteringExponent) == 0x000034, "Member 'FOceanHeightfog::DirectionalInscatteringExponent' has a wrong offset!");
static_assert(offsetof(FOceanHeightfog, DirectionalInscatteringStartDistance) == 0x000038, "Member 'FOceanHeightfog::DirectionalInscatteringStartDistance' has a wrong offset!");
static_assert(offsetof(FOceanHeightfog, DirectionalInscatteringColor) == 0x00003C, "Member 'FOceanHeightfog::DirectionalInscatteringColor' has a wrong offset!");
static_assert(offsetof(FOceanHeightfog, bEnable) == 0x00004C, "Member 'FOceanHeightfog::bEnable' has a wrong offset!");
static_assert(offsetof(FOceanHeightfog, VolumetricFog) == 0x000050, "Member 'FOceanHeightfog::VolumetricFog' has a wrong offset!");

// ScriptStruct Oceanology_Plugin.LightShafts
// 0x0020 (0x0020 - 0x0000)
struct FLightShafts final
{
public:
	float                                         BloomScale;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomThreshold;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomMaxBrightness;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BloomTint;                                         // 0x000C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_175C[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLightShafts) == 0x000004, "Wrong alignment on FLightShafts");
static_assert(sizeof(FLightShafts) == 0x000020, "Wrong size on FLightShafts");
static_assert(offsetof(FLightShafts, BloomScale) == 0x000000, "Member 'FLightShafts::BloomScale' has a wrong offset!");
static_assert(offsetof(FLightShafts, BloomThreshold) == 0x000004, "Member 'FLightShafts::BloomThreshold' has a wrong offset!");
static_assert(offsetof(FLightShafts, BloomMaxBrightness) == 0x000008, "Member 'FLightShafts::BloomMaxBrightness' has a wrong offset!");
static_assert(offsetof(FLightShafts, BloomTint) == 0x00000C, "Member 'FLightShafts::BloomTint' has a wrong offset!");
static_assert(offsetof(FLightShafts, Enable) == 0x00001C, "Member 'FLightShafts::Enable' has a wrong offset!");

// ScriptStruct Oceanology_Plugin.DirectionalLightVolume
// 0x0060 (0x0060 - 0x0000)
struct FDirectionalLightVolume final
{
public:
	float                                         LightDensity;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightColor;                                        // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLightColorEnable;                                 // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_175D[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkylightDensity;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkyLightColor;                                     // 0x001C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_175E[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureCube*                           SkyTextureCube;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkylightEnable;                                   // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkyColorlightEnable;                              // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AcceptHottaSky;                                    // 0x003A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkylightAcceptHottaSky;                            // 0x003B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLightShafts                           LightShafts;                                       // 0x003C(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_175F[0x4];                                     // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDirectionalLightVolume) == 0x000008, "Wrong alignment on FDirectionalLightVolume");
static_assert(sizeof(FDirectionalLightVolume) == 0x000060, "Wrong size on FDirectionalLightVolume");
static_assert(offsetof(FDirectionalLightVolume, LightDensity) == 0x000000, "Member 'FDirectionalLightVolume::LightDensity' has a wrong offset!");
static_assert(offsetof(FDirectionalLightVolume, LightColor) == 0x000004, "Member 'FDirectionalLightVolume::LightColor' has a wrong offset!");
static_assert(offsetof(FDirectionalLightVolume, bEnable) == 0x000014, "Member 'FDirectionalLightVolume::bEnable' has a wrong offset!");
static_assert(offsetof(FDirectionalLightVolume, bLightColorEnable) == 0x000015, "Member 'FDirectionalLightVolume::bLightColorEnable' has a wrong offset!");
static_assert(offsetof(FDirectionalLightVolume, SkylightDensity) == 0x000018, "Member 'FDirectionalLightVolume::SkylightDensity' has a wrong offset!");
static_assert(offsetof(FDirectionalLightVolume, SkyLightColor) == 0x00001C, "Member 'FDirectionalLightVolume::SkyLightColor' has a wrong offset!");
static_assert(offsetof(FDirectionalLightVolume, SkyTextureCube) == 0x000030, "Member 'FDirectionalLightVolume::SkyTextureCube' has a wrong offset!");
static_assert(offsetof(FDirectionalLightVolume, bSkylightEnable) == 0x000038, "Member 'FDirectionalLightVolume::bSkylightEnable' has a wrong offset!");
static_assert(offsetof(FDirectionalLightVolume, bSkyColorlightEnable) == 0x000039, "Member 'FDirectionalLightVolume::bSkyColorlightEnable' has a wrong offset!");
static_assert(offsetof(FDirectionalLightVolume, AcceptHottaSky) == 0x00003A, "Member 'FDirectionalLightVolume::AcceptHottaSky' has a wrong offset!");
static_assert(offsetof(FDirectionalLightVolume, SkylightAcceptHottaSky) == 0x00003B, "Member 'FDirectionalLightVolume::SkylightAcceptHottaSky' has a wrong offset!");
static_assert(offsetof(FDirectionalLightVolume, LightShafts) == 0x00003C, "Member 'FDirectionalLightVolume::LightShafts' has a wrong offset!");

// ScriptStruct Oceanology_Plugin.HouseSphereReflectionCapture
// 0x0018 (0x0018 - 0x0000)
struct FHouseSphereReflectionCapture final
{
public:
	class AReflectionCapture*                     ReflectionCapture;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InHouseflectionBrightness;                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutHouseflectionBrightness;                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1760[0x8];                                     // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHouseSphereReflectionCapture) == 0x000008, "Wrong alignment on FHouseSphereReflectionCapture");
static_assert(sizeof(FHouseSphereReflectionCapture) == 0x000018, "Wrong size on FHouseSphereReflectionCapture");
static_assert(offsetof(FHouseSphereReflectionCapture, ReflectionCapture) == 0x000000, "Member 'FHouseSphereReflectionCapture::ReflectionCapture' has a wrong offset!");
static_assert(offsetof(FHouseSphereReflectionCapture, InHouseflectionBrightness) == 0x000008, "Member 'FHouseSphereReflectionCapture::InHouseflectionBrightness' has a wrong offset!");
static_assert(offsetof(FHouseSphereReflectionCapture, OutHouseflectionBrightness) == 0x00000C, "Member 'FHouseSphereReflectionCapture::OutHouseflectionBrightness' has a wrong offset!");

// ScriptStruct Oceanology_Plugin.UnderWaterFogDepthCurve
// 0x0010 (0x0010 - 0x0000)
struct FUnderWaterFogDepthCurve final
{
public:
	class UCurveFloat*                            FogDepthCurve;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1761[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUnderWaterFogDepthCurve) == 0x000008, "Wrong alignment on FUnderWaterFogDepthCurve");
static_assert(sizeof(FUnderWaterFogDepthCurve) == 0x000010, "Wrong size on FUnderWaterFogDepthCurve");
static_assert(offsetof(FUnderWaterFogDepthCurve, FogDepthCurve) == 0x000000, "Member 'FUnderWaterFogDepthCurve::FogDepthCurve' has a wrong offset!");
static_assert(offsetof(FUnderWaterFogDepthCurve, Enable) == 0x000008, "Member 'FUnderWaterFogDepthCurve::Enable' has a wrong offset!");

// ScriptStruct Oceanology_Plugin.UnderWaterTopDownFog
// 0x0028 (0x0028 - 0x0000)
struct FUnderWaterTopDownFog final
{
public:
	struct FLinearColor                           DeepFogColor;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShallowFogColor;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TopDownFogFade;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TopDownFogFalloff;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnderWaterTopDownFog) == 0x000004, "Wrong alignment on FUnderWaterTopDownFog");
static_assert(sizeof(FUnderWaterTopDownFog) == 0x000028, "Wrong size on FUnderWaterTopDownFog");
static_assert(offsetof(FUnderWaterTopDownFog, DeepFogColor) == 0x000000, "Member 'FUnderWaterTopDownFog::DeepFogColor' has a wrong offset!");
static_assert(offsetof(FUnderWaterTopDownFog, ShallowFogColor) == 0x000010, "Member 'FUnderWaterTopDownFog::ShallowFogColor' has a wrong offset!");
static_assert(offsetof(FUnderWaterTopDownFog, TopDownFogFade) == 0x000020, "Member 'FUnderWaterTopDownFog::TopDownFogFade' has a wrong offset!");
static_assert(offsetof(FUnderWaterTopDownFog, TopDownFogFalloff) == 0x000024, "Member 'FUnderWaterTopDownFog::TopDownFogFalloff' has a wrong offset!");

// ScriptStruct Oceanology_Plugin.UnderWaterSunOnFog
// 0x001C (0x001C - 0x0000)
struct FUnderWaterSunOnFog final
{
public:
	struct FLinearColor                           FogSunColor;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogSunHardness;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogSunIntensity;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogSunRadus;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnderWaterSunOnFog) == 0x000004, "Wrong alignment on FUnderWaterSunOnFog");
static_assert(sizeof(FUnderWaterSunOnFog) == 0x00001C, "Wrong size on FUnderWaterSunOnFog");
static_assert(offsetof(FUnderWaterSunOnFog, FogSunColor) == 0x000000, "Member 'FUnderWaterSunOnFog::FogSunColor' has a wrong offset!");
static_assert(offsetof(FUnderWaterSunOnFog, FogSunHardness) == 0x000010, "Member 'FUnderWaterSunOnFog::FogSunHardness' has a wrong offset!");
static_assert(offsetof(FUnderWaterSunOnFog, FogSunIntensity) == 0x000014, "Member 'FUnderWaterSunOnFog::FogSunIntensity' has a wrong offset!");
static_assert(offsetof(FUnderWaterSunOnFog, FogSunRadus) == 0x000018, "Member 'FUnderWaterSunOnFog::FogSunRadus' has a wrong offset!");

// ScriptStruct Oceanology_Plugin.UnderWaterSun
// 0x000C (0x000C - 0x0000)
struct FUnderWaterSun final
{
public:
	float                                         SunHardness;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunIntensity;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunRadius;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnderWaterSun) == 0x000004, "Wrong alignment on FUnderWaterSun");
static_assert(sizeof(FUnderWaterSun) == 0x00000C, "Wrong size on FUnderWaterSun");
static_assert(offsetof(FUnderWaterSun, SunHardness) == 0x000000, "Member 'FUnderWaterSun::SunHardness' has a wrong offset!");
static_assert(offsetof(FUnderWaterSun, SunIntensity) == 0x000004, "Member 'FUnderWaterSun::SunIntensity' has a wrong offset!");
static_assert(offsetof(FUnderWaterSun, SunRadius) == 0x000008, "Member 'FUnderWaterSun::SunRadius' has a wrong offset!");

// ScriptStruct Oceanology_Plugin.UnderWaterFog
// 0x0024 (0x0024 - 0x0000)
struct FUnderWaterFog final
{
public:
	float                                         CustomDepthInensity;                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DarkenFogColorByDepth;                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Density;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogColor;                                          // 0x000C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogFade;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogFalloff;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnderWaterFog) == 0x000004, "Wrong alignment on FUnderWaterFog");
static_assert(sizeof(FUnderWaterFog) == 0x000024, "Wrong size on FUnderWaterFog");
static_assert(offsetof(FUnderWaterFog, CustomDepthInensity) == 0x000000, "Member 'FUnderWaterFog::CustomDepthInensity' has a wrong offset!");
static_assert(offsetof(FUnderWaterFog, DarkenFogColorByDepth) == 0x000004, "Member 'FUnderWaterFog::DarkenFogColorByDepth' has a wrong offset!");
static_assert(offsetof(FUnderWaterFog, Density) == 0x000008, "Member 'FUnderWaterFog::Density' has a wrong offset!");
static_assert(offsetof(FUnderWaterFog, FogColor) == 0x00000C, "Member 'FUnderWaterFog::FogColor' has a wrong offset!");
static_assert(offsetof(FUnderWaterFog, FogFade) == 0x00001C, "Member 'FUnderWaterFog::FogFade' has a wrong offset!");
static_assert(offsetof(FUnderWaterFog, FogFalloff) == 0x000020, "Member 'FUnderWaterFog::FogFalloff' has a wrong offset!");

// ScriptStruct Oceanology_Plugin.UnderWaterDistortion
// 0x000C (0x000C - 0x0000)
struct FUnderWaterDistortion final
{
public:
	float                                         Distortion;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalMapTiling;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnderWaterDistortion) == 0x000004, "Wrong alignment on FUnderWaterDistortion");
static_assert(sizeof(FUnderWaterDistortion) == 0x00000C, "Wrong size on FUnderWaterDistortion");
static_assert(offsetof(FUnderWaterDistortion, Distortion) == 0x000000, "Member 'FUnderWaterDistortion::Distortion' has a wrong offset!");
static_assert(offsetof(FUnderWaterDistortion, NormalMapTiling) == 0x000004, "Member 'FUnderWaterDistortion::NormalMapTiling' has a wrong offset!");
static_assert(offsetof(FUnderWaterDistortion, Speed) == 0x000008, "Member 'FUnderWaterDistortion::Speed' has a wrong offset!");

// ScriptStruct Oceanology_Plugin.UnderWaterBlur
// 0x000C (0x000C - 0x0000)
struct FUnderWaterBlur final
{
public:
	float                                         BlurAmount;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlurFade;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlurFalloff;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnderWaterBlur) == 0x000004, "Wrong alignment on FUnderWaterBlur");
static_assert(sizeof(FUnderWaterBlur) == 0x00000C, "Wrong size on FUnderWaterBlur");
static_assert(offsetof(FUnderWaterBlur, BlurAmount) == 0x000000, "Member 'FUnderWaterBlur::BlurAmount' has a wrong offset!");
static_assert(offsetof(FUnderWaterBlur, BlurFade) == 0x000004, "Member 'FUnderWaterBlur::BlurFade' has a wrong offset!");
static_assert(offsetof(FUnderWaterBlur, BlurFalloff) == 0x000008, "Member 'FUnderWaterBlur::BlurFalloff' has a wrong offset!");

// ScriptStruct Oceanology_Plugin.UnderWaterVolumeTiggerTime
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FUnderWaterVolumeTiggerTime final
{
public:
	uint8                                         Pad_1762[0x10];                                    // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUnderWaterVolumeTiggerTime) == 0x000008, "Wrong alignment on FUnderWaterVolumeTiggerTime");
static_assert(sizeof(FUnderWaterVolumeTiggerTime) == 0x000010, "Wrong size on FUnderWaterVolumeTiggerTime");

}

