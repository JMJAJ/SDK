#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LIEventSubsystem

#include "Basic.hpp"

#include "LIEventSubsystem_structs.hpp"


namespace SDK::Params
{

// Function LIEventSubsystem.LIEventManager.CallEventSafely
// 0x0018 (0x0018 - 0x0000)
struct LIEventManager_CallEventSafely final
{
public:
	struct FEventBase                             EventToCall;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_53BC[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UScriptStruct*                          EventClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53BD[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LIEventManager_CallEventSafely) == 0x000008, "Wrong alignment on LIEventManager_CallEventSafely");
static_assert(sizeof(LIEventManager_CallEventSafely) == 0x000018, "Wrong size on LIEventManager_CallEventSafely");
static_assert(offsetof(LIEventManager_CallEventSafely, EventToCall) == 0x000000, "Member 'LIEventManager_CallEventSafely::EventToCall' has a wrong offset!");
static_assert(offsetof(LIEventManager_CallEventSafely, EventClass) == 0x000008, "Member 'LIEventManager_CallEventSafely::EventClass' has a wrong offset!");
static_assert(offsetof(LIEventManager_CallEventSafely, ReturnValue) == 0x000010, "Member 'LIEventManager_CallEventSafely::ReturnValue' has a wrong offset!");

// Function LIEventSubsystem.LIEventManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct LIEventManager_GetInstance final
{
public:
	class ULIEventManager*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LIEventManager_GetInstance) == 0x000008, "Wrong alignment on LIEventManager_GetInstance");
static_assert(sizeof(LIEventManager_GetInstance) == 0x000008, "Wrong size on LIEventManager_GetInstance");
static_assert(offsetof(LIEventManager_GetInstance, ReturnValue) == 0x000000, "Member 'LIEventManager_GetInstance::ReturnValue' has a wrong offset!");

// Function LIEventSubsystem.LIEventManager.CallEvent
// 0x0010 (0x0010 - 0x0000)
struct LIEventManager_CallEvent final
{
public:
	struct FEventBase                             EventToCall;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_53BE[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UScriptStruct*                          EventClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LIEventManager_CallEvent) == 0x000008, "Wrong alignment on LIEventManager_CallEvent");
static_assert(sizeof(LIEventManager_CallEvent) == 0x000010, "Wrong size on LIEventManager_CallEvent");
static_assert(offsetof(LIEventManager_CallEvent, EventToCall) == 0x000000, "Member 'LIEventManager_CallEvent::EventToCall' has a wrong offset!");
static_assert(offsetof(LIEventManager_CallEvent, EventClass) == 0x000008, "Member 'LIEventManager_CallEvent::EventClass' has a wrong offset!");

// Function LIEventSubsystem.LIEventManager.RegisterEvents
// 0x0010 (0x0010 - 0x0000)
struct LIEventManager_RegisterEvents final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EListenerPriority                             Priority;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEventRegistrationResult                      ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53BF[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LIEventManager_RegisterEvents) == 0x000008, "Wrong alignment on LIEventManager_RegisterEvents");
static_assert(sizeof(LIEventManager_RegisterEvents) == 0x000010, "Wrong size on LIEventManager_RegisterEvents");
static_assert(offsetof(LIEventManager_RegisterEvents, Object) == 0x000000, "Member 'LIEventManager_RegisterEvents::Object' has a wrong offset!");
static_assert(offsetof(LIEventManager_RegisterEvents, Priority) == 0x000008, "Member 'LIEventManager_RegisterEvents::Priority' has a wrong offset!");
static_assert(offsetof(LIEventManager_RegisterEvents, ReturnValue) == 0x000009, "Member 'LIEventManager_RegisterEvents::ReturnValue' has a wrong offset!");

// Function LIEventSubsystem.LIEventManager.RegisterSingleEvent
// 0x0018 (0x0018 - 0x0000)
struct LIEventManager_RegisterSingleEvent final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScriptStruct*                          EventClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EListenerPriority                             Priority;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEventRegistrationResult                      ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53C0[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LIEventManager_RegisterSingleEvent) == 0x000008, "Wrong alignment on LIEventManager_RegisterSingleEvent");
static_assert(sizeof(LIEventManager_RegisterSingleEvent) == 0x000018, "Wrong size on LIEventManager_RegisterSingleEvent");
static_assert(offsetof(LIEventManager_RegisterSingleEvent, Object) == 0x000000, "Member 'LIEventManager_RegisterSingleEvent::Object' has a wrong offset!");
static_assert(offsetof(LIEventManager_RegisterSingleEvent, EventClass) == 0x000008, "Member 'LIEventManager_RegisterSingleEvent::EventClass' has a wrong offset!");
static_assert(offsetof(LIEventManager_RegisterSingleEvent, Priority) == 0x000010, "Member 'LIEventManager_RegisterSingleEvent::Priority' has a wrong offset!");
static_assert(offsetof(LIEventManager_RegisterSingleEvent, ReturnValue) == 0x000011, "Member 'LIEventManager_RegisterSingleEvent::ReturnValue' has a wrong offset!");

// Function LIEventSubsystem.LIEventManager.UnregisterEvents
// 0x0008 (0x0008 - 0x0000)
struct LIEventManager_UnregisterEvents final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LIEventManager_UnregisterEvents) == 0x000008, "Wrong alignment on LIEventManager_UnregisterEvents");
static_assert(sizeof(LIEventManager_UnregisterEvents) == 0x000008, "Wrong size on LIEventManager_UnregisterEvents");
static_assert(offsetof(LIEventManager_UnregisterEvents, Object) == 0x000000, "Member 'LIEventManager_UnregisterEvents::Object' has a wrong offset!");

// Function LIEventSubsystem.LIEventManager.UnregisterSingleEvent
// 0x0010 (0x0010 - 0x0000)
struct LIEventManager_UnregisterSingleEvent final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScriptStruct*                          EventClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LIEventManager_UnregisterSingleEvent) == 0x000008, "Wrong alignment on LIEventManager_UnregisterSingleEvent");
static_assert(sizeof(LIEventManager_UnregisterSingleEvent) == 0x000010, "Wrong size on LIEventManager_UnregisterSingleEvent");
static_assert(offsetof(LIEventManager_UnregisterSingleEvent, Object) == 0x000000, "Member 'LIEventManager_UnregisterSingleEvent::Object' has a wrong offset!");
static_assert(offsetof(LIEventManager_UnregisterSingleEvent, EventClass) == 0x000008, "Member 'LIEventManager_UnregisterSingleEvent::EventClass' has a wrong offset!");

}

