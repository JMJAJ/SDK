#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UINavigation

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"
#include "Engine_structs.hpp"
#include "UINavigation_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function UINavigation.NavigationWidgetBase.ContainsAnyTagByDefaultTags
// 0x0058 (0x0058 - 0x0000)
struct NavigationWidgetBase_ContainsAnyTagByDefaultTags final
{
public:
	TSet<class FName>                             SubTags;                                           // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A4A[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavigationWidgetBase_ContainsAnyTagByDefaultTags) == 0x000008, "Wrong alignment on NavigationWidgetBase_ContainsAnyTagByDefaultTags");
static_assert(sizeof(NavigationWidgetBase_ContainsAnyTagByDefaultTags) == 0x000058, "Wrong size on NavigationWidgetBase_ContainsAnyTagByDefaultTags");
static_assert(offsetof(NavigationWidgetBase_ContainsAnyTagByDefaultTags, SubTags) == 0x000000, "Member 'NavigationWidgetBase_ContainsAnyTagByDefaultTags::SubTags' has a wrong offset!");
static_assert(offsetof(NavigationWidgetBase_ContainsAnyTagByDefaultTags, ReturnValue) == 0x000050, "Member 'NavigationWidgetBase_ContainsAnyTagByDefaultTags::ReturnValue' has a wrong offset!");

// Function UINavigation.NavigationWidgetBase.ContainsTag
// 0x0014 (0x0014 - 0x0000)
struct NavigationWidgetBase_ContainsTag final
{
public:
	class FName                                   MainTag;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SubTag;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A4B[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavigationWidgetBase_ContainsTag) == 0x000004, "Wrong alignment on NavigationWidgetBase_ContainsTag");
static_assert(sizeof(NavigationWidgetBase_ContainsTag) == 0x000014, "Wrong size on NavigationWidgetBase_ContainsTag");
static_assert(offsetof(NavigationWidgetBase_ContainsTag, MainTag) == 0x000000, "Member 'NavigationWidgetBase_ContainsTag::MainTag' has a wrong offset!");
static_assert(offsetof(NavigationWidgetBase_ContainsTag, SubTag) == 0x000008, "Member 'NavigationWidgetBase_ContainsTag::SubTag' has a wrong offset!");
static_assert(offsetof(NavigationWidgetBase_ContainsTag, ReturnValue) == 0x000010, "Member 'NavigationWidgetBase_ContainsTag::ReturnValue' has a wrong offset!");

// Function UINavigation.NavigationWidgetBase.ContainsTagByDefaultTag
// 0x000C (0x000C - 0x0000)
struct NavigationWidgetBase_ContainsTagByDefaultTag final
{
public:
	class FName                                   SubTag;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A4C[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavigationWidgetBase_ContainsTagByDefaultTag) == 0x000004, "Wrong alignment on NavigationWidgetBase_ContainsTagByDefaultTag");
static_assert(sizeof(NavigationWidgetBase_ContainsTagByDefaultTag) == 0x00000C, "Wrong size on NavigationWidgetBase_ContainsTagByDefaultTag");
static_assert(offsetof(NavigationWidgetBase_ContainsTagByDefaultTag, SubTag) == 0x000000, "Member 'NavigationWidgetBase_ContainsTagByDefaultTag::SubTag' has a wrong offset!");
static_assert(offsetof(NavigationWidgetBase_ContainsTagByDefaultTag, ReturnValue) == 0x000008, "Member 'NavigationWidgetBase_ContainsTagByDefaultTag::ReturnValue' has a wrong offset!");

// Function UINavigation.NavigationWidgetBase.ContainsTagByNavigationTag
// 0x000C (0x000C - 0x0000)
struct NavigationWidgetBase_ContainsTagByNavigationTag final
{
public:
	class FName                                   SubTag;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A4D[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavigationWidgetBase_ContainsTagByNavigationTag) == 0x000004, "Wrong alignment on NavigationWidgetBase_ContainsTagByNavigationTag");
static_assert(sizeof(NavigationWidgetBase_ContainsTagByNavigationTag) == 0x00000C, "Wrong size on NavigationWidgetBase_ContainsTagByNavigationTag");
static_assert(offsetof(NavigationWidgetBase_ContainsTagByNavigationTag, SubTag) == 0x000000, "Member 'NavigationWidgetBase_ContainsTagByNavigationTag::SubTag' has a wrong offset!");
static_assert(offsetof(NavigationWidgetBase_ContainsTagByNavigationTag, ReturnValue) == 0x000008, "Member 'NavigationWidgetBase_ContainsTagByNavigationTag::ReturnValue' has a wrong offset!");

// Function UINavigation.NavigationWidgetBase.ContainsTags
// 0x0060 (0x0060 - 0x0000)
struct NavigationWidgetBase_ContainsTags final
{
public:
	class FName                                   MainTag;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<class FName>                             SubTags;                                           // 0x0008(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A4E[0x7];                                     // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavigationWidgetBase_ContainsTags) == 0x000008, "Wrong alignment on NavigationWidgetBase_ContainsTags");
static_assert(sizeof(NavigationWidgetBase_ContainsTags) == 0x000060, "Wrong size on NavigationWidgetBase_ContainsTags");
static_assert(offsetof(NavigationWidgetBase_ContainsTags, MainTag) == 0x000000, "Member 'NavigationWidgetBase_ContainsTags::MainTag' has a wrong offset!");
static_assert(offsetof(NavigationWidgetBase_ContainsTags, SubTags) == 0x000008, "Member 'NavigationWidgetBase_ContainsTags::SubTags' has a wrong offset!");
static_assert(offsetof(NavigationWidgetBase_ContainsTags, ReturnValue) == 0x000058, "Member 'NavigationWidgetBase_ContainsTags::ReturnValue' has a wrong offset!");

// Function UINavigation.NavigationWidgetBase.GetAbsolutePosition
// 0x0008 (0x0008 - 0x0000)
struct NavigationWidgetBase_GetAbsolutePosition final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationWidgetBase_GetAbsolutePosition) == 0x000004, "Wrong alignment on NavigationWidgetBase_GetAbsolutePosition");
static_assert(sizeof(NavigationWidgetBase_GetAbsolutePosition) == 0x000008, "Wrong size on NavigationWidgetBase_GetAbsolutePosition");
static_assert(offsetof(NavigationWidgetBase_GetAbsolutePosition, ReturnValue) == 0x000000, "Member 'NavigationWidgetBase_GetAbsolutePosition::ReturnValue' has a wrong offset!");

// Function UINavigation.NavigationWidgetBase.GetDrawSize
// 0x0008 (0x0008 - 0x0000)
struct NavigationWidgetBase_GetDrawSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationWidgetBase_GetDrawSize) == 0x000004, "Wrong alignment on NavigationWidgetBase_GetDrawSize");
static_assert(sizeof(NavigationWidgetBase_GetDrawSize) == 0x000008, "Wrong size on NavigationWidgetBase_GetDrawSize");
static_assert(offsetof(NavigationWidgetBase_GetDrawSize, ReturnValue) == 0x000000, "Member 'NavigationWidgetBase_GetDrawSize::ReturnValue' has a wrong offset!");

// Function UINavigation.NavigationWidgetBase.GetLocalSize
// 0x0008 (0x0008 - 0x0000)
struct NavigationWidgetBase_GetLocalSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationWidgetBase_GetLocalSize) == 0x000004, "Wrong alignment on NavigationWidgetBase_GetLocalSize");
static_assert(sizeof(NavigationWidgetBase_GetLocalSize) == 0x000008, "Wrong size on NavigationWidgetBase_GetLocalSize");
static_assert(offsetof(NavigationWidgetBase_GetLocalSize, ReturnValue) == 0x000000, "Member 'NavigationWidgetBase_GetLocalSize::ReturnValue' has a wrong offset!");

// Function UINavigation.NavigationWidgetBase.GetTouchPosition
// 0x0008 (0x0008 - 0x0000)
struct NavigationWidgetBase_GetTouchPosition final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationWidgetBase_GetTouchPosition) == 0x000004, "Wrong alignment on NavigationWidgetBase_GetTouchPosition");
static_assert(sizeof(NavigationWidgetBase_GetTouchPosition) == 0x000008, "Wrong size on NavigationWidgetBase_GetTouchPosition");
static_assert(offsetof(NavigationWidgetBase_GetTouchPosition, ReturnValue) == 0x000000, "Member 'NavigationWidgetBase_GetTouchPosition::ReturnValue' has a wrong offset!");

// Function UINavigation.NavigationWidgetBase.GetUserWidgetChildFromName
// 0x0018 (0x0018 - 0x0000)
struct NavigationWidgetBase_GetUserWidgetChildFromName final
{
public:
	class UUserWidget*                            InUserWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InWidgetName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationWidgetBase_GetUserWidgetChildFromName) == 0x000008, "Wrong alignment on NavigationWidgetBase_GetUserWidgetChildFromName");
static_assert(sizeof(NavigationWidgetBase_GetUserWidgetChildFromName) == 0x000018, "Wrong size on NavigationWidgetBase_GetUserWidgetChildFromName");
static_assert(offsetof(NavigationWidgetBase_GetUserWidgetChildFromName, InUserWidget) == 0x000000, "Member 'NavigationWidgetBase_GetUserWidgetChildFromName::InUserWidget' has a wrong offset!");
static_assert(offsetof(NavigationWidgetBase_GetUserWidgetChildFromName, InWidgetName) == 0x000008, "Member 'NavigationWidgetBase_GetUserWidgetChildFromName::InWidgetName' has a wrong offset!");
static_assert(offsetof(NavigationWidgetBase_GetUserWidgetChildFromName, ReturnValue) == 0x000010, "Member 'NavigationWidgetBase_GetUserWidgetChildFromName::ReturnValue' has a wrong offset!");

// Function UINavigation.NavigationWidgetBase.GetWidgetCenterPosition
// 0x0010 (0x0010 - 0x0000)
struct NavigationWidgetBase_GetWidgetCenterPosition final
{
public:
	const class UWidget*                          InWidget;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationWidgetBase_GetWidgetCenterPosition) == 0x000008, "Wrong alignment on NavigationWidgetBase_GetWidgetCenterPosition");
static_assert(sizeof(NavigationWidgetBase_GetWidgetCenterPosition) == 0x000010, "Wrong size on NavigationWidgetBase_GetWidgetCenterPosition");
static_assert(offsetof(NavigationWidgetBase_GetWidgetCenterPosition, InWidget) == 0x000000, "Member 'NavigationWidgetBase_GetWidgetCenterPosition::InWidget' has a wrong offset!");
static_assert(offsetof(NavigationWidgetBase_GetWidgetCenterPosition, ReturnValue) == 0x000008, "Member 'NavigationWidgetBase_GetWidgetCenterPosition::ReturnValue' has a wrong offset!");

// Function UINavigation.NavigationWidgetBase.IsVisibleRecursive
// 0x0001 (0x0001 - 0x0000)
struct NavigationWidgetBase_IsVisibleRecursive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationWidgetBase_IsVisibleRecursive) == 0x000001, "Wrong alignment on NavigationWidgetBase_IsVisibleRecursive");
static_assert(sizeof(NavigationWidgetBase_IsVisibleRecursive) == 0x000001, "Wrong size on NavigationWidgetBase_IsVisibleRecursive");
static_assert(offsetof(NavigationWidgetBase_IsVisibleRecursive, ReturnValue) == 0x000000, "Member 'NavigationWidgetBase_IsVisibleRecursive::ReturnValue' has a wrong offset!");

// Function UINavigation.NavigationWidgetBase.IsWidgetReachable
// 0x0010 (0x0010 - 0x0000)
struct NavigationWidgetBase_IsWidgetReachable final
{
public:
	class UWidget*                                InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A4F[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavigationWidgetBase_IsWidgetReachable) == 0x000008, "Wrong alignment on NavigationWidgetBase_IsWidgetReachable");
static_assert(sizeof(NavigationWidgetBase_IsWidgetReachable) == 0x000010, "Wrong size on NavigationWidgetBase_IsWidgetReachable");
static_assert(offsetof(NavigationWidgetBase_IsWidgetReachable, InWidget) == 0x000000, "Member 'NavigationWidgetBase_IsWidgetReachable::InWidget' has a wrong offset!");
static_assert(offsetof(NavigationWidgetBase_IsWidgetReachable, ReturnValue) == 0x000008, "Member 'NavigationWidgetBase_IsWidgetReachable::ReturnValue' has a wrong offset!");

// Function UINavigation.NavigationWidgetBase.GetOwnerViewportWidget
// 0x0008 (0x0008 - 0x0000)
struct NavigationWidgetBase_GetOwnerViewportWidget final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationWidgetBase_GetOwnerViewportWidget) == 0x000008, "Wrong alignment on NavigationWidgetBase_GetOwnerViewportWidget");
static_assert(sizeof(NavigationWidgetBase_GetOwnerViewportWidget) == 0x000008, "Wrong size on NavigationWidgetBase_GetOwnerViewportWidget");
static_assert(offsetof(NavigationWidgetBase_GetOwnerViewportWidget, ReturnValue) == 0x000000, "Member 'NavigationWidgetBase_GetOwnerViewportWidget::ReturnValue' has a wrong offset!");

// Function UINavigation.NavigationWidgetBase.GetWidgetGeneratedUserWidget
// 0x0010 (0x0010 - 0x0000)
struct NavigationWidgetBase_GetWidgetGeneratedUserWidget final
{
public:
	const class UWidget*                          InWidget;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationWidgetBase_GetWidgetGeneratedUserWidget) == 0x000008, "Wrong alignment on NavigationWidgetBase_GetWidgetGeneratedUserWidget");
static_assert(sizeof(NavigationWidgetBase_GetWidgetGeneratedUserWidget) == 0x000010, "Wrong size on NavigationWidgetBase_GetWidgetGeneratedUserWidget");
static_assert(offsetof(NavigationWidgetBase_GetWidgetGeneratedUserWidget, InWidget) == 0x000000, "Member 'NavigationWidgetBase_GetWidgetGeneratedUserWidget::InWidget' has a wrong offset!");
static_assert(offsetof(NavigationWidgetBase_GetWidgetGeneratedUserWidget, ReturnValue) == 0x000008, "Member 'NavigationWidgetBase_GetWidgetGeneratedUserWidget::ReturnValue' has a wrong offset!");

// Function UINavigation.CategorySwitcherWidget.SelectCategory
// 0x0004 (0x0004 - 0x0000)
struct CategorySwitcherWidget_SelectCategory final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CategorySwitcherWidget_SelectCategory) == 0x000004, "Wrong alignment on CategorySwitcherWidget_SelectCategory");
static_assert(sizeof(CategorySwitcherWidget_SelectCategory) == 0x000004, "Wrong size on CategorySwitcherWidget_SelectCategory");
static_assert(offsetof(CategorySwitcherWidget_SelectCategory, Param_Index) == 0x000000, "Member 'CategorySwitcherWidget_SelectCategory::Param_Index' has a wrong offset!");

// Function UINavigation.CategorySwitcherWidget.SelectCategoryFromKey
// 0x0020 (0x0020 - 0x0000)
struct CategorySwitcherWidget_SelectCategoryFromKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputEvent                                   InputEvent;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A51[0x6];                                     // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CategorySwitcherWidget_SelectCategoryFromKey) == 0x000008, "Wrong alignment on CategorySwitcherWidget_SelectCategoryFromKey");
static_assert(sizeof(CategorySwitcherWidget_SelectCategoryFromKey) == 0x000020, "Wrong size on CategorySwitcherWidget_SelectCategoryFromKey");
static_assert(offsetof(CategorySwitcherWidget_SelectCategoryFromKey, Key) == 0x000000, "Member 'CategorySwitcherWidget_SelectCategoryFromKey::Key' has a wrong offset!");
static_assert(offsetof(CategorySwitcherWidget_SelectCategoryFromKey, InputEvent) == 0x000018, "Member 'CategorySwitcherWidget_SelectCategoryFromKey::InputEvent' has a wrong offset!");
static_assert(offsetof(CategorySwitcherWidget_SelectCategoryFromKey, ReturnValue) == 0x000019, "Member 'CategorySwitcherWidget_SelectCategoryFromKey::ReturnValue' has a wrong offset!");

// Function UINavigation.CategorySwitcherWidget.SetActivateCategoryIndex
// 0x0004 (0x0004 - 0x0000)
struct CategorySwitcherWidget_SetActivateCategoryIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CategorySwitcherWidget_SetActivateCategoryIndex) == 0x000004, "Wrong alignment on CategorySwitcherWidget_SetActivateCategoryIndex");
static_assert(sizeof(CategorySwitcherWidget_SetActivateCategoryIndex) == 0x000004, "Wrong size on CategorySwitcherWidget_SetActivateCategoryIndex");
static_assert(offsetof(CategorySwitcherWidget_SetActivateCategoryIndex, Param_Index) == 0x000000, "Member 'CategorySwitcherWidget_SetActivateCategoryIndex::Param_Index' has a wrong offset!");

// Function UINavigation.CategorySwitcherWidget.GetActivatedCategoryIndex
// 0x0004 (0x0004 - 0x0000)
struct CategorySwitcherWidget_GetActivatedCategoryIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CategorySwitcherWidget_GetActivatedCategoryIndex) == 0x000004, "Wrong alignment on CategorySwitcherWidget_GetActivatedCategoryIndex");
static_assert(sizeof(CategorySwitcherWidget_GetActivatedCategoryIndex) == 0x000004, "Wrong size on CategorySwitcherWidget_GetActivatedCategoryIndex");
static_assert(offsetof(CategorySwitcherWidget_GetActivatedCategoryIndex, ReturnValue) == 0x000000, "Member 'CategorySwitcherWidget_GetActivatedCategoryIndex::ReturnValue' has a wrong offset!");

// Function UINavigation.KeysActionWidget.HandledAction
// 0x0001 (0x0001 - 0x0000)
struct KeysActionWidget_HandledAction final
{
public:
	bool                                          InbIsHandled;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeysActionWidget_HandledAction) == 0x000001, "Wrong alignment on KeysActionWidget_HandledAction");
static_assert(sizeof(KeysActionWidget_HandledAction) == 0x000001, "Wrong size on KeysActionWidget_HandledAction");
static_assert(offsetof(KeysActionWidget_HandledAction, InbIsHandled) == 0x000000, "Member 'KeysActionWidget_HandledAction::InbIsHandled' has a wrong offset!");

// Function UINavigation.KeysActionWidget.HasKeyAction
// 0x0020 (0x0020 - 0x0000)
struct KeysActionWidget_HasKeyAction final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A5B[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KeysActionWidget_HasKeyAction) == 0x000008, "Wrong alignment on KeysActionWidget_HasKeyAction");
static_assert(sizeof(KeysActionWidget_HasKeyAction) == 0x000020, "Wrong size on KeysActionWidget_HasKeyAction");
static_assert(offsetof(KeysActionWidget_HasKeyAction, Key) == 0x000000, "Member 'KeysActionWidget_HasKeyAction::Key' has a wrong offset!");
static_assert(offsetof(KeysActionWidget_HasKeyAction, ReturnValue) == 0x000018, "Member 'KeysActionWidget_HasKeyAction::ReturnValue' has a wrong offset!");

// Function UINavigation.KeysActionWidget.IsGamepadKeyAction
// 0x0001 (0x0001 - 0x0000)
struct KeysActionWidget_IsGamepadKeyAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeysActionWidget_IsGamepadKeyAction) == 0x000001, "Wrong alignment on KeysActionWidget_IsGamepadKeyAction");
static_assert(sizeof(KeysActionWidget_IsGamepadKeyAction) == 0x000001, "Wrong size on KeysActionWidget_IsGamepadKeyAction");
static_assert(offsetof(KeysActionWidget_IsGamepadKeyAction, ReturnValue) == 0x000000, "Member 'KeysActionWidget_IsGamepadKeyAction::ReturnValue' has a wrong offset!");

// Function UINavigation.KeysActionWidget.IsKeyboardKeyAction
// 0x0001 (0x0001 - 0x0000)
struct KeysActionWidget_IsKeyboardKeyAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeysActionWidget_IsKeyboardKeyAction) == 0x000001, "Wrong alignment on KeysActionWidget_IsKeyboardKeyAction");
static_assert(sizeof(KeysActionWidget_IsKeyboardKeyAction) == 0x000001, "Wrong size on KeysActionWidget_IsKeyboardKeyAction");
static_assert(offsetof(KeysActionWidget_IsKeyboardKeyAction, ReturnValue) == 0x000000, "Member 'KeysActionWidget_IsKeyboardKeyAction::ReturnValue' has a wrong offset!");

// Function UINavigation.KeysActionWidget.IsPressed
// 0x0001 (0x0001 - 0x0000)
struct KeysActionWidget_IsPressed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeysActionWidget_IsPressed) == 0x000001, "Wrong alignment on KeysActionWidget_IsPressed");
static_assert(sizeof(KeysActionWidget_IsPressed) == 0x000001, "Wrong size on KeysActionWidget_IsPressed");
static_assert(offsetof(KeysActionWidget_IsPressed, ReturnValue) == 0x000000, "Member 'KeysActionWidget_IsPressed::ReturnValue' has a wrong offset!");

// Function UINavigation.KeysActionWidget.IsReleased
// 0x0001 (0x0001 - 0x0000)
struct KeysActionWidget_IsReleased final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeysActionWidget_IsReleased) == 0x000001, "Wrong alignment on KeysActionWidget_IsReleased");
static_assert(sizeof(KeysActionWidget_IsReleased) == 0x000001, "Wrong size on KeysActionWidget_IsReleased");
static_assert(offsetof(KeysActionWidget_IsReleased, ReturnValue) == 0x000000, "Member 'KeysActionWidget_IsReleased::ReturnValue' has a wrong offset!");

// DelegateFunction UINavigation.KeysActionWidget.OnClickedDelegateWithObject__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct KeysActionWidget_OnClickedDelegateWithObject__DelegateSignature final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeysActionWidget_OnClickedDelegateWithObject__DelegateSignature) == 0x000008, "Wrong alignment on KeysActionWidget_OnClickedDelegateWithObject__DelegateSignature");
static_assert(sizeof(KeysActionWidget_OnClickedDelegateWithObject__DelegateSignature) == 0x000008, "Wrong size on KeysActionWidget_OnClickedDelegateWithObject__DelegateSignature");
static_assert(offsetof(KeysActionWidget_OnClickedDelegateWithObject__DelegateSignature, Object) == 0x000000, "Member 'KeysActionWidget_OnClickedDelegateWithObject__DelegateSignature::Object' has a wrong offset!");

// DelegateFunction UINavigation.KeysActionWidget.OnReceiveActionDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct KeysActionWidget_OnReceiveActionDelegate__DelegateSignature final
{
public:
	EInputEvent                                   InputEvent;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeysActionWidget_OnReceiveActionDelegate__DelegateSignature) == 0x000001, "Wrong alignment on KeysActionWidget_OnReceiveActionDelegate__DelegateSignature");
static_assert(sizeof(KeysActionWidget_OnReceiveActionDelegate__DelegateSignature) == 0x000001, "Wrong size on KeysActionWidget_OnReceiveActionDelegate__DelegateSignature");
static_assert(offsetof(KeysActionWidget_OnReceiveActionDelegate__DelegateSignature, InputEvent) == 0x000000, "Member 'KeysActionWidget_OnReceiveActionDelegate__DelegateSignature::InputEvent' has a wrong offset!");

// Function UINavigation.KeysActionWidget.SetGamepadKeyVisibility
// 0x0001 (0x0001 - 0x0000)
struct KeysActionWidget_SetGamepadKeyVisibility final
{
public:
	bool                                          NewVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeysActionWidget_SetGamepadKeyVisibility) == 0x000001, "Wrong alignment on KeysActionWidget_SetGamepadKeyVisibility");
static_assert(sizeof(KeysActionWidget_SetGamepadKeyVisibility) == 0x000001, "Wrong size on KeysActionWidget_SetGamepadKeyVisibility");
static_assert(offsetof(KeysActionWidget_SetGamepadKeyVisibility, NewVisibility) == 0x000000, "Member 'KeysActionWidget_SetGamepadKeyVisibility::NewVisibility' has a wrong offset!");

// Function UINavigation.KeysActionWidget.SetPCKeyVisibility
// 0x0001 (0x0001 - 0x0000)
struct KeysActionWidget_SetPCKeyVisibility final
{
public:
	bool                                          NewVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeysActionWidget_SetPCKeyVisibility) == 0x000001, "Wrong alignment on KeysActionWidget_SetPCKeyVisibility");
static_assert(sizeof(KeysActionWidget_SetPCKeyVisibility) == 0x000001, "Wrong size on KeysActionWidget_SetPCKeyVisibility");
static_assert(offsetof(KeysActionWidget_SetPCKeyVisibility, NewVisibility) == 0x000000, "Member 'KeysActionWidget_SetPCKeyVisibility::NewVisibility' has a wrong offset!");

// Function UINavigation.KeysActionWidget.IsGamepadInputTypeCurrently
// 0x0001 (0x0001 - 0x0000)
struct KeysActionWidget_IsGamepadInputTypeCurrently final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeysActionWidget_IsGamepadInputTypeCurrently) == 0x000001, "Wrong alignment on KeysActionWidget_IsGamepadInputTypeCurrently");
static_assert(sizeof(KeysActionWidget_IsGamepadInputTypeCurrently) == 0x000001, "Wrong size on KeysActionWidget_IsGamepadInputTypeCurrently");
static_assert(offsetof(KeysActionWidget_IsGamepadInputTypeCurrently, ReturnValue) == 0x000000, "Member 'KeysActionWidget_IsGamepadInputTypeCurrently::ReturnValue' has a wrong offset!");

// Function UINavigation.KeysActionWidget.IsKeyboardInputTypeCurrently
// 0x0001 (0x0001 - 0x0000)
struct KeysActionWidget_IsKeyboardInputTypeCurrently final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeysActionWidget_IsKeyboardInputTypeCurrently) == 0x000001, "Wrong alignment on KeysActionWidget_IsKeyboardInputTypeCurrently");
static_assert(sizeof(KeysActionWidget_IsKeyboardInputTypeCurrently) == 0x000001, "Wrong size on KeysActionWidget_IsKeyboardInputTypeCurrently");
static_assert(offsetof(KeysActionWidget_IsKeyboardInputTypeCurrently, ReturnValue) == 0x000000, "Member 'KeysActionWidget_IsKeyboardInputTypeCurrently::ReturnValue' has a wrong offset!");

// Function UINavigation.NavigationProcessorWidget.BP_GetWidgetFromName
// 0x0018 (0x0018 - 0x0000)
struct NavigationProcessorWidget_BP_GetWidgetFromName final
{
public:
	class UUserWidget*                            InUserWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WidgetName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationProcessorWidget_BP_GetWidgetFromName) == 0x000008, "Wrong alignment on NavigationProcessorWidget_BP_GetWidgetFromName");
static_assert(sizeof(NavigationProcessorWidget_BP_GetWidgetFromName) == 0x000018, "Wrong size on NavigationProcessorWidget_BP_GetWidgetFromName");
static_assert(offsetof(NavigationProcessorWidget_BP_GetWidgetFromName, InUserWidget) == 0x000000, "Member 'NavigationProcessorWidget_BP_GetWidgetFromName::InUserWidget' has a wrong offset!");
static_assert(offsetof(NavigationProcessorWidget_BP_GetWidgetFromName, WidgetName) == 0x000008, "Member 'NavigationProcessorWidget_BP_GetWidgetFromName::WidgetName' has a wrong offset!");
static_assert(offsetof(NavigationProcessorWidget_BP_GetWidgetFromName, ReturnValue) == 0x000010, "Member 'NavigationProcessorWidget_BP_GetWidgetFromName::ReturnValue' has a wrong offset!");

// Function UINavigation.NavigationProcessorWidget.BP_HandleInputAxis
// 0x0014 (0x0014 - 0x0000)
struct NavigationProcessorWidget_BP_HandleInputAxis final
{
public:
	struct FVector2D                              LeftStickValue;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RightStickValue;                                   // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A5E[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavigationProcessorWidget_BP_HandleInputAxis) == 0x000004, "Wrong alignment on NavigationProcessorWidget_BP_HandleInputAxis");
static_assert(sizeof(NavigationProcessorWidget_BP_HandleInputAxis) == 0x000014, "Wrong size on NavigationProcessorWidget_BP_HandleInputAxis");
static_assert(offsetof(NavigationProcessorWidget_BP_HandleInputAxis, LeftStickValue) == 0x000000, "Member 'NavigationProcessorWidget_BP_HandleInputAxis::LeftStickValue' has a wrong offset!");
static_assert(offsetof(NavigationProcessorWidget_BP_HandleInputAxis, RightStickValue) == 0x000008, "Member 'NavigationProcessorWidget_BP_HandleInputAxis::RightStickValue' has a wrong offset!");
static_assert(offsetof(NavigationProcessorWidget_BP_HandleInputAxis, ReturnValue) == 0x000010, "Member 'NavigationProcessorWidget_BP_HandleInputAxis::ReturnValue' has a wrong offset!");

// Function UINavigation.NavigationProcessorWidget.BP_HandleInputKey
// 0x0020 (0x0020 - 0x0000)
struct NavigationProcessorWidget_BP_HandleInputKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputEvent                                   InputEvent;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A5F[0x6];                                     // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavigationProcessorWidget_BP_HandleInputKey) == 0x000008, "Wrong alignment on NavigationProcessorWidget_BP_HandleInputKey");
static_assert(sizeof(NavigationProcessorWidget_BP_HandleInputKey) == 0x000020, "Wrong size on NavigationProcessorWidget_BP_HandleInputKey");
static_assert(offsetof(NavigationProcessorWidget_BP_HandleInputKey, Key) == 0x000000, "Member 'NavigationProcessorWidget_BP_HandleInputKey::Key' has a wrong offset!");
static_assert(offsetof(NavigationProcessorWidget_BP_HandleInputKey, InputEvent) == 0x000018, "Member 'NavigationProcessorWidget_BP_HandleInputKey::InputEvent' has a wrong offset!");
static_assert(offsetof(NavigationProcessorWidget_BP_HandleInputKey, ReturnValue) == 0x000019, "Member 'NavigationProcessorWidget_BP_HandleInputKey::ReturnValue' has a wrong offset!");

// Function UINavigation.NavigationProcessorWidget.BP_HandleNavigation
// 0x0020 (0x0020 - 0x0000)
struct NavigationProcessorWidget_BP_HandleNavigation final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputEvent                                   InputEvent;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A60[0x6];                                     // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavigationProcessorWidget_BP_HandleNavigation) == 0x000008, "Wrong alignment on NavigationProcessorWidget_BP_HandleNavigation");
static_assert(sizeof(NavigationProcessorWidget_BP_HandleNavigation) == 0x000020, "Wrong size on NavigationProcessorWidget_BP_HandleNavigation");
static_assert(offsetof(NavigationProcessorWidget_BP_HandleNavigation, Key) == 0x000000, "Member 'NavigationProcessorWidget_BP_HandleNavigation::Key' has a wrong offset!");
static_assert(offsetof(NavigationProcessorWidget_BP_HandleNavigation, InputEvent) == 0x000018, "Member 'NavigationProcessorWidget_BP_HandleNavigation::InputEvent' has a wrong offset!");
static_assert(offsetof(NavigationProcessorWidget_BP_HandleNavigation, ReturnValue) == 0x000019, "Member 'NavigationProcessorWidget_BP_HandleNavigation::ReturnValue' has a wrong offset!");

// Function UINavigation.NavigationProcessorWidget.BP_OnWidgetFocused
// 0x0008 (0x0008 - 0x0000)
struct NavigationProcessorWidget_BP_OnWidgetFocused final
{
public:
	class UUINavigationWidget*                    InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationProcessorWidget_BP_OnWidgetFocused) == 0x000008, "Wrong alignment on NavigationProcessorWidget_BP_OnWidgetFocused");
static_assert(sizeof(NavigationProcessorWidget_BP_OnWidgetFocused) == 0x000008, "Wrong size on NavigationProcessorWidget_BP_OnWidgetFocused");
static_assert(offsetof(NavigationProcessorWidget_BP_OnWidgetFocused, InWidget) == 0x000000, "Member 'NavigationProcessorWidget_BP_OnWidgetFocused::InWidget' has a wrong offset!");

// Function UINavigation.NavigationProcessorWidget.BP_OnWidgetUnFocused
// 0x0008 (0x0008 - 0x0000)
struct NavigationProcessorWidget_BP_OnWidgetUnFocused final
{
public:
	class UUINavigationWidget*                    InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationProcessorWidget_BP_OnWidgetUnFocused) == 0x000008, "Wrong alignment on NavigationProcessorWidget_BP_OnWidgetUnFocused");
static_assert(sizeof(NavigationProcessorWidget_BP_OnWidgetUnFocused) == 0x000008, "Wrong size on NavigationProcessorWidget_BP_OnWidgetUnFocused");
static_assert(offsetof(NavigationProcessorWidget_BP_OnWidgetUnFocused, InWidget) == 0x000000, "Member 'NavigationProcessorWidget_BP_OnWidgetUnFocused::InWidget' has a wrong offset!");

// Function UINavigation.NavigationProcessorWidget.GetEntryWidgetFromItem
// 0x0018 (0x0018 - 0x0000)
struct NavigationProcessorWidget_GetEntryWidgetFromItem final
{
public:
	const class UListView*                        InListView;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          InItem;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationProcessorWidget_GetEntryWidgetFromItem) == 0x000008, "Wrong alignment on NavigationProcessorWidget_GetEntryWidgetFromItem");
static_assert(sizeof(NavigationProcessorWidget_GetEntryWidgetFromItem) == 0x000018, "Wrong size on NavigationProcessorWidget_GetEntryWidgetFromItem");
static_assert(offsetof(NavigationProcessorWidget_GetEntryWidgetFromItem, InListView) == 0x000000, "Member 'NavigationProcessorWidget_GetEntryWidgetFromItem::InListView' has a wrong offset!");
static_assert(offsetof(NavigationProcessorWidget_GetEntryWidgetFromItem, InItem) == 0x000008, "Member 'NavigationProcessorWidget_GetEntryWidgetFromItem::InItem' has a wrong offset!");
static_assert(offsetof(NavigationProcessorWidget_GetEntryWidgetFromItem, ReturnValue) == 0x000010, "Member 'NavigationProcessorWidget_GetEntryWidgetFromItem::ReturnValue' has a wrong offset!");

// Function UINavigation.NavigationProcessorWidget.GetOwnerUserWidget
// 0x0010 (0x0010 - 0x0000)
struct NavigationProcessorWidget_GetOwnerUserWidget final
{
public:
	class UWidget*                                InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationProcessorWidget_GetOwnerUserWidget) == 0x000008, "Wrong alignment on NavigationProcessorWidget_GetOwnerUserWidget");
static_assert(sizeof(NavigationProcessorWidget_GetOwnerUserWidget) == 0x000010, "Wrong size on NavigationProcessorWidget_GetOwnerUserWidget");
static_assert(offsetof(NavigationProcessorWidget_GetOwnerUserWidget, InWidget) == 0x000000, "Member 'NavigationProcessorWidget_GetOwnerUserWidget::InWidget' has a wrong offset!");
static_assert(offsetof(NavigationProcessorWidget_GetOwnerUserWidget, ReturnValue) == 0x000008, "Member 'NavigationProcessorWidget_GetOwnerUserWidget::ReturnValue' has a wrong offset!");

// Function UINavigation.NavigationProcessorWidget.GetOwnerViewportWidget
// 0x0008 (0x0008 - 0x0000)
struct NavigationProcessorWidget_GetOwnerViewportWidget final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationProcessorWidget_GetOwnerViewportWidget) == 0x000008, "Wrong alignment on NavigationProcessorWidget_GetOwnerViewportWidget");
static_assert(sizeof(NavigationProcessorWidget_GetOwnerViewportWidget) == 0x000008, "Wrong size on NavigationProcessorWidget_GetOwnerViewportWidget");
static_assert(offsetof(NavigationProcessorWidget_GetOwnerViewportWidget, ReturnValue) == 0x000000, "Member 'NavigationProcessorWidget_GetOwnerViewportWidget::ReturnValue' has a wrong offset!");

// Function UINavigation.UINavigationSubsystem.Get
// 0x0010 (0x0010 - 0x0000)
struct UINavigationSubsystem_Get final
{
public:
	const class ULocalPlayer*                     LocalPlayer;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUINavigationSubsystem*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationSubsystem_Get) == 0x000008, "Wrong alignment on UINavigationSubsystem_Get");
static_assert(sizeof(UINavigationSubsystem_Get) == 0x000010, "Wrong size on UINavigationSubsystem_Get");
static_assert(offsetof(UINavigationSubsystem_Get, LocalPlayer) == 0x000000, "Member 'UINavigationSubsystem_Get::LocalPlayer' has a wrong offset!");
static_assert(offsetof(UINavigationSubsystem_Get, ReturnValue) == 0x000008, "Member 'UINavigationSubsystem_Get::ReturnValue' has a wrong offset!");

// Function UINavigation.UINavigationSubsystem.ActivateTab
// 0x0010 (0x0010 - 0x0000)
struct UINavigationSubsystem_ActivateTab final
{
public:
	class UUINavigationWidget*                    InNavigationWidget;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNavigate;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A65[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UINavigationSubsystem_ActivateTab) == 0x000008, "Wrong alignment on UINavigationSubsystem_ActivateTab");
static_assert(sizeof(UINavigationSubsystem_ActivateTab) == 0x000010, "Wrong size on UINavigationSubsystem_ActivateTab");
static_assert(offsetof(UINavigationSubsystem_ActivateTab, InNavigationWidget) == 0x000000, "Member 'UINavigationSubsystem_ActivateTab::InNavigationWidget' has a wrong offset!");
static_assert(offsetof(UINavigationSubsystem_ActivateTab, bNavigate) == 0x000008, "Member 'UINavigationSubsystem_ActivateTab::bNavigate' has a wrong offset!");

// Function UINavigation.UINavigationSubsystem.BuildCommandMenus
// 0x0030 (0x0030 - 0x0000)
struct UINavigationSubsystem_BuildCommandMenus final
{
public:
	TSoftClassPtr<class UClass>                   CommandMenusWidget;                                // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0028(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationSubsystem_BuildCommandMenus) == 0x000008, "Wrong alignment on UINavigationSubsystem_BuildCommandMenus");
static_assert(sizeof(UINavigationSubsystem_BuildCommandMenus) == 0x000030, "Wrong size on UINavigationSubsystem_BuildCommandMenus");
static_assert(offsetof(UINavigationSubsystem_BuildCommandMenus, CommandMenusWidget) == 0x000000, "Member 'UINavigationSubsystem_BuildCommandMenus::CommandMenusWidget' has a wrong offset!");
static_assert(offsetof(UINavigationSubsystem_BuildCommandMenus, ReturnValue) == 0x000028, "Member 'UINavigationSubsystem_BuildCommandMenus::ReturnValue' has a wrong offset!");

// Function UINavigation.UINavigationSubsystem.BuildCommandMenusWithKey
// 0x0048 (0x0048 - 0x0000)
struct UINavigationSubsystem_BuildCommandMenusWithKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   CommandMenusWidget;                                // 0x0018(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0040(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationSubsystem_BuildCommandMenusWithKey) == 0x000008, "Wrong alignment on UINavigationSubsystem_BuildCommandMenusWithKey");
static_assert(sizeof(UINavigationSubsystem_BuildCommandMenusWithKey) == 0x000048, "Wrong size on UINavigationSubsystem_BuildCommandMenusWithKey");
static_assert(offsetof(UINavigationSubsystem_BuildCommandMenusWithKey, Key) == 0x000000, "Member 'UINavigationSubsystem_BuildCommandMenusWithKey::Key' has a wrong offset!");
static_assert(offsetof(UINavigationSubsystem_BuildCommandMenusWithKey, CommandMenusWidget) == 0x000018, "Member 'UINavigationSubsystem_BuildCommandMenusWithKey::CommandMenusWidget' has a wrong offset!");
static_assert(offsetof(UINavigationSubsystem_BuildCommandMenusWithKey, ReturnValue) == 0x000040, "Member 'UINavigationSubsystem_BuildCommandMenusWithKey::ReturnValue' has a wrong offset!");

// Function UINavigation.UINavigationSubsystem.EnableEvaluateWindowsMouseCursor
// 0x0001 (0x0001 - 0x0000)
struct UINavigationSubsystem_EnableEvaluateWindowsMouseCursor final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationSubsystem_EnableEvaluateWindowsMouseCursor) == 0x000001, "Wrong alignment on UINavigationSubsystem_EnableEvaluateWindowsMouseCursor");
static_assert(sizeof(UINavigationSubsystem_EnableEvaluateWindowsMouseCursor) == 0x000001, "Wrong size on UINavigationSubsystem_EnableEvaluateWindowsMouseCursor");
static_assert(offsetof(UINavigationSubsystem_EnableEvaluateWindowsMouseCursor, bEnable) == 0x000000, "Member 'UINavigationSubsystem_EnableEvaluateWindowsMouseCursor::bEnable' has a wrong offset!");

// Function UINavigation.UINavigationSubsystem.ExitCurrentGroup
// 0x0001 (0x0001 - 0x0000)
struct UINavigationSubsystem_ExitCurrentGroup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationSubsystem_ExitCurrentGroup) == 0x000001, "Wrong alignment on UINavigationSubsystem_ExitCurrentGroup");
static_assert(sizeof(UINavigationSubsystem_ExitCurrentGroup) == 0x000001, "Wrong size on UINavigationSubsystem_ExitCurrentGroup");
static_assert(offsetof(UINavigationSubsystem_ExitCurrentGroup, ReturnValue) == 0x000000, "Member 'UINavigationSubsystem_ExitCurrentGroup::ReturnValue' has a wrong offset!");

// Function UINavigation.UINavigationSubsystem.ExitGroup
// 0x000C (0x000C - 0x0000)
struct UINavigationSubsystem_ExitGroup final
{
public:
	class FName                                   NextGroupName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A66[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UINavigationSubsystem_ExitGroup) == 0x000004, "Wrong alignment on UINavigationSubsystem_ExitGroup");
static_assert(sizeof(UINavigationSubsystem_ExitGroup) == 0x00000C, "Wrong size on UINavigationSubsystem_ExitGroup");
static_assert(offsetof(UINavigationSubsystem_ExitGroup, NextGroupName) == 0x000000, "Member 'UINavigationSubsystem_ExitGroup::NextGroupName' has a wrong offset!");
static_assert(offsetof(UINavigationSubsystem_ExitGroup, ReturnValue) == 0x000008, "Member 'UINavigationSubsystem_ExitGroup::ReturnValue' has a wrong offset!");

// Function UINavigation.UINavigationSubsystem.GetCursorMoveMethod
// 0x0001 (0x0001 - 0x0000)
struct UINavigationSubsystem_GetCursorMoveMethod final
{
public:
	EGamepadCursorMoveMethod                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationSubsystem_GetCursorMoveMethod) == 0x000001, "Wrong alignment on UINavigationSubsystem_GetCursorMoveMethod");
static_assert(sizeof(UINavigationSubsystem_GetCursorMoveMethod) == 0x000001, "Wrong size on UINavigationSubsystem_GetCursorMoveMethod");
static_assert(offsetof(UINavigationSubsystem_GetCursorMoveMethod, ReturnValue) == 0x000000, "Member 'UINavigationSubsystem_GetCursorMoveMethod::ReturnValue' has a wrong offset!");

// Function UINavigation.UINavigationSubsystem.GetCursorMoveMode
// 0x0001 (0x0001 - 0x0000)
struct UINavigationSubsystem_GetCursorMoveMode final
{
public:
	EGamepadCursorMoveMode                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationSubsystem_GetCursorMoveMode) == 0x000001, "Wrong alignment on UINavigationSubsystem_GetCursorMoveMode");
static_assert(sizeof(UINavigationSubsystem_GetCursorMoveMode) == 0x000001, "Wrong size on UINavigationSubsystem_GetCursorMoveMode");
static_assert(offsetof(UINavigationSubsystem_GetCursorMoveMode, ReturnValue) == 0x000000, "Member 'UINavigationSubsystem_GetCursorMoveMode::ReturnValue' has a wrong offset!");

// Function UINavigation.UINavigationSubsystem.GetCursorSensitivity
// 0x0004 (0x0004 - 0x0000)
struct UINavigationSubsystem_GetCursorSensitivity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationSubsystem_GetCursorSensitivity) == 0x000004, "Wrong alignment on UINavigationSubsystem_GetCursorSensitivity");
static_assert(sizeof(UINavigationSubsystem_GetCursorSensitivity) == 0x000004, "Wrong size on UINavigationSubsystem_GetCursorSensitivity");
static_assert(offsetof(UINavigationSubsystem_GetCursorSensitivity, ReturnValue) == 0x000000, "Member 'UINavigationSubsystem_GetCursorSensitivity::ReturnValue' has a wrong offset!");

// Function UINavigation.UINavigationSubsystem.GetCursorSpeed
// 0x0010 (0x0010 - 0x0000)
struct UINavigationSubsystem_GetCursorSpeed final
{
public:
	struct FVector2D                              AxisValue;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationSubsystem_GetCursorSpeed) == 0x000004, "Wrong alignment on UINavigationSubsystem_GetCursorSpeed");
static_assert(sizeof(UINavigationSubsystem_GetCursorSpeed) == 0x000010, "Wrong size on UINavigationSubsystem_GetCursorSpeed");
static_assert(offsetof(UINavigationSubsystem_GetCursorSpeed, AxisValue) == 0x000000, "Member 'UINavigationSubsystem_GetCursorSpeed::AxisValue' has a wrong offset!");
static_assert(offsetof(UINavigationSubsystem_GetCursorSpeed, ReturnValue) == 0x000008, "Member 'UINavigationSubsystem_GetCursorSpeed::ReturnValue' has a wrong offset!");

// Function UINavigation.UINavigationSubsystem.GetFocusedWidgetFromTopViewportWidget
// 0x0008 (0x0008 - 0x0000)
struct UINavigationSubsystem_GetFocusedWidgetFromTopViewportWidget final
{
public:
	class UUINavigationWidget*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationSubsystem_GetFocusedWidgetFromTopViewportWidget) == 0x000008, "Wrong alignment on UINavigationSubsystem_GetFocusedWidgetFromTopViewportWidget");
static_assert(sizeof(UINavigationSubsystem_GetFocusedWidgetFromTopViewportWidget) == 0x000008, "Wrong size on UINavigationSubsystem_GetFocusedWidgetFromTopViewportWidget");
static_assert(offsetof(UINavigationSubsystem_GetFocusedWidgetFromTopViewportWidget, ReturnValue) == 0x000000, "Member 'UINavigationSubsystem_GetFocusedWidgetFromTopViewportWidget::ReturnValue' has a wrong offset!");

// Function UINavigation.UINavigationSubsystem.GetKeysAction
// 0x0010 (0x0010 - 0x0000)
struct UINavigationSubsystem_GetKeysAction final
{
public:
	class FName                                   WidgetName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKeysActionWidget*                      ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationSubsystem_GetKeysAction) == 0x000008, "Wrong alignment on UINavigationSubsystem_GetKeysAction");
static_assert(sizeof(UINavigationSubsystem_GetKeysAction) == 0x000010, "Wrong size on UINavigationSubsystem_GetKeysAction");
static_assert(offsetof(UINavigationSubsystem_GetKeysAction, WidgetName) == 0x000000, "Member 'UINavigationSubsystem_GetKeysAction::WidgetName' has a wrong offset!");
static_assert(offsetof(UINavigationSubsystem_GetKeysAction, ReturnValue) == 0x000008, "Member 'UINavigationSubsystem_GetKeysAction::ReturnValue' has a wrong offset!");

// Function UINavigation.UINavigationSubsystem.GetTopViewportWidget
// 0x0008 (0x0008 - 0x0000)
struct UINavigationSubsystem_GetTopViewportWidget final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationSubsystem_GetTopViewportWidget) == 0x000008, "Wrong alignment on UINavigationSubsystem_GetTopViewportWidget");
static_assert(sizeof(UINavigationSubsystem_GetTopViewportWidget) == 0x000008, "Wrong size on UINavigationSubsystem_GetTopViewportWidget");
static_assert(offsetof(UINavigationSubsystem_GetTopViewportWidget, ReturnValue) == 0x000000, "Member 'UINavigationSubsystem_GetTopViewportWidget::ReturnValue' has a wrong offset!");

// Function UINavigation.UINavigationSubsystem.GetUINavigationWidget
// 0x0010 (0x0010 - 0x0000)
struct UINavigationSubsystem_GetUINavigationWidget final
{
public:
	class FName                                   WidgetName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUINavigationWidget*                    ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationSubsystem_GetUINavigationWidget) == 0x000008, "Wrong alignment on UINavigationSubsystem_GetUINavigationWidget");
static_assert(sizeof(UINavigationSubsystem_GetUINavigationWidget) == 0x000010, "Wrong size on UINavigationSubsystem_GetUINavigationWidget");
static_assert(offsetof(UINavigationSubsystem_GetUINavigationWidget, WidgetName) == 0x000000, "Member 'UINavigationSubsystem_GetUINavigationWidget::WidgetName' has a wrong offset!");
static_assert(offsetof(UINavigationSubsystem_GetUINavigationWidget, ReturnValue) == 0x000008, "Member 'UINavigationSubsystem_GetUINavigationWidget::ReturnValue' has a wrong offset!");

// Function UINavigation.UINavigationSubsystem.IsKeyDown
// 0x0020 (0x0020 - 0x0000)
struct UINavigationSubsystem_IsKeyDown final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A67[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UINavigationSubsystem_IsKeyDown) == 0x000008, "Wrong alignment on UINavigationSubsystem_IsKeyDown");
static_assert(sizeof(UINavigationSubsystem_IsKeyDown) == 0x000020, "Wrong size on UINavigationSubsystem_IsKeyDown");
static_assert(offsetof(UINavigationSubsystem_IsKeyDown, Key) == 0x000000, "Member 'UINavigationSubsystem_IsKeyDown::Key' has a wrong offset!");
static_assert(offsetof(UINavigationSubsystem_IsKeyDown, ReturnValue) == 0x000018, "Member 'UINavigationSubsystem_IsKeyDown::ReturnValue' has a wrong offset!");

// Function UINavigation.UINavigationSubsystem.IsNavigationEnabled
// 0x0001 (0x0001 - 0x0000)
struct UINavigationSubsystem_IsNavigationEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationSubsystem_IsNavigationEnabled) == 0x000001, "Wrong alignment on UINavigationSubsystem_IsNavigationEnabled");
static_assert(sizeof(UINavigationSubsystem_IsNavigationEnabled) == 0x000001, "Wrong size on UINavigationSubsystem_IsNavigationEnabled");
static_assert(offsetof(UINavigationSubsystem_IsNavigationEnabled, ReturnValue) == 0x000000, "Member 'UINavigationSubsystem_IsNavigationEnabled::ReturnValue' has a wrong offset!");

// Function UINavigation.UINavigationSubsystem.IsTopViewportWidget
// 0x0010 (0x0010 - 0x0000)
struct UINavigationSubsystem_IsTopViewportWidget final
{
public:
	class UUserWidget*                            InUserWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A68[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UINavigationSubsystem_IsTopViewportWidget) == 0x000008, "Wrong alignment on UINavigationSubsystem_IsTopViewportWidget");
static_assert(sizeof(UINavigationSubsystem_IsTopViewportWidget) == 0x000010, "Wrong size on UINavigationSubsystem_IsTopViewportWidget");
static_assert(offsetof(UINavigationSubsystem_IsTopViewportWidget, InUserWidget) == 0x000000, "Member 'UINavigationSubsystem_IsTopViewportWidget::InUserWidget' has a wrong offset!");
static_assert(offsetof(UINavigationSubsystem_IsTopViewportWidget, ReturnValue) == 0x000008, "Member 'UINavigationSubsystem_IsTopViewportWidget::ReturnValue' has a wrong offset!");

// Function UINavigation.UINavigationSubsystem.NavigateToWidget
// 0x0010 (0x0010 - 0x0000)
struct UINavigationSubsystem_NavigateToWidget final
{
public:
	class UUINavigationWidget*                    InNavigationWidget;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCancelFocusedWidget;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A69[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UINavigationSubsystem_NavigateToWidget) == 0x000008, "Wrong alignment on UINavigationSubsystem_NavigateToWidget");
static_assert(sizeof(UINavigationSubsystem_NavigateToWidget) == 0x000010, "Wrong size on UINavigationSubsystem_NavigateToWidget");
static_assert(offsetof(UINavigationSubsystem_NavigateToWidget, InNavigationWidget) == 0x000000, "Member 'UINavigationSubsystem_NavigateToWidget::InNavigationWidget' has a wrong offset!");
static_assert(offsetof(UINavigationSubsystem_NavigateToWidget, bCancelFocusedWidget) == 0x000008, "Member 'UINavigationSubsystem_NavigateToWidget::bCancelFocusedWidget' has a wrong offset!");

// Function UINavigation.UINavigationSubsystem.PushViewportWidget
// 0x0008 (0x0008 - 0x0000)
struct UINavigationSubsystem_PushViewportWidget final
{
public:
	class UUserWidget*                            InUserWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationSubsystem_PushViewportWidget) == 0x000008, "Wrong alignment on UINavigationSubsystem_PushViewportWidget");
static_assert(sizeof(UINavigationSubsystem_PushViewportWidget) == 0x000008, "Wrong size on UINavigationSubsystem_PushViewportWidget");
static_assert(offsetof(UINavigationSubsystem_PushViewportWidget, InUserWidget) == 0x000000, "Member 'UINavigationSubsystem_PushViewportWidget::InUserWidget' has a wrong offset!");

// Function UINavigation.UINavigationSubsystem.ReleaseCommandMenus
// 0x0001 (0x0001 - 0x0000)
struct UINavigationSubsystem_ReleaseCommandMenus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationSubsystem_ReleaseCommandMenus) == 0x000001, "Wrong alignment on UINavigationSubsystem_ReleaseCommandMenus");
static_assert(sizeof(UINavigationSubsystem_ReleaseCommandMenus) == 0x000001, "Wrong size on UINavigationSubsystem_ReleaseCommandMenus");
static_assert(offsetof(UINavigationSubsystem_ReleaseCommandMenus, ReturnValue) == 0x000000, "Member 'UINavigationSubsystem_ReleaseCommandMenus::ReturnValue' has a wrong offset!");

// Function UINavigation.UINavigationSubsystem.RemoveViewportWidget
// 0x0008 (0x0008 - 0x0000)
struct UINavigationSubsystem_RemoveViewportWidget final
{
public:
	class UUserWidget*                            InUserWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationSubsystem_RemoveViewportWidget) == 0x000008, "Wrong alignment on UINavigationSubsystem_RemoveViewportWidget");
static_assert(sizeof(UINavigationSubsystem_RemoveViewportWidget) == 0x000008, "Wrong size on UINavigationSubsystem_RemoveViewportWidget");
static_assert(offsetof(UINavigationSubsystem_RemoveViewportWidget, InUserWidget) == 0x000000, "Member 'UINavigationSubsystem_RemoveViewportWidget::InUserWidget' has a wrong offset!");

// Function UINavigation.UINavigationSubsystem.RequestNavigateToNextGroup
// 0x000C (0x000C - 0x0000)
struct UINavigationSubsystem_RequestNavigateToNextGroup final
{
public:
	class FName                                   NextGroupName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A6A[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UINavigationSubsystem_RequestNavigateToNextGroup) == 0x000004, "Wrong alignment on UINavigationSubsystem_RequestNavigateToNextGroup");
static_assert(sizeof(UINavigationSubsystem_RequestNavigateToNextGroup) == 0x00000C, "Wrong size on UINavigationSubsystem_RequestNavigateToNextGroup");
static_assert(offsetof(UINavigationSubsystem_RequestNavigateToNextGroup, NextGroupName) == 0x000000, "Member 'UINavigationSubsystem_RequestNavigateToNextGroup::NextGroupName' has a wrong offset!");
static_assert(offsetof(UINavigationSubsystem_RequestNavigateToNextGroup, ReturnValue) == 0x000008, "Member 'UINavigationSubsystem_RequestNavigateToNextGroup::ReturnValue' has a wrong offset!");

// Function UINavigation.UINavigationSubsystem.SetCursorMoveMethod
// 0x0001 (0x0001 - 0x0000)
struct UINavigationSubsystem_SetCursorMoveMethod final
{
public:
	EGamepadCursorMoveMethod                      MoveMethod;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationSubsystem_SetCursorMoveMethod) == 0x000001, "Wrong alignment on UINavigationSubsystem_SetCursorMoveMethod");
static_assert(sizeof(UINavigationSubsystem_SetCursorMoveMethod) == 0x000001, "Wrong size on UINavigationSubsystem_SetCursorMoveMethod");
static_assert(offsetof(UINavigationSubsystem_SetCursorMoveMethod, MoveMethod) == 0x000000, "Member 'UINavigationSubsystem_SetCursorMoveMethod::MoveMethod' has a wrong offset!");

// Function UINavigation.UINavigationSubsystem.SetCursorMoveMode
// 0x0001 (0x0001 - 0x0000)
struct UINavigationSubsystem_SetCursorMoveMode final
{
public:
	EGamepadCursorMoveMode                        MoveMode;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationSubsystem_SetCursorMoveMode) == 0x000001, "Wrong alignment on UINavigationSubsystem_SetCursorMoveMode");
static_assert(sizeof(UINavigationSubsystem_SetCursorMoveMode) == 0x000001, "Wrong size on UINavigationSubsystem_SetCursorMoveMode");
static_assert(offsetof(UINavigationSubsystem_SetCursorMoveMode, MoveMode) == 0x000000, "Member 'UINavigationSubsystem_SetCursorMoveMode::MoveMode' has a wrong offset!");

// Function UINavigation.UINavigationSubsystem.SetCursorSensitivity
// 0x0004 (0x0004 - 0x0000)
struct UINavigationSubsystem_SetCursorSensitivity final
{
public:
	float                                         Sensitivity;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationSubsystem_SetCursorSensitivity) == 0x000004, "Wrong alignment on UINavigationSubsystem_SetCursorSensitivity");
static_assert(sizeof(UINavigationSubsystem_SetCursorSensitivity) == 0x000004, "Wrong size on UINavigationSubsystem_SetCursorSensitivity");
static_assert(offsetof(UINavigationSubsystem_SetCursorSensitivity, Sensitivity) == 0x000000, "Member 'UINavigationSubsystem_SetCursorSensitivity::Sensitivity' has a wrong offset!");

// Function UINavigation.UINavigationSubsystem.SetCursorSlowDown
// 0x0004 (0x0004 - 0x0000)
struct UINavigationSubsystem_SetCursorSlowDown final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationSubsystem_SetCursorSlowDown) == 0x000004, "Wrong alignment on UINavigationSubsystem_SetCursorSlowDown");
static_assert(sizeof(UINavigationSubsystem_SetCursorSlowDown) == 0x000004, "Wrong size on UINavigationSubsystem_SetCursorSlowDown");
static_assert(offsetof(UINavigationSubsystem_SetCursorSlowDown, Value) == 0x000000, "Member 'UINavigationSubsystem_SetCursorSlowDown::Value' has a wrong offset!");

// Function UINavigation.UINavigationSubsystem.SetNavigationEnable
// 0x0001 (0x0001 - 0x0000)
struct UINavigationSubsystem_SetNavigationEnable final
{
public:
	bool                                          bEnableNavigation;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationSubsystem_SetNavigationEnable) == 0x000001, "Wrong alignment on UINavigationSubsystem_SetNavigationEnable");
static_assert(sizeof(UINavigationSubsystem_SetNavigationEnable) == 0x000001, "Wrong size on UINavigationSubsystem_SetNavigationEnable");
static_assert(offsetof(UINavigationSubsystem_SetNavigationEnable, bEnableNavigation) == 0x000000, "Member 'UINavigationSubsystem_SetNavigationEnable::bEnableNavigation' has a wrong offset!");

// Function UINavigation.UINavigationSubsystem.SimulateTouched
// 0x0008 (0x0008 - 0x0000)
struct UINavigationSubsystem_SimulateTouched final
{
public:
	struct FVector2D                              TouchLocation;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationSubsystem_SimulateTouched) == 0x000004, "Wrong alignment on UINavigationSubsystem_SimulateTouched");
static_assert(sizeof(UINavigationSubsystem_SimulateTouched) == 0x000008, "Wrong size on UINavigationSubsystem_SimulateTouched");
static_assert(offsetof(UINavigationSubsystem_SimulateTouched, TouchLocation) == 0x000000, "Member 'UINavigationSubsystem_SimulateTouched::TouchLocation' has a wrong offset!");

// Function UINavigation.UINavigationSubsystem.SimulateTouchEnded
// 0x0008 (0x0008 - 0x0000)
struct UINavigationSubsystem_SimulateTouchEnded final
{
public:
	struct FVector2D                              TouchLocation;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationSubsystem_SimulateTouchEnded) == 0x000004, "Wrong alignment on UINavigationSubsystem_SimulateTouchEnded");
static_assert(sizeof(UINavigationSubsystem_SimulateTouchEnded) == 0x000008, "Wrong size on UINavigationSubsystem_SimulateTouchEnded");
static_assert(offsetof(UINavigationSubsystem_SimulateTouchEnded, TouchLocation) == 0x000000, "Member 'UINavigationSubsystem_SimulateTouchEnded::TouchLocation' has a wrong offset!");

// Function UINavigation.UINavigationSubsystem.SimulateTouchMoved
// 0x0008 (0x0008 - 0x0000)
struct UINavigationSubsystem_SimulateTouchMoved final
{
public:
	struct FVector2D                              TouchLocation;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationSubsystem_SimulateTouchMoved) == 0x000004, "Wrong alignment on UINavigationSubsystem_SimulateTouchMoved");
static_assert(sizeof(UINavigationSubsystem_SimulateTouchMoved) == 0x000008, "Wrong size on UINavigationSubsystem_SimulateTouchMoved");
static_assert(offsetof(UINavigationSubsystem_SimulateTouchMoved, TouchLocation) == 0x000000, "Member 'UINavigationSubsystem_SimulateTouchMoved::TouchLocation' has a wrong offset!");

// Function UINavigation.UINavigationSubsystem.SimulateTouchStarted
// 0x0008 (0x0008 - 0x0000)
struct UINavigationSubsystem_SimulateTouchStarted final
{
public:
	struct FVector2D                              TouchLocation;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationSubsystem_SimulateTouchStarted) == 0x000004, "Wrong alignment on UINavigationSubsystem_SimulateTouchStarted");
static_assert(sizeof(UINavigationSubsystem_SimulateTouchStarted) == 0x000008, "Wrong size on UINavigationSubsystem_SimulateTouchStarted");
static_assert(offsetof(UINavigationSubsystem_SimulateTouchStarted, TouchLocation) == 0x000000, "Member 'UINavigationSubsystem_SimulateTouchStarted::TouchLocation' has a wrong offset!");

// Function UINavigation.UINavigationSubsystem.IsCursorVisible
// 0x0001 (0x0001 - 0x0000)
struct UINavigationSubsystem_IsCursorVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationSubsystem_IsCursorVisible) == 0x000001, "Wrong alignment on UINavigationSubsystem_IsCursorVisible");
static_assert(sizeof(UINavigationSubsystem_IsCursorVisible) == 0x000001, "Wrong size on UINavigationSubsystem_IsCursorVisible");
static_assert(offsetof(UINavigationSubsystem_IsCursorVisible, ReturnValue) == 0x000000, "Member 'UINavigationSubsystem_IsCursorVisible::ReturnValue' has a wrong offset!");

// Function UINavigation.UINavigationSubsystem.IsGamepadInputType
// 0x0001 (0x0001 - 0x0000)
struct UINavigationSubsystem_IsGamepadInputType final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationSubsystem_IsGamepadInputType) == 0x000001, "Wrong alignment on UINavigationSubsystem_IsGamepadInputType");
static_assert(sizeof(UINavigationSubsystem_IsGamepadInputType) == 0x000001, "Wrong size on UINavigationSubsystem_IsGamepadInputType");
static_assert(offsetof(UINavigationSubsystem_IsGamepadInputType, ReturnValue) == 0x000000, "Member 'UINavigationSubsystem_IsGamepadInputType::ReturnValue' has a wrong offset!");

// Function UINavigation.UINavigationSubsystem.IsKeyboardEnabled
// 0x0001 (0x0001 - 0x0000)
struct UINavigationSubsystem_IsKeyboardEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationSubsystem_IsKeyboardEnabled) == 0x000001, "Wrong alignment on UINavigationSubsystem_IsKeyboardEnabled");
static_assert(sizeof(UINavigationSubsystem_IsKeyboardEnabled) == 0x000001, "Wrong size on UINavigationSubsystem_IsKeyboardEnabled");
static_assert(offsetof(UINavigationSubsystem_IsKeyboardEnabled, ReturnValue) == 0x000000, "Member 'UINavigationSubsystem_IsKeyboardEnabled::ReturnValue' has a wrong offset!");

// Function UINavigation.UINavigationWidget.IsTabActivated
// 0x0001 (0x0001 - 0x0000)
struct UINavigationWidget_IsTabActivated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationWidget_IsTabActivated) == 0x000001, "Wrong alignment on UINavigationWidget_IsTabActivated");
static_assert(sizeof(UINavigationWidget_IsTabActivated) == 0x000001, "Wrong size on UINavigationWidget_IsTabActivated");
static_assert(offsetof(UINavigationWidget_IsTabActivated, ReturnValue) == 0x000000, "Member 'UINavigationWidget_IsTabActivated::ReturnValue' has a wrong offset!");

// Function UINavigation.UINavigationWidget.RebuildFromNavigationSubsystem
// 0x0008 (0x0008 - 0x0000)
struct UINavigationWidget_RebuildFromNavigationSubsystem final
{
public:
	class UUINavigationSubsystem*                 UINavigationSubsystem;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationWidget_RebuildFromNavigationSubsystem) == 0x000008, "Wrong alignment on UINavigationWidget_RebuildFromNavigationSubsystem");
static_assert(sizeof(UINavigationWidget_RebuildFromNavigationSubsystem) == 0x000008, "Wrong size on UINavigationWidget_RebuildFromNavigationSubsystem");
static_assert(offsetof(UINavigationWidget_RebuildFromNavigationSubsystem, UINavigationSubsystem) == 0x000000, "Member 'UINavigationWidget_RebuildFromNavigationSubsystem::UINavigationSubsystem' has a wrong offset!");

// Function UINavigation.UINavigationWidget.ReleaseFromNavigationSubsystem
// 0x0008 (0x0008 - 0x0000)
struct UINavigationWidget_ReleaseFromNavigationSubsystem final
{
public:
	class UUINavigationSubsystem*                 UINavigationSubsystem;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationWidget_ReleaseFromNavigationSubsystem) == 0x000008, "Wrong alignment on UINavigationWidget_ReleaseFromNavigationSubsystem");
static_assert(sizeof(UINavigationWidget_ReleaseFromNavigationSubsystem) == 0x000008, "Wrong size on UINavigationWidget_ReleaseFromNavigationSubsystem");
static_assert(offsetof(UINavigationWidget_ReleaseFromNavigationSubsystem, UINavigationSubsystem) == 0x000000, "Member 'UINavigationWidget_ReleaseFromNavigationSubsystem::UINavigationSubsystem' has a wrong offset!");

// Function UINavigation.UINavigationWidget.SetEnableFocus
// 0x0001 (0x0001 - 0x0000)
struct UINavigationWidget_SetEnableFocus final
{
public:
	bool                                          bEnableFocus;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationWidget_SetEnableFocus) == 0x000001, "Wrong alignment on UINavigationWidget_SetEnableFocus");
static_assert(sizeof(UINavigationWidget_SetEnableFocus) == 0x000001, "Wrong size on UINavigationWidget_SetEnableFocus");
static_assert(offsetof(UINavigationWidget_SetEnableFocus, bEnableFocus) == 0x000000, "Member 'UINavigationWidget_SetEnableFocus::bEnableFocus' has a wrong offset!");

// Function UINavigation.UINavigationWidget.SetFocusBrush
// 0x0088 (0x0088 - 0x0000)
struct UINavigationWidget_SetFocusBrush final
{
public:
	struct FSlateBrush                            InBrush;                                           // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationWidget_SetFocusBrush) == 0x000008, "Wrong alignment on UINavigationWidget_SetFocusBrush");
static_assert(sizeof(UINavigationWidget_SetFocusBrush) == 0x000088, "Wrong size on UINavigationWidget_SetFocusBrush");
static_assert(offsetof(UINavigationWidget_SetFocusBrush, InBrush) == 0x000000, "Member 'UINavigationWidget_SetFocusBrush::InBrush' has a wrong offset!");

// Function UINavigation.UINavigationWidget.SetRectOffset
// 0x0010 (0x0010 - 0x0000)
struct UINavigationWidget_SetRectOffset final
{
public:
	struct FMargin                                InRectOffset;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationWidget_SetRectOffset) == 0x000004, "Wrong alignment on UINavigationWidget_SetRectOffset");
static_assert(sizeof(UINavigationWidget_SetRectOffset) == 0x000010, "Wrong size on UINavigationWidget_SetRectOffset");
static_assert(offsetof(UINavigationWidget_SetRectOffset, InRectOffset) == 0x000000, "Member 'UINavigationWidget_SetRectOffset::InRectOffset' has a wrong offset!");

// Function UINavigation.UINavigationWidget.GetCustomFocusWidgetType
// 0x0001 (0x0001 - 0x0000)
struct UINavigationWidget_GetCustomFocusWidgetType final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationWidget_GetCustomFocusWidgetType) == 0x000001, "Wrong alignment on UINavigationWidget_GetCustomFocusWidgetType");
static_assert(sizeof(UINavigationWidget_GetCustomFocusWidgetType) == 0x000001, "Wrong size on UINavigationWidget_GetCustomFocusWidgetType");
static_assert(offsetof(UINavigationWidget_GetCustomFocusWidgetType, ReturnValue) == 0x000000, "Member 'UINavigationWidget_GetCustomFocusWidgetType::ReturnValue' has a wrong offset!");

// Function UINavigation.UINavigationWidget.GetIndexInWrapper
// 0x0004 (0x0004 - 0x0000)
struct UINavigationWidget_GetIndexInWrapper final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationWidget_GetIndexInWrapper) == 0x000004, "Wrong alignment on UINavigationWidget_GetIndexInWrapper");
static_assert(sizeof(UINavigationWidget_GetIndexInWrapper) == 0x000004, "Wrong size on UINavigationWidget_GetIndexInWrapper");
static_assert(offsetof(UINavigationWidget_GetIndexInWrapper, ReturnValue) == 0x000000, "Member 'UINavigationWidget_GetIndexInWrapper::ReturnValue' has a wrong offset!");

// Function UINavigation.UINavigationWidget.GetNavigationWidgetType
// 0x0001 (0x0001 - 0x0000)
struct UINavigationWidget_GetNavigationWidgetType final
{
public:
	EUINavigationWidgetType                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationWidget_GetNavigationWidgetType) == 0x000001, "Wrong alignment on UINavigationWidget_GetNavigationWidgetType");
static_assert(sizeof(UINavigationWidget_GetNavigationWidgetType) == 0x000001, "Wrong size on UINavigationWidget_GetNavigationWidgetType");
static_assert(offsetof(UINavigationWidget_GetNavigationWidgetType, ReturnValue) == 0x000000, "Member 'UINavigationWidget_GetNavigationWidgetType::ReturnValue' has a wrong offset!");

// Function UINavigation.UINavigationWidget.GetStaticNavigationIndex_Down
// 0x0004 (0x0004 - 0x0000)
struct UINavigationWidget_GetStaticNavigationIndex_Down final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationWidget_GetStaticNavigationIndex_Down) == 0x000004, "Wrong alignment on UINavigationWidget_GetStaticNavigationIndex_Down");
static_assert(sizeof(UINavigationWidget_GetStaticNavigationIndex_Down) == 0x000004, "Wrong size on UINavigationWidget_GetStaticNavigationIndex_Down");
static_assert(offsetof(UINavigationWidget_GetStaticNavigationIndex_Down, ReturnValue) == 0x000000, "Member 'UINavigationWidget_GetStaticNavigationIndex_Down::ReturnValue' has a wrong offset!");

// Function UINavigation.UINavigationWidget.GetStaticNavigationIndex_Left
// 0x0004 (0x0004 - 0x0000)
struct UINavigationWidget_GetStaticNavigationIndex_Left final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationWidget_GetStaticNavigationIndex_Left) == 0x000004, "Wrong alignment on UINavigationWidget_GetStaticNavigationIndex_Left");
static_assert(sizeof(UINavigationWidget_GetStaticNavigationIndex_Left) == 0x000004, "Wrong size on UINavigationWidget_GetStaticNavigationIndex_Left");
static_assert(offsetof(UINavigationWidget_GetStaticNavigationIndex_Left, ReturnValue) == 0x000000, "Member 'UINavigationWidget_GetStaticNavigationIndex_Left::ReturnValue' has a wrong offset!");

// Function UINavigation.UINavigationWidget.GetStaticNavigationIndex_Right
// 0x0004 (0x0004 - 0x0000)
struct UINavigationWidget_GetStaticNavigationIndex_Right final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationWidget_GetStaticNavigationIndex_Right) == 0x000004, "Wrong alignment on UINavigationWidget_GetStaticNavigationIndex_Right");
static_assert(sizeof(UINavigationWidget_GetStaticNavigationIndex_Right) == 0x000004, "Wrong size on UINavigationWidget_GetStaticNavigationIndex_Right");
static_assert(offsetof(UINavigationWidget_GetStaticNavigationIndex_Right, ReturnValue) == 0x000000, "Member 'UINavigationWidget_GetStaticNavigationIndex_Right::ReturnValue' has a wrong offset!");

// Function UINavigation.UINavigationWidget.GetStaticNavigationIndex_Self
// 0x0004 (0x0004 - 0x0000)
struct UINavigationWidget_GetStaticNavigationIndex_Self final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationWidget_GetStaticNavigationIndex_Self) == 0x000004, "Wrong alignment on UINavigationWidget_GetStaticNavigationIndex_Self");
static_assert(sizeof(UINavigationWidget_GetStaticNavigationIndex_Self) == 0x000004, "Wrong size on UINavigationWidget_GetStaticNavigationIndex_Self");
static_assert(offsetof(UINavigationWidget_GetStaticNavigationIndex_Self, ReturnValue) == 0x000000, "Member 'UINavigationWidget_GetStaticNavigationIndex_Self::ReturnValue' has a wrong offset!");

// Function UINavigation.UINavigationWidget.GetStaticNavigationIndex_Up
// 0x0004 (0x0004 - 0x0000)
struct UINavigationWidget_GetStaticNavigationIndex_Up final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationWidget_GetStaticNavigationIndex_Up) == 0x000004, "Wrong alignment on UINavigationWidget_GetStaticNavigationIndex_Up");
static_assert(sizeof(UINavigationWidget_GetStaticNavigationIndex_Up) == 0x000004, "Wrong size on UINavigationWidget_GetStaticNavigationIndex_Up");
static_assert(offsetof(UINavigationWidget_GetStaticNavigationIndex_Up, ReturnValue) == 0x000000, "Member 'UINavigationWidget_GetStaticNavigationIndex_Up::ReturnValue' has a wrong offset!");

// Function UINavigation.UINavigationWidget.HasFocus
// 0x0001 (0x0001 - 0x0000)
struct UINavigationWidget_HasFocus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationWidget_HasFocus) == 0x000001, "Wrong alignment on UINavigationWidget_HasFocus");
static_assert(sizeof(UINavigationWidget_HasFocus) == 0x000001, "Wrong size on UINavigationWidget_HasFocus");
static_assert(offsetof(UINavigationWidget_HasFocus, ReturnValue) == 0x000000, "Member 'UINavigationWidget_HasFocus::ReturnValue' has a wrong offset!");

// Function UINavigation.UINavigationWidget.IsStaticNavigationAutoCalculateLeftOrRight
// 0x0001 (0x0001 - 0x0000)
struct UINavigationWidget_IsStaticNavigationAutoCalculateLeftOrRight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationWidget_IsStaticNavigationAutoCalculateLeftOrRight) == 0x000001, "Wrong alignment on UINavigationWidget_IsStaticNavigationAutoCalculateLeftOrRight");
static_assert(sizeof(UINavigationWidget_IsStaticNavigationAutoCalculateLeftOrRight) == 0x000001, "Wrong size on UINavigationWidget_IsStaticNavigationAutoCalculateLeftOrRight");
static_assert(offsetof(UINavigationWidget_IsStaticNavigationAutoCalculateLeftOrRight, ReturnValue) == 0x000000, "Member 'UINavigationWidget_IsStaticNavigationAutoCalculateLeftOrRight::ReturnValue' has a wrong offset!");

// Function UINavigation.UINavigationWidget.IsStaticNavigationWidget
// 0x0001 (0x0001 - 0x0000)
struct UINavigationWidget_IsStaticNavigationWidget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationWidget_IsStaticNavigationWidget) == 0x000001, "Wrong alignment on UINavigationWidget_IsStaticNavigationWidget");
static_assert(sizeof(UINavigationWidget_IsStaticNavigationWidget) == 0x000001, "Wrong size on UINavigationWidget_IsStaticNavigationWidget");
static_assert(offsetof(UINavigationWidget_IsStaticNavigationWidget, ReturnValue) == 0x000000, "Member 'UINavigationWidget_IsStaticNavigationWidget::ReturnValue' has a wrong offset!");

}

