#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: QRSL

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "HottaFramework_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// Enum QRSL.ESoloLeagueStage
// NumValues: 0x000A
enum class ESoloLeagueStage : uint8
{
	BattleWait                               = 0,
	BattleBanPick                            = 1,
	BattlePrepare                            = 2,
	BattleBegin                              = 3,
	BattleMidterm                            = 4,
	BattleFinal                              = 5,
	BattleSettle                             = 6,
	BattleOver                               = 7,
	BattleIdle                               = 8,
	ESoloLeagueStage_MAX                     = 9,
};

// Enum QRSL.ESkillResetType
// NumValues: 0x0006
enum class ESkillResetType : uint8
{
	SkateboardSkill                          = 0,
	GlidSkill                                = 1,
	CrouchSkill                              = 2,
	BowAimmingState                          = 3,
	DynamicGravity                           = 4,
	ESkillResetType_MAX                      = 5,
};

// Enum QRSL.EBossCustommadeType
// NumValues: 0x0004
enum class EBossCustommadeType : uint8
{
	E_Locked                                 = 0,
	E_Unlocked                               = 1,
	E_Fighting                               = 2,
	E_MAX                                    = 3,
};

// Enum QRSL.EEndlessNewLandLevelType
// NumValues: 0x0006
enum class EEndlessNewLandLevelType : uint8
{
	ENDLESS_NEW_LAND_TYPE_ICE                = 0,
	ENDLESS_NEW_LAND_TYPE_FIRE               = 1,
	ENDLESS_NEW_LAND_TYPE_THUNDER            = 2,
	ENDLESS_NEW_LAND_TYPE_PHYSICS            = 3,
	ENDLESS_NEW_LAND_TYPE_SUPERPOWER         = 4,
	ENDLESS_NEW_LAND_TYPE_MAX                = 5,
};

// Enum QRSL.EVinesIKType
// NumValues: 0x0008
enum class EVinesIKType : uint8
{
	LeftHand                                 = 0,
	RightHand                                = 1,
	LeftFoot                                 = 2,
	RightFoot                                = 3,
	LeftCalf                                 = 4,
	RightCalf                                = 5,
	VinesIK_MAX                              = 6,
	EVinesIKType_MAX                         = 7,
};

// Enum QRSL.EActivityClone_TeamNo
// NumValues: 0x0006
enum class EActivityClone_TeamNo : uint8
{
	TeamInvalid                              = 0,
	TeamA                                    = 1,
	TeamB                                    = 2,
	TeamC                                    = 3,
	TeamD                                    = 4,
	EActivityClone_MAX                       = 5,
};

// Enum QRSL.ETreasureChestBuryFailedReason
// NumValues: 0x0005
enum class ETreasureChestBuryFailedReason : uint8
{
	NearlyHasBuriedChest                     = 0,
	CameraBeMasked                           = 1,
	MapCannotUse                             = 2,
	LocationCannotUse                        = 3,
	MAX                                      = 4,
};

// Enum QRSL.ECookingFailedReason
// NumValues: 0x0005
enum class ECookingFailedReason : uint8
{
	SUCCESS                                  = 0,
	OTHER                                    = 1,
	NO_INGREDIENT                            = 2,
	INVENTORY_NOT_ENOUGH                     = 3,
	MAX                                      = 4,
};

// Enum QRSL.ETreasureMapDigFailedReason
// NumValues: 0x0006
enum class ETreasureMapDigFailedReason : uint8
{
	DistanceTooLong                          = 0,
	DistanceNearby                           = 1,
	NotTeamLeader                            = 2,
	TeammateNotNearby                        = 3,
	TeammateFragmentNotEnough                = 4,
	MAX                                      = 5,
};

// Enum QRSL.EEndlessIdolumMsgId
// NumValues: 0x000F
enum class EEndlessIdolumMsgId : uint8
{
	ClientRemoveAzimuth                      = 0,
	ClientOpenSettle                         = 1,
	ClientReliveTick                         = 2,
	ClientRefreshTick                        = 3,
	ClientStartIdolum                        = 4,
	ClientTryAgain                           = 5,
	ClientTimeOut                            = 6,
	ServerRequestLevelInfo                   = 100,
	ServerRequestStart                       = 101,
	ServerRequestCancle                      = 102,
	ServerRequestTryAgain                    = 103,
	ServerRequestEntry                       = 104,
	ServerRequestLeave                       = 105,
	ServerRequestGetAward                    = 106,
	EEndlessIdolumMsgId_MAX                  = 107,
};

// Enum QRSL.EAccepteEscortingFailedReason
// NumValues: 0x000A
enum class EAccepteEscortingFailedReason : uint8
{
	InTeam                                   = 0,
	NotOpen                                  = 1,
	Finished                                 = 2,
	Accepted                                 = 3,
	NoCount                                  = 4,
	InClientGroup                            = 5,
	IsMatching                               = 6,
	MaxJoinNumber                            = 7,
	MaxLine                                  = 8,
	MAX                                      = 9,
};

// Enum QRSL.EAccepteOrienteeringFailedReason
// NumValues: 0x000A
enum class EAccepteOrienteeringFailedReason : uint8
{
	InTeam                                   = 0,
	NotOpen                                  = 1,
	Finished                                 = 2,
	Accepted                                 = 3,
	NoCount                                  = 4,
	InClientGroup                            = 5,
	IsMatching                               = 6,
	MaxJoinNumber                            = 7,
	MaxLine                                  = 8,
	MAX                                      = 9,
};

// Enum QRSL.EArtifactAdvanceFailedReason
// NumValues: 0x0007
enum class EArtifactAdvanceFailedReason : uint8
{
	ARTIFACT_ADVANCE_SUCCESS                 = 0,
	ARTIFACT_ADVANCE_FAILED_OTHER            = 1,
	ARTIFACT_ADVANCE_FAILED_CARD_NOT_ENOUGH  = 2,
	ARTIFACT_ADVANCE_FAILED_CURRENCY_NOT_ENOUGH = 3,
	ARTIFACT_ADVANCE_FAILED_COUNT_LIMIT      = 4,
	ARTIFACT_ADVANCE_FAILED_IN_WAR           = 5,
	MAX                                      = 6,
};

// Enum QRSL.EArtifactUpgradeFailedReason
// NumValues: 0x0007
enum class EArtifactUpgradeFailedReason : uint8
{
	ARTIFACT_UPGRADE_SUCCESS                 = 0,
	ARTIFACT_UPGRADE_FAILED_OTHER            = 1,
	ARTIFACT_UPGRADE_FAILED_CARD_NOT_ENOUGH  = 2,
	ARTIFACT_UPGRADE_FAILED_CURRENCY_NOT_ENOUGH = 3,
	ARTIFACT_UPGRADE_FAILED_COUNT_LIMIT      = 4,
	ARTIFACT_UPGRADE_FAILED_IN_WAR           = 5,
	MAX                                      = 6,
};

// Enum QRSL.E8V8PlayerCamp
// NumValues: 0x0005
enum class E8V8PlayerCamp : uint8
{
	E_CampNone                               = 0,
	E_CampA                                  = 1,
	E_CampB                                  = 2,
	E_CampC                                  = 3,
	E_MAX                                    = 4,
};

// Enum QRSL.ESoloLeagueResult
// NumValues: 0x0005
enum class ESoloLeagueResult : uint8
{
	WIN                                      = 0,
	DOGFALL                                  = 1,
	FAIL                                     = 2,
	UNKNOWN                                  = 3,
	ESoloLeagueResult_MAX                    = 4,
};

// Enum QRSL.ERequestTreasureChestFailedReason
// NumValues: 0x0004
enum class ERequestTreasureChestFailedReason : uint8
{
	NoRequestCount                           = 0,
	InventoryFull                            = 1,
	HasOtherChest                            = 2,
	MAX                                      = 3,
};

// Enum QRSL.E8V8PlayerState
// NumValues: 0x0009
enum class E8V8PlayerState : uint8
{
	E_Invalid                                = 0,
	E_BeforeStart                            = 1,
	E_Gaming                                 = 2,
	E_EnterAfterStart                        = 3,
	E_EnterReconnect                         = 4,
	E_Escapted                               = 5,
	E_SettleFinished                         = 6,
	E_Observer                               = 7,
	E_MAX                                    = 8,
};

// Enum QRSL.EQRSLHackerTerminalDeviceStateType
// NumValues: 0x0004
enum class EQRSLHackerTerminalDeviceStateType : uint8
{
	Shutdown                                 = 0,
	NormalMode                               = 1,
	DozeMode                                 = 2,
	Max                                      = 3,
};

// Enum QRSL.EHackerCrackToolType
// NumValues: 0x0006
enum class EHackerCrackToolType : uint8
{
	HACKER_CRACK_TOOL_NONE                   = 0,
	HACKER_CRACK_TOOL_DEFAULT                = 1,
	HACKER_CRACK_TOOL_ITEMS                  = 2,
	HACKER_CRACK_TOOL_DECODE                 = 3,
	HACKER_CRACK_TOOL_BRUTE                  = 4,
	HACKER_CRACK_TOOL_MAX                    = 5,
};

// Enum QRSL.ELeisureRoomDataType
// NumValues: 0x0007
enum class ELeisureRoomDataType : uint8
{
	Null                                     = 0,
	Furniture                                = 1,
	Action                                   = 2,
	Clothes                                  = 3,
	Sock                                     = 4,
	Shoe                                     = 5,
	ELeisureRoomDataType_MAX                 = 6,
};

// Enum QRSL.ELeisureRoomDataUnlockType
// NumValues: 0x0006
enum class ELeisureRoomDataUnlockType : uint8
{
	Null                                     = 0,
	DefaultUnlock                            = 1,
	HaveFurnitureToUnlock                    = 2,
	AutoUsedItemToUnlock                     = 3,
	UpgradeWeaponStarToUnlock                = 4,
	ELeisureRoomDataUnlockType_MAX           = 5,
};

// Enum QRSL.EWorkGuideModeType
// NumValues: 0x0004
enum class EWorkGuideModeType : uint8
{
	EWGT_ChallengeMode                       = 0,
	EWGT_SimpleMode                          = 1,
	EWGT_EndlessMode                         = 2,
	EWGT_MAX                                 = 3,
};

// Enum QRSL.EAppSMSMessageReceiveSourceType
// NumValues: 0x0004
enum class EAppSMSMessageReceiveSourceType : uint8
{
	ESMS_AS_BlueprintInterface               = 0,
	ESMS_AS_Quset                            = 1,
	ESMS_AS_Area                             = 2,
	ESMS_AS_MAX                              = 3,
};

// Enum QRSL.EHackerTerminalMarketItemType
// NumValues: 0x0006
enum class EHackerTerminalMarketItemType : uint8
{
	SystemTheme                              = 0,
	BodyModel                                = 1,
	LeftSticker                              = 2,
	MidSticker                               = 3,
	RightSticker                             = 4,
	Max                                      = 5,
};

// Enum QRSL.EQRSLHackerTerminalDeviceSignalStatus
// NumValues: 0x0003
enum class EQRSLHackerTerminalDeviceSignalStatus : uint8
{
	NoSignal                                 = 0,
	HighSignal                               = 1,
	Max                                      = 2,
};

// Enum QRSL.EQRSLHackerTerminalEntryButtonType
// NumValues: 0x0004
enum class EQRSLHackerTerminalEntryButtonType : uint8
{
	HACKER_ENTRY_BUTTON_NONE                 = 0,
	HACKER_ENTRY_BUTTON_RESET                = 1,
	HACKER_ENTRY_BUTTON_SMS_QUICK_REPLY      = 2,
	HACKER_ENTRY_BUTTON_MAX                  = 3,
};

// Enum QRSL.EQRSLHackerTerminalFormType
// NumValues: 0x0003
enum class EQRSLHackerTerminalFormType : uint8
{
	QuickForm                                = 0,
	MainForm                                 = 1,
	Max                                      = 2,
};

// Enum QRSL.EQRSLHackerTerminalPageType
// NumValues: 0x0005
enum class EQRSLHackerTerminalPageType : uint8
{
	TerminalSetting                          = 0,
	AppList                                  = 1,
	ThinkTank                                = 2,
	Personalization                          = 3,
	Max                                      = 4,
};

// Enum QRSL.EQRSLHackerTerminalDeviceBatteryState
// NumValues: 0x0003
enum class EQRSLHackerTerminalDeviceBatteryState : uint8
{
	Unplugged                                = 0,
	Charging                                 = 1,
	Max                                      = 2,
};

// Enum QRSL.EQRSLHackerTerminalAppLifetimeType
// NumValues: 0x0005
enum class EQRSLHackerTerminalAppLifetimeType : uint8
{
	None                                     = 0,
	Started                                  = 1,
	Exited                                   = 2,
	Terminated                               = 3,
	EQRSLHackerTerminalAppLifetimeType_MAX   = 4,
};

// Enum QRSL.EQRSLHackerTerminalAppStartupType
// NumValues: 0x0005
enum class EQRSLHackerTerminalAppStartupType : uint8
{
	NoStartup                                = 0,
	AutoStartup                              = 1,
	UserStartup                              = 2,
	ResumeStartup                            = 3,
	EQRSLHackerTerminalAppStartupType_MAX    = 4,
};

// Enum QRSL.EActivityClonePlayerState
// NumValues: 0x0007
enum class EActivityClonePlayerState : uint8
{
	PlayerState_Invalid                      = 0,
	PlayerState_Alive                        = 1,
	PlayerState_Eliminated                   = 2,
	PlayerState_QuitBeforeStart              = 3,
	PlayerState_EnterAfterStart              = 4,
	PlayerState_Finish                       = 5,
	PlayerState_MAX                          = 6,
};

// Enum QRSL.EActivityClone_AttackFightRelation
// NumValues: 0x0004
enum class EActivityClone_AttackFightRelation : uint8
{
	Default                                  = 0,
	AttackAll                                = 1,
	AllttackOtherTeamOnly                    = 2,
	EActivityClone_MAX                       = 3,
};

// Enum QRSL.EHotWaveImpactPlayerState
// NumValues: 0x0005
enum class EHotWaveImpactPlayerState : uint8
{
	EHWI_Invalid                             = 0,
	EHWI_Survival                            = 1,
	EHWI_Eliminated                          = 2,
	EHWI_EnterAfterStart                     = 3,
	EHWI_MAX                                 = 4,
};

// Enum QRSL.EMowingCondition
// NumValues: 0x000B
enum class EMowingCondition : uint8
{
	EPerfect1_UseComboSkills                 = 0,
	EPerfect2_UseArtifacts                   = 1,
	EPerfect3_UseDodgeSkills                 = 2,
	EPerfect4_BreakingShields                = 3,
	EPerfect5_TargetUseRageSkills            = 4,
	EPerfect6_UseRecoverHPs                  = 5,
	EPerfect7_TriggerDeathImmunes            = 6,
	EPerfect8_BeAttackedTimes                = 7,
	EPerfect9_TriggerTimeStops               = 8,
	EPerfect10_TimeLimit                     = 9,
	EMowingCondition_MAX                     = 10,
};

// Enum QRSL.EMowingResult
// NumValues: 0x0005
enum class EMowingResult : uint8
{
	ENoWin                                   = 0,
	EAllUndone                               = 1,
	EOneFinished                             = 2,
	ETwoFinished                             = 3,
	EMowingResult_MAX                        = 4,
};

// Enum QRSL.EMowingCondState
// NumValues: 0x0004
enum class EMowingCondState : uint8
{
	Unknown                                  = 0,
	Right                                    = 1,
	Wrong                                    = 2,
	EMowingCondState_MAX                     = 3,
};

// Enum QRSL.ESquatJumpPlayerState
// NumValues: 0x0006
enum class ESquatJumpPlayerState : uint8
{
	ESJ_Invalid                              = 0,
	ESJ_Survival                             = 1,
	ESJ_Eliminated                           = 2,
	ESJ_QuitBeforeStart                      = 3,
	ESJ_EnterAfterStart                      = 4,
	ESJ_MAX                                  = 5,
};

// Enum QRSL.EWorkGuideQualityType
// NumValues: 0x0004
enum class EWorkGuideQualityType : uint8
{
	WGQT_COMMON                              = 0,
	WGQT_GOOD                                = 1,
	WGQT_SUPER                               = 2,
	WGQT_MAX                                 = 3,
};

// Enum QRSL.EQRSLHackerTerminalAppAutoStartupType
// NumValues: 0x0004
enum class EQRSLHackerTerminalAppAutoStartupType : uint8
{
	None                                     = 0,
	AutoStartupWhenUnlock                    = 1,
	AutoStartup                              = 2,
	EQRSLHackerTerminalAppAutoStartupType_MAX = 3,
};

// Enum QRSL.EArtifactStrengthenType
// NumValues: 0x0004
enum class EArtifactStrengthenType : uint8
{
	Details                                  = 0,
	Upgrade                                  = 1,
	Advance                                  = 2,
	EArtifactStrengthenType_MAX              = 3,
};

// Enum QRSL.EHottaScriptCmdClassType
// NumValues: 0x0011
enum class EHottaScriptCmdClassType : uint8
{
	Min                                      = 0,
	SCCT_AQRSLPlayerCharacter                = 1,
	SCCT_AQRSLPlayerController               = 2,
	SCCT_AWeaponBase                         = 3,
	SCCT_UInventoryComponent                 = 4,
	SCCT_UHottaSkillSystemComponent          = 5,
	SCCT_UHottaSkillEffectComponent          = 6,
	SCCT_UHottaCharacterStatusComponent      = 7,
	SCCT_UQRSLQuestComponent                 = 8,
	SCCT_UHottaCharacterStateManagerComponent = 9,
	SCCT_UHottaShopComponent                 = 10,
	SCCT_UQRSLEquipComponent                 = 11,
	SCCT_UQRSLAchievementComponent           = 12,
	SCCT_UQRSLCookingComponent               = 13,
	SCCT_UQRSLCharacterMovementComponent     = 14,
	SCCT_UQRSLCheatManager                   = 15,
	MAX                                      = 16,
};

// Enum QRSL.EHottaScriptObjectCmdType
// NumValues: 0x0007
enum class EHottaScriptObjectCmdType : uint8
{
	ScriptObjCmdType_Command                 = 0,
	ScriptObjCmdType_Delay                   = 1,
	ScriptObjCmdType_ForStart                = 2,
	ScriptObjCmdType_ForEnd                  = 3,
	ScriptObjCmdType_Unknow                  = 4,
	ScriptObjCmdType__MAX                    = 5,
	ScriptObjCmdType_MAX                     = 6,
};

// Enum QRSL.EBeachVolleyballTsetType
// NumValues: 0x0003
enum class EBeachVolleyballTsetType : uint8
{
	None                                     = 0,
	EBV_TsetType_ReceiveTheBall              = 1,
	Max                                      = 2,
};

// Enum QRSL.EBeachVolleyballSettleType
// NumValues: 0x0005
enum class EBeachVolleyballSettleType : uint8
{
	None                                     = 0,
	EBV_SettleType_PlayerLevel               = 1,
	EBV_SettleType_Normal                    = 2,
	EBV_SettleType_DeadHeat                  = 3,
	Max                                      = 4,
};

// Enum QRSL.EBeachVolleyballMoveType
// NumValues: 0x000C
enum class EBeachVolleyballMoveType : uint8
{
	None                                     = 0,
	EBV_MoveType_Bat                         = 1,
	EBV_MoveType_Pass                        = 2,
	EBV_MoveType_Serve                       = 3,
	EBV_MoveType_Rush                        = 4,
	EBV_MoveType_Smash                       = 5,
	EBV_MoveType_SubsidiarySmash             = 6,
	EBV_MoveType_Net                         = 7,
	EBV_MoveType_ServeAutoMove               = 8,
	EBV_MoveType_BatAutoMove                 = 9,
	EBV_MoveType_SettleAutoMove              = 10,
	Max                                      = 11,
};

// Enum QRSL.EBeachVolleyballButtonType
// NumValues: 0x0006
enum class EBeachVolleyballButtonType : uint8
{
	None                                     = 0,
	EBV_ButtonType_Bat                       = 1,
	EBV_ButtonType_Serve                     = 2,
	EBV_ButtonType_Rush                      = 3,
	EBV_ButtonType_Smash                     = 4,
	Max                                      = 5,
};

// Enum QRSL.EBeachVolleyballVisualActorType
// NumValues: 0x000A
enum class EBeachVolleyballVisualActorType : uint8
{
	None                                     = 0,
	EBV_VisualActorType_ServePoint           = 1,
	EBV_VisualActorType_Ball                 = 2,
	EBV_VisualActorType_Net                  = 3,
	EBV_VisualActorType_BallPark             = 4,
	EBV_VisualActorType_ExternalField        = 5,
	EBV_VisualActorType_Applique             = 6,
	EBV_VisualActorType_CommunalApplique     = 7,
	EBV_VisualActorType_Settle               = 8,
	Max                                      = 9,
};

// Enum QRSL.EBeachVolleyballGameStageType
// NumValues: 0x0007
enum class EBeachVolleyballGameStageType : uint8
{
	None                                     = 0,
	EBV_GameStage_Await                      = 1,
	EBV_GameStage_Serve                      = 2,
	EBV_GameStage_Stick                      = 3,
	EBV_GameStage_Settle                     = 4,
	EBV_GameStage_GameOver                   = 5,
	Max                                      = 6,
};

// Enum QRSL.EBeachVolleyballMessageType
// NumValues: 0x0010
enum class EBeachVolleyballMessageType : uint8
{
	EBV_MESSAGE_ClientInitializeCamera       = 0,
	EBV_MESSAGE_ClientPlayerMoveToServicePoint = 1,
	EBV_MESSAGE_ClientModifyingPlayerControl = 2,
	EBV_MESSAGE_ClientReleassedButton        = 3,
	EBV_MESSAGE_TeamServeTips                = 4,
	EBV_MESSAGE_TeamScoreTips                = 5,
	EBV_MESSAGE_PlayerReadyToServe           = 6,
	EBV_MESSAGE_PlayerSendServeInfoToServer  = 7,
	EBV_MESSAGE_SendClientBallMoveInfo       = 8,
	EBV_MESSAGE_PlayerOnServeABallBtnPressedOrReleased = 9,
	EBV_MESSAGE_SettleInfo                   = 10,
	EBV_MESSAGE_SubsidiaryJump               = 11,
	EBV_MESSAGE_Win                          = 12,
	EBV_MESSAGE_Lose                         = 13,
	EBV_MESSAGE_Draw                         = 14,
	EBV_MESSAGE_MAX                          = 15,
};

// Enum QRSL.EAKCacheType
// NumValues: 0x0003
enum class EAKCacheType : uint8
{
	EAKCacheType_Noise                       = 0,
	EAKCacheType_Current                     = 1,
	EAKCacheType_MAX                         = 2,
};

// Enum QRSL.EEnergyGrabStage
// NumValues: 0x0006
enum class EEnergyGrabStage : uint8
{
	WaitingOtherPlayers                      = 0,
	PreparingForChooseCamp                   = 1,
	ChoosingCamp                             = 2,
	GrabbingEnergy                           = 3,
	Portal                                   = 4,
	EEnergyGrabStage_MAX                     = 5,
};

// Enum QRSL.EHottaGamepadCameraPlace
// NumValues: 0x0003
enum class EHottaGamepadCameraPlace : uint8
{
	Character                                = 0,
	Mount                                    = 1,
	EHottaGamepadCameraPlace_MAX             = 2,
};

// Enum QRSL.ELockFileStatus
// NumValues: 0x0003
enum class ELockFileStatus : uint8
{
	LOCK                                     = 0,
	UNLOCK                                   = 1,
	ELockFileStatus_MAX                      = 2,
};

// Enum QRSL.EOptionPakEvent
// NumValues: 0x0007
enum class EOptionPakEvent : uint8
{
	EVENT_FINISH_DL                          = 0,
	EVENT_CANCEL_DL                          = 1,
	EVENT_START_DL                           = 2,
	EVENT_MODIFY_PRI                         = 3,
	EVENT_START_FIX                          = 4,
	UNKNOWN                                  = 5,
	EOptionPakEvent_MAX                      = 6,
};

// Enum QRSL.EOptionPakEventResult
// NumValues: 0x0004
enum class EOptionPakEventResult : uint8
{
	EVENT_SUCCESS                            = 0,
	EVENT_FAILED                             = 1,
	UNKNOWN                                  = 2,
	EOptionPakEventResult_MAX                = 3,
};

// Enum QRSL.EOptionPakStatus
// NumValues: 0x0008
enum class EOptionPakStatus : uint8
{
	FILE_SUCCESS                             = 0,
	FILE_READY_DL                            = 1,
	FILE_DOWNLOADING                         = 2,
	FILE_CANCEL_DL                           = 3,
	FILE_NEED_FIX                            = 4,
	FILE_FIXING                              = 5,
	UNKNOWN                                  = 6,
	EOptionPakStatus_MAX                     = 7,
};

// Enum QRSL.EHottaPermissionType
// NumValues: 0x0033
enum class EHottaPermissionType : uint8
{
	KPermissionTypeNone                      = 0,
	KPermissionTypeCamera                    = 1,
	KPermissionTypePhoto                     = 2,
	KPermissionTypeMicrophone                = 3,
	KPermissionTypeLocation                  = 4,
	KPermissionTypeBluetooth                 = 5,
	KPermissionTypeCalendar                  = 6,
	KPermissionTypeRemind                    = 7,
	KPermissionTypeContacts                  = 8,
	KPermissionTypeTrack                     = 99,
	KPermissionTypeCameraAndroid             = 101,
	KPermissionTypeReadPhoneState            = 102,
	KPermissionTypeRecordAudio               = 103,
	KPermissionTypeReadExternalStorage       = 104,
	KPermissionTypeWriteExternalStorage      = 105,
	KPermissionTypeAccessBackgroundLocation  = 106,
	KPermissionTypeAccessCoarseLocation      = 107,
	KPermissionTypeAccessFineLocation        = 108,
	KPermissionTypeAccessMediaLoaction       = 109,
	KPermissionTypeReadCalendar              = 110,
	KPermissionTypeWriteCalendar             = 111,
	KPermissionTypeBluetoothAdvertise        = 112,
	KPermissionTypeBluetoothConnect          = 113,
	KPermissionTypeBluetoothScan             = 114,
	KPermissionTypeBodySensors               = 115,
	KPermissionTypeBodySensorsBackground     = 116,
	KPermissionTypeCallPhone                 = 117,
	KPermissionTypeReadCallLog               = 118,
	KPermissionTypeReadContacts              = 119,
	KPermissionTypeWriteContacts             = 120,
	KPermissionTypeWriteCallLog              = 121,
	KPermissionTypeAddVoicemail              = 122,
	KPermissionTypeAnswerPhoneCalls          = 123,
	KPermissionTypeGetAccounts               = 124,
	KPermissionTypeNearbyWifyDevices         = 125,
	KPermissionTypePostNotifications         = 126,
	KPermissionTypeProcessOutgoingCalls      = 127,
	KPermissionTypeReadMediaAudio            = 128,
	KPermissionTypeReadMediaImages           = 129,
	KPermissionTypeReadMediaVideo            = 130,
	KPermissionTypeReadPhoneNumbers          = 131,
	KPermissionTypeReadSMS                   = 132,
	KPermissionTypeReveiveMMS                = 133,
	KPermissionTypeRceiveSMS                 = 134,
	KPermissionTypeReceiveWapPush            = 135,
	KPermissionTypeSendSMS                   = 136,
	KPermissionTypeUseSIP                    = 137,
	KPermissionTypeUWBRanging                = 138,
	KPermissionTypeActivityRecognition       = 139,
	KPermissionTypeAcceptHandover            = 140,
	EHottaPermissionType_MAX                 = 141,
};

// Enum QRSL.EServerStatus
// NumValues: 0x0006
enum class EServerStatus : uint8
{
	None                                     = 0,
	NodeStatusHeavy                          = 16,
	NodeStatusCrown                          = 32,
	NodeStatusFine                           = 64,
	NodeStatusUnavailable                    = 128,
	EServerStatus_MAX                        = 129,
};

// Enum QRSL.EHottaLoginChannel
// NumValues: 0x0020
enum class EHottaLoginChannel : uint8
{
	KChannelDefault                          = 0,
	KChannelWeChat                           = 1,
	KChannelQQ                               = 2,
	KChannelGuest                            = 3,
	KChannelFacebook                         = 4,
	KChannelGameCenter                       = 5,
	KChannelGoogle                           = 6,
	KChannelIEGPassport                      = 7,
	KChannelTwitter                          = 9,
	KChannelGarena                           = 10,
	KChannelCustomAccount                    = 11,
	KChannelEGame                            = 12,
	KChannelSwitch                           = 13,
	KChannelLine                             = 14,
	KChannelApple                            = 15,
	KChannelVK                               = 19,
	KChannelXboxOne                          = 20,
	KChannelSteam                            = 21,
	KChannelPS4                              = 22,
	KChannelEpic                             = 24,
	KChannelDiscord                          = 26,
	KChannelPS5                              = 27,
	KChannelDmm                              = 30,
	KChannelSquareEnix                       = 32,
	KChannelSupercell                        = 33,
	KChannelAppsFlyer                        = 34,
	KChannelKaKao                            = 35,
	KChannelUbisoft                          = 37,
	KChannelVNG                              = 38,
	KChannelGooglePGS                        = 39,
	KChannelLevelInfinite                    = 131,
	EHottaLoginChannel_MAX                   = 132,
};

// Enum QRSL.EHottaUpdateActionType
// NumValues: 0x0005
enum class EHottaUpdateActionType : uint8
{
	KUnknown                                 = 0,
	KAppUpdate                               = 1,
	KResourceUpdate                          = 2,
	KResourceRepair                          = 3,
	EHottaUpdateActionType_MAX               = 4,
};

// Enum QRSL.EItemGridType
// NumValues: 0x0003
enum class EItemGridType : uint8
{
	Drag                                     = 0,
	List                                     = 1,
	EItemGridType_MAX                        = 2,
};

// Enum QRSL.EKeepForwardKeyType
// NumValues: 0x0003
enum class EKeepForwardKeyType : uint8
{
	Key1                                     = 0,
	Key2                                     = 1,
	Max                                      = 2,
};

// Enum QRSL.EKeepForwardGridType
// NumValues: 0x0007
enum class EKeepForwardGridType : uint8
{
	Start                                    = 0,
	End                                      = 1,
	Walk                                     = 2,
	Block                                    = 3,
	Key                                      = 4,
	Lock                                     = 5,
	Max                                      = 6,
};

// Enum QRSL.ECloudHottaOSType
// NumValues: 0x0004
enum class ECloudHottaOSType : uint8
{
	CloudAndroid                             = 11,
	CloudIOS                                 = 12,
	CloudWindows                             = 13,
	ECloudHottaOSType_MAX                    = 14,
};

// Enum QRSL.EHottaPinchGenderType
// NumValues: 0x0005
enum class EHottaPinchGenderType : uint8
{
	PinchGenderTypeUnknow                    = 0,
	PinchGenderTypeMale                      = 1,
	PinchGenderTypeFemale                    = 2,
	PinchGenderTypeAll                       = 3,
	EHottaPinchGenderType_MAX                = 4,
};

// Enum QRSL.EHottaPinchDataType
// NumValues: 0x0006
enum class EHottaPinchDataType : uint8
{
	PinchDataTypeNew                         = 0,
	PinchDatTypeHot                          = 1,
	PinchDataTypeMe                          = 2,
	PinchDataTypeCollect                     = 3,
	PinchDataTypeLike                        = 4,
	EHottaPinchDataType_MAX                  = 5,
};

// Enum QRSL.EONESDKActivityStatus
// NumValues: 0x0004
enum class EONESDKActivityStatus : uint8
{
	ESDKACTIVITY_STATUS_NONE                 = 0,
	ESDKACTIVITY_STATUS_REACHED              = 1,
	ESDKACTIVITY_STATUS_RECEIVED             = 2,
	ESDKACTIVITY_STATUS_MAX                  = 3,
};

// Enum QRSL.EONESDKActivityType
// NumValues: 0x0002
enum class EONESDKActivityType : uint8
{
	ESDKACTIVITY_TYPE_CARNIE                 = 0,
	ESDKACTIVITY_TYPE_MAX                    = 1,
};

// Enum QRSL.ETraceDirection
// NumValues: 0x0007
enum class ETraceDirection : uint8
{
	ActorForward                             = 0,
	ActorBackward                            = 1,
	ActorUp                                  = 2,
	ActorDown                                = 3,
	ActorLeft                                = 4,
	ActorRight                               = 5,
	ETraceDirection_MAX                      = 6,
};

// Enum QRSL.EActivityClone_TeamType
// NumValues: 0x0003
enum class EActivityClone_TeamType : uint8
{
	SinglePlayer                             = 0,
	TeamMode                                 = 1,
	EActivityClone_MAX                       = 2,
};

// Enum QRSL.ESafeInteractType
// NumValues: 0x0004
enum class ESafeInteractType : uint8
{
	InvalidInteract                          = 0,
	OpenShop                                 = 1,
	OpenBank                                 = 2,
	ESafeInteractType_MAX                    = 3,
};

// Enum QRSL.EQRSLAchievementCompareType
// NumValues: 0x0004
enum class EQRSLAchievementCompareType : uint8
{
	LESS                                     = 0,
	EQUAL                                    = 1,
	MORE                                     = 2,
	EQRSLAchievementCompareType_MAX          = 3,
};

// Enum QRSL.EAchievementProgressUpdate
// NumValues: 0x0004
enum class EAchievementProgressUpdate : uint8
{
	SUM                                      = 0,
	REP                                      = 1,
	HIGH                                     = 2,
	EAchievementProgressUpdate_MAX           = 3,
};

// Enum QRSL.EQRSLAchievement
// NumValues: 0x0011
enum class EQRSLAchievement : uint8
{
	INVALID                                  = 0,
	TAG                                      = 1,
	VALUE                                    = 2,
	PERCENT                                  = 3,
	TIME                                     = 4,
	TARGET                                   = 5,
	SOURCE                                   = 6,
	RESULT                                   = 7,
	AVATAR                                   = 8,
	QUALITY                                  = 9,
	FASHIION                                 = 10,
	QUEST_TYPE                               = 11,
	CURRENCY_TYPE                            = 12,
	STATE_TYPE                               = 13,
	ITEM_RARITY                              = 14,
	TOWER_TYPE                               = 15,
	EQRSLAchievement_MAX                     = 16,
};

// Enum QRSL.EAchievementTask
// NumValues: 0x004B
enum class EAchievementTask : uint8
{
	Level                                    = 0,
	TopLevel                                 = 1,
	AbiScore                                 = 2,
	ShengeLevel                              = 3,
	Avatar                                   = 4,
	DeadCount                                = 5,
	FallDeductHP                             = 6,
	PlayerDrown                              = 7,
	PKCount                                  = 8,
	Profession                               = 9,
	Fashion                                  = 10,
	Coloring                                 = 11,
	CharmValue                               = 12,
	Pet                                      = 13,
	PetAwaken                                = 14,
	PetDecompose                             = 15,
	Mount                                    = 16,
	Charge                                   = 17,
	FriendAmount                             = 18,
	FriendPoint                              = 19,
	Horn                                     = 20,
	JoinGuild                                = 21,
	CreateGuild                              = 22,
	KillMonster                              = 23,
	SubmitQuest                              = 24,
	GetItem                                  = 25,
	OwnItem                                  = 26,
	UseItem                                  = 27,
	PassClone                                = 28,
	EquipStrengthen                          = 29,
	UnlockMapRegion                          = 30,
	UseCurrency                              = 31,
	GetCurrency                              = 32,
	UseAllCurrency                           = 33,
	MoveDistance                             = 34,
	CookingLevel                             = 35,
	CookingDish                              = 36,
	SkillStartLinkTime                       = 37,
	PerfectExam                              = 38,
	LotterySSR                               = 39,
	DigTreasure                              = 40,
	DamagedExceedMaxHP                       = 41,
	FullHealthAddHP                          = 42,
	Artifact                                 = 43,
	ArtifactTypeCount                        = 44,
	TotalOnlineTime                          = 45,
	ExploreFurniture                         = 46,
	TeamClonePass                            = 47,
	SoloLeagueStage                          = 48,
	BigSecretRound                           = 49,
	MountSkin                                = 50,
	Rank                                     = 51,
	LevyClonePass                            = 52,
	MiniGame                                 = 53,
	OpenTreasureBox                          = 54,
	WeaponRarity                             = 55,
	SuperBigSecretRound                      = 56,
	Yahaha                                   = 57,
	Fishing                                  = 58,
	AccompanyingSwimer                       = 59,
	TechSystem                               = 60,
	StatueLevel                              = 61,
	SingleKillMonster                        = 62,
	StatueMaxNum                             = 63,
	GraduatePrenticeNum                      = 64,
	FirstGraduate                            = 65,
	FirstTakeMaster                          = 66,
	FirstAcceptPrentice                      = 67,
	FullValueGraduateFromMaster              = 68,
	FullValueAgreeGraduate                   = 69,
	Spokesperson                             = 70,
	MapDiscovery                             = 71,
	HackerIdentitySystemLevel                = 72,
	FactionCollectionNum                     = 73,
	EAchievementTask_MAX                     = 74,
};

// Enum QRSL.EBigRichManTableType
// NumValues: 0x0007
enum class EBigRichManTableType : uint8
{
	None                                     = 0,
	BIG_RICH_MAN_TABLE_COMMON                = 1,
	BIG_RICH_MAN_TABLE_EVENT                 = 2,
	BIG_RICH_MAN_TABLE_BIG                   = 3,
	BIG_RICH_MAN_TABLE_ORIGIN                = 4,
	BIG_RICH_MAN_TABLE_STANDBY               = 5,
	Max                                      = 6,
};

// Enum QRSL.EBiochemistryChestType
// NumValues: 0x0007
enum class EBiochemistryChestType : uint8
{
	None                                     = 0,
	EBIOCHEMISTRY_CHEST_TYPE_WEAPON          = 1,
	EBIOCHEMISTRY_CHEST_TYPE_HP              = 2,
	EBIOCHEMISTRY_CHEST_TYPE_AMMUNITION      = 3,
	EBIOCHEMISTRY_CHEST_TYPE_ARMOR           = 4,
	EBIOCHEMISTRY_CHEST_TYPE_CAPACITY        = 5,
	Max                                      = 6,
};

// Enum QRSL.EBiochemistryGameProcessType
// NumValues: 0x0006
enum class EBiochemistryGameProcessType : uint8
{
	None                                     = 0,
	EBIOCHEMISTRY_GAME_PROCESS_TYPE_WAITING  = 1,
	EBIOCHEMISTRY_GAME_PROCESS_TYPE_GAME     = 2,
	EBIOCHEMISTRY_GAME_PROCESS_TYPE_Monster  = 3,
	EBIOCHEMISTRY_GAME_PROCESS_TYPE_END      = 4,
	Max                                      = 5,
};

// Enum QRSL.EBiochemistryGameType
// NumValues: 0x0004
enum class EBiochemistryGameType : uint8
{
	None                                     = 0,
	EBIOCHEMISTRY_GAME_TYPE_EIGHT            = 1,
	EBIOCHEMISTRY_GAME_TYPE_SIXTEEN          = 2,
	Max                                      = 3,
};

// Enum QRSL.EBiochemistryPlayerType
// NumValues: 0x0005
enum class EBiochemistryPlayerType : uint8
{
	None                                     = 0,
	EBIOCHEMISTRY_PLAYER_TYPE_PARENT         = 1,
	EBIOCHEMISTRY_PLAYER_TYPE_INFECTOR       = 2,
	EBIOCHEMISTRY_PLAYER_TYPE_HUMANS         = 3,
	Max                                      = 4,
};

// Enum QRSL.EBiochemistryMessageType
// NumValues: 0x000D
enum class EBiochemistryMessageType : uint8
{
	None                                     = 0,
	EBIOCHEMISTRY_MESSAGE_ClientChestHidden  = 1,
	EBIOCHEMISTRY_MESSAGE_ClientChestTips    = 2,
	EBIOCHEISMTRY_MESSAGE_ClientMonsterTips  = 3,
	EBIOCHEISMTRY_MESSAGE_ClientSeeThrough   = 4,
	EBIOCHEISMTRY_MESSAGE_ClientSettle       = 5,
	EBIOCHEISMTRY_MESSAGE_ClientInfectLose   = 6,
	EBIOCHEISMTRY_MESSAGE_ClientInfect       = 7,
	EBIOCHEISMTRY_MESSAGE_ClientResist       = 8,
	EBIOCHEISMTRY_MESSAGE_ClientPointsTips   = 9,
	EBIOCHEISMTRY_MESSAGE_ClientWeaponAlter  = 10,
	EBIOCHEISMTRY_MESSAGE_ClientAll          = 11,
	Max                                      = 12,
};

// Enum QRSL.FCalendarQuestType
// NumValues: 0x0005
enum class EFCalendarQuestType : uint8
{
	CQT_NONE                                 = 0,
	CQT_FindPath                             = 1,
	CQT_Message                              = 2,
	CQT_UI                                   = 3,
	CQT_MAX                                  = 4,
};

// Enum QRSL.EHorseSeat
// NumValues: 0x0003
enum class EHorseSeat : uint8
{
	Front                                    = 0,
	Back                                     = 1,
	Max                                      = 2,
};

// Enum QRSL.EClashRoyaleMessageType
// NumValues: 0x000D
enum class EClashRoyaleMessageType : uint8
{
	None                                     = 0,
	ES_OpenPlayDetail                        = 1,
	ES_ClosePlayDetail                       = 2,
	ES_My_Tag                                = 3,
	ES_GameEndTime                           = 4,
	ES_SyncData                              = 5,
	ES_SyncHolyWater                         = 6,
	ES_RemoveCard                            = 7,
	ES_MonsterAddBuffer                      = 8,
	ES_Recycle                               = 9,
	ES_Buffer                                = 10,
	ES_Common                                = 11,
	Max                                      = 12,
};

// Enum QRSL.ERedPointLogicOperatorType
// NumValues: 0x0003
enum class ERedPointLogicOperatorType : uint8
{
	And                                      = 0,
	Or                                       = 1,
	ERedPointLogicOperatorType_MAX           = 2,
};

// Enum QRSL.ERedPointConditionType
// NumValues: 0x0004
enum class ERedPointConditionType : uint8
{
	Invalid                                  = 0,
	GameActivityOpen                         = 1,
	InventoryItemEnough                      = 2,
	ERedPointConditionType_MAX               = 3,
};

// Enum QRSL.EDecodeCodeType
// NumValues: 0x0003
enum class EDecodeCodeType : uint8
{
	EDT_Decode                               = 0,
	EDT_ExAward                              = 1,
	EDT_MAX                                  = 2,
};

// Enum QRSL.ECustomDrillMessageType
// NumValues: 0x0006
enum class ECustomDrillMessageType : uint8
{
	None                                     = 0,
	ECD_CurMonsterName                       = 1,
	ECD_SetCameraRotation                    = 2,
	ECD_SpawnMonster                         = 3,
	ECD_ResetState                           = 4,
	ECustomDrillMessageType_MAX              = 5,
};

// Enum QRSL.EludeFistTypeEnum
// NumValues: 0x0005
enum class EludeFistTypeEnum : uint8
{
	EF_UP                                    = 0,
	EF_RIGHT                                 = 1,
	EF_BOTTOM                                = 2,
	EF_LEFT                                  = 3,
	EF_MAX                                   = 4,
};

// Enum QRSL.EFollowGhostMessageType
// NumValues: 0x0006
enum class EFollowGhostMessageType : uint8
{
	None                                     = 0,
	EFG_GameTime                             = 1,
	EFG_GhostID                              = 2,
	EFG_GhostPlotIndex                       = 3,
	EFG_LockAxisOffset                       = 4,
	EFollowGhostMessageType_MAX              = 5,
};

// Enum QRSL.EBigRichManGameFlowType
// NumValues: 0x0007
enum class EBigRichManGameFlowType : uint8
{
	None                                     = 0,
	BIG_RICH_MAN_GAME_FLOW_THROW             = 1,
	BIG_RICH_MAN_GAME_FLOW_AI_MOVE           = 2,
	BIG_RICH_MAN_GAME_FLOW_BUY_TABLE         = 3,
	BIG_RICH_MAN_GAME_FLOW_SELECT_EVENT      = 4,
	BIG_RICH_MAN_GAME_FLOW_COMMON            = 5,
	Max                                      = 6,
};

// Enum QRSL.EBigRichManGameOverType
// NumValues: 0x0005
enum class EBigRichManGameOverType : uint8
{
	None                                     = 0,
	BIG_RICH_MAN_GAME_OVER_FULL_ENERGY       = 1,
	BIG_RICH_MAN_GAME_OVER_BANKRUPT          = 2,
	BIG_RICH_MAN_GAME_OVER_COMMON            = 3,
	Max                                      = 4,
};

// Enum QRSL.BossCustommade
// NumValues: 0x0004
enum class EBossCustommade : uint8
{
	E_TimeOut                                = 0,
	E_BossDead                               = 1,
	E_PlayerDead                             = 2,
	E_MAX                                    = 3,
};

// Enum QRSL.EConvectionNPCType
// NumValues: 0x0005
enum class EConvectionNPCType : uint8
{
	None                                     = 0,
	Common                                   = 1,
	Captain                                  = 2,
	Boss                                     = 3,
	EConvectionNPCType_MAX                   = 4,
};

// Enum QRSL.EConvectionGameState
// NumValues: 0x0005
enum class EConvectionGameState : uint8
{
	None                                     = 0,
	Preparing                                = 1,
	Gaming                                   = 2,
	Settle                                   = 3,
	EConvectionGameState_MAX                 = 4,
};

// Enum QRSL.EQuireQuickFlashingFruitType
// NumValues: 0x0006
enum class EQuireQuickFlashingFruitType : uint8
{
	None                                     = 0,
	EQ_Grapes                                = 1,
	EQ_Watermelon                            = 2,
	EQ_Banana                                = 3,
	EQ_SygarCane                             = 4,
	Max                                      = 5,
};

// Enum QRSL.EWeaponSurvivalState
// NumValues: 0x0005
enum class EWeaponSurvivalState : uint8
{
	None                                     = 0,
	SelectedWeapon                           = 1,
	WaitToChallenge                          = 2,
	Challenging                              = 3,
	EWeaponSurvivalState_MAX                 = 4,
};

// Enum QRSL.EHorseRacingState
// NumValues: 0x000A
enum class EHorseRacingState : uint8
{
	NONE                                     = 0,
	WAIT                                     = 1,
	SHOW                                     = 2,
	ANTE                                     = 3,
	READY                                    = 4,
	GAME                                     = 5,
	GOAL                                     = 6,
	SETTLE                                   = 7,
	INVALID                                  = 8,
	EHorseRacingState_MAX                    = 9,
};

// Enum QRSL.EShotGroupGameResult
// NumValues: 0x0004
enum class EShotGroupGameResult : uint8
{
	ESGGR_TeamAWin                           = 0,
	ESGGR_TeamBWin                           = 1,
	ESGGR_TwoTeamsDrew                       = 2,
	ESGGR_MAX                                = 3,
};

// Enum QRSL.EFPSLevels
// NumValues: 0x0008
enum class EFPSLevels : uint8
{
	FPS_25                                   = 0,
	FPS_30                                   = 1,
	FPS_45                                   = 2,
	FPS_60                                   = 3,
	FPS_90                                   = 4,
	FPS_120                                  = 5,
	FPS_Default                              = 6,
	FPS_MAX                                  = 7,
};

// Enum QRSL.EWindowsAAType
// NumValues: 0x0005
enum class EWindowsAAType : uint8
{
	None                                     = 0,
	TAA                                      = 1,
	DLSS                                     = 2,
	SMAA                                     = 3,
	EWindowsAAType_MAX                       = 4,
};

// Enum QRSL.EScreenPercentage
// NumValues: 0x0009
enum class EScreenPercentage : uint8
{
	ScreenPercentage_60                      = 0,
	ScreenPercentage_80                      = 1,
	ScreenPercentage_100                     = 2,
	ScreenPercentage_120                     = 3,
	ScreenPercentage_140                     = 4,
	ScreenPercentage_160                     = 5,
	ScreenPercentage_180                     = 6,
	ScreenPercentage_200                     = 7,
	ScreenPercentage_MAX                     = 8,
};

// Enum QRSL.EAppSMSMessageSignType
// NumValues: 0x0005
enum class EAppSMSMessageSignType : uint8
{
	ESMS_Sign_Normal                         = 0,
	ESMS_Sign_GroupComplete                  = 1,
	ESMS_Sign_WaitReply                      = 2,
	ESMS_Sign_Reply                          = 3,
	ESMS_Sign_MAX                            = 4,
};

// Enum QRSL.EAppSMSMessageType
// NumValues: 0x0004
enum class EAppSMSMessageType : uint8
{
	ESMS_Text                                = 0,
	ESMS_Texture                             = 1,
	ESMS_RedPacket                           = 2,
	ESMS_Max                                 = 3,
};

// Enum QRSL.EHackerTerminalSMSOperationType
// NumValues: 0x000E
enum class EHackerTerminalSMSOperationType : uint8
{
	None                                     = 0,
	InitAllMessageData                       = 1,
	SendMeaageToTerminal                     = 2,
	SendContactMeaageToTerminal              = 3,
	SendGroupMeaageToTerminal                = 4,
	SendMessageBranchSendIndex               = 5,
	SendMessageContactToServer               = 6,
	SendMessageToServer                      = 7,
	SendMessageBranchReadIndex               = 8,
	ReplyMessage                             = 9,
	OpenRedPacket                            = 10,
	NPCSendGroupMessage                      = 11,
	UpdateMessageGroupQuest                  = 12,
	MAX                                      = 13,
};

// Enum QRSL.EQRSLHackerIdentityPageType
// NumValues: 0x0004
enum class EQRSLHackerIdentityPageType : uint8
{
	UserCardPage                             = 0,
	AbilityPage                              = 1,
	SystemPage                               = 2,
	Max                                      = 3,
};

// Enum QRSL.EInsuranceCardState
// NumValues: 0x0005
enum class EInsuranceCardState : uint8
{
	Locked                                   = 0,
	UnEquipped                               = 1,
	Sealed                                   = 2,
	Normal                                   = 3,
	EInsuranceCardState_MAX                  = 4,
};

// Enum QRSL.EQRSLHackerTerminalAppExitType
// NumValues: 0x0003
enum class EQRSLHackerTerminalAppExitType : uint8
{
	UserExit                                 = 0,
	TemporaryExit                            = 1,
	EQRSLHackerTerminalAppExitType_MAX       = 2,
};

// Enum QRSL.HandleCursorTestedStatus
// NumValues: 0x0005
enum class EHandleCursorTestedStatus : uint8
{
	None                                     = 0,
	PairKey                                  = 1,
	DataTable                                = 2,
	Custom                                   = 4,
	HandleCursorTestedStatus_MAX             = 5,
};

// Enum QRSL.EQRSLHomeConstructionOperationMode
// NumValues: 0x0004
enum class EQRSLHomeConstructionOperationMode : uint8
{
	None                                     = 0,
	PlacementMode                            = 1,
	SelectMode                               = 2,
	EQRSLHomeConstructionOperationMode_MAX   = 3,
};

// Enum QRSL.EAttachedParticleTriggerToHideType
// NumValues: 0x0004
enum class EAttachedParticleTriggerToHideType : uint8
{
	Null                                     = 0,
	Pressed                                  = 1,
	Released                                 = 2,
	EAttachedParticleTriggerToHideType_MAX   = 3,
};

// Enum QRSL.ELeisureRoomShopExchangeConsumedType
// NumValues: 0x0003
enum class ELeisureRoomShopExchangeConsumedType : uint8
{
	Item                                     = 0,
	Currency                                 = 1,
	ELeisureRoomShopExchangeConsumedType_MAX = 2,
};

// Enum QRSL.ELeisureRoomActionDataType
// NumValues: 0x0004
enum class ELeisureRoomActionDataType : uint8
{
	SingleAction                             = 0,
	DoubleAction                             = 1,
	InteractiveAction                        = 2,
	ELeisureRoomActionDataType_MAX           = 3,
};

// Enum QRSL.EBodyTouchInteractiveMontageType
// NumValues: 0x0004
enum class EBodyTouchInteractiveMontageType : uint8
{
	NullMontage                              = 0,
	DirectPlay                               = 1,
	MouseAnimOffPlay                         = 2,
	EBodyTouchInteractiveMontageType_MAX     = 3,
};

// Enum QRSL.EBodyTouchInteractiveFunctionType
// NumValues: 0x0004
enum class EBodyTouchInteractiveFunctionType : uint8
{
	Null                                     = 0,
	Click_Func                               = 1,
	MouseAnimOff_Func                        = 2,
	EBodyTouchInteractiveFunctionType_MAX    = 3,
};

// Enum QRSL.EBodyTouchInteractiveEventType
// NumValues: 0x0004
enum class EBodyTouchInteractiveEventType : uint8
{
	Null                                     = 0,
	DropShoe_L                               = 1,
	DropShoe_R                               = 2,
	EBodyTouchInteractiveEventType_MAX       = 3,
};

// Enum QRSL.EInteractiveBodyType
// NumValues: 0x0025
enum class EInteractiveBodyType : uint8
{
	Null                                     = 0,
	Head                                     = 1,
	Hand                                     = 2,
	Foot                                     = 3,
	Head_Click_1                             = 4,
	Head_Click_2                             = 5,
	Head_Click_3                             = 6,
	Dody_Click_1                             = 7,
	Dody_Click_2                             = 8,
	Dody_Click_3                             = 9,
	Waist_Click_1                            = 10,
	Waist_Click_2                            = 11,
	Waist_Click_3                            = 12,
	Hand_Click_1                             = 13,
	Hand_Click_2                             = 14,
	Hand_Click_3                             = 15,
	Leg_Click_1                              = 16,
	Leg_Click_2                              = 17,
	Leg_Click_3                              = 18,
	Knee_Click_1                             = 19,
	Knee_Click_2                             = 20,
	Knee_Click_3                             = 21,
	Foot_Click_1                             = 22,
	Foot_Click_2                             = 23,
	Foot_Click_3                             = 24,
	Universal_Click_1                        = 25,
	Universal_Click_2                        = 26,
	Universal_Click_3                        = 27,
	Universal_Click_4                        = 28,
	Universal_Click_5                        = 29,
	EyeMoveByMouse                           = 30,
	HeadMoveByMouse                          = 31,
	Stockings_L                              = 32,
	Stockings_R                              = 33,
	BothLegsAlternation_L                    = 34,
	BothLegsAlternation_R                    = 35,
	EInteractiveBodyType_MAX                 = 36,
};

// Enum QRSL.EInteractivePoseType
// NumValues: 0x0005
enum class EInteractivePoseType : uint8
{
	Null                                     = 0,
	SitSideways                              = 1,
	LieOnTheSide                             = 2,
	SitAround                                = 3,
	EInteractivePoseType_MAX                 = 4,
};

// Enum QRSL.ELeisureRoomShopCategoryType
// NumValues: 0x0004
enum class ELeisureRoomShopCategoryType : uint8
{
	RoomFurniture                            = 0,
	SituationalInteraction                   = 1,
	NPCFashion                               = 2,
	ELeisureRoomShopCategoryType_MAX         = 3,
};

// Enum QRSL.ELinkCableCollisionType
// NumValues: 0x0004
enum class ELinkCableCollisionType : uint8
{
	ELinkCableCollisionType_Null             = 0,
	ELinkCableCollisionType_LinkSphere       = 1,
	ELinkCableCollisionType_OutSphere        = 2,
	ELinkCableCollisionType_MAX              = 3,
};

// Enum QRSL.ELuckTarrowVisualActorSwitchType
// NumValues: 0x0008
enum class ELuckTarrowVisualActorSwitchType : uint8
{
	None                                     = 0,
	ELTVAST_Card                             = 1,
	ELTVAST_Switch                           = 2,
	ELTVAST_OpenTheBox                       = 3,
	ELTVAST_Restart                          = 4,
	ELTVAST_Leave                            = 5,
	ELTVAST_SelectBuff                       = 6,
	Max                                      = 7,
};

// Enum QRSL.ELuckTarrowVisualActorType
// NumValues: 0x0007
enum class ELuckTarrowVisualActorType : uint8
{
	None                                     = 0,
	ELTVAT_Card                              = 1,
	ELTVAT_Switch                            = 2,
	ELTVAT_MagicCircle                       = 3,
	ELTVAT_Repatriate                        = 4,
	ELTVAT_BonusChest                        = 5,
	Max                                      = 6,
};

// Enum QRSL.ELuckTarrowCommonChallengeType
// NumValues: 0x0007
enum class ELuckTarrowCommonChallengeType : uint8
{
	None                                     = 0,
	ELTCCT_Common                            = 1,
	ELTCCT_TimeLimit                         = 2,
	ELTCCT_StickItOut                        = 3,
	ELTCCT_Redraw                            = 4,
	ELTCCT_Protection                        = 5,
	Max                                      = 6,
};

// Enum QRSL.ELuckTarrowCardType
// NumValues: 0x0007
enum class ELuckTarrowCardType : uint8
{
	None                                     = 0,
	ELTCT_CommonChallenge                    = 1,
	ELTCT_HiddenBoss                         = 2,
	ELTCT_Repatriate                         = 3,
	ELTCT_Advance                            = 4,
	ELTCT_UltimateBoss                       = 5,
	Max                                      = 6,
};

// Enum QRSL.ELuckTarrowBattleInfoType
// NumValues: 0x000A
enum class ELuckTarrowBattleInfoType : uint8
{
	None                                     = 0,
	ELTBIT_GoToShuffle                       = 1,
	ELTBIT_AwaitShuffle                      = 2,
	ELTBIT_GoToChooseCard                    = 3,
	ELTBIT_AwaitChooseCard                   = 4,
	ELTBIT_CombatMechanism                   = 5,
	ELTBIT_Restart                           = 6,
	ELTBIT_Box                               = 7,
	ELTBIT_GameOver                          = 8,
	Max                                      = 9,
};

// Enum QRSL.ELuckTarrowDifficultyType
// NumValues: 0x0005
enum class ELuckTarrowDifficultyType : uint8
{
	None                                     = 0,
	ELTDT_Easy                               = 1,
	ELTDT_Normal                             = 2,
	ELTDT_Hard                               = 3,
	Max                                      = 4,
};

// Enum QRSL.ELuckTarrowPhaseType
// NumValues: 0x000A
enum class ELuckTarrowPhaseType : uint8
{
	None                                     = 0,
	ELTP_AwaitShuffle                        = 1,
	ELTP_Shuffle                             = 2,
	ELTP_SelectCard                          = 3,
	ELTP_ShowCard                            = 4,
	ELTP_ChallengePhase                      = 5,
	ELTP_ChallengeLose                       = 6,
	ELTP_ClaimReward                         = 7,
	ELTP_GameEnd                             = 8,
	Max                                      = 9,
};

// Enum QRSL.ELuckTarrowMessageType
// NumValues: 0x000D
enum class ELuckTarrowMessageType : uint8
{
	None                                     = 0,
	ELT_MESSAGE_ClientAwaitShuffle           = 1,
	ELT_MESSAGE_ClientShuffleAnim            = 2,
	ELT_MESSAGE_ClientSelectCard             = 3,
	ELT_MESSAGE_ClientShowCard               = 4,
	ELT_MESSAGE_ClientChallengePhase         = 5,
	ELT_MESSAGE_ClientCountdown              = 6,
	ELT_MESSAGE_ClientShowItem               = 7,
	ELT_MESSAGE_ClientRefreshBattleInfo      = 8,
	ELT_MESSAGE_ClientPlayerSelectBuff       = 9,
	ELT_MESSAGE_ClientPlayerOffSelectBuff    = 10,
	ELT_MESSAGE_SeverPlayerSelectedBuff      = 11,
	Max                                      = 12,
};

// Enum QRSL.EDarkAreaLightState
// NumValues: 0x0005
enum class EDarkAreaLightState : uint8
{
	LIGHTSTATE_CHARGE                        = 0,
	LIGHTSTATE_NORMAL                        = 1,
	LIGHTSTATE_DAMPING                       = 2,
	LIGHTSTATE_CLOSE                         = 3,
	LIGHTSTATE_MAX                           = 4,
};

// Enum QRSL.EGuideNPCMiaPlayMode
// NumValues: 0x0003
enum class EGuideNPCMiaPlayMode : uint8
{
	MIAPLAYMODE_NONE                         = 0,
	MIAPLAYMODE_DARKAREA_LIGHT               = 1,
	MIAPLAYMODE_MAX                          = 2,
};

// Enum QRSL.EClassRepNodeMapping
// NumValues: 0x0006
enum class EClassRepNodeMapping : uint8
{
	NotRouted                                = 0,
	RelevantAllConnections                   = 1,
	Spatialize_Static                        = 2,
	Spatialize_Dynamic                       = 3,
	Spatialize_Dormancy                      = 4,
	EClassRepNodeMapping_MAX                 = 5,
};

// Enum QRSL.QRSLRotate
// NumValues: 0x0004
enum class EQRSLRotate : uint8
{
	Speed                                    = 0,
	Time                                     = 1,
	Infinite                                 = 2,
	QRSLRotate_MAX                           = 3,
};

// Enum QRSL.ETruckRobberyVisualActorType
// NumValues: 0x0008
enum class ETruckRobberyVisualActorType : uint8
{
	None                                     = 0,
	ETRVAT_Gift                              = 1,
	ETRVAT_Truck                             = 2,
	ETRVAT_EndPoint                          = 3,
	ETRVAT_Flooring                          = 4,
	ETRVAT_TruckCamera                       = 5,
	ETRVAT_Other                             = 6,
	Max                                      = 7,
};

// Enum QRSL.ETruckRobberyPlayerType
// NumValues: 0x0004
enum class ETruckRobberyPlayerType : uint8
{
	None                                     = 0,
	ETRPT_MiYa                               = 1,
	ETRPT_Truck                              = 2,
	Max                                      = 3,
};

// Enum QRSL.ETruckRobberyTruckDirectionType
// NumValues: 0x0004
enum class ETruckRobberyTruckDirectionType : uint8
{
	None                                     = 0,
	ETRTDT_Left                              = 1,
	ETRTDT_Right                             = 2,
	Max                                      = 3,
};

// Enum QRSL.ETruckRobberyTruckType
// NumValues: 0x0005
enum class ETruckRobberyTruckType : uint8
{
	None                                     = 0,
	ETRTT_LowSpeed                           = 1,
	ETRTT_ModerateSpeed                      = 2,
	ETRTT_HighSpeed                          = 3,
	Max                                      = 4,
};

// Enum QRSL.ETruckRobberyMessageType
// NumValues: 0x000A
enum class ETruckRobberyMessageType : uint8
{
	None                                     = 0,
	ETR_MESSAGE_ClientPlayerCamera           = 1,
	ETR_MESSAGE_ClientCountdown              = 2,
	ETR_MESSAGE_SeverPickUpGift              = 3,
	ETR_MESSAGE_SeverSubmitGift              = 4,
	ETR_MESSAGE_SeverTruckSkill              = 5,
	ETR_MESSAGE_SeverSetTruckDirection       = 6,
	ETR_MESSAGE_SeverSetTruckType            = 7,
	ETR_MESSAGE_ClientGameOver               = 8,
	Max                                      = 9,
};

// Enum QRSL.ESculptureRPCOperType
// NumValues: 0x0006
enum class ESculptureRPCOperType : uint8
{
	SculptureRPCType_None                    = 0,
	SculptureRPCType_Server_GetUnlockSculpt  = 1,
	SculptureRPCType_Server_TrySculpt        = 2,
	SculptureRPCType_Client_UnlockScuptInfo  = 3,
	SculptureRPCType_Client_SculptResult     = 4,
	SculptureRPCType_MAX                     = 5,
};

// Enum QRSL.EHackerDecodeRPCOperType
// NumValues: 0x000D
enum class EHackerDecodeRPCOperType : uint8
{
	HackerDecodeRPCType_None                 = 0,
	HackerDecodeRPCType_CreateMainform       = 1,
	HackerDecodeRPCType_RandomDecodePwd      = 2,
	HackerDecodeRPCType_CheckDecodeResult    = 3,
	HackerDecodeRPCType_CheckHackerAbility   = 4,
	HackerDecodeRPCType_AfterCloseUI         = 5,
	HackerDecodeRPCType_Client_CreatMainForm = 6,
	HackerDecodeRPCType_Client_DecodePwd     = 7,
	HackerDecodeRPCType_Client_DecodeResult  = 8,
	HackerDecodeRPCType_Client_ImmediatelyDecode = 9,
	HackerDecodeRPCType_Client_ForceCloseUI  = 10,
	HackerDecodeRPCType_Client_DecodeWithoutBattery = 11,
	HackerDecodeRPCType_MAX                  = 12,
};

// Enum QRSL.ELoadingShowMode
// NumValues: 0x0003
enum class ELoadingShowMode : uint8
{
	General                                  = 0,
	ScrollText                               = 1,
	ELoadingShowMode_MAX                     = 2,
};

// Enum QRSL.EEndlessNewLandSceneState
// NumValues: 0x0003
enum class EEndlessNewLandSceneState : uint8
{
	SCENE_STATE_ENDLESS_NEW_LAND_PREPARE     = 0,
	SCENE_STATE_ENDLESS_NEW_LAND_IN_CHALLENGE = 1,
	SCENE_STATE_ENDLESS_NEW_LAND_MAX         = 2,
};

// Enum QRSL.EEndlessIdolumType
// NumValues: 0x0007
enum class EEndlessIdolumType : uint8
{
	EEI_Type_Ice                             = 0,
	EEI_Type_Fire                            = 1,
	EEI_Type_Thunder                         = 2,
	EEI_Type_Physics                         = 3,
	EEI_Type_Superpower                      = 4,
	EEI_Type_XX                              = 5,
	EEI_Type_MAX                             = 6,
};

// Enum QRSL.EBuffAddType
// NumValues: 0x0005
enum class EBuffAddType : uint8
{
	E_BossSelf                               = 0,
	E_BossOwerPlayer                         = 1,
	E_EnemyBoss                              = 2,
	E_EnemyBossPlayer                        = 3,
	E_MAX                                    = 4,
};

// Enum QRSL.E8V8JobType
// NumValues: 0x000A
enum class E8V8JobType : uint8
{
	E_Warrior                                = 0,
	E_Hunter                                 = 1,
	E_Engineer                               = 2,
	E_Doctor                                 = 3,
	E_Pioneer                                = 4,
	E_Sniper                                 = 5,
	E_Job7                                   = 6,
	E_Job8                                   = 7,
	E_Job9                                   = 8,
	E_MAX                                    = 9,
};

// Enum QRSL.E8V8StationType
// NumValues: 0x0003
enum class E8V8StationType : uint8
{
	E_Station                                = 0,
	E_BigStation                             = 1,
	E_MAX                                    = 2,
};

// Enum QRSL.E8V8CantHodingRes
// NumValues: 0x0007
enum class E8V8CantHodingRes : uint8
{
	E_CanHolding                             = 0,
	E_StateErr                               = 1,
	E_SampleCamp                             = 2,
	E_HoldingCD                              = 3,
	E_OtherPlayer                            = 4,
	E_Other                                  = 5,
	E_MAX                                    = 6,
};

// Enum QRSL.EDarkAreaLightType
// NumValues: 0x0007
enum class EDarkAreaLightType : uint8
{
	DARKAREA_LIGHT_NONE                      = 0,
	DARKAREA_LIGHT_WHITE                     = 1,
	DARKAREA_LIGHT_YELLOW                    = 2,
	DARKAREA_LIGHT_RED                       = 3,
	DARKAREA_LIGHT_GREEN                     = 4,
	DARKAREA_LIGHT_PURPLE                    = 5,
	DARKAREA_LIGHT_MAX                       = 6,
};

// Enum QRSL.EAirWarType
// NumValues: 0x0005
enum class EAirWarType : uint8
{
	None                                     = 0,
	WAR_TYPE_LAND_LAND                       = 1,
	WAR_TYPE_LAND_AIR                        = 2,
	WAR_TYPE_AIR_AIR                         = 3,
	EAirWarType_MAX                          = 4,
};

// Enum QRSL.EActivityQuestSourceType
// NumValues: 0x0005
enum class EActivityQuestSourceType : uint8
{
	QS_SOURCE_TYPE_NONE                      = 0,
	QS_SOURCE_TYPE_RECOMMEND                 = 1,
	QS_SOURCE_TYPE_SELECT                    = 2,
	QS_SOURCE_TYPE_CHALLANGE                 = 3,
	QS_SOURCE_TYPE_MAX                       = 4,
};

// Enum QRSL.EActivityQuestType
// NumValues: 0x0003
enum class EActivityQuestType : uint8
{
	AQ_TYPE_DAILY                            = 0,
	AQ_TYPE_WEEKLY                           = 1,
	AQ_TYPE_MAX                              = 2,
};

// Enum QRSL.EActivityRecoverType
// NumValues: 0x0003
enum class EActivityRecoverType : uint8
{
	Part                                     = 0,
	Perfect                                  = 1,
	EActivityRecoverType_MAX                 = 2,
};

// Enum QRSL.ETreasureMapChestSlotState
// NumValues: 0x0005
enum class ETreasureMapChestSlotState : uint8
{
	NeedPlace                                = 0,
	WaitDig                                  = 1,
	Overdue                                  = 2,
	Digged                                   = 3,
	MAX                                      = 4,
};

// Enum QRSL.ETreasureMapNotifyInfoType
// NumValues: 0x0003
enum class ETreasureMapNotifyInfoType : uint8
{
	ReceiveMap                               = 0,
	ReceiveAward                             = 1,
	MAX                                      = 2,
};

// Enum QRSL.EMountType
// NumValues: 0x0003
enum class EMountType : uint8
{
	MOUNT_TYPE_NORMAL                        = 0,
	MOUNT_TYPE_PHYSCICS                      = 1,
	MOUNT_TYPE_MAX                           = 2,
};

// Enum QRSL.EMountQualityType
// NumValues: 0x0005
enum class EMountQualityType : uint8
{
	N                                        = 0,
	R                                        = 1,
	SR                                       = 2,
	SSR                                      = 3,
	EMountQualityType_MAX                    = 4,
};

// Enum QRSL.EStartPointLightColor
// NumValues: 0x0004
enum class EStartPointLightColor : uint8
{
	Red                                      = 0,
	Yellow                                   = 1,
	Green                                    = 2,
	MAX                                      = 3,
};

// Enum QRSL.ERecipeAttrType
// NumValues: 0x0005
enum class ERecipeAttrType : uint8
{
	Type1                                    = 0,
	Type2                                    = 1,
	Type3                                    = 2,
	Type4                                    = 3,
	MAX                                      = 4,
};

// Enum QRSL.ECookingDataChangeType
// NumValues: 0x0004
enum class ECookingDataChangeType : uint8
{
	None                                     = 0,
	Increase                                 = 1,
	Decrease                                 = 2,
	ECookingDataChangeType_MAX               = 3,
};

// Enum QRSL.ECookingFoodTaste
// NumValues: 0x0006
enum class ECookingFoodTaste : uint8
{
	COOKINGFOODTASTE_NORMAL                  = 0,
	COOKINGFOODTASTE_OVERAMOUNT              = 1,
	COOKINGFOODTASTE_OVERINGREDIENT          = 2,
	COOKINGFOODTASTE_BOYFRIEND               = 3,
	COOKINGFOODTASTE_GIRLFRIEND              = 4,
	COOKINGFOODTASTE_MAX                     = 5,
};

// Enum QRSL.ERecipeType
// NumValues: 0x0003
enum class ERecipeType : uint8
{
	RECIPE_TYPE_NORMAL                       = 0,
	RECIPE_TYPE_CAFE                         = 1,
	RECIPE_TYPE_MAX                          = 2,
};

// Enum QRSL.EKitchenUtensils
// NumValues: 0x0004
enum class EKitchenUtensils : uint8
{
	KITCHEN_UTENSIL_POT                      = 0,
	KITCHEN_UTENSIL_VERA_WINEMAKING_TOOLS    = 1,
	KITCHEN_UTENSIL_VERA_POT                 = 2,
	KITCHEN_UTENSIL_MAX                      = 3,
};

// Enum QRSL.EWormholeEdgeDirection
// NumValues: 0x0005
enum class EWormholeEdgeDirection : uint8
{
	Right                                    = 0,
	Up                                       = 1,
	Left                                     = 2,
	Down                                     = 3,
	MAX                                      = 4,
};

// Enum QRSL.EWormholeRewardReceiveState
// NumValues: 0x0004
enum class EWormholeRewardReceiveState : uint8
{
	CanReceive                               = 0,
	Reached                                  = 1,
	Unreached                                = 2,
	MAX                                      = 3,
};

// Enum QRSL.EWormholeRewardType
// NumValues: 0x0003
enum class EWormholeRewardType : uint8
{
	FirstReward                              = 0,
	SettleReward                             = 1,
	MAX                                      = 2,
};

// Enum QRSL.EWormholeRuneFragmentType
// NumValues: 0x0004
enum class EWormholeRuneFragmentType : uint8
{
	Fragment_A                               = 0,
	Fragment_B                               = 1,
	Fragment_C                               = 2,
	MAX                                      = 3,
};

// Enum QRSL.ESpecialLoading
// NumValues: 0x0003
enum class ESpecialLoading : uint8
{
	None                                     = 0,
	Sea                                      = 1,
	MAX                                      = 2,
};

// Enum QRSL.EArtifactListShowType
// NumValues: 0x0007
enum class EArtifactListShowType : uint8
{
	All                                      = 0,
	SSR                                      = 1,
	SR                                       = 2,
	R                                        = 3,
	N                                        = 4,
	Source                                   = 5,
	MAX                                      = 6,
};

// Enum QRSL.EServerStateType
// NumValues: 0x0009
enum class EServerStateType : uint8
{
	SERVER_STATE_DEFAULT                     = 0,
	SERVER_STATE_OPEN                        = 1,
	SERVER_STATE_CLOSE                       = 2,
	SERVER_STATE_WAIT                        = 3,
	SERVER_STATE_IDLE                        = 4,
	SERVER_STATE_BUSY                        = 5,
	SERVER_STATE_FULL                        = 6,
	SERVER_STATE_INVALID                     = 7,
	SERVER_STATE_MAX                         = 8,
};

// Enum QRSL.EPlayIntroduceType
// NumValues: 0x0003
enum class EPlayIntroduceType : uint8
{
	IntroduceEntrance                        = 0,
	ThirdParty                               = 1,
	EPlayIntroduceType_MAX                   = 2,
};

// Enum QRSL.EJoyStickType
// NumValues: 0x0003
enum class EJoyStickType : uint8
{
	JoyStick                                 = 0,
	Arrow                                    = 1,
	EJoyStickType_MAX                        = 2,
};

// Enum QRSL.EMapType
// NumValues: 0x0003
enum class EMapType : uint8
{
	OverviewMap                              = 0,
	MiniMap                                  = 1,
	EMapType_MAX                             = 2,
};

// Enum QRSL.EMapViewAngel
// NumValues: 0x0003
enum class EMapViewAngel : uint8
{
	ControlRotate                            = 0,
	PawnRotate                               = 1,
	EMapViewAngel_MAX                        = 2,
};

// Enum QRSL.EMapStyle
// NumValues: 0x0003
enum class EMapStyle : uint8
{
	Cicular                                  = 0,
	Rectangle                                = 1,
	EMapStyle_MAX                            = 2,
};

// Enum QRSL.EActivateSuccessType
// NumValues: 0x0003
enum class EActivateSuccessType : uint8
{
	Intensify                                = 0,
	Artifact                                 = 1,
	Max                                      = 2,
};

// Enum QRSL.EActivityMainFilter
// NumValues: 0x0019
enum class EActivityMainFilter : uint8
{
	Welfare                                  = 0,
	GameActivity                             = 1,
	LuckyBox                                 = 2,
	ThemeActivity                            = 3,
	Cafe                                     = 4,
	HopkinsOrder                             = 5,
	Intruder                                 = 11,
	Enlightenment                            = 12,
	HJDEvaluation                            = 13,
	HiveJump                                 = 14,
	NewQuest                                 = 15,
	GreenHandActivity                        = 16,
	StarRecycle                              = 17,
	ActivityClone                            = 18,
	BossCustommade                           = 19,
	HideAndSeek                              = 20,
	CombatAwardAdvertisement                 = 21,
	BossInvasion                             = 22,
	TmpGameActivity                          = 50,
	CountryDayActivity                       = 51,
	HalloweenActivity                        = 52,
	BreakFateBoss                            = 53,
	ScenicSpotTakePhotos                     = 54,
	MorePlayerHarmony                        = 55,
	EActivityMainFilter_MAX                  = 56,
};

// Enum QRSL.EArtifactBattleState
// NumValues: 0x0006
enum class EArtifactBattleState : uint8
{
	None                                     = 0,
	ChooseInventorySlot                      = 1,
	WaitMount                                = 2,
	ChooseMountSlot                          = 3,
	WaitChooseArtifact                       = 4,
	MAX                                      = 5,
};

// Enum QRSL.EArtifactBattleSortType
// NumValues: 0x0004
enum class EArtifactBattleSortType : uint8
{
	Level                                    = 0,
	Star                                     = 1,
	Rarity                                   = 2,
	EArtifactBattleSortType_MAX              = 3,
};

// Enum QRSL.EArtifactBattleType
// NumValues: 0x0003
enum class EArtifactBattleType : uint8
{
	Battle                                   = 0,
	Formation                                = 1,
	EArtifactBattleType_MAX                  = 2,
};

// Enum QRSL.EIllustrationEffectContainerTitle
// NumValues: 0x0004
enum class EIllustrationEffectContainerTitle : uint8
{
	Condition                                = 0,
	Current                                  = 1,
	Next                                     = 2,
	MAX                                      = 3,
};

// Enum QRSL.EArtifactIcon
// NumValues: 0x0005
enum class EArtifactIcon : uint8
{
	Icon                                     = 0,
	Card                                     = 1,
	Photo                                    = 2,
	Drawing                                  = 3,
	Max                                      = 4,
};

// Enum QRSL.EArtifactListOperType
// NumValues: 0x0005
enum class EArtifactListOperType : uint8
{
	List                                     = 0,
	Battle                                   = 1,
	Illustration                             = 2,
	Lottery                                  = 3,
	EArtifactListOperType_MAX                = 4,
};

// Enum QRSL.EArtifactStrengthenSelectionSortType
// NumValues: 0x0005
enum class EArtifactStrengthenSelectionSortType : uint8
{
	Level                                    = 0,
	RarityToLevel                            = 1,
	Star                                     = 2,
	RarityToStar                             = 3,
	EArtifactStrengthenSelectionSortType_MAX = 4,
};

// Enum QRSL.ArtifactSkillPanelVisible
// NumValues: 0x0007
enum class EArtifactSkillPanelVisible : uint8
{
	UnEquip                                  = 0,
	VinesMode                                = 1,
	LadderMode                               = 2,
	RidingTargetState                        = 3,
	RidingState                              = 4,
	CantShowArtifactSkillTag                 = 5,
	ArtifactSkillPanelVisible_MAX            = 6,
};

// Enum QRSL.ETeammateIndex
// NumValues: 0x0009
enum class ETeammateIndex : uint8
{
	P1                                       = 0,
	P2                                       = 1,
	P3                                       = 2,
	P4                                       = 3,
	P5                                       = 4,
	P6                                       = 5,
	P7                                       = 6,
	P8                                       = 7,
	Max                                      = 8,
};

// Enum QRSL.ECafeFullScreenType
// NumValues: 0x0004
enum class ECafeFullScreenType : uint8
{
	OverviewTurnoverAward                    = 1,
	CookRecipe                               = 2,
	ActivityItems                            = 3,
	ECafeFullScreenType_MAX                  = 4,
};

// Enum QRSL.EHottaChangeAvatarPageType
// NumValues: 0x0004
enum class EHottaChangeAvatarPageType : uint8
{
	Avatar                                   = 0,
	Frame                                    = 1,
	Property                                 = 2,
	EHottaChangeAvatarPageType_MAX           = 3,
};

// Enum QRSL.ECharmItemFilterType
// NumValues: 0x0004
enum class ECharmItemFilterType : uint8
{
	AllItem                                  = 0,
	HaveItem                                 = 1,
	HaveNoItem                               = 2,
	ECharmItemFilterType_MAX                 = 3,
};

// Enum QRSL.ECookingUIPage
// NumValues: 0x0004
enum class ECookingUIPage : uint8
{
	Cooking                                  = 0,
	Recipe                                   = 1,
	LimitActivity                            = 2,
	ECookingUIPage_MAX                       = 3,
};

// Enum QRSL.EForgeTypeFilter
// NumValues: 0x0004
enum class EForgeTypeFilter : uint8
{
	All                                      = 0,
	Element                                  = 1,
	Normal                                   = 2,
	EForgeTypeFilter_MAX                     = 3,
};

// Enum QRSL.EEventBossState
// NumValues: 0x0005
enum class EEventBossState : uint8
{
	WillInvade                               = 0,
	Invading                                 = 1,
	Invaded                                  = 2,
	Unknown                                  = 3,
	EEventBossState_MAX                      = 4,
};

// Enum QRSL.EFishInfoUIType
// NumValues: 0x0006
enum class EFishInfoUIType : uint8
{
	TYPE_MEMBER                              = 0,
	TYPE_NEWS                                = 1,
	TYPE_GUIDE                               = 2,
	TYPE_SHOP                                = 3,
	TYPE_FISHTANK                            = 4,
	TYPE_MAX                                 = 5,
};

// Enum QRSL.EFriendOpType
// NumValues: 0x0004
enum class EFriendOpType : uint8
{
	FRIEND_OP_TYPE_NULL                      = 0,
	FRIEND_OP_TYPE_RECENT                    = 1,
	FRIEND_OP_TYPE_FRIEND                    = 2,
	FRIEND_OP_TYPE_MAX                       = 3,
};

// Enum QRSL.EFriendSearchSexType
// NumValues: 0x0004
enum class EFriendSearchSexType : uint8
{
	All                                      = 0,
	Male                                     = 1,
	Female                                   = 2,
	Max                                      = 3,
};

// Enum QRSL.EGamepadCommandMenusStyleType
// NumValues: 0x0003
enum class EGamepadCommandMenusStyleType : uint8
{
	List                                     = 0,
	Table                                    = 1,
	EGamepadCommandMenusStyleType_MAX        = 2,
};

// Enum QRSL.EGuideCloneProgressState
// NumValues: 0x0004
enum class EGuideCloneProgressState : uint8
{
	InComplete                               = 0,
	InProgress                               = 1,
	Completed                                = 2,
	EGuideCloneProgressState_MAX             = 3,
};

// Enum QRSL.EAnswerOptionSlotState
// NumValues: 0x0005
enum class EAnswerOptionSlotState : uint8
{
	Normal                                   = 0,
	Right                                    = 1,
	Wrong                                    = 2,
	Disable                                  = 3,
	MAX                                      = 4,
};

// Enum QRSL.EGuildListSortType
// NumValues: 0x0003
enum class EGuildListSortType : uint8
{
	GuildLevel                               = 0,
	GuildMembersCount                        = 1,
	MAX                                      = 2,
};

// Enum QRSL.EGuildMainApplyListSortType
// NumValues: 0x0005
enum class EGuildMainApplyListSortType : uint8
{
	PlayerName                               = 0,
	PlayerLevel                              = 1,
	Profession                               = 2,
	Score                                    = 3,
	MAX                                      = 4,
};

// Enum QRSL.EGuildMainMemberListSortType
// NumValues: 0x0009
enum class EGuildMainMemberListSortType : uint8
{
	PlayerName                               = 0,
	PlayerLevel                              = 1,
	Profession                               = 2,
	Post                                     = 3,
	WeekContribution                         = 4,
	HistoryContribution                      = 5,
	OfflineTime                              = 6,
	Score                                    = 7,
	MAX                                      = 8,
};

// Enum QRSL.EGuildMainPageTag
// NumValues: 0x0007
enum class EGuildMainPageTag : uint8
{
	BaseInfo                                 = 0,
	Members                                  = 1,
	Buildings                                = 2,
	Welfare                                  = 3,
	Shop                                     = 4,
	Activity                                 = 5,
	MAX                                      = 6,
};

// Enum QRSL.EGuildGloryReceiveType
// NumValues: 0x0004
enum class EGuildGloryReceiveType : uint8
{
	Unreach                                  = 0,
	CanReceive                               = 1,
	Received                                 = 2,
	EGuildGloryReceiveType_MAX               = 3,
};

// Enum QRSL.EBrushDrawMode
// NumValues: 0x0004
enum class EBrushDrawMode : uint8
{
	Fill                                     = 0,
	Clear                                    = 1,
	PaintBucket                              = 2,
	EBrushDrawMode_MAX                       = 3,
};

// Enum QRSL.EBrushDrawType
// NumValues: 0x0004
enum class EBrushDrawType : uint8
{
	None                                     = 0,
	Grid                                     = 1,
	Represent                                = 2,
	EBrushDrawType_MAX                       = 3,
};

// Enum QRSL.EBrushMirrorType
// NumValues: 0x0005
enum class EBrushMirrorType : uint8
{
	None                                     = 0,
	HorizontalMirror                         = 1,
	VerticalMirror                           = 2,
	HorizontalAndVerticalMirror              = 3,
	EBrushMirrorType_MAX                     = 4,
};

// Enum QRSL.EQueryCompletedType
// NumValues: 0x0004
enum class EQueryCompletedType : uint8
{
	Completed                                = 0,
	Receive                                  = 1,
	Normal                                   = 2,
	MAX                                      = 3,
};

// Enum QRSL.EGuildMazeTransferItemType
// NumValues: 0x0003
enum class EGuildMazeTransferItemType : uint8
{
	InventoryToWareHouse                     = 0,
	WareHouseToInventory                     = 1,
	MAX                                      = 2,
};

// Enum QRSL.EGuildTaskState
// NumValues: 0x0004
enum class EGuildTaskState : uint8
{
	CanAccpet                                = 0,
	CanCancel                                = 1,
	CanCommit                                = 2,
	MAX                                      = 3,
};

// Enum QRSL.EHTHPTipType
// NumValues: 0x0003
enum class EHTHPTipType : uint8
{
	HighTemperatureTip                       = 0,
	HighPressureTip                          = 1,
	EHTHPTipType_MAX                         = 2,
};

// Enum QRSL.EQRSLUIImprovePageType
// NumValues: 0x0006
enum class EQRSLUIImprovePageType : uint8
{
	Invalid                                  = 0,
	Strong                                   = 1,
	Exp                                      = 2,
	Material                                 = 3,
	Assets                                   = 4,
	EQRSLUIImprovePageType_MAX               = 5,
};

// Enum QRSL.EItemSlotMarkType
// NumValues: 0x0004
enum class EItemSlotMarkType : uint8
{
	None                                     = 0,
	EquipTransfer                            = 1,
	EquipBase                                = 2,
	Max                                      = 3,
};

// Enum QRSL.ELoadingMode
// NumValues: 0x0006
enum class ELoadingMode : uint8
{
	None                                     = 0,
	RoleFinish                               = 1,
	StandaloneWormhole                       = 2,
	StandaloneOther                          = 3,
	Other                                    = 4,
	Max                                      = 5,
};

// Enum QRSL.ELoadingCloseType
// NumValues: 0x0004
enum class ELoadingCloseType : uint8
{
	LoadRoleFinish                           = 0,
	LoadMapFinish                            = 1,
	Other                                    = 2,
	Max                                      = 3,
};

// Enum QRSL.EMainFormPanelVisible
// NumValues: 0x0005
enum class EMainFormPanelVisible : uint8
{
	Normal                                   = 0,
	WheelVehicleState                        = 1,
	Level                                    = 2,
	Spectating                               = 3,
	EMainFormPanelVisible_MAX                = 4,
};

// Enum QRSL.EMakeupHeadBones
// NumValues: 0x000E
enum class EMakeupHeadBones : uint8
{
	HeadScale_X                              = 0,
	HeadScale_Y                              = 1,
	HeadScale_Z                              = 2,
	EyeScale_X                               = 3,
	EyeScale_Y                               = 4,
	EyeScale_Z                               = 5,
	EyePos_X                                 = 6,
	EyePos_Y                                 = 7,
	EyePos_Z                                 = 8,
	EyeballScale_Y                           = 9,
	EyeballScale_Z                           = 10,
	EyeBallRotate_X                          = 11,
	EyeBallRotate_Z                          = 12,
	Max                                      = 13,
};

// Enum QRSL.EMentorshipMessageTabType
// NumValues: 0x0003
enum class EMentorshipMessageTabType : uint8
{
	AgreeBeMaster                            = 0,
	AgreeBePrentice                          = 1,
	EMentorshipMessageTabType_MAX            = 2,
};

// Enum QRSL.EMonsterQTEMode
// NumValues: 0x0003
enum class EMonsterQTEMode : uint8
{
	SingleClick                              = 0,
	MultiClick                               = 1,
	EMonsterQTEMode_MAX                      = 2,
};

// Enum QRSL.EMountForm
// NumValues: 0x0003
enum class EMountForm : uint8
{
	MountMainForm                            = 0,
	MountDisplayForm                         = 1,
	EMountForm_MAX                           = 2,
};

// Enum QRSL.ESetModeType
// NumValues: 0x0004
enum class ESetModeType : uint8
{
	DISPLAY_SLOT                             = 0,
	DISPLAY_ACTOR                            = 1,
	DISPLAY_IMAGE                            = 2,
	DISPLAY_MAX                              = 3,
};

// Enum QRSL.EMountMainFormSelectTabType
// NumValues: 0x0004
enum class EMountMainFormSelectTabType : uint8
{
	NormalMount                              = 0,
	WaterMount                               = 1,
	SceneInteractionAction                   = 2,
	Max                                      = 3,
};

// Enum QRSL.EPersonalityReceiveState
// NumValues: 0x0004
enum class EPersonalityReceiveState : uint8
{
	NOT_REACH                                = 0,
	NOE_RECEIVE                              = 1,
	RECEIVED                                 = 2,
	EPersonalityReceiveState_MAX             = 3,
};

// Enum QRSL.EOpenedFromWhere
// NumValues: 0x0004
enum class EOpenedFromWhere : uint8
{
	FromNone                                 = 0,
	FriendPage                               = 1,
	RecentPage                               = 2,
	EOpenedFromWhere_MAX                     = 3,
};

// Enum QRSL.EPlayIntroduceIconType
// NumValues: 0x0003
enum class EPlayIntroduceIconType : uint8
{
	INTRODUCE_NOT_READ                       = 0,
	INTRODUCE_READED                         = 1,
	INTRODUCE_MAX                            = 2,
};

// Enum QRSL.EPublicBetaRewardType
// NumValues: 0x0007
enum class EPublicBetaRewardType : uint8
{
	REWARD_TYPE_REBATE                       = 0,
	REWARD_TYPE_LEVEL                        = 1,
	REWARD_TYPE_ORDER                        = 2,
	REWARD_TYPE_MILESTONE                    = 3,
	REWARD_TYPE_INVITEFRIEND                 = 4,
	REWARD_TYPE_COMPENSATE                   = 5,
	REWARD_TYPE_MAX                          = 6,
};

// Enum QRSL.EQuestMesssageType
// NumValues: 0x0003
enum class EQuestMesssageType : uint8
{
	QM_TYPE_ACCEPT                           = 0,
	QM_TYPE_SUBMIT                           = 1,
	QM_TYPE_MAX                              = 2,
};

// Enum QRSL.ERacingMainPage
// NumValues: 0x0005
enum class ERacingMainPage : uint8
{
	Main                                     = 0,
	ChooseMode                               = 1,
	ChooseVechicle                           = 2,
	ChooseTrack                              = 3,
	MAX                                      = 4,
};

// Enum QRSL.ESelfCardImageTransformOp
// NumValues: 0x000A
enum class ESelfCardImageTransformOp : uint8
{
	TransformLocationNone                    = 18446744073709551615,
	TransformLocationUp                      = 0,
	TransformLocationDown                    = 1,
	TransformLocationLeft                    = 2,
	TransformLocationRight                   = 3,
	TransformRotationUp                      = 4,
	TransformRotationDown                    = 5,
	TransformRotationLeft                    = 6,
	TransformRotationRight                   = 7,
	ESelfCardImageTransformOp_MAX            = 8,
};

// Enum QRSL.ESelfCardStickerInfoType
// NumValues: 0x0004
enum class ESelfCardStickerInfoType : uint8
{
	ShowItemInfo                             = 0,
	ShowSetting                              = 1,
	ShowNone                                 = 2,
	ESelfCardStickerInfoType_MAX             = 3,
};

// Enum QRSL.EServerTabType
// NumValues: 0x0004
enum class EServerTabType : uint8
{
	SERVER_TAB_TYPE_OWN_ROLE                 = 0,
	SERVER_TAB_TYPE_RECOMMOND                = 1,
	SERVER_TAB_TYPE_SERIAL_RANGE             = 2,
	SERVER_TAB_TYPE_MAX                      = 3,
};

// Enum QRSL.EShotGroupGameRes
// NumValues: 0x0004
enum class EShotGroupGameRes : uint8
{
	Lose                                     = 0,
	Drew                                     = 1,
	Win                                      = 2,
	EShotGroupGameRes_MAX                    = 3,
};

// Enum QRSL.ESkillControllerPanelVisible
// NumValues: 0x0005
enum class ESkillControllerPanelVisible : uint8
{
	Normal                                   = 0,
	WheelVehicleState                        = 1,
	Level                                    = 2,
	Spectating                               = 3,
	ESkillControllerPanelVisible_MAX         = 4,
};

// Enum QRSL.EStageProgressBarRotateType
// NumValues: 0x0003
enum class EStageProgressBarRotateType : uint8
{
	Clockwise                                = 0,
	Anticlockwise                            = 1,
	EStageProgressBarRotateType_MAX          = 2,
};

// Enum QRSL.EStageProgressBarProgressType
// NumValues: 0x0003
enum class EStageProgressBarProgressType : uint8
{
	Bar                                      = 0,
	Circle                                   = 1,
	EStageProgressBarProgressType_MAX        = 2,
};

// Enum QRSL.EStageProgressBarAwardPlaceType
// NumValues: 0x0004
enum class EStageProgressBarAwardPlaceType : uint8
{
	Uniform                                  = 0,
	UniformAndFirstToZero                    = 1,
	Proportion                               = 2,
	EStageProgressBarAwardPlaceType_MAX      = 3,
};

// Enum QRSL.EProgressInfoShowType
// NumValues: 0x0006
enum class EProgressInfoShowType : uint8
{
	None                                     = 0,
	Percentage                               = 1,
	CurrentToMaxValue                        = 2,
	MaxToCurrentValue                        = 3,
	Custom                                   = 4,
	EProgressInfoShowType_MAX                = 5,
};

// Enum QRSL.ESupplyShortcutType
// NumValues: 0x0004
enum class ESupplyShortcutType : uint8
{
	SUPPLY_SHORTCUT_TYPE_HIGH                = 0,
	SUPPLY_SHORTCUT_TYPE_MIDDLE              = 1,
	SUPPLY_SHORTCUT_TYPE_LOW                 = 2,
	SUPPLY_SHORTCUT_TYPE_MAX                 = 3,
};

// Enum QRSL.ESurvivalGuideSlotType
// NumValues: 0x0003
enum class ESurvivalGuideSlotType : uint8
{
	SURVIVAl_GUIDE_SLOT_TITLE                = 0,
	SURVIVAl_GUIDE_SLOT_GUIDE_ENTRY          = 1,
	SURVIVAl_GUIDE_SLOT_MAX                  = 2,
};

// Enum QRSL.EQRSLUITeamPageType
// NumValues: 0x0006
enum class EQRSLUITeamPageType : uint8
{
	Invalid                                  = 0,
	TeamPlatform                             = 1,
	NearbyTeam                               = 2,
	NearbyPlayer                             = 3,
	MyTeam                                   = 4,
	EQRSLUITeamPageType_MAX                  = 5,
};

// Enum QRSL.ETreasureMapMainBubble
// NumValues: 0x0006
enum class ETreasureMapMainBubble : uint8
{
	ReceiveChest                             = 0,
	ReceiveChestSuccess                      = 1,
	ReceiveMap                               = 2,
	ReceiveMapSuccess                        = 3,
	ClickBackground                          = 4,
	MAX                                      = 5,
};

// Enum QRSL.ETreasureMapReceiveSlotState
// NumValues: 0x0004
enum class ETreasureMapReceiveSlotState : uint8
{
	CanReceive                               = 0,
	ToUse                                    = 1,
	Received                                 = 2,
	MAX                                      = 3,
};

// Enum QRSL.ETreasureMapQuickUseType
// NumValues: 0x0003
enum class ETreasureMapQuickUseType : uint8
{
	ChestPlace                               = 0,
	DigMap                                   = 1,
	MAX                                      = 2,
};

// Enum QRSL.ETrialAnimationType
// NumValues: 0x0003
enum class ETrialAnimationType : uint8
{
	EAT_COMPLETED                            = 0,
	EAT_FAIL                                 = 1,
	EAT_MAX                                  = 2,
};

// Enum QRSL.WeaponControllerVisible
// NumValues: 0x000B
enum class EWeaponControllerVisible : uint8
{
	UnEquip                                  = 0,
	VinesMode                                = 1,
	Locked                                   = 2,
	RidingState                              = 3,
	CantChangeWeapon                         = 4,
	InPeaceState                             = 5,
	RidingTargetState                        = 6,
	RiddingCarrierState                      = 7,
	LadderMode                               = 8,
	CommonState                              = 9,
	WeaponControllerVisible_MAX              = 10,
};

// Enum QRSL.EWeaponMainType
// NumValues: 0x0005
enum class EWeaponMainType : uint8
{
	TYPE_WEAPON                              = 0,
	TYPE_WAREHOUSE                           = 1,
	TYPE_MATRIX                              = 2,
	Type_MAX                                 = 3,
	EWeaponMainType_MAX                      = 4,
};

// Enum QRSL.EWeeklyBigAwardJumpTo
// NumValues: 0x0002
enum class EWeeklyBigAwardJumpTo : uint8
{
	Mount                                    = 0,
	EWeeklyBigAwardJumpTo_MAX                = 1,
};

// Enum QRSL.EWormholeRuneSynthesisPage
// NumValues: 0x0003
enum class EWormholeRuneSynthesisPage : uint8
{
	Fragment                                 = 0,
	Rune                                     = 1,
	EWormholeRuneSynthesisPage_MAX           = 2,
};

// Enum QRSL.EWeaponSurvivalMessageType
// NumValues: 0x001D
enum class EWeaponSurvivalMessageType : uint8
{
	None                                     = 0,
	EWS_WheelGameTime                        = 1,
	EWS_SelectedWeaponEndTime                = 2,
	EWS_WaitToBattleEndTime                  = 3,
	EWS_WeaponShopData                       = 4,
	EWS_EliminatePlayerReWard                = 5,
	EWS_Currency                             = 6,
	EWS_ChallengeSucessTips                  = 7,
	EWS_ChallengeFailedTips                  = 8,
	EWS_CloseUI                              = 9,
	EWS_SafeTeleportToAnimation              = 10,
	EWS_RefreshPlayerState                   = 11,
	EWS_BuyCardSuccessStatus                 = 12,
	EWS_SellCardSuccessStatus                = 13,
	EWS_PopupShopUI                          = 14,
	EWS_LockData                             = 15,
	EWS_GameState                            = 16,
	EWS_PoolUpData                           = 17,
	EWS_FetterData                           = 18,
	EWS_WeaponSuccessUpStar                  = 19,
	EWS_SafeTeleportTo                       = 20,
	EWS_Relive                               = 21,
	EWS_BuyCard                              = 22,
	EWS_SellCard                             = 23,
	EWS_RequestRefreshWeaponShop             = 24,
	EWS_RequestLockWeaponShop                = 25,
	EWS_PoolUp                               = 26,
	EWS_ReliveCount                          = 27,
	EWeaponSurvivalMessageType_MAX           = 28,
};

// Enum QRSL.EWorkGuideStageType
// NumValues: 0x0004
enum class EWorkGuideStageType : uint8
{
	WGSGT_IDLE                               = 0,
	WGSGT_WORKING                            = 1,
	WGAT_MAX                                 = 2,
	EWorkGuideStageType_MAX                  = 3,
};

// Enum QRSL.EWorkGuideSpawnSymbolConditionType
// NumValues: 0x0006
enum class EWorkGuideSpawnSymbolConditionType : uint8
{
	WGST_None                                = 0,
	WGST_Adjoin_And                          = 1,
	WGST_Remove_And                          = 2,
	WGST_Adjoin_Or                           = 3,
	WGST_Remove_Or                           = 4,
	WGST_MAX                                 = 5,
};

// Enum QRSL.EWorkGuideCountEventType
// NumValues: 0x0005
enum class EWorkGuideCountEventType : uint8
{
	WGCET_None                               = 0,
	WGCET_Remove_Self                        = 1,
	WGCET_Replace                            = 2,
	WGCET_Random_Spawn                       = 3,
	WGCET_MAX                                = 4,
};

// Enum QRSL.EWorkGuideItemEventType
// NumValues: 0x0011
enum class EWorkGuideItemEventType : uint8
{
	WGIT_None                                = 0,
	WGIT_Replace_Symbol                      = 1,
	WGIT_Get_Symbol                          = 2,
	WGIT_Has_Symbol_Get_Coin                 = 3,
	WGIT_Remove_Item_Get_Coin                = 4,
	WGIT_Extend_Get_Coin                     = 5,
	WGIT_Remove_Extend_Get_Ratio             = 6,
	WGIT_Remove_Extend_Get_Coin              = 7,
	WGIT_Ratio_Remove_One_Get_Coin           = 8,
	WGIT_Remove_N_Get_Coin                   = 9,
	WGIT_Get_N_Get_Coin                      = 10,
	WGIT_Refresh_Get_Coin                    = 11,
	WGIT_Skip_Get_Coin                       = 12,
	WGIT_Turn_N_Get_Coin                     = 13,
	WGIT_Add_Quality_Ratio                   = 14,
	WGAT_MAX                                 = 15,
	EWorkGuideItemEventType_MAX              = 16,
};

// Enum QRSL.EWorkGuideAdjoinEventType
// NumValues: 0x0009
enum class EWorkGuideAdjoinEventType : uint8
{
	WGCT_None                                = 0,
	WGCT_Remove                              = 1,
	WGCT_Replace                             = 2,
	WGCT_Extend_Once                         = 3,
	WGCT_Base_Ratio                          = 4,
	WGAT_Extend_Every                        = 5,
	WGAT_Extend_Every_Ratio                  = 6,
	WGAT_MAX                                 = 7,
	EWorkGuideAdjoinEventType_MAX            = 8,
};

// Enum QRSL.EWorkGuideAdjoinType
// NumValues: 0x0004
enum class EWorkGuideAdjoinType : uint8
{
	WGAT_TARGET                              = 0,
	WGAT_SELF                                = 1,
	WGAT_ADJOIN                              = 2,
	WGAT_MAX                                 = 3,
};

// Enum QRSL.FWorkGuideAnimationType
// NumValues: 0x0006
enum class EFWorkGuideAnimationType : uint8
{
	WGAT_ANIM_Spawn                          = 0,
	WGAT_ANIM_Remove                         = 1,
	WGAT_ANIM_Interaction                    = 2,
	WGAT_ANIM_Cout                           = 3,
	WGAT_ANIM_AddCoin                        = 4,
	WGAT_ANIM_MAX                            = 5,
};

// Enum QRSL.EPickWormholeItemResult
// NumValues: 0x0005
enum class EPickWormholeItemResult : uint8
{
	PICK_ITEM_SUCCESS                        = 0,
	PICK_ITEM_FAIL_SAME                      = 1,
	PICK_ITEM_FAIL_AMOUNT_LIMIT              = 2,
	PICK_ITEM_FAIL_ERROR                     = 3,
	PICK_ITEM_MAX                            = 4,
};

// Enum QRSL.EWormholePickUpItem
// NumValues: 0x0006
enum class EWormholePickUpItem : uint8
{
	Score                                    = 0,
	Buff                                     = 1,
	Weapon                                   = 2,
	Artifact                                 = 3,
	Immitation                               = 4,
	MAX                                      = 5,
};

// Enum QRSL.EQRSLTestEnum
// NumValues: 0x0005
enum class EQRSLTestEnum : uint8
{
	None                                     = 0,
	A                                        = 1,
	B                                        = 2,
	C                                        = 3,
	EQRSLTestEnum_MAX                        = 4,
};

// ScriptStruct QRSL.HottaBaseResult
// 0x0040 (0x0040 - 0x0000)
struct FHottaBaseResult
{
public:
	int32                                         MethodId;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RetCode;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RetMsg;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThirdCode;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CA3[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ThirdMsg;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExtraJson;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHottaBaseResult) == 0x000008, "Wrong alignment on FHottaBaseResult");
static_assert(sizeof(FHottaBaseResult) == 0x000040, "Wrong size on FHottaBaseResult");
static_assert(offsetof(FHottaBaseResult, MethodId) == 0x000000, "Member 'FHottaBaseResult::MethodId' has a wrong offset!");
static_assert(offsetof(FHottaBaseResult, RetCode) == 0x000004, "Member 'FHottaBaseResult::RetCode' has a wrong offset!");
static_assert(offsetof(FHottaBaseResult, RetMsg) == 0x000008, "Member 'FHottaBaseResult::RetMsg' has a wrong offset!");
static_assert(offsetof(FHottaBaseResult, ThirdCode) == 0x000018, "Member 'FHottaBaseResult::ThirdCode' has a wrong offset!");
static_assert(offsetof(FHottaBaseResult, ThirdMsg) == 0x000020, "Member 'FHottaBaseResult::ThirdMsg' has a wrong offset!");
static_assert(offsetof(FHottaBaseResult, ExtraJson) == 0x000030, "Member 'FHottaBaseResult::ExtraJson' has a wrong offset!");

// ScriptStruct QRSL.MountMaintenanceTaskSaveData
// 0x000C (0x000C - 0x0000)
struct FMountMaintenanceTaskSaveData final
{
public:
	class FName                                   TaskId;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCompleted;                                        // 0x0008(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CA4[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMountMaintenanceTaskSaveData) == 0x000004, "Wrong alignment on FMountMaintenanceTaskSaveData");
static_assert(sizeof(FMountMaintenanceTaskSaveData) == 0x00000C, "Wrong size on FMountMaintenanceTaskSaveData");
static_assert(offsetof(FMountMaintenanceTaskSaveData, TaskId) == 0x000000, "Member 'FMountMaintenanceTaskSaveData::TaskId' has a wrong offset!");
static_assert(offsetof(FMountMaintenanceTaskSaveData, bCompleted) == 0x000008, "Member 'FMountMaintenanceTaskSaveData::bCompleted' has a wrong offset!");

// ScriptStruct QRSL.MountSaveInfo
// 0x0078 (0x0078 - 0x0000)
struct FMountSaveInfo final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StrengthenLevel;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Exp;                                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUnlock;                                         // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CA5[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              UnlockDateTime;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaintenanceTaskRefreshCount;                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CA6[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMountMaintenanceTaskSaveData>  MaintenanceTaskArray;                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	class FName                                   ActivatedSkinId;                                   // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           UnlockedSkinArray;                                 // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	class FName                                   ActivatedColorId;                                  // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           UnlockedColorArray;                                // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReceivedMaintenanceAwardArray;                     // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMountSaveInfo) == 0x000008, "Wrong alignment on FMountSaveInfo");
static_assert(sizeof(FMountSaveInfo) == 0x000078, "Wrong size on FMountSaveInfo");
static_assert(offsetof(FMountSaveInfo, ID) == 0x000000, "Member 'FMountSaveInfo::ID' has a wrong offset!");
static_assert(offsetof(FMountSaveInfo, Level) == 0x000008, "Member 'FMountSaveInfo::Level' has a wrong offset!");
static_assert(offsetof(FMountSaveInfo, StrengthenLevel) == 0x00000C, "Member 'FMountSaveInfo::StrengthenLevel' has a wrong offset!");
static_assert(offsetof(FMountSaveInfo, Exp) == 0x000010, "Member 'FMountSaveInfo::Exp' has a wrong offset!");
static_assert(offsetof(FMountSaveInfo, bIsUnlock) == 0x000014, "Member 'FMountSaveInfo::bIsUnlock' has a wrong offset!");
static_assert(offsetof(FMountSaveInfo, UnlockDateTime) == 0x000018, "Member 'FMountSaveInfo::UnlockDateTime' has a wrong offset!");
static_assert(offsetof(FMountSaveInfo, MaintenanceTaskRefreshCount) == 0x000020, "Member 'FMountSaveInfo::MaintenanceTaskRefreshCount' has a wrong offset!");
static_assert(offsetof(FMountSaveInfo, MaintenanceTaskArray) == 0x000028, "Member 'FMountSaveInfo::MaintenanceTaskArray' has a wrong offset!");
static_assert(offsetof(FMountSaveInfo, ActivatedSkinId) == 0x000038, "Member 'FMountSaveInfo::ActivatedSkinId' has a wrong offset!");
static_assert(offsetof(FMountSaveInfo, UnlockedSkinArray) == 0x000040, "Member 'FMountSaveInfo::UnlockedSkinArray' has a wrong offset!");
static_assert(offsetof(FMountSaveInfo, ActivatedColorId) == 0x000050, "Member 'FMountSaveInfo::ActivatedColorId' has a wrong offset!");
static_assert(offsetof(FMountSaveInfo, UnlockedColorArray) == 0x000058, "Member 'FMountSaveInfo::UnlockedColorArray' has a wrong offset!");
static_assert(offsetof(FMountSaveInfo, ReceivedMaintenanceAwardArray) == 0x000068, "Member 'FMountSaveInfo::ReceivedMaintenanceAwardArray' has a wrong offset!");

// ScriptStruct QRSL.DishData
// 0x000C (0x000C - 0x0000)
struct FDishData final
{
public:
	class FName                                   DishName;                                          // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x0008(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowNew;                                          // 0x0009(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CA7[0x2];                                     // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDishData) == 0x000004, "Wrong alignment on FDishData");
static_assert(sizeof(FDishData) == 0x00000C, "Wrong size on FDishData");
static_assert(offsetof(FDishData, DishName) == 0x000000, "Member 'FDishData::DishName' has a wrong offset!");
static_assert(offsetof(FDishData, bActive) == 0x000008, "Member 'FDishData::bActive' has a wrong offset!");
static_assert(offsetof(FDishData, bShowNew) == 0x000009, "Member 'FDishData::bShowNew' has a wrong offset!");

// ScriptStruct QRSL.SetMScaleValue
// 0x0010 (0x0010 - 0x0000)
struct FSetMScaleValue final
{
public:
	class FName                                   ChangeName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartValue;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSetMScaleValue) == 0x000004, "Wrong alignment on FSetMScaleValue");
static_assert(sizeof(FSetMScaleValue) == 0x000010, "Wrong size on FSetMScaleValue");
static_assert(offsetof(FSetMScaleValue, ChangeName) == 0x000000, "Member 'FSetMScaleValue::ChangeName' has a wrong offset!");
static_assert(offsetof(FSetMScaleValue, StartValue) == 0x000008, "Member 'FSetMScaleValue::StartValue' has a wrong offset!");
static_assert(offsetof(FSetMScaleValue, EndValue) == 0x00000C, "Member 'FSetMScaleValue::EndValue' has a wrong offset!");

// ScriptStruct QRSL.HackerTerminalSMSIDSaveData
// 0x0001 (0x0001 - 0x0000)
struct FHackerTerminalSMSIDSaveData final
{
public:
	uint8                                         Data;                                              // 0x0000(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHackerTerminalSMSIDSaveData) == 0x000001, "Wrong alignment on FHackerTerminalSMSIDSaveData");
static_assert(sizeof(FHackerTerminalSMSIDSaveData) == 0x000001, "Wrong size on FHackerTerminalSMSIDSaveData");
static_assert(offsetof(FHackerTerminalSMSIDSaveData, Data) == 0x000000, "Member 'FHackerTerminalSMSIDSaveData::Data' has a wrong offset!");

// ScriptStruct QRSL.HackerTerminalSMSGroupSaveData
// 0x0028 (0x0028 - 0x0000)
struct FHackerTerminalSMSGroupSaveData final
{
public:
	uint8                                         SMSGroupID;                                        // 0x0000(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CA8[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHackerTerminalSMSIDSaveData>   SMSMessageData;                                    // 0x0008(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	uint8                                         SMSSendBranchIndex;                                // 0x0018(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SMSReadBranchIndex;                                // 0x0019(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CA9[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         SMSFinallyTime;                                    // 0x0020(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHackerTerminalSMSGroupSaveData) == 0x000008, "Wrong alignment on FHackerTerminalSMSGroupSaveData");
static_assert(sizeof(FHackerTerminalSMSGroupSaveData) == 0x000028, "Wrong size on FHackerTerminalSMSGroupSaveData");
static_assert(offsetof(FHackerTerminalSMSGroupSaveData, SMSGroupID) == 0x000000, "Member 'FHackerTerminalSMSGroupSaveData::SMSGroupID' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSGroupSaveData, SMSMessageData) == 0x000008, "Member 'FHackerTerminalSMSGroupSaveData::SMSMessageData' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSGroupSaveData, SMSSendBranchIndex) == 0x000018, "Member 'FHackerTerminalSMSGroupSaveData::SMSSendBranchIndex' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSGroupSaveData, SMSReadBranchIndex) == 0x000019, "Member 'FHackerTerminalSMSGroupSaveData::SMSReadBranchIndex' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSGroupSaveData, SMSFinallyTime) == 0x000020, "Member 'FHackerTerminalSMSGroupSaveData::SMSFinallyTime' has a wrong offset!");

// ScriptStruct QRSL.HackerTerminalSMSSaveData
// 0x0010 (0x0010 - 0x0000)
struct FHackerTerminalSMSSaveData final
{
public:
	TArray<struct FHackerTerminalSMSGroupSaveData> SMSGroupSaveData;                                  // 0x0000(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHackerTerminalSMSSaveData) == 0x000008, "Wrong alignment on FHackerTerminalSMSSaveData");
static_assert(sizeof(FHackerTerminalSMSSaveData) == 0x000010, "Wrong size on FHackerTerminalSMSSaveData");
static_assert(offsetof(FHackerTerminalSMSSaveData, SMSGroupSaveData) == 0x000000, "Member 'FHackerTerminalSMSSaveData::SMSGroupSaveData' has a wrong offset!");

// ScriptStruct QRSL.HackerTerminalSMSSaveSyncData
// 0x0018 (0x0018 - 0x0000)
struct FHackerTerminalSMSSaveSyncData final
{
public:
	int32                                         SenderNPCID;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CAA[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHackerTerminalSMSSaveData             SMSSaveData;                                       // 0x0008(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FHackerTerminalSMSSaveSyncData) == 0x000008, "Wrong alignment on FHackerTerminalSMSSaveSyncData");
static_assert(sizeof(FHackerTerminalSMSSaveSyncData) == 0x000018, "Wrong size on FHackerTerminalSMSSaveSyncData");
static_assert(offsetof(FHackerTerminalSMSSaveSyncData, SenderNPCID) == 0x000000, "Member 'FHackerTerminalSMSSaveSyncData::SenderNPCID' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSSaveSyncData, SMSSaveData) == 0x000008, "Member 'FHackerTerminalSMSSaveSyncData::SMSSaveData' has a wrong offset!");

// ScriptStruct QRSL.PersonalityTitleConditionInfo
// 0x000C (0x000C - 0x0000)
struct FPersonalityTitleConditionInfo final
{
public:
	int32                                         Score;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PersonalityTitleID;                                // 0x0004(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPersonalityTitleConditionInfo) == 0x000004, "Wrong alignment on FPersonalityTitleConditionInfo");
static_assert(sizeof(FPersonalityTitleConditionInfo) == 0x00000C, "Wrong size on FPersonalityTitleConditionInfo");
static_assert(offsetof(FPersonalityTitleConditionInfo, Score) == 0x000000, "Member 'FPersonalityTitleConditionInfo::Score' has a wrong offset!");
static_assert(offsetof(FPersonalityTitleConditionInfo, PersonalityTitleID) == 0x000004, "Member 'FPersonalityTitleConditionInfo::PersonalityTitleID' has a wrong offset!");

// ScriptStruct QRSL.SoloLeagueStageInfo
// 0x0010 (0x0010 - 0x0000)
struct FSoloLeagueStageInfo final
{
public:
	int32                                         Stage;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Grade;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stars;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProtectScore;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSoloLeagueStageInfo) == 0x000004, "Wrong alignment on FSoloLeagueStageInfo");
static_assert(sizeof(FSoloLeagueStageInfo) == 0x000010, "Wrong size on FSoloLeagueStageInfo");
static_assert(offsetof(FSoloLeagueStageInfo, Stage) == 0x000000, "Member 'FSoloLeagueStageInfo::Stage' has a wrong offset!");
static_assert(offsetof(FSoloLeagueStageInfo, Grade) == 0x000004, "Member 'FSoloLeagueStageInfo::Grade' has a wrong offset!");
static_assert(offsetof(FSoloLeagueStageInfo, Stars) == 0x000008, "Member 'FSoloLeagueStageInfo::Stars' has a wrong offset!");
static_assert(offsetof(FSoloLeagueStageInfo, ProtectScore) == 0x00000C, "Member 'FSoloLeagueStageInfo::ProtectScore' has a wrong offset!");

// ScriptStruct QRSL.HottaTimeData
// 0x0050 (0x0050 - 0x0000)
struct FHottaTimeData final
{
public:
	float                                         FBeginTime;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FEndTime;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   HourName;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              HourIcon;                                          // 0x0020(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IconWidgetName;                                    // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHottaTimeData) == 0x000008, "Wrong alignment on FHottaTimeData");
static_assert(sizeof(FHottaTimeData) == 0x000050, "Wrong size on FHottaTimeData");
static_assert(offsetof(FHottaTimeData, FBeginTime) == 0x000000, "Member 'FHottaTimeData::FBeginTime' has a wrong offset!");
static_assert(offsetof(FHottaTimeData, FEndTime) == 0x000004, "Member 'FHottaTimeData::FEndTime' has a wrong offset!");
static_assert(offsetof(FHottaTimeData, HourName) == 0x000008, "Member 'FHottaTimeData::HourName' has a wrong offset!");
static_assert(offsetof(FHottaTimeData, HourIcon) == 0x000020, "Member 'FHottaTimeData::HourIcon' has a wrong offset!");
static_assert(offsetof(FHottaTimeData, IconWidgetName) == 0x000048, "Member 'FHottaTimeData::IconWidgetName' has a wrong offset!");

// ScriptStruct QRSL.WormholeLevelClearenceData
// 0x0008 (0x0008 - 0x0000)
struct FWormholeLevelClearenceData final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWormholeDifficulty                           MaxDifficulty;                                     // 0x0004(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CAB[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWormholeLevelClearenceData) == 0x000004, "Wrong alignment on FWormholeLevelClearenceData");
static_assert(sizeof(FWormholeLevelClearenceData) == 0x000008, "Wrong size on FWormholeLevelClearenceData");
static_assert(offsetof(FWormholeLevelClearenceData, Level) == 0x000000, "Member 'FWormholeLevelClearenceData::Level' has a wrong offset!");
static_assert(offsetof(FWormholeLevelClearenceData, MaxDifficulty) == 0x000004, "Member 'FWormholeLevelClearenceData::MaxDifficulty' has a wrong offset!");

// ScriptStruct QRSL.WormholeSaveData
// 0x0030 (0x0030 - 0x0000)
struct FWormholeSaveData final
{
public:
	int32                                         Layer;                                             // 0x0000(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWormholeDifficulty                           Difficulty;                                        // 0x0004(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CAC[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HistoryMaxClearanceLevel;                          // 0x0008(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLevelCostTime;                                  // 0x000C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FWormholeLevelClearenceData>    LevelClearenceData;                                // 0x0010(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	int32                                         CurLevel;                                          // 0x0020(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStarted;                                          // 0x0024(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCleared;                                          // 0x0025(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowUnlockRedPoint;                               // 0x0026(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpenEndlessMode;                                  // 0x0027(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndlessModeMaxLevel;                               // 0x0028(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CAD[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWormholeSaveData) == 0x000008, "Wrong alignment on FWormholeSaveData");
static_assert(sizeof(FWormholeSaveData) == 0x000030, "Wrong size on FWormholeSaveData");
static_assert(offsetof(FWormholeSaveData, Layer) == 0x000000, "Member 'FWormholeSaveData::Layer' has a wrong offset!");
static_assert(offsetof(FWormholeSaveData, Difficulty) == 0x000004, "Member 'FWormholeSaveData::Difficulty' has a wrong offset!");
static_assert(offsetof(FWormholeSaveData, HistoryMaxClearanceLevel) == 0x000008, "Member 'FWormholeSaveData::HistoryMaxClearanceLevel' has a wrong offset!");
static_assert(offsetof(FWormholeSaveData, MaxLevelCostTime) == 0x00000C, "Member 'FWormholeSaveData::MaxLevelCostTime' has a wrong offset!");
static_assert(offsetof(FWormholeSaveData, LevelClearenceData) == 0x000010, "Member 'FWormholeSaveData::LevelClearenceData' has a wrong offset!");
static_assert(offsetof(FWormholeSaveData, CurLevel) == 0x000020, "Member 'FWormholeSaveData::CurLevel' has a wrong offset!");
static_assert(offsetof(FWormholeSaveData, bStarted) == 0x000024, "Member 'FWormholeSaveData::bStarted' has a wrong offset!");
static_assert(offsetof(FWormholeSaveData, bCleared) == 0x000025, "Member 'FWormholeSaveData::bCleared' has a wrong offset!");
static_assert(offsetof(FWormholeSaveData, bShowUnlockRedPoint) == 0x000026, "Member 'FWormholeSaveData::bShowUnlockRedPoint' has a wrong offset!");
static_assert(offsetof(FWormholeSaveData, bOpenEndlessMode) == 0x000027, "Member 'FWormholeSaveData::bOpenEndlessMode' has a wrong offset!");
static_assert(offsetof(FWormholeSaveData, EndlessModeMaxLevel) == 0x000028, "Member 'FWormholeSaveData::EndlessModeMaxLevel' has a wrong offset!");

// ScriptStruct QRSL.HottaComplianceResult
// 0x0098 (0x00D8 - 0x0040)
struct FHottaComplianceResult final : public FHottaBaseResult
{
public:
	int32                                         AdultStatus;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParentCertificateStatus;                           // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ParentCertificateStatusExpiration;                 // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EUUserAgreeStatus;                                 // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CAE[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CountryCode;                                       // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdultAge;                                          // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameGrade;                                         // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CertificateType;                                   // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CAF[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AdultStatusExpiration;                             // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TS;                                                // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEEA;                                             // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CB0[0x7];                                     // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Region;                                            // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Email;                                             // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RealNameAuthStatus;                                // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedRealNameAuth;                                  // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedLICertification;                               // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CB1[0x7];                                     // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHottaComplianceResult) == 0x000008, "Wrong alignment on FHottaComplianceResult");
static_assert(sizeof(FHottaComplianceResult) == 0x0000D8, "Wrong size on FHottaComplianceResult");
static_assert(offsetof(FHottaComplianceResult, AdultStatus) == 0x000040, "Member 'FHottaComplianceResult::AdultStatus' has a wrong offset!");
static_assert(offsetof(FHottaComplianceResult, ParentCertificateStatus) == 0x000044, "Member 'FHottaComplianceResult::ParentCertificateStatus' has a wrong offset!");
static_assert(offsetof(FHottaComplianceResult, ParentCertificateStatusExpiration) == 0x000048, "Member 'FHottaComplianceResult::ParentCertificateStatusExpiration' has a wrong offset!");
static_assert(offsetof(FHottaComplianceResult, EUUserAgreeStatus) == 0x000058, "Member 'FHottaComplianceResult::EUUserAgreeStatus' has a wrong offset!");
static_assert(offsetof(FHottaComplianceResult, CountryCode) == 0x000060, "Member 'FHottaComplianceResult::CountryCode' has a wrong offset!");
static_assert(offsetof(FHottaComplianceResult, AdultAge) == 0x000070, "Member 'FHottaComplianceResult::AdultAge' has a wrong offset!");
static_assert(offsetof(FHottaComplianceResult, GameGrade) == 0x000074, "Member 'FHottaComplianceResult::GameGrade' has a wrong offset!");
static_assert(offsetof(FHottaComplianceResult, CertificateType) == 0x000078, "Member 'FHottaComplianceResult::CertificateType' has a wrong offset!");
static_assert(offsetof(FHottaComplianceResult, AdultStatusExpiration) == 0x000080, "Member 'FHottaComplianceResult::AdultStatusExpiration' has a wrong offset!");
static_assert(offsetof(FHottaComplianceResult, TS) == 0x000090, "Member 'FHottaComplianceResult::TS' has a wrong offset!");
static_assert(offsetof(FHottaComplianceResult, IsEEA) == 0x0000A0, "Member 'FHottaComplianceResult::IsEEA' has a wrong offset!");
static_assert(offsetof(FHottaComplianceResult, Region) == 0x0000A8, "Member 'FHottaComplianceResult::Region' has a wrong offset!");
static_assert(offsetof(FHottaComplianceResult, Email) == 0x0000B8, "Member 'FHottaComplianceResult::Email' has a wrong offset!");
static_assert(offsetof(FHottaComplianceResult, RealNameAuthStatus) == 0x0000C8, "Member 'FHottaComplianceResult::RealNameAuthStatus' has a wrong offset!");
static_assert(offsetof(FHottaComplianceResult, NeedRealNameAuth) == 0x0000CC, "Member 'FHottaComplianceResult::NeedRealNameAuth' has a wrong offset!");
static_assert(offsetof(FHottaComplianceResult, NeedLICertification) == 0x0000D0, "Member 'FHottaComplianceResult::NeedLICertification' has a wrong offset!");

// ScriptStruct QRSL.GMPlayerComInfo
// 0x0040 (0x0040 - 0x0000)
struct FGMPlayerComInfo final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterLevel;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0024(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FQRSLQuestProgress>             QuestProgressArray;                                // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGMPlayerComInfo) == 0x000008, "Wrong alignment on FGMPlayerComInfo");
static_assert(sizeof(FGMPlayerComInfo) == 0x000040, "Wrong size on FGMPlayerComInfo");
static_assert(offsetof(FGMPlayerComInfo, PlayerName) == 0x000000, "Member 'FGMPlayerComInfo::PlayerName' has a wrong offset!");
static_assert(offsetof(FGMPlayerComInfo, MapName) == 0x000010, "Member 'FGMPlayerComInfo::MapName' has a wrong offset!");
static_assert(offsetof(FGMPlayerComInfo, CharacterLevel) == 0x000020, "Member 'FGMPlayerComInfo::CharacterLevel' has a wrong offset!");
static_assert(offsetof(FGMPlayerComInfo, Location) == 0x000024, "Member 'FGMPlayerComInfo::Location' has a wrong offset!");
static_assert(offsetof(FGMPlayerComInfo, QuestProgressArray) == 0x000030, "Member 'FGMPlayerComInfo::QuestProgressArray' has a wrong offset!");

// ScriptStruct QRSL.QRSLHackerTerminalDeviceBatteryLevelImageSet
// 0x0078 (0x0078 - 0x0000)
struct FQRSLHackerTerminalDeviceBatteryLevelImageSet final
{
public:
	TSoftObjectPtr<class UObject>                 HighLevelImage;                                    // 0x0000(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 MediumLevelImage;                                  // 0x0028(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 LowLevelImage;                                     // 0x0050(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLHackerTerminalDeviceBatteryLevelImageSet) == 0x000008, "Wrong alignment on FQRSLHackerTerminalDeviceBatteryLevelImageSet");
static_assert(sizeof(FQRSLHackerTerminalDeviceBatteryLevelImageSet) == 0x000078, "Wrong size on FQRSLHackerTerminalDeviceBatteryLevelImageSet");
static_assert(offsetof(FQRSLHackerTerminalDeviceBatteryLevelImageSet, HighLevelImage) == 0x000000, "Member 'FQRSLHackerTerminalDeviceBatteryLevelImageSet::HighLevelImage' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalDeviceBatteryLevelImageSet, MediumLevelImage) == 0x000028, "Member 'FQRSLHackerTerminalDeviceBatteryLevelImageSet::MediumLevelImage' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalDeviceBatteryLevelImageSet, LowLevelImage) == 0x000050, "Member 'FQRSLHackerTerminalDeviceBatteryLevelImageSet::LowLevelImage' has a wrong offset!");

// ScriptStruct QRSL.QRSLHackerTerminalDeviceBatteryConfig
// 0x01E0 (0x01E0 - 0x0000)
struct FQRSLHackerTerminalDeviceBatteryConfig final
{
public:
	struct FQRSLHackerTerminalDeviceBatteryLevelImageSet NormalLevelImageSet;                               // 0x0000(0x0078)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FQRSLHackerTerminalDeviceBatteryLevelImageSet ChargingLevelImageSet;                             // 0x0078(0x0078)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FQRSLHackerTerminalDeviceBatteryLevelImageSet UnlimitedLevelImageSet;                            // 0x00F0(0x0078)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FQRSLHackerTerminalDeviceBatteryLevelImageSet LostSignalLevelImageSet;                           // 0x0168(0x0078)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLHackerTerminalDeviceBatteryConfig) == 0x000008, "Wrong alignment on FQRSLHackerTerminalDeviceBatteryConfig");
static_assert(sizeof(FQRSLHackerTerminalDeviceBatteryConfig) == 0x0001E0, "Wrong size on FQRSLHackerTerminalDeviceBatteryConfig");
static_assert(offsetof(FQRSLHackerTerminalDeviceBatteryConfig, NormalLevelImageSet) == 0x000000, "Member 'FQRSLHackerTerminalDeviceBatteryConfig::NormalLevelImageSet' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalDeviceBatteryConfig, ChargingLevelImageSet) == 0x000078, "Member 'FQRSLHackerTerminalDeviceBatteryConfig::ChargingLevelImageSet' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalDeviceBatteryConfig, UnlimitedLevelImageSet) == 0x0000F0, "Member 'FQRSLHackerTerminalDeviceBatteryConfig::UnlimitedLevelImageSet' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalDeviceBatteryConfig, LostSignalLevelImageSet) == 0x000168, "Member 'FQRSLHackerTerminalDeviceBatteryConfig::LostSignalLevelImageSet' has a wrong offset!");

// ScriptStruct QRSL.TreasureMapReceiveInfo
// 0x0020 (0x0020 - 0x0000)
struct FTreasureMapReceiveInfo final
{
public:
	class FString                                 TreasureUID;                                       // 0x0000(0x0010)(ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETreasureMapQuality                           Quality;                                           // 0x0010(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CB2[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FragmentIndex;                                     // 0x0014(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReceived;                                         // 0x0018(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CB3[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTreasureMapReceiveInfo) == 0x000008, "Wrong alignment on FTreasureMapReceiveInfo");
static_assert(sizeof(FTreasureMapReceiveInfo) == 0x000020, "Wrong size on FTreasureMapReceiveInfo");
static_assert(offsetof(FTreasureMapReceiveInfo, TreasureUID) == 0x000000, "Member 'FTreasureMapReceiveInfo::TreasureUID' has a wrong offset!");
static_assert(offsetof(FTreasureMapReceiveInfo, Quality) == 0x000010, "Member 'FTreasureMapReceiveInfo::Quality' has a wrong offset!");
static_assert(offsetof(FTreasureMapReceiveInfo, FragmentIndex) == 0x000014, "Member 'FTreasureMapReceiveInfo::FragmentIndex' has a wrong offset!");
static_assert(offsetof(FTreasureMapReceiveInfo, bReceived) == 0x000018, "Member 'FTreasureMapReceiveInfo::bReceived' has a wrong offset!");

// ScriptStruct QRSL.ThemeActCollectFoodInfo
// 0x0018 (0x0018 - 0x0000)
struct FThemeActCollectFoodInfo final
{
public:
	struct FDateTime                              ThemeActCookingDayTime;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThemeActCookingNum;                                // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bIsReceivedAward;                                  // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FoodItemID;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FThemeActCollectFoodInfo) == 0x000008, "Wrong alignment on FThemeActCollectFoodInfo");
static_assert(sizeof(FThemeActCollectFoodInfo) == 0x000018, "Wrong size on FThemeActCollectFoodInfo");
static_assert(offsetof(FThemeActCollectFoodInfo, ThemeActCookingDayTime) == 0x000000, "Member 'FThemeActCollectFoodInfo::ThemeActCookingDayTime' has a wrong offset!");
static_assert(offsetof(FThemeActCollectFoodInfo, ThemeActCookingNum) == 0x000008, "Member 'FThemeActCollectFoodInfo::ThemeActCookingNum' has a wrong offset!");
static_assert(offsetof(FThemeActCollectFoodInfo, bIsReceivedAward) == 0x00000C, "Member 'FThemeActCollectFoodInfo::bIsReceivedAward' has a wrong offset!");
static_assert(offsetof(FThemeActCollectFoodInfo, FoodItemID) == 0x000010, "Member 'FThemeActCollectFoodInfo::FoodItemID' has a wrong offset!");

// ScriptStruct QRSL.WormholePickItemRandomInfo
// 0x0048 (0x0050 - 0x0008)
struct FWormholePickItemRandomInfo final : public FTableRowBase
{
public:
	class FName                                   PoolID;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ItemClass;                                         // 0x0010(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWormholeFallItemType                         ItemType;                                          // 0x003C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CB4[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ExhibitionItemId;                                  // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeaponStarLevel;                                   // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CB5[0x4];                                     // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWormholePickItemRandomInfo) == 0x000008, "Wrong alignment on FWormholePickItemRandomInfo");
static_assert(sizeof(FWormholePickItemRandomInfo) == 0x000050, "Wrong size on FWormholePickItemRandomInfo");
static_assert(offsetof(FWormholePickItemRandomInfo, PoolID) == 0x000008, "Member 'FWormholePickItemRandomInfo::PoolID' has a wrong offset!");
static_assert(offsetof(FWormholePickItemRandomInfo, ItemClass) == 0x000010, "Member 'FWormholePickItemRandomInfo::ItemClass' has a wrong offset!");
static_assert(offsetof(FWormholePickItemRandomInfo, Weight) == 0x000038, "Member 'FWormholePickItemRandomInfo::Weight' has a wrong offset!");
static_assert(offsetof(FWormholePickItemRandomInfo, ItemType) == 0x00003C, "Member 'FWormholePickItemRandomInfo::ItemType' has a wrong offset!");
static_assert(offsetof(FWormholePickItemRandomInfo, ExhibitionItemId) == 0x000040, "Member 'FWormholePickItemRandomInfo::ExhibitionItemId' has a wrong offset!");
static_assert(offsetof(FWormholePickItemRandomInfo, WeaponStarLevel) == 0x000048, "Member 'FWormholePickItemRandomInfo::WeaponStarLevel' has a wrong offset!");

// ScriptStruct QRSL.RepairMachineData
// 0x0060 (0x0060 - 0x0000)
struct FRepairMachineData final
{
public:
	float                                         StateDurationSeconds;                              // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillMonsterNum;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CompleteRepairAddValue;                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapturePointerNum;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<float, float>                            CaptureAddValueRule;                               // 0x0010(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRepairMachineData) == 0x000008, "Wrong alignment on FRepairMachineData");
static_assert(sizeof(FRepairMachineData) == 0x000060, "Wrong size on FRepairMachineData");
static_assert(offsetof(FRepairMachineData, StateDurationSeconds) == 0x000000, "Member 'FRepairMachineData::StateDurationSeconds' has a wrong offset!");
static_assert(offsetof(FRepairMachineData, KillMonsterNum) == 0x000004, "Member 'FRepairMachineData::KillMonsterNum' has a wrong offset!");
static_assert(offsetof(FRepairMachineData, CompleteRepairAddValue) == 0x000008, "Member 'FRepairMachineData::CompleteRepairAddValue' has a wrong offset!");
static_assert(offsetof(FRepairMachineData, CapturePointerNum) == 0x00000C, "Member 'FRepairMachineData::CapturePointerNum' has a wrong offset!");
static_assert(offsetof(FRepairMachineData, CaptureAddValueRule) == 0x000010, "Member 'FRepairMachineData::CaptureAddValueRule' has a wrong offset!");

// ScriptStruct QRSL.QRSLHackerIdentitySystemLevelConfig
// 0x00B8 (0x00C0 - 0x0008)
struct FQRSLHackerIdentitySystemLevelConfig final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0008(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHottaCostItem>                 CostItemArray;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   AwardDropID;                                       // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoUnlockAbility;                                // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CB6[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           UnlockAbilityIDArray;                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      AwardItemMaxCountMap;                              // 0x0060(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FHottaCostItem                         EquipAbilityCostItem;                              // 0x00B0(0x000C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         AbilitySlotNum;                                    // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLHackerIdentitySystemLevelConfig) == 0x000008, "Wrong alignment on FQRSLHackerIdentitySystemLevelConfig");
static_assert(sizeof(FQRSLHackerIdentitySystemLevelConfig) == 0x0000C0, "Wrong size on FQRSLHackerIdentitySystemLevelConfig");
static_assert(offsetof(FQRSLHackerIdentitySystemLevelConfig, Icon) == 0x000008, "Member 'FQRSLHackerIdentitySystemLevelConfig::Icon' has a wrong offset!");
static_assert(offsetof(FQRSLHackerIdentitySystemLevelConfig, CostItemArray) == 0x000030, "Member 'FQRSLHackerIdentitySystemLevelConfig::CostItemArray' has a wrong offset!");
static_assert(offsetof(FQRSLHackerIdentitySystemLevelConfig, AwardDropID) == 0x000040, "Member 'FQRSLHackerIdentitySystemLevelConfig::AwardDropID' has a wrong offset!");
static_assert(offsetof(FQRSLHackerIdentitySystemLevelConfig, bAutoUnlockAbility) == 0x000048, "Member 'FQRSLHackerIdentitySystemLevelConfig::bAutoUnlockAbility' has a wrong offset!");
static_assert(offsetof(FQRSLHackerIdentitySystemLevelConfig, UnlockAbilityIDArray) == 0x000050, "Member 'FQRSLHackerIdentitySystemLevelConfig::UnlockAbilityIDArray' has a wrong offset!");
static_assert(offsetof(FQRSLHackerIdentitySystemLevelConfig, AwardItemMaxCountMap) == 0x000060, "Member 'FQRSLHackerIdentitySystemLevelConfig::AwardItemMaxCountMap' has a wrong offset!");
static_assert(offsetof(FQRSLHackerIdentitySystemLevelConfig, EquipAbilityCostItem) == 0x0000B0, "Member 'FQRSLHackerIdentitySystemLevelConfig::EquipAbilityCostItem' has a wrong offset!");
static_assert(offsetof(FQRSLHackerIdentitySystemLevelConfig, AbilitySlotNum) == 0x0000BC, "Member 'FQRSLHackerIdentitySystemLevelConfig::AbilitySlotNum' has a wrong offset!");

// ScriptStruct QRSL.QRSLWorkGuideItemData
// 0x000C (0x000C - 0x0000)
struct FQRSLWorkGuideItemData final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Turn;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLWorkGuideItemData) == 0x000004, "Wrong alignment on FQRSLWorkGuideItemData");
static_assert(sizeof(FQRSLWorkGuideItemData) == 0x00000C, "Wrong size on FQRSLWorkGuideItemData");
static_assert(offsetof(FQRSLWorkGuideItemData, Name) == 0x000000, "Member 'FQRSLWorkGuideItemData::Name' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideItemData, Turn) == 0x000008, "Member 'FQRSLWorkGuideItemData::Turn' has a wrong offset!");

// ScriptStruct QRSL.UIDownloadInfo
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FUIDownloadInfo final
{
public:
	uint8                                         Pad_1CB7[0x40];                                    // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUIDownloadInfo) == 0x000008, "Wrong alignment on FUIDownloadInfo");
static_assert(sizeof(FUIDownloadInfo) == 0x000040, "Wrong size on FUIDownloadInfo");

// ScriptStruct QRSL.ForgeLevelFilter
// 0x0008 (0x0008 - 0x0000)
struct FForgeLevelFilter final
{
public:
	int32                                         MinLevel;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLevel;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FForgeLevelFilter) == 0x000004, "Wrong alignment on FForgeLevelFilter");
static_assert(sizeof(FForgeLevelFilter) == 0x000008, "Wrong size on FForgeLevelFilter");
static_assert(offsetof(FForgeLevelFilter, MinLevel) == 0x000000, "Member 'FForgeLevelFilter::MinLevel' has a wrong offset!");
static_assert(offsetof(FForgeLevelFilter, MaxLevel) == 0x000004, "Member 'FForgeLevelFilter::MaxLevel' has a wrong offset!");

// ScriptStruct QRSL.ActivityRecoverData
// 0x0018 (0x0018 - 0x0000)
struct FActivityRecoverData final
{
public:
	class FName                                   ActivityId;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReceiveTime;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReceiveCount;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CB8[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActivityRecoverData) == 0x000008, "Wrong alignment on FActivityRecoverData");
static_assert(sizeof(FActivityRecoverData) == 0x000018, "Wrong size on FActivityRecoverData");
static_assert(offsetof(FActivityRecoverData, ActivityId) == 0x000000, "Member 'FActivityRecoverData::ActivityId' has a wrong offset!");
static_assert(offsetof(FActivityRecoverData, ReceiveTime) == 0x000008, "Member 'FActivityRecoverData::ReceiveTime' has a wrong offset!");
static_assert(offsetof(FActivityRecoverData, ReceiveCount) == 0x000010, "Member 'FActivityRecoverData::ReceiveCount' has a wrong offset!");

// ScriptStruct QRSL.HotWaveImpactPlayerInfo
// 0x0048 (0x0048 - 0x0000)
struct FHotWaveImpactPlayerInfo final
{
public:
	int64                                         PlayerID;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHotWaveImpactPlayerState                     PlayerState;                                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CB9[0x3F];                                    // 0x0009(0x003F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHotWaveImpactPlayerInfo) == 0x000008, "Wrong alignment on FHotWaveImpactPlayerInfo");
static_assert(sizeof(FHotWaveImpactPlayerInfo) == 0x000048, "Wrong size on FHotWaveImpactPlayerInfo");
static_assert(offsetof(FHotWaveImpactPlayerInfo, PlayerID) == 0x000000, "Member 'FHotWaveImpactPlayerInfo::PlayerID' has a wrong offset!");
static_assert(offsetof(FHotWaveImpactPlayerInfo, PlayerState) == 0x000008, "Member 'FHotWaveImpactPlayerInfo::PlayerState' has a wrong offset!");

// ScriptStruct QRSL.QRSLMsgCollectInfo
// 0x0070 (0x0070 - 0x0000)
struct FQRSLMsgCollectInfo final
{
public:
	struct FTimespan                              InitiateTime;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMsgCollectType                               MsgCollectType;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CBA[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InitiateRoleName;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       UniqueId;                                          // 0x0020(0x0028)(SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TeamID;                                            // 0x0048(0x0010)(ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ParamArray;                                        // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CBB[0x8];                                     // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQRSLMsgCollectInfo) == 0x000008, "Wrong alignment on FQRSLMsgCollectInfo");
static_assert(sizeof(FQRSLMsgCollectInfo) == 0x000070, "Wrong size on FQRSLMsgCollectInfo");
static_assert(offsetof(FQRSLMsgCollectInfo, InitiateTime) == 0x000000, "Member 'FQRSLMsgCollectInfo::InitiateTime' has a wrong offset!");
static_assert(offsetof(FQRSLMsgCollectInfo, MsgCollectType) == 0x000008, "Member 'FQRSLMsgCollectInfo::MsgCollectType' has a wrong offset!");
static_assert(offsetof(FQRSLMsgCollectInfo, InitiateRoleName) == 0x000010, "Member 'FQRSLMsgCollectInfo::InitiateRoleName' has a wrong offset!");
static_assert(offsetof(FQRSLMsgCollectInfo, UniqueId) == 0x000020, "Member 'FQRSLMsgCollectInfo::UniqueId' has a wrong offset!");
static_assert(offsetof(FQRSLMsgCollectInfo, TeamID) == 0x000048, "Member 'FQRSLMsgCollectInfo::TeamID' has a wrong offset!");
static_assert(offsetof(FQRSLMsgCollectInfo, ParamArray) == 0x000058, "Member 'FQRSLMsgCollectInfo::ParamArray' has a wrong offset!");

// ScriptStruct QRSL.BeachVolleyballAnim
// 0x0050 (0x0050 - 0x0000)
struct FBeachVolleyballAnim final
{
public:
	TSoftObjectPtr<class UAnimMontage>            FemalePlayerServeAnim;                             // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            MalePlayerServeAnim;                               // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBeachVolleyballAnim) == 0x000008, "Wrong alignment on FBeachVolleyballAnim");
static_assert(sizeof(FBeachVolleyballAnim) == 0x000050, "Wrong size on FBeachVolleyballAnim");
static_assert(offsetof(FBeachVolleyballAnim, FemalePlayerServeAnim) == 0x000000, "Member 'FBeachVolleyballAnim::FemalePlayerServeAnim' has a wrong offset!");
static_assert(offsetof(FBeachVolleyballAnim, MalePlayerServeAnim) == 0x000028, "Member 'FBeachVolleyballAnim::MalePlayerServeAnim' has a wrong offset!");

// ScriptStruct QRSL.HottaUpdateProgress
// 0x0068 (0x0068 - 0x0000)
struct FHottaUpdateProgress final
{
public:
	int32                                         MethodId;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHottaUpdateActionType                        ActionType;                                        // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CBC[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UpdateStep;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RepoID;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TaskId;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CBD[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FinishedSize;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TotalSize;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Speed;                                             // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainTime;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepProgress;                                      // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalProgress;                                     // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CBE[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMsg;                                          // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHottaUpdateProgress) == 0x000008, "Wrong alignment on FHottaUpdateProgress");
static_assert(sizeof(FHottaUpdateProgress) == 0x000068, "Wrong size on FHottaUpdateProgress");
static_assert(offsetof(FHottaUpdateProgress, MethodId) == 0x000000, "Member 'FHottaUpdateProgress::MethodId' has a wrong offset!");
static_assert(offsetof(FHottaUpdateProgress, ActionType) == 0x000004, "Member 'FHottaUpdateProgress::ActionType' has a wrong offset!");
static_assert(offsetof(FHottaUpdateProgress, UpdateStep) == 0x000008, "Member 'FHottaUpdateProgress::UpdateStep' has a wrong offset!");
static_assert(offsetof(FHottaUpdateProgress, RepoID) == 0x00000C, "Member 'FHottaUpdateProgress::RepoID' has a wrong offset!");
static_assert(offsetof(FHottaUpdateProgress, TaskId) == 0x000010, "Member 'FHottaUpdateProgress::TaskId' has a wrong offset!");
static_assert(offsetof(FHottaUpdateProgress, FinishedSize) == 0x000018, "Member 'FHottaUpdateProgress::FinishedSize' has a wrong offset!");
static_assert(offsetof(FHottaUpdateProgress, TotalSize) == 0x000028, "Member 'FHottaUpdateProgress::TotalSize' has a wrong offset!");
static_assert(offsetof(FHottaUpdateProgress, Speed) == 0x000038, "Member 'FHottaUpdateProgress::Speed' has a wrong offset!");
static_assert(offsetof(FHottaUpdateProgress, RemainTime) == 0x000048, "Member 'FHottaUpdateProgress::RemainTime' has a wrong offset!");
static_assert(offsetof(FHottaUpdateProgress, StepProgress) == 0x00004C, "Member 'FHottaUpdateProgress::StepProgress' has a wrong offset!");
static_assert(offsetof(FHottaUpdateProgress, TotalProgress) == 0x000050, "Member 'FHottaUpdateProgress::TotalProgress' has a wrong offset!");
static_assert(offsetof(FHottaUpdateProgress, ErrorMsg) == 0x000058, "Member 'FHottaUpdateProgress::ErrorMsg' has a wrong offset!");

// ScriptStruct QRSL.MountPopularityAwardInfo
// 0x000C (0x000C - 0x0000)
struct FMountPopularityAwardInfo final
{
public:
	class FName                                   Item_Id;                                           // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0008(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMountPopularityAwardInfo) == 0x000004, "Wrong alignment on FMountPopularityAwardInfo");
static_assert(sizeof(FMountPopularityAwardInfo) == 0x00000C, "Wrong size on FMountPopularityAwardInfo");
static_assert(offsetof(FMountPopularityAwardInfo, Item_Id) == 0x000000, "Member 'FMountPopularityAwardInfo::Item_Id' has a wrong offset!");
static_assert(offsetof(FMountPopularityAwardInfo, Amount) == 0x000008, "Member 'FMountPopularityAwardInfo::Amount' has a wrong offset!");

// ScriptStruct QRSL.SoloLeagueBattleInfo
// 0x0030 (0x0030 - 0x0000)
struct FSoloLeagueBattleInfo final
{
public:
	int32                                         DailyWinCount;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeriesLoseCount;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeriesWinCount;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PermanentSeriesWinCount;                           // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PermanentWinCount;                                 // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PermanentLoseCount;                                // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              CurSeasonBeginTime;                                // 0x0018(0x0008)(ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              NextSeasonResetTime;                               // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchScore;                                        // 0x0028(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CBF[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSoloLeagueBattleInfo) == 0x000008, "Wrong alignment on FSoloLeagueBattleInfo");
static_assert(sizeof(FSoloLeagueBattleInfo) == 0x000030, "Wrong size on FSoloLeagueBattleInfo");
static_assert(offsetof(FSoloLeagueBattleInfo, DailyWinCount) == 0x000000, "Member 'FSoloLeagueBattleInfo::DailyWinCount' has a wrong offset!");
static_assert(offsetof(FSoloLeagueBattleInfo, SeriesLoseCount) == 0x000004, "Member 'FSoloLeagueBattleInfo::SeriesLoseCount' has a wrong offset!");
static_assert(offsetof(FSoloLeagueBattleInfo, SeriesWinCount) == 0x000008, "Member 'FSoloLeagueBattleInfo::SeriesWinCount' has a wrong offset!");
static_assert(offsetof(FSoloLeagueBattleInfo, PermanentSeriesWinCount) == 0x00000C, "Member 'FSoloLeagueBattleInfo::PermanentSeriesWinCount' has a wrong offset!");
static_assert(offsetof(FSoloLeagueBattleInfo, PermanentWinCount) == 0x000010, "Member 'FSoloLeagueBattleInfo::PermanentWinCount' has a wrong offset!");
static_assert(offsetof(FSoloLeagueBattleInfo, PermanentLoseCount) == 0x000014, "Member 'FSoloLeagueBattleInfo::PermanentLoseCount' has a wrong offset!");
static_assert(offsetof(FSoloLeagueBattleInfo, CurSeasonBeginTime) == 0x000018, "Member 'FSoloLeagueBattleInfo::CurSeasonBeginTime' has a wrong offset!");
static_assert(offsetof(FSoloLeagueBattleInfo, NextSeasonResetTime) == 0x000020, "Member 'FSoloLeagueBattleInfo::NextSeasonResetTime' has a wrong offset!");
static_assert(offsetof(FSoloLeagueBattleInfo, MatchScore) == 0x000028, "Member 'FSoloLeagueBattleInfo::MatchScore' has a wrong offset!");

// ScriptStruct QRSL.CoolDownInfo
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FCoolDownInfo final
{
public:
	uint8                                         Pad_1CC0[0x20];                                    // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCoolDownInfo) == 0x000008, "Wrong alignment on FCoolDownInfo");
static_assert(sizeof(FCoolDownInfo) == 0x000020, "Wrong size on FCoolDownInfo");

// ScriptStruct QRSL.GameStateOptionalBossLevelInfo
// 0x0018 (0x0018 - 0x0000)
struct FGameStateOptionalBossLevelInfo final
{
public:
	TArray<class FName>                           CompleteLevels;                                    // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   CurrentActivityID;                                 // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameStateOptionalBossLevelInfo) == 0x000008, "Wrong alignment on FGameStateOptionalBossLevelInfo");
static_assert(sizeof(FGameStateOptionalBossLevelInfo) == 0x000018, "Wrong size on FGameStateOptionalBossLevelInfo");
static_assert(offsetof(FGameStateOptionalBossLevelInfo, CompleteLevels) == 0x000000, "Member 'FGameStateOptionalBossLevelInfo::CompleteLevels' has a wrong offset!");
static_assert(offsetof(FGameStateOptionalBossLevelInfo, CurrentActivityID) == 0x000010, "Member 'FGameStateOptionalBossLevelInfo::CurrentActivityID' has a wrong offset!");

// ScriptStruct QRSL.TreasureMapInfo
// 0x0090 (0x0090 - 0x0000)
struct FTreasureMapInfo final
{
public:
	class FString                                 TreasureUID;                                       // 0x0000(0x0010)(ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         BuriedPlayerUID;                                   // 0x0010(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuildUniqueId                         BuriedPlayerGuildUID;                              // 0x0018(0x0008)(SaveGame, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 TreasureChestMap;                                  // 0x0020(0x0010)(ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FragmentIndex;                                     // 0x0030(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TreasureIndex;                                     // 0x0034(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CC1[0x8];                                     // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TreasureChestTransform;                            // 0x0040(0x0030)(SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 RegionName;                                        // 0x0070(0x0010)(ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         BuryTime;                                          // 0x0080(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETreasureMapQuality                           TreasureMapQuality;                                // 0x0088(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CC2[0x7];                                     // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTreasureMapInfo) == 0x000010, "Wrong alignment on FTreasureMapInfo");
static_assert(sizeof(FTreasureMapInfo) == 0x000090, "Wrong size on FTreasureMapInfo");
static_assert(offsetof(FTreasureMapInfo, TreasureUID) == 0x000000, "Member 'FTreasureMapInfo::TreasureUID' has a wrong offset!");
static_assert(offsetof(FTreasureMapInfo, BuriedPlayerUID) == 0x000010, "Member 'FTreasureMapInfo::BuriedPlayerUID' has a wrong offset!");
static_assert(offsetof(FTreasureMapInfo, BuriedPlayerGuildUID) == 0x000018, "Member 'FTreasureMapInfo::BuriedPlayerGuildUID' has a wrong offset!");
static_assert(offsetof(FTreasureMapInfo, TreasureChestMap) == 0x000020, "Member 'FTreasureMapInfo::TreasureChestMap' has a wrong offset!");
static_assert(offsetof(FTreasureMapInfo, FragmentIndex) == 0x000030, "Member 'FTreasureMapInfo::FragmentIndex' has a wrong offset!");
static_assert(offsetof(FTreasureMapInfo, TreasureIndex) == 0x000034, "Member 'FTreasureMapInfo::TreasureIndex' has a wrong offset!");
static_assert(offsetof(FTreasureMapInfo, TreasureChestTransform) == 0x000040, "Member 'FTreasureMapInfo::TreasureChestTransform' has a wrong offset!");
static_assert(offsetof(FTreasureMapInfo, RegionName) == 0x000070, "Member 'FTreasureMapInfo::RegionName' has a wrong offset!");
static_assert(offsetof(FTreasureMapInfo, BuryTime) == 0x000080, "Member 'FTreasureMapInfo::BuryTime' has a wrong offset!");
static_assert(offsetof(FTreasureMapInfo, TreasureMapQuality) == 0x000088, "Member 'FTreasureMapInfo::TreasureMapQuality' has a wrong offset!");

// ScriptStruct QRSL.HalloweenHitAward
// 0x000C (0x000C - 0x0000)
struct FHalloweenHitAward final
{
public:
	int32                                         MaxHitCount;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DropID;                                            // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHalloweenHitAward) == 0x000004, "Wrong alignment on FHalloweenHitAward");
static_assert(sizeof(FHalloweenHitAward) == 0x00000C, "Wrong size on FHalloweenHitAward");
static_assert(offsetof(FHalloweenHitAward, MaxHitCount) == 0x000000, "Member 'FHalloweenHitAward::MaxHitCount' has a wrong offset!");
static_assert(offsetof(FHalloweenHitAward, DropID) == 0x000004, "Member 'FHalloweenHitAward::DropID' has a wrong offset!");

// ScriptStruct QRSL.TreasureChestAwardReceiveInfo
// 0x0020 (0x0020 - 0x0000)
struct FTreasureChestAwardReceiveInfo final
{
public:
	class FString                                 TreasureUID;                                       // 0x0000(0x0010)(ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETreasureMapQuality                           Quality;                                           // 0x0010(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CC3[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         DigPlayerUID;                                      // 0x0018(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTreasureChestAwardReceiveInfo) == 0x000008, "Wrong alignment on FTreasureChestAwardReceiveInfo");
static_assert(sizeof(FTreasureChestAwardReceiveInfo) == 0x000020, "Wrong size on FTreasureChestAwardReceiveInfo");
static_assert(offsetof(FTreasureChestAwardReceiveInfo, TreasureUID) == 0x000000, "Member 'FTreasureChestAwardReceiveInfo::TreasureUID' has a wrong offset!");
static_assert(offsetof(FTreasureChestAwardReceiveInfo, Quality) == 0x000010, "Member 'FTreasureChestAwardReceiveInfo::Quality' has a wrong offset!");
static_assert(offsetof(FTreasureChestAwardReceiveInfo, DigPlayerUID) == 0x000018, "Member 'FTreasureChestAwardReceiveInfo::DigPlayerUID' has a wrong offset!");

// ScriptStruct QRSL.HomogeneousMsgBoxInfo
// 0x0010 (0x0010 - 0x0000)
struct FHomogeneousMsgBoxInfo final
{
public:
	TArray<struct FQRSLMsgCollectInfo>            MsgInfos;                                          // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHomogeneousMsgBoxInfo) == 0x000008, "Wrong alignment on FHomogeneousMsgBoxInfo");
static_assert(sizeof(FHomogeneousMsgBoxInfo) == 0x000010, "Wrong size on FHomogeneousMsgBoxInfo");
static_assert(offsetof(FHomogeneousMsgBoxInfo, MsgInfos) == 0x000000, "Member 'FHomogeneousMsgBoxInfo::MsgInfos' has a wrong offset!");

// ScriptStruct QRSL.FlashMobPlayerDanceData
// 0x00A8 (0x00A8 - 0x0000)
struct FFlashMobPlayerDanceData final
{
public:
	bool                                          bCheckSettleAnswer;                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CC4[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class FName>                      PlayerAnswer;                                      // 0x0008(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, bool>                             PlayerResult;                                      // 0x0058(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFlashMobPlayerDanceData) == 0x000008, "Wrong alignment on FFlashMobPlayerDanceData");
static_assert(sizeof(FFlashMobPlayerDanceData) == 0x0000A8, "Wrong size on FFlashMobPlayerDanceData");
static_assert(offsetof(FFlashMobPlayerDanceData, bCheckSettleAnswer) == 0x000000, "Member 'FFlashMobPlayerDanceData::bCheckSettleAnswer' has a wrong offset!");
static_assert(offsetof(FFlashMobPlayerDanceData, PlayerAnswer) == 0x000008, "Member 'FFlashMobPlayerDanceData::PlayerAnswer' has a wrong offset!");
static_assert(offsetof(FFlashMobPlayerDanceData, PlayerResult) == 0x000058, "Member 'FFlashMobPlayerDanceData::PlayerResult' has a wrong offset!");

// ScriptStruct QRSL.BossCustommadePropData
// 0x0010 (0x0010 - 0x0000)
struct FBossCustommadePropData final
{
public:
	class FName                                   PropID;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PropVal;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PropLvl;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBossCustommadePropData) == 0x000004, "Wrong alignment on FBossCustommadePropData");
static_assert(sizeof(FBossCustommadePropData) == 0x000010, "Wrong size on FBossCustommadePropData");
static_assert(offsetof(FBossCustommadePropData, PropID) == 0x000000, "Member 'FBossCustommadePropData::PropID' has a wrong offset!");
static_assert(offsetof(FBossCustommadePropData, PropVal) == 0x000008, "Member 'FBossCustommadePropData::PropVal' has a wrong offset!");
static_assert(offsetof(FBossCustommadePropData, PropLvl) == 0x00000C, "Member 'FBossCustommadePropData::PropLvl' has a wrong offset!");

// ScriptStruct QRSL.BossCustommadeBuffData
// 0x000C (0x000C - 0x0000)
struct FBossCustommadeBuffData final
{
public:
	class FName                                   PoolID;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBossCustommadeBuffData) == 0x000004, "Wrong alignment on FBossCustommadeBuffData");
static_assert(sizeof(FBossCustommadeBuffData) == 0x00000C, "Wrong size on FBossCustommadeBuffData");
static_assert(offsetof(FBossCustommadeBuffData, PoolID) == 0x000000, "Member 'FBossCustommadeBuffData::PoolID' has a wrong offset!");
static_assert(offsetof(FBossCustommadeBuffData, Index) == 0x000008, "Member 'FBossCustommadeBuffData::Index' has a wrong offset!");

// ScriptStruct QRSL.BossCustommadeData
// 0x0038 (0x0038 - 0x0000)
struct FBossCustommadeData final
{
public:
	class FName                                   BossID;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBossCustommadeType                           StateType;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CC5[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WarTimes;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WinTimes;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CC6[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBossCustommadePropData>        PropList;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	TArray<struct FBossCustommadeBuffData>        BuffList;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBossCustommadeData) == 0x000008, "Wrong alignment on FBossCustommadeData");
static_assert(sizeof(FBossCustommadeData) == 0x000038, "Wrong size on FBossCustommadeData");
static_assert(offsetof(FBossCustommadeData, BossID) == 0x000000, "Member 'FBossCustommadeData::BossID' has a wrong offset!");
static_assert(offsetof(FBossCustommadeData, StateType) == 0x000008, "Member 'FBossCustommadeData::StateType' has a wrong offset!");
static_assert(offsetof(FBossCustommadeData, WarTimes) == 0x00000C, "Member 'FBossCustommadeData::WarTimes' has a wrong offset!");
static_assert(offsetof(FBossCustommadeData, WinTimes) == 0x000010, "Member 'FBossCustommadeData::WinTimes' has a wrong offset!");
static_assert(offsetof(FBossCustommadeData, PropList) == 0x000018, "Member 'FBossCustommadeData::PropList' has a wrong offset!");
static_assert(offsetof(FBossCustommadeData, BuffList) == 0x000028, "Member 'FBossCustommadeData::BuffList' has a wrong offset!");

// ScriptStruct QRSL.HackerTerminalSMSReceiveSaveData
// 0x0020 (0x0020 - 0x0000)
struct FHackerTerminalSMSReceiveSaveData final
{
public:
	class FName                                   SMSSenderNPCID;                                    // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SMSMessageGroupID;                                 // 0x0008(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAppSMSMessageReceiveSourceType               SMSReceiveSource;                                  // 0x0010(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CC7[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         SMSReceivetTime;                                   // 0x0018(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHackerTerminalSMSReceiveSaveData) == 0x000008, "Wrong alignment on FHackerTerminalSMSReceiveSaveData");
static_assert(sizeof(FHackerTerminalSMSReceiveSaveData) == 0x000020, "Wrong size on FHackerTerminalSMSReceiveSaveData");
static_assert(offsetof(FHackerTerminalSMSReceiveSaveData, SMSSenderNPCID) == 0x000000, "Member 'FHackerTerminalSMSReceiveSaveData::SMSSenderNPCID' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSReceiveSaveData, SMSMessageGroupID) == 0x000008, "Member 'FHackerTerminalSMSReceiveSaveData::SMSMessageGroupID' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSReceiveSaveData, SMSReceiveSource) == 0x000010, "Member 'FHackerTerminalSMSReceiveSaveData::SMSReceiveSource' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSReceiveSaveData, SMSReceivetTime) == 0x000018, "Member 'FHackerTerminalSMSReceiveSaveData::SMSReceivetTime' has a wrong offset!");

// ScriptStruct QRSL.HighQualityItemInfo
// 0x000C (0x000C - 0x0000)
struct FHighQualityItemInfo final
{
public:
	class FName                                   ItemID;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHighQualityItemInfo) == 0x000004, "Wrong alignment on FHighQualityItemInfo");
static_assert(sizeof(FHighQualityItemInfo) == 0x00000C, "Wrong size on FHighQualityItemInfo");
static_assert(offsetof(FHighQualityItemInfo, ItemID) == 0x000000, "Member 'FHighQualityItemInfo::ItemID' has a wrong offset!");
static_assert(offsetof(FHighQualityItemInfo, ItemCount) == 0x000008, "Member 'FHighQualityItemInfo::ItemCount' has a wrong offset!");

// ScriptStruct QRSL.LvlUnlockBuffPool
// 0x0020 (0x0020 - 0x0000)
struct FLvlUnlockBuffPool final
{
public:
	class FName                                   BuffPoolID;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnlockLvl;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CC8[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftClassPtr<class UClass>>           BuffList;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLvlUnlockBuffPool) == 0x000008, "Wrong alignment on FLvlUnlockBuffPool");
static_assert(sizeof(FLvlUnlockBuffPool) == 0x000020, "Wrong size on FLvlUnlockBuffPool");
static_assert(offsetof(FLvlUnlockBuffPool, BuffPoolID) == 0x000000, "Member 'FLvlUnlockBuffPool::BuffPoolID' has a wrong offset!");
static_assert(offsetof(FLvlUnlockBuffPool, UnlockLvl) == 0x000008, "Member 'FLvlUnlockBuffPool::UnlockLvl' has a wrong offset!");
static_assert(offsetof(FLvlUnlockBuffPool, BuffList) == 0x000010, "Member 'FLvlUnlockBuffPool::BuffList' has a wrong offset!");

// ScriptStruct QRSL.WormholeMonsterAdditionBuffPoolData
// 0x003C (0x003C - 0x0000)
struct FWormholeMonsterAdditionBuffPoolData final
{
public:
	class FName                                   BuffID;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenerateAmount;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateInfo                              GenerateBeginTime;                                 // 0x000C(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDateInfo                              GenerateEndTime;                                   // 0x0024(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholeMonsterAdditionBuffPoolData) == 0x000004, "Wrong alignment on FWormholeMonsterAdditionBuffPoolData");
static_assert(sizeof(FWormholeMonsterAdditionBuffPoolData) == 0x00003C, "Wrong size on FWormholeMonsterAdditionBuffPoolData");
static_assert(offsetof(FWormholeMonsterAdditionBuffPoolData, BuffID) == 0x000000, "Member 'FWormholeMonsterAdditionBuffPoolData::BuffID' has a wrong offset!");
static_assert(offsetof(FWormholeMonsterAdditionBuffPoolData, GenerateAmount) == 0x000008, "Member 'FWormholeMonsterAdditionBuffPoolData::GenerateAmount' has a wrong offset!");
static_assert(offsetof(FWormholeMonsterAdditionBuffPoolData, GenerateBeginTime) == 0x00000C, "Member 'FWormholeMonsterAdditionBuffPoolData::GenerateBeginTime' has a wrong offset!");
static_assert(offsetof(FWormholeMonsterAdditionBuffPoolData, GenerateEndTime) == 0x000024, "Member 'FWormholeMonsterAdditionBuffPoolData::GenerateEndTime' has a wrong offset!");

// ScriptStruct QRSL.WormholeMonstersPoolData
// 0x000C (0x000C - 0x0000)
struct FWormholeMonstersPoolData final
{
public:
	class FName                                   MonsterSeedID;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenerateAmount;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholeMonstersPoolData) == 0x000004, "Wrong alignment on FWormholeMonstersPoolData");
static_assert(sizeof(FWormholeMonstersPoolData) == 0x00000C, "Wrong size on FWormholeMonstersPoolData");
static_assert(offsetof(FWormholeMonstersPoolData, MonsterSeedID) == 0x000000, "Member 'FWormholeMonstersPoolData::MonsterSeedID' has a wrong offset!");
static_assert(offsetof(FWormholeMonstersPoolData, GenerateAmount) == 0x000008, "Member 'FWormholeMonstersPoolData::GenerateAmount' has a wrong offset!");

// ScriptStruct QRSL.WormholeDifficultyAdditionData
// 0x0058 (0x0058 - 0x0000)
struct FWormholeDifficultyAdditionData final
{
public:
	TArray<struct FItemBuffData>                  AdditionBuffs;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FItemBuffData>                  PlayerAdditionBuffs;                               // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         RecommendScore;                                    // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FirstRewards;                                      // 0x0024(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SettleRewards;                                     // 0x002C(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CC9[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWormholeMonsterAdditionBuffPoolData> AdditionBuffsPool;                                 // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FWormholeMonstersPoolData>      MonstersPool;                                      // 0x0048(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholeDifficultyAdditionData) == 0x000008, "Wrong alignment on FWormholeDifficultyAdditionData");
static_assert(sizeof(FWormholeDifficultyAdditionData) == 0x000058, "Wrong size on FWormholeDifficultyAdditionData");
static_assert(offsetof(FWormholeDifficultyAdditionData, AdditionBuffs) == 0x000000, "Member 'FWormholeDifficultyAdditionData::AdditionBuffs' has a wrong offset!");
static_assert(offsetof(FWormholeDifficultyAdditionData, PlayerAdditionBuffs) == 0x000010, "Member 'FWormholeDifficultyAdditionData::PlayerAdditionBuffs' has a wrong offset!");
static_assert(offsetof(FWormholeDifficultyAdditionData, RecommendScore) == 0x000020, "Member 'FWormholeDifficultyAdditionData::RecommendScore' has a wrong offset!");
static_assert(offsetof(FWormholeDifficultyAdditionData, FirstRewards) == 0x000024, "Member 'FWormholeDifficultyAdditionData::FirstRewards' has a wrong offset!");
static_assert(offsetof(FWormholeDifficultyAdditionData, SettleRewards) == 0x00002C, "Member 'FWormholeDifficultyAdditionData::SettleRewards' has a wrong offset!");
static_assert(offsetof(FWormholeDifficultyAdditionData, AdditionBuffsPool) == 0x000038, "Member 'FWormholeDifficultyAdditionData::AdditionBuffsPool' has a wrong offset!");
static_assert(offsetof(FWormholeDifficultyAdditionData, MonstersPool) == 0x000048, "Member 'FWormholeDifficultyAdditionData::MonstersPool' has a wrong offset!");

// ScriptStruct QRSL.ArtifactSplitItemData
// 0x000C (0x000C - 0x0000)
struct FArtifactSplitItemData final
{
public:
	class FName                                   ArtifactItemID;                                    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArtifactSplitItemData) == 0x000004, "Wrong alignment on FArtifactSplitItemData");
static_assert(sizeof(FArtifactSplitItemData) == 0x00000C, "Wrong size on FArtifactSplitItemData");
static_assert(offsetof(FArtifactSplitItemData, ArtifactItemID) == 0x000000, "Member 'FArtifactSplitItemData::ArtifactItemID' has a wrong offset!");
static_assert(offsetof(FArtifactSplitItemData, Amount) == 0x000008, "Member 'FArtifactSplitItemData::Amount' has a wrong offset!");

// ScriptStruct QRSL.LuckTarrowGameplayEffectInfo
// 0x0038 (0x0038 - 0x0000)
struct FLuckTarrowGameplayEffectInfo final
{
public:
	class FName                                   BuffName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   buff;                                              // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CCA[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLuckTarrowGameplayEffectInfo) == 0x000008, "Wrong alignment on FLuckTarrowGameplayEffectInfo");
static_assert(sizeof(FLuckTarrowGameplayEffectInfo) == 0x000038, "Wrong size on FLuckTarrowGameplayEffectInfo");
static_assert(offsetof(FLuckTarrowGameplayEffectInfo, BuffName) == 0x000000, "Member 'FLuckTarrowGameplayEffectInfo::BuffName' has a wrong offset!");
static_assert(offsetof(FLuckTarrowGameplayEffectInfo, buff) == 0x000008, "Member 'FLuckTarrowGameplayEffectInfo::buff' has a wrong offset!");
static_assert(offsetof(FLuckTarrowGameplayEffectInfo, Weight) == 0x000030, "Member 'FLuckTarrowGameplayEffectInfo::Weight' has a wrong offset!");

// ScriptStruct QRSL.PersonalityInfo
// 0x000C (0x000C - 0x0000)
struct FPersonalityInfo final
{
public:
	class FName                                   PersonalityID;                                     // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0008(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPersonalityInfo) == 0x000004, "Wrong alignment on FPersonalityInfo");
static_assert(sizeof(FPersonalityInfo) == 0x00000C, "Wrong size on FPersonalityInfo");
static_assert(offsetof(FPersonalityInfo, PersonalityID) == 0x000000, "Member 'FPersonalityInfo::PersonalityID' has a wrong offset!");
static_assert(offsetof(FPersonalityInfo, Score) == 0x000008, "Member 'FPersonalityInfo::Score' has a wrong offset!");

// ScriptStruct QRSL.TheAsianGamesActorInfo
// 0x0078 (0x0080 - 0x0008)
struct FTheAsianGamesActorInfo final : public FTableRowBase
{
public:
	class FName                                   ActorID;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ActorName;                                         // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   ActorInfo;                                         // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   ActorLevel;                                        // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ActorImage;                                        // 0x0058(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTheAsianGamesActorInfo) == 0x000008, "Wrong alignment on FTheAsianGamesActorInfo");
static_assert(sizeof(FTheAsianGamesActorInfo) == 0x000080, "Wrong size on FTheAsianGamesActorInfo");
static_assert(offsetof(FTheAsianGamesActorInfo, ActorID) == 0x000008, "Member 'FTheAsianGamesActorInfo::ActorID' has a wrong offset!");
static_assert(offsetof(FTheAsianGamesActorInfo, ActorName) == 0x000010, "Member 'FTheAsianGamesActorInfo::ActorName' has a wrong offset!");
static_assert(offsetof(FTheAsianGamesActorInfo, ActorInfo) == 0x000028, "Member 'FTheAsianGamesActorInfo::ActorInfo' has a wrong offset!");
static_assert(offsetof(FTheAsianGamesActorInfo, ActorLevel) == 0x000040, "Member 'FTheAsianGamesActorInfo::ActorLevel' has a wrong offset!");
static_assert(offsetof(FTheAsianGamesActorInfo, ActorImage) == 0x000058, "Member 'FTheAsianGamesActorInfo::ActorImage' has a wrong offset!");

// ScriptStruct QRSL.LeisureRoomUsedDataRecordInfo
// 0x000C (0x000C - 0x0000)
struct FLeisureRoomUsedDataRecordInfo final
{
public:
	class FName                                   DataID;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELeisureRoomDataType                          DataType;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CCB[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLeisureRoomUsedDataRecordInfo) == 0x000004, "Wrong alignment on FLeisureRoomUsedDataRecordInfo");
static_assert(sizeof(FLeisureRoomUsedDataRecordInfo) == 0x00000C, "Wrong size on FLeisureRoomUsedDataRecordInfo");
static_assert(offsetof(FLeisureRoomUsedDataRecordInfo, DataID) == 0x000000, "Member 'FLeisureRoomUsedDataRecordInfo::DataID' has a wrong offset!");
static_assert(offsetof(FLeisureRoomUsedDataRecordInfo, DataType) == 0x000008, "Member 'FLeisureRoomUsedDataRecordInfo::DataType' has a wrong offset!");

// ScriptStruct QRSL.EndlessNewLandRoundRecord
// 0x0020 (0x0020 - 0x0000)
struct FEndlessNewLandRoundRecord final
{
public:
	EEndlessNewLandLevelType                      EndlessLevelType;                                  // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CCC[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EndlessNewLandPassedRound;                         // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndlessNewLandPassSeconds;                         // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndlessNewLandRewardRound;                         // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         HistoryHighestScore;                               // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNoticed;                                         // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CCD[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndlessNewLandRoundRecord) == 0x000008, "Wrong alignment on FEndlessNewLandRoundRecord");
static_assert(sizeof(FEndlessNewLandRoundRecord) == 0x000020, "Wrong size on FEndlessNewLandRoundRecord");
static_assert(offsetof(FEndlessNewLandRoundRecord, EndlessLevelType) == 0x000000, "Member 'FEndlessNewLandRoundRecord::EndlessLevelType' has a wrong offset!");
static_assert(offsetof(FEndlessNewLandRoundRecord, EndlessNewLandPassedRound) == 0x000004, "Member 'FEndlessNewLandRoundRecord::EndlessNewLandPassedRound' has a wrong offset!");
static_assert(offsetof(FEndlessNewLandRoundRecord, EndlessNewLandPassSeconds) == 0x000008, "Member 'FEndlessNewLandRoundRecord::EndlessNewLandPassSeconds' has a wrong offset!");
static_assert(offsetof(FEndlessNewLandRoundRecord, EndlessNewLandRewardRound) == 0x00000C, "Member 'FEndlessNewLandRoundRecord::EndlessNewLandRewardRound' has a wrong offset!");
static_assert(offsetof(FEndlessNewLandRoundRecord, HistoryHighestScore) == 0x000010, "Member 'FEndlessNewLandRoundRecord::HistoryHighestScore' has a wrong offset!");
static_assert(offsetof(FEndlessNewLandRoundRecord, IsNoticed) == 0x000018, "Member 'FEndlessNewLandRoundRecord::IsNoticed' has a wrong offset!");

// ScriptStruct QRSL.LeisureRoomOverrideMaterialInfo
// 0x0030 (0x0030 - 0x0000)
struct FLeisureRoomOverrideMaterialInfo final
{
public:
	class FName                                   OverrideMaterialSlotName;                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       OverrideMaterialInstance;                          // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLeisureRoomOverrideMaterialInfo) == 0x000008, "Wrong alignment on FLeisureRoomOverrideMaterialInfo");
static_assert(sizeof(FLeisureRoomOverrideMaterialInfo) == 0x000030, "Wrong size on FLeisureRoomOverrideMaterialInfo");
static_assert(offsetof(FLeisureRoomOverrideMaterialInfo, OverrideMaterialSlotName) == 0x000000, "Member 'FLeisureRoomOverrideMaterialInfo::OverrideMaterialSlotName' has a wrong offset!");
static_assert(offsetof(FLeisureRoomOverrideMaterialInfo, OverrideMaterialInstance) == 0x000008, "Member 'FLeisureRoomOverrideMaterialInfo::OverrideMaterialInstance' has a wrong offset!");

// ScriptStruct QRSL.LeisureRoomDataUnlockTypeInfo
// 0x0018 (0x0018 - 0x0000)
struct FLeisureRoomDataUnlockTypeInfo final
{
public:
	ELeisureRoomDataUnlockType                    UnlockType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CCE[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UnlockCondition;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLeisureRoomDataUnlockTypeInfo) == 0x000008, "Wrong alignment on FLeisureRoomDataUnlockTypeInfo");
static_assert(sizeof(FLeisureRoomDataUnlockTypeInfo) == 0x000018, "Wrong size on FLeisureRoomDataUnlockTypeInfo");
static_assert(offsetof(FLeisureRoomDataUnlockTypeInfo, UnlockType) == 0x000000, "Member 'FLeisureRoomDataUnlockTypeInfo::UnlockType' has a wrong offset!");
static_assert(offsetof(FLeisureRoomDataUnlockTypeInfo, UnlockCondition) == 0x000008, "Member 'FLeisureRoomDataUnlockTypeInfo::UnlockCondition' has a wrong offset!");

// ScriptStruct QRSL.LeisureRoomBaseDataInfo
// 0x0068 (0x0068 - 0x0000)
struct FLeisureRoomBaseDataInfo
{
public:
	class FName                                   DataID;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELeisureRoomDataType                          DataType;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CCF[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0010(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FLeisureRoomDataUnlockTypeInfo         DataUnlockTypeInfo;                                // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLeisureRoomBaseDataInfo) == 0x000008, "Wrong alignment on FLeisureRoomBaseDataInfo");
static_assert(sizeof(FLeisureRoomBaseDataInfo) == 0x000068, "Wrong size on FLeisureRoomBaseDataInfo");
static_assert(offsetof(FLeisureRoomBaseDataInfo, DataID) == 0x000000, "Member 'FLeisureRoomBaseDataInfo::DataID' has a wrong offset!");
static_assert(offsetof(FLeisureRoomBaseDataInfo, DataType) == 0x000008, "Member 'FLeisureRoomBaseDataInfo::DataType' has a wrong offset!");
static_assert(offsetof(FLeisureRoomBaseDataInfo, Icon) == 0x000010, "Member 'FLeisureRoomBaseDataInfo::Icon' has a wrong offset!");
static_assert(offsetof(FLeisureRoomBaseDataInfo, Name) == 0x000038, "Member 'FLeisureRoomBaseDataInfo::Name' has a wrong offset!");
static_assert(offsetof(FLeisureRoomBaseDataInfo, DataUnlockTypeInfo) == 0x000050, "Member 'FLeisureRoomBaseDataInfo::DataUnlockTypeInfo' has a wrong offset!");

// ScriptStruct QRSL.LeisureRoomOtherDataInfo
// 0x0010 (0x0078 - 0x0068)
struct FLeisureRoomOtherDataInfo final : public FLeisureRoomBaseDataInfo
{
public:
	TArray<struct FLeisureRoomOverrideMaterialInfo> OverrideMaterialInfos;                             // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLeisureRoomOtherDataInfo) == 0x000008, "Wrong alignment on FLeisureRoomOtherDataInfo");
static_assert(sizeof(FLeisureRoomOtherDataInfo) == 0x000078, "Wrong size on FLeisureRoomOtherDataInfo");
static_assert(offsetof(FLeisureRoomOtherDataInfo, OverrideMaterialInfos) == 0x000068, "Member 'FLeisureRoomOtherDataInfo::OverrideMaterialInfos' has a wrong offset!");

// ScriptStruct QRSL.WormholeRoundInfo
// 0x0030 (0x0030 - 0x0000)
struct FWormholeRoundInfo final
{
public:
	int32                                         Layer;                                             // 0x0000(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWormholeDifficulty                           Difficulty;                                        // 0x0004(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CD0[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayerHPPercent;                                   // 0x0008(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Energy;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnergyObtainLevel;                                 // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LotteryCount;                                      // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisarrangeCount;                                   // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CD1[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PickingBuffList;                                   // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholeRoundInfo) == 0x000008, "Wrong alignment on FWormholeRoundInfo");
static_assert(sizeof(FWormholeRoundInfo) == 0x000030, "Wrong size on FWormholeRoundInfo");
static_assert(offsetof(FWormholeRoundInfo, Layer) == 0x000000, "Member 'FWormholeRoundInfo::Layer' has a wrong offset!");
static_assert(offsetof(FWormholeRoundInfo, Difficulty) == 0x000004, "Member 'FWormholeRoundInfo::Difficulty' has a wrong offset!");
static_assert(offsetof(FWormholeRoundInfo, PlayerHPPercent) == 0x000008, "Member 'FWormholeRoundInfo::PlayerHPPercent' has a wrong offset!");
static_assert(offsetof(FWormholeRoundInfo, Energy) == 0x00000C, "Member 'FWormholeRoundInfo::Energy' has a wrong offset!");
static_assert(offsetof(FWormholeRoundInfo, EnergyObtainLevel) == 0x000010, "Member 'FWormholeRoundInfo::EnergyObtainLevel' has a wrong offset!");
static_assert(offsetof(FWormholeRoundInfo, LotteryCount) == 0x000014, "Member 'FWormholeRoundInfo::LotteryCount' has a wrong offset!");
static_assert(offsetof(FWormholeRoundInfo, DisarrangeCount) == 0x000018, "Member 'FWormholeRoundInfo::DisarrangeCount' has a wrong offset!");
static_assert(offsetof(FWormholeRoundInfo, PickingBuffList) == 0x000020, "Member 'FWormholeRoundInfo::PickingBuffList' has a wrong offset!");

// ScriptStruct QRSL.SoloLeagueStageData
// 0x00C0 (0x00C8 - 0x0008)
struct FSoloLeagueStageData final : public FTableRowBase
{
public:
	int32                                         Stage;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EachStageGrade;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EachGradeStars;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WithoutNegativeBattleScore;                        // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WinAddBaseScore;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FailAddBaseScore;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StarProtectScore;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProtectScoreLimit;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeriesWinExtraScore;                               // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeriesWinExtraScoreLimit;                          // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            InitialMatchScore;                                 // 0x0030(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   StageTitle;                                        // 0x0080(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       StageMaterial;                                     // 0x0098(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SeasonResetDropID;                                 // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSoloLeagueStageData) == 0x000008, "Wrong alignment on FSoloLeagueStageData");
static_assert(sizeof(FSoloLeagueStageData) == 0x0000C8, "Wrong size on FSoloLeagueStageData");
static_assert(offsetof(FSoloLeagueStageData, Stage) == 0x000008, "Member 'FSoloLeagueStageData::Stage' has a wrong offset!");
static_assert(offsetof(FSoloLeagueStageData, EachStageGrade) == 0x00000C, "Member 'FSoloLeagueStageData::EachStageGrade' has a wrong offset!");
static_assert(offsetof(FSoloLeagueStageData, EachGradeStars) == 0x000010, "Member 'FSoloLeagueStageData::EachGradeStars' has a wrong offset!");
static_assert(offsetof(FSoloLeagueStageData, WithoutNegativeBattleScore) == 0x000014, "Member 'FSoloLeagueStageData::WithoutNegativeBattleScore' has a wrong offset!");
static_assert(offsetof(FSoloLeagueStageData, WinAddBaseScore) == 0x000018, "Member 'FSoloLeagueStageData::WinAddBaseScore' has a wrong offset!");
static_assert(offsetof(FSoloLeagueStageData, FailAddBaseScore) == 0x00001C, "Member 'FSoloLeagueStageData::FailAddBaseScore' has a wrong offset!");
static_assert(offsetof(FSoloLeagueStageData, StarProtectScore) == 0x000020, "Member 'FSoloLeagueStageData::StarProtectScore' has a wrong offset!");
static_assert(offsetof(FSoloLeagueStageData, ProtectScoreLimit) == 0x000024, "Member 'FSoloLeagueStageData::ProtectScoreLimit' has a wrong offset!");
static_assert(offsetof(FSoloLeagueStageData, SeriesWinExtraScore) == 0x000028, "Member 'FSoloLeagueStageData::SeriesWinExtraScore' has a wrong offset!");
static_assert(offsetof(FSoloLeagueStageData, SeriesWinExtraScoreLimit) == 0x00002C, "Member 'FSoloLeagueStageData::SeriesWinExtraScoreLimit' has a wrong offset!");
static_assert(offsetof(FSoloLeagueStageData, InitialMatchScore) == 0x000030, "Member 'FSoloLeagueStageData::InitialMatchScore' has a wrong offset!");
static_assert(offsetof(FSoloLeagueStageData, StageTitle) == 0x000080, "Member 'FSoloLeagueStageData::StageTitle' has a wrong offset!");
static_assert(offsetof(FSoloLeagueStageData, StageMaterial) == 0x000098, "Member 'FSoloLeagueStageData::StageMaterial' has a wrong offset!");
static_assert(offsetof(FSoloLeagueStageData, SeasonResetDropID) == 0x0000C0, "Member 'FSoloLeagueStageData::SeasonResetDropID' has a wrong offset!");

// ScriptStruct QRSL.HackerTerminalSMSSaveDestroyData
// 0x0018 (0x0018 - 0x0000)
struct FHackerTerminalSMSSaveDestroyData final
{
public:
	class FName                                   SMSSenderNPCID;                                    // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SMSGroupID;                                        // 0x0008(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              SMSGroupDestroyTime;                               // 0x0010(0x0008)(ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHackerTerminalSMSSaveDestroyData) == 0x000008, "Wrong alignment on FHackerTerminalSMSSaveDestroyData");
static_assert(sizeof(FHackerTerminalSMSSaveDestroyData) == 0x000018, "Wrong size on FHackerTerminalSMSSaveDestroyData");
static_assert(offsetof(FHackerTerminalSMSSaveDestroyData, SMSSenderNPCID) == 0x000000, "Member 'FHackerTerminalSMSSaveDestroyData::SMSSenderNPCID' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSSaveDestroyData, SMSGroupID) == 0x000008, "Member 'FHackerTerminalSMSSaveDestroyData::SMSGroupID' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSSaveDestroyData, SMSGroupDestroyTime) == 0x000010, "Member 'FHackerTerminalSMSSaveDestroyData::SMSGroupDestroyTime' has a wrong offset!");

// ScriptStruct QRSL.WormholeSettleData
// 0x000C (0x000C - 0x0000)
struct FWormholeSettleData final
{
public:
	int32                                         SettleLayer;                                       // 0x0000(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWormholeDifficulty                           SettleDifficulty;                                  // 0x0004(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CD2[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SettleGrade;                                       // 0x0008(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholeSettleData) == 0x000004, "Wrong alignment on FWormholeSettleData");
static_assert(sizeof(FWormholeSettleData) == 0x00000C, "Wrong size on FWormholeSettleData");
static_assert(offsetof(FWormholeSettleData, SettleLayer) == 0x000000, "Member 'FWormholeSettleData::SettleLayer' has a wrong offset!");
static_assert(offsetof(FWormholeSettleData, SettleDifficulty) == 0x000004, "Member 'FWormholeSettleData::SettleDifficulty' has a wrong offset!");
static_assert(offsetof(FWormholeSettleData, SettleGrade) == 0x000008, "Member 'FWormholeSettleData::SettleGrade' has a wrong offset!");

// ScriptStruct QRSL.8V8JobAppllyRoleInfo
// 0x0018 (0x0018 - 0x0000)
struct FEightV8JobAppllyRoleInfo final
{
public:
	int64                                         RoleId;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoleName;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEightV8JobAppllyRoleInfo) == 0x000008, "Wrong alignment on FEightV8JobAppllyRoleInfo");
static_assert(sizeof(FEightV8JobAppllyRoleInfo) == 0x000018, "Wrong size on FEightV8JobAppllyRoleInfo");
static_assert(offsetof(FEightV8JobAppllyRoleInfo, RoleId) == 0x000000, "Member 'FEightV8JobAppllyRoleInfo::RoleId' has a wrong offset!");
static_assert(offsetof(FEightV8JobAppllyRoleInfo, RoleName) == 0x000008, "Member 'FEightV8JobAppllyRoleInfo::RoleName' has a wrong offset!");

// ScriptStruct QRSL.8V8JobApplly
// 0x0018 (0x0018 - 0x0000)
struct FEightV8JobApplly final
{
public:
	class FName                                   JobId;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEightV8JobAppllyRoleInfo>      ApplyPlayers;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEightV8JobApplly) == 0x000008, "Wrong alignment on FEightV8JobApplly");
static_assert(sizeof(FEightV8JobApplly) == 0x000018, "Wrong size on FEightV8JobApplly");
static_assert(offsetof(FEightV8JobApplly, JobId) == 0x000000, "Member 'FEightV8JobApplly::JobId' has a wrong offset!");
static_assert(offsetof(FEightV8JobApplly, ApplyPlayers) == 0x000008, "Member 'FEightV8JobApplly::ApplyPlayers' has a wrong offset!");

// ScriptStruct QRSL.WormholeMonsterInfoData
// 0x0080 (0x0088 - 0x0008)
struct FWormholeMonsterInfoData final : public FTableRowBase
{
public:
	TSoftClassPtr<class UClass>                   MonsterClass;                                      // 0x0008(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              MonsterIcon;                                       // 0x0030(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   MonsterName;                                       // 0x0058(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   MonsterDescription;                                // 0x0070(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholeMonsterInfoData) == 0x000008, "Wrong alignment on FWormholeMonsterInfoData");
static_assert(sizeof(FWormholeMonsterInfoData) == 0x000088, "Wrong size on FWormholeMonsterInfoData");
static_assert(offsetof(FWormholeMonsterInfoData, MonsterClass) == 0x000008, "Member 'FWormholeMonsterInfoData::MonsterClass' has a wrong offset!");
static_assert(offsetof(FWormholeMonsterInfoData, MonsterIcon) == 0x000030, "Member 'FWormholeMonsterInfoData::MonsterIcon' has a wrong offset!");
static_assert(offsetof(FWormholeMonsterInfoData, MonsterName) == 0x000058, "Member 'FWormholeMonsterInfoData::MonsterName' has a wrong offset!");
static_assert(offsetof(FWormholeMonsterInfoData, MonsterDescription) == 0x000070, "Member 'FWormholeMonsterInfoData::MonsterDescription' has a wrong offset!");

// ScriptStruct QRSL.InteractionTipsInfo
// 0x00E0 (0x00E0 - 0x0000)
struct FInteractionTipsInfo final
{
public:
	class FText                                   Content;                                           // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProtectTime;                                       // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          First;                                             // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClearQueue;                                        // 0x0025(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTyping;                                           // 0x0026(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdjustForm;                                       // 0x0027(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContinueShow;                                     // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerSelf;                                       // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedImitation;                                    // 0x002A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CD3[0x5];                                     // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              HeadPhoto;                                         // 0x0030(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OffPosition;                                       // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMessageTipsType                              MessageType;                                       // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CD4[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UQRSLUI_MessageDialogBase> UITips;                                            // 0x0064(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MsgId;                                             // 0x006C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TypeEndingStayTime;                                // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   SpeakerName;                                       // 0x0078(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   NpcTemplet;                                        // 0x0090(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            SpeakerMontage;                                    // 0x00B8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInteractionTipsInfo) == 0x000008, "Wrong alignment on FInteractionTipsInfo");
static_assert(sizeof(FInteractionTipsInfo) == 0x0000E0, "Wrong size on FInteractionTipsInfo");
static_assert(offsetof(FInteractionTipsInfo, Content) == 0x000000, "Member 'FInteractionTipsInfo::Content' has a wrong offset!");
static_assert(offsetof(FInteractionTipsInfo, Duration) == 0x000018, "Member 'FInteractionTipsInfo::Duration' has a wrong offset!");
static_assert(offsetof(FInteractionTipsInfo, ProtectTime) == 0x00001C, "Member 'FInteractionTipsInfo::ProtectTime' has a wrong offset!");
static_assert(offsetof(FInteractionTipsInfo, Delay) == 0x000020, "Member 'FInteractionTipsInfo::Delay' has a wrong offset!");
static_assert(offsetof(FInteractionTipsInfo, First) == 0x000024, "Member 'FInteractionTipsInfo::First' has a wrong offset!");
static_assert(offsetof(FInteractionTipsInfo, ClearQueue) == 0x000025, "Member 'FInteractionTipsInfo::ClearQueue' has a wrong offset!");
static_assert(offsetof(FInteractionTipsInfo, bTyping) == 0x000026, "Member 'FInteractionTipsInfo::bTyping' has a wrong offset!");
static_assert(offsetof(FInteractionTipsInfo, bAdjustForm) == 0x000027, "Member 'FInteractionTipsInfo::bAdjustForm' has a wrong offset!");
static_assert(offsetof(FInteractionTipsInfo, bContinueShow) == 0x000028, "Member 'FInteractionTipsInfo::bContinueShow' has a wrong offset!");
static_assert(offsetof(FInteractionTipsInfo, bPlayerSelf) == 0x000029, "Member 'FInteractionTipsInfo::bPlayerSelf' has a wrong offset!");
static_assert(offsetof(FInteractionTipsInfo, bNeedImitation) == 0x00002A, "Member 'FInteractionTipsInfo::bNeedImitation' has a wrong offset!");
static_assert(offsetof(FInteractionTipsInfo, HeadPhoto) == 0x000030, "Member 'FInteractionTipsInfo::HeadPhoto' has a wrong offset!");
static_assert(offsetof(FInteractionTipsInfo, OffPosition) == 0x000058, "Member 'FInteractionTipsInfo::OffPosition' has a wrong offset!");
static_assert(offsetof(FInteractionTipsInfo, MessageType) == 0x000060, "Member 'FInteractionTipsInfo::MessageType' has a wrong offset!");
static_assert(offsetof(FInteractionTipsInfo, UITips) == 0x000064, "Member 'FInteractionTipsInfo::UITips' has a wrong offset!");
static_assert(offsetof(FInteractionTipsInfo, MsgId) == 0x00006C, "Member 'FInteractionTipsInfo::MsgId' has a wrong offset!");
static_assert(offsetof(FInteractionTipsInfo, TypeEndingStayTime) == 0x000074, "Member 'FInteractionTipsInfo::TypeEndingStayTime' has a wrong offset!");
static_assert(offsetof(FInteractionTipsInfo, SpeakerName) == 0x000078, "Member 'FInteractionTipsInfo::SpeakerName' has a wrong offset!");
static_assert(offsetof(FInteractionTipsInfo, NpcTemplet) == 0x000090, "Member 'FInteractionTipsInfo::NpcTemplet' has a wrong offset!");
static_assert(offsetof(FInteractionTipsInfo, SpeakerMontage) == 0x0000B8, "Member 'FInteractionTipsInfo::SpeakerMontage' has a wrong offset!");

// ScriptStruct QRSL.FollowGhostPlayerInfo
// 0x0040 (0x0040 - 0x0000)
struct FFollowGhostPlayerInfo final
{
public:
	int64                                         PlayerID;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AvatarID;                                          // 0x000C(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AvatarFrameID;                                     // 0x0014(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CD5[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerName;                                        // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActivityClonePlayerState                     PlayerState;                                       // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CD6[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Sort;                                              // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGhost;                                          // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CD7[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFollowGhostPlayerInfo) == 0x000008, "Wrong alignment on FFollowGhostPlayerInfo");
static_assert(sizeof(FFollowGhostPlayerInfo) == 0x000040, "Wrong size on FFollowGhostPlayerInfo");
static_assert(offsetof(FFollowGhostPlayerInfo, PlayerID) == 0x000000, "Member 'FFollowGhostPlayerInfo::PlayerID' has a wrong offset!");
static_assert(offsetof(FFollowGhostPlayerInfo, Score) == 0x000008, "Member 'FFollowGhostPlayerInfo::Score' has a wrong offset!");
static_assert(offsetof(FFollowGhostPlayerInfo, AvatarID) == 0x00000C, "Member 'FFollowGhostPlayerInfo::AvatarID' has a wrong offset!");
static_assert(offsetof(FFollowGhostPlayerInfo, AvatarFrameID) == 0x000014, "Member 'FFollowGhostPlayerInfo::AvatarFrameID' has a wrong offset!");
static_assert(offsetof(FFollowGhostPlayerInfo, PlayerName) == 0x000020, "Member 'FFollowGhostPlayerInfo::PlayerName' has a wrong offset!");
static_assert(offsetof(FFollowGhostPlayerInfo, PlayerState) == 0x000030, "Member 'FFollowGhostPlayerInfo::PlayerState' has a wrong offset!");
static_assert(offsetof(FFollowGhostPlayerInfo, Sort) == 0x000034, "Member 'FFollowGhostPlayerInfo::Sort' has a wrong offset!");
static_assert(offsetof(FFollowGhostPlayerInfo, bIsGhost) == 0x000038, "Member 'FFollowGhostPlayerInfo::bIsGhost' has a wrong offset!");

// ScriptStruct QRSL.EndlessIdolumLevelInfo
// 0x0030 (0x0030 - 0x0000)
struct FEndlessIdolumLevelInfo final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EntryTimes;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EntryTimesMax;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RegainTicks;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CD8[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RewardRec;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndlessIdolumLevelInfo) == 0x000008, "Wrong alignment on FEndlessIdolumLevelInfo");
static_assert(sizeof(FEndlessIdolumLevelInfo) == 0x000030, "Wrong size on FEndlessIdolumLevelInfo");
static_assert(offsetof(FEndlessIdolumLevelInfo, LevelName) == 0x000000, "Member 'FEndlessIdolumLevelInfo::LevelName' has a wrong offset!");
static_assert(offsetof(FEndlessIdolumLevelInfo, EntryTimes) == 0x000008, "Member 'FEndlessIdolumLevelInfo::EntryTimes' has a wrong offset!");
static_assert(offsetof(FEndlessIdolumLevelInfo, EntryTimesMax) == 0x00000C, "Member 'FEndlessIdolumLevelInfo::EntryTimesMax' has a wrong offset!");
static_assert(offsetof(FEndlessIdolumLevelInfo, RegainTicks) == 0x000010, "Member 'FEndlessIdolumLevelInfo::RegainTicks' has a wrong offset!");
static_assert(offsetof(FEndlessIdolumLevelInfo, Score) == 0x000018, "Member 'FEndlessIdolumLevelInfo::Score' has a wrong offset!");
static_assert(offsetof(FEndlessIdolumLevelInfo, RewardRec) == 0x000020, "Member 'FEndlessIdolumLevelInfo::RewardRec' has a wrong offset!");

// ScriptStruct QRSL.BreakFateBossPlayerInfo
// 0x0040 (0x0040 - 0x0000)
struct FBreakFateBossPlayerInfo final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RoleId;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageValue;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CD9[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHottaDropItemInfo>             RewardItems;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   AvatarID;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AvatarFrameID;                                     // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBreakFateBossPlayerInfo) == 0x000008, "Wrong alignment on FBreakFateBossPlayerInfo");
static_assert(sizeof(FBreakFateBossPlayerInfo) == 0x000040, "Wrong size on FBreakFateBossPlayerInfo");
static_assert(offsetof(FBreakFateBossPlayerInfo, PlayerName) == 0x000000, "Member 'FBreakFateBossPlayerInfo::PlayerName' has a wrong offset!");
static_assert(offsetof(FBreakFateBossPlayerInfo, RoleId) == 0x000010, "Member 'FBreakFateBossPlayerInfo::RoleId' has a wrong offset!");
static_assert(offsetof(FBreakFateBossPlayerInfo, DamageValue) == 0x000018, "Member 'FBreakFateBossPlayerInfo::DamageValue' has a wrong offset!");
static_assert(offsetof(FBreakFateBossPlayerInfo, RewardItems) == 0x000020, "Member 'FBreakFateBossPlayerInfo::RewardItems' has a wrong offset!");
static_assert(offsetof(FBreakFateBossPlayerInfo, AvatarID) == 0x000030, "Member 'FBreakFateBossPlayerInfo::AvatarID' has a wrong offset!");
static_assert(offsetof(FBreakFateBossPlayerInfo, AvatarFrameID) == 0x000038, "Member 'FBreakFateBossPlayerInfo::AvatarFrameID' has a wrong offset!");

// ScriptStruct QRSL.ActivityCloneSettlementInfo
// 0x0360 (0x0360 - 0x0000)
struct FActivityCloneSettlementInfo final
{
public:
	int64                                         RoleId;                                            // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RoleRank;                                          // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CDA[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UniqueId;                                          // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHottaDropItemInfo>             RewardItems;                                       // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EExtendType                                   ExtendType;                                        // 0x0040(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CDB[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ExtendData;                                        // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasSendDataToPub;                                 // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CDC[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AvatarID;                                          // 0x005C(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AvatarFrameID;                                     // 0x0064(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActivityClone_TeamNo                         TeamNo;                                            // 0x006C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CDD[0x3];                                     // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAvatarInfo                            AvatarData;                                        // 0x0070(0x02E8)(NativeAccessSpecifierPublic)
	int32                                         GameSeconds;                                       // 0x0358(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CDE[0x4];                                     // 0x035C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActivityCloneSettlementInfo) == 0x000008, "Wrong alignment on FActivityCloneSettlementInfo");
static_assert(sizeof(FActivityCloneSettlementInfo) == 0x000360, "Wrong size on FActivityCloneSettlementInfo");
static_assert(offsetof(FActivityCloneSettlementInfo, RoleId) == 0x000000, "Member 'FActivityCloneSettlementInfo::RoleId' has a wrong offset!");
static_assert(offsetof(FActivityCloneSettlementInfo, RoleRank) == 0x000008, "Member 'FActivityCloneSettlementInfo::RoleRank' has a wrong offset!");
static_assert(offsetof(FActivityCloneSettlementInfo, Name) == 0x000010, "Member 'FActivityCloneSettlementInfo::Name' has a wrong offset!");
static_assert(offsetof(FActivityCloneSettlementInfo, UniqueId) == 0x000020, "Member 'FActivityCloneSettlementInfo::UniqueId' has a wrong offset!");
static_assert(offsetof(FActivityCloneSettlementInfo, RewardItems) == 0x000030, "Member 'FActivityCloneSettlementInfo::RewardItems' has a wrong offset!");
static_assert(offsetof(FActivityCloneSettlementInfo, ExtendType) == 0x000040, "Member 'FActivityCloneSettlementInfo::ExtendType' has a wrong offset!");
static_assert(offsetof(FActivityCloneSettlementInfo, ExtendData) == 0x000048, "Member 'FActivityCloneSettlementInfo::ExtendData' has a wrong offset!");
static_assert(offsetof(FActivityCloneSettlementInfo, bHasSendDataToPub) == 0x000058, "Member 'FActivityCloneSettlementInfo::bHasSendDataToPub' has a wrong offset!");
static_assert(offsetof(FActivityCloneSettlementInfo, AvatarID) == 0x00005C, "Member 'FActivityCloneSettlementInfo::AvatarID' has a wrong offset!");
static_assert(offsetof(FActivityCloneSettlementInfo, AvatarFrameID) == 0x000064, "Member 'FActivityCloneSettlementInfo::AvatarFrameID' has a wrong offset!");
static_assert(offsetof(FActivityCloneSettlementInfo, TeamNo) == 0x00006C, "Member 'FActivityCloneSettlementInfo::TeamNo' has a wrong offset!");
static_assert(offsetof(FActivityCloneSettlementInfo, AvatarData) == 0x000070, "Member 'FActivityCloneSettlementInfo::AvatarData' has a wrong offset!");
static_assert(offsetof(FActivityCloneSettlementInfo, GameSeconds) == 0x000358, "Member 'FActivityCloneSettlementInfo::GameSeconds' has a wrong offset!");

// ScriptStruct QRSL.HottaWebViewResult
// 0x0018 (0x0058 - 0x0040)
struct FHottaWebViewResult final : public FHottaBaseResult
{
public:
	int32                                         MsgType;                                           // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CDF[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MsgJsonData;                                       // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHottaWebViewResult) == 0x000008, "Wrong alignment on FHottaWebViewResult");
static_assert(sizeof(FHottaWebViewResult) == 0x000058, "Wrong size on FHottaWebViewResult");
static_assert(offsetof(FHottaWebViewResult, MsgType) == 0x000040, "Member 'FHottaWebViewResult::MsgType' has a wrong offset!");
static_assert(offsetof(FHottaWebViewResult, MsgJsonData) == 0x000048, "Member 'FHottaWebViewResult::MsgJsonData' has a wrong offset!");

// ScriptStruct QRSL.HotWaveImpactSettlementInfo
// 0x0068 (0x0068 - 0x0000)
struct FHotWaveImpactSettlementInfo final
{
public:
	int64                                         RoleId;                                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RoleRank;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanAward;                                         // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSettlement;                                       // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CE0[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SurvivalTime;                                      // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UniqueId;                                          // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHottaDropItemInfo>             RewardItems;                                       // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   AvatarID;                                          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AvatarFrameID;                                     // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DropID;                                            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHotWaveImpactSettlementInfo) == 0x000008, "Wrong alignment on FHotWaveImpactSettlementInfo");
static_assert(sizeof(FHotWaveImpactSettlementInfo) == 0x000068, "Wrong size on FHotWaveImpactSettlementInfo");
static_assert(offsetof(FHotWaveImpactSettlementInfo, RoleId) == 0x000000, "Member 'FHotWaveImpactSettlementInfo::RoleId' has a wrong offset!");
static_assert(offsetof(FHotWaveImpactSettlementInfo, RoleRank) == 0x000008, "Member 'FHotWaveImpactSettlementInfo::RoleRank' has a wrong offset!");
static_assert(offsetof(FHotWaveImpactSettlementInfo, bCanAward) == 0x00000C, "Member 'FHotWaveImpactSettlementInfo::bCanAward' has a wrong offset!");
static_assert(offsetof(FHotWaveImpactSettlementInfo, bSettlement) == 0x00000D, "Member 'FHotWaveImpactSettlementInfo::bSettlement' has a wrong offset!");
static_assert(offsetof(FHotWaveImpactSettlementInfo, SurvivalTime) == 0x000010, "Member 'FHotWaveImpactSettlementInfo::SurvivalTime' has a wrong offset!");
static_assert(offsetof(FHotWaveImpactSettlementInfo, Name) == 0x000020, "Member 'FHotWaveImpactSettlementInfo::Name' has a wrong offset!");
static_assert(offsetof(FHotWaveImpactSettlementInfo, UniqueId) == 0x000030, "Member 'FHotWaveImpactSettlementInfo::UniqueId' has a wrong offset!");
static_assert(offsetof(FHotWaveImpactSettlementInfo, RewardItems) == 0x000040, "Member 'FHotWaveImpactSettlementInfo::RewardItems' has a wrong offset!");
static_assert(offsetof(FHotWaveImpactSettlementInfo, AvatarID) == 0x000050, "Member 'FHotWaveImpactSettlementInfo::AvatarID' has a wrong offset!");
static_assert(offsetof(FHotWaveImpactSettlementInfo, AvatarFrameID) == 0x000058, "Member 'FHotWaveImpactSettlementInfo::AvatarFrameID' has a wrong offset!");
static_assert(offsetof(FHotWaveImpactSettlementInfo, DropID) == 0x000060, "Member 'FHotWaveImpactSettlementInfo::DropID' has a wrong offset!");

// ScriptStruct QRSL.SquatJumpSettlementInfo
// 0x0068 (0x0068 - 0x0000)
struct FSquatJumpSettlementInfo final
{
public:
	int64                                         RoleId;                                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RoleRank;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanAward;                                         // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSettlement;                                       // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CE1[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LastHitWaveIndex;                                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CE2[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SurvivalTime;                                      // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UniqueId;                                          // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHottaDropItemInfo>             RewardItems;                                       // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   AvatarID;                                          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AvatarFrameID;                                     // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSquatJumpSettlementInfo) == 0x000008, "Wrong alignment on FSquatJumpSettlementInfo");
static_assert(sizeof(FSquatJumpSettlementInfo) == 0x000068, "Wrong size on FSquatJumpSettlementInfo");
static_assert(offsetof(FSquatJumpSettlementInfo, RoleId) == 0x000000, "Member 'FSquatJumpSettlementInfo::RoleId' has a wrong offset!");
static_assert(offsetof(FSquatJumpSettlementInfo, RoleRank) == 0x000008, "Member 'FSquatJumpSettlementInfo::RoleRank' has a wrong offset!");
static_assert(offsetof(FSquatJumpSettlementInfo, bCanAward) == 0x00000C, "Member 'FSquatJumpSettlementInfo::bCanAward' has a wrong offset!");
static_assert(offsetof(FSquatJumpSettlementInfo, bSettlement) == 0x00000D, "Member 'FSquatJumpSettlementInfo::bSettlement' has a wrong offset!");
static_assert(offsetof(FSquatJumpSettlementInfo, LastHitWaveIndex) == 0x000010, "Member 'FSquatJumpSettlementInfo::LastHitWaveIndex' has a wrong offset!");
static_assert(offsetof(FSquatJumpSettlementInfo, SurvivalTime) == 0x000018, "Member 'FSquatJumpSettlementInfo::SurvivalTime' has a wrong offset!");
static_assert(offsetof(FSquatJumpSettlementInfo, Name) == 0x000028, "Member 'FSquatJumpSettlementInfo::Name' has a wrong offset!");
static_assert(offsetof(FSquatJumpSettlementInfo, UniqueId) == 0x000038, "Member 'FSquatJumpSettlementInfo::UniqueId' has a wrong offset!");
static_assert(offsetof(FSquatJumpSettlementInfo, RewardItems) == 0x000048, "Member 'FSquatJumpSettlementInfo::RewardItems' has a wrong offset!");
static_assert(offsetof(FSquatJumpSettlementInfo, AvatarID) == 0x000058, "Member 'FSquatJumpSettlementInfo::AvatarID' has a wrong offset!");
static_assert(offsetof(FSquatJumpSettlementInfo, AvatarFrameID) == 0x000060, "Member 'FSquatJumpSettlementInfo::AvatarFrameID' has a wrong offset!");

// ScriptStruct QRSL.IntroduceInfo
// 0x0058 (0x0058 - 0x0000)
struct FIntroduceInfo final
{
public:
	TSoftObjectPtr<class UTexture2D>              DescImage;                                         // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DescTitle;                                         // 0x0028(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   DescText;                                          // 0x0040(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIntroduceInfo) == 0x000008, "Wrong alignment on FIntroduceInfo");
static_assert(sizeof(FIntroduceInfo) == 0x000058, "Wrong size on FIntroduceInfo");
static_assert(offsetof(FIntroduceInfo, DescImage) == 0x000000, "Member 'FIntroduceInfo::DescImage' has a wrong offset!");
static_assert(offsetof(FIntroduceInfo, DescTitle) == 0x000028, "Member 'FIntroduceInfo::DescTitle' has a wrong offset!");
static_assert(offsetof(FIntroduceInfo, DescText) == 0x000040, "Member 'FIntroduceInfo::DescText' has a wrong offset!");

// ScriptStruct QRSL.8V8BattleStandings
// 0x0010 (0x0010 - 0x0000)
struct FEightV8BattleStandings final
{
public:
	int32                                         TempWinCount;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeriesWinCount;                                    // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WinCount;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoseCount;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEightV8BattleStandings) == 0x000004, "Wrong alignment on FEightV8BattleStandings");
static_assert(sizeof(FEightV8BattleStandings) == 0x000010, "Wrong size on FEightV8BattleStandings");
static_assert(offsetof(FEightV8BattleStandings, TempWinCount) == 0x000000, "Member 'FEightV8BattleStandings::TempWinCount' has a wrong offset!");
static_assert(offsetof(FEightV8BattleStandings, SeriesWinCount) == 0x000004, "Member 'FEightV8BattleStandings::SeriesWinCount' has a wrong offset!");
static_assert(offsetof(FEightV8BattleStandings, WinCount) == 0x000008, "Member 'FEightV8BattleStandings::WinCount' has a wrong offset!");
static_assert(offsetof(FEightV8BattleStandings, LoseCount) == 0x00000C, "Member 'FEightV8BattleStandings::LoseCount' has a wrong offset!");

// ScriptStruct QRSL.DAPUpdateResult
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FDAPUpdateResult final
{
public:
	uint8                                         Pad_1CE3[0x18];                                    // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDAPUpdateResult) == 0x000008, "Wrong alignment on FDAPUpdateResult");
static_assert(sizeof(FDAPUpdateResult) == 0x000018, "Wrong size on FDAPUpdateResult");

// ScriptStruct QRSL.8V8BattleHistory
// 0x0014 (0x0014 - 0x0000)
struct FEightV8BattleHistory final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillNum;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AssistNum;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HoldNum;                                           // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEightV8BattleHistory) == 0x000004, "Wrong alignment on FEightV8BattleHistory");
static_assert(sizeof(FEightV8BattleHistory) == 0x000014, "Wrong size on FEightV8BattleHistory");
static_assert(offsetof(FEightV8BattleHistory, Result) == 0x000000, "Member 'FEightV8BattleHistory::Result' has a wrong offset!");
static_assert(offsetof(FEightV8BattleHistory, KillNum) == 0x000004, "Member 'FEightV8BattleHistory::KillNum' has a wrong offset!");
static_assert(offsetof(FEightV8BattleHistory, AssistNum) == 0x000008, "Member 'FEightV8BattleHistory::AssistNum' has a wrong offset!");
static_assert(offsetof(FEightV8BattleHistory, HoldNum) == 0x00000C, "Member 'FEightV8BattleHistory::HoldNum' has a wrong offset!");
static_assert(offsetof(FEightV8BattleHistory, Score) == 0x000010, "Member 'FEightV8BattleHistory::Score' has a wrong offset!");

// ScriptStruct QRSL.ArtifactFormationData
// 0x0070 (0x0078 - 0x0008)
struct FArtifactFormationData final : public FTableRowBase
{
public:
	class FText                                   Text;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0020(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      CheckIcon;                                         // 0x0048(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RedPointType;                                      // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArtifactFormationData) == 0x000008, "Wrong alignment on FArtifactFormationData");
static_assert(sizeof(FArtifactFormationData) == 0x000078, "Wrong size on FArtifactFormationData");
static_assert(offsetof(FArtifactFormationData, Text) == 0x000008, "Member 'FArtifactFormationData::Text' has a wrong offset!");
static_assert(offsetof(FArtifactFormationData, Icon) == 0x000020, "Member 'FArtifactFormationData::Icon' has a wrong offset!");
static_assert(offsetof(FArtifactFormationData, CheckIcon) == 0x000048, "Member 'FArtifactFormationData::CheckIcon' has a wrong offset!");
static_assert(offsetof(FArtifactFormationData, RedPointType) == 0x000070, "Member 'FArtifactFormationData::RedPointType' has a wrong offset!");

// ScriptStruct QRSL.AstralPortalWaveInfo
// 0x000C (0x000C - 0x0000)
struct FAstralPortalWaveInfo final
{
public:
	bool                                          bNeedShowWave;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CE4[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentWave;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalWave;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAstralPortalWaveInfo) == 0x000004, "Wrong alignment on FAstralPortalWaveInfo");
static_assert(sizeof(FAstralPortalWaveInfo) == 0x00000C, "Wrong size on FAstralPortalWaveInfo");
static_assert(offsetof(FAstralPortalWaveInfo, bNeedShowWave) == 0x000000, "Member 'FAstralPortalWaveInfo::bNeedShowWave' has a wrong offset!");
static_assert(offsetof(FAstralPortalWaveInfo, CurrentWave) == 0x000004, "Member 'FAstralPortalWaveInfo::CurrentWave' has a wrong offset!");
static_assert(offsetof(FAstralPortalWaveInfo, TotalWave) == 0x000008, "Member 'FAstralPortalWaveInfo::TotalWave' has a wrong offset!");

// ScriptStruct QRSL.SoloLeagueStageMatchRobotInfo
// 0x0024 (0x0024 - 0x0000)
struct FSoloLeagueStageMatchRobotInfo final
{
public:
	int32                                         Stage;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecordCount;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CheckWinRate;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WinMatchRateBase;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WinRateAdditionDec;                                // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WinMatchRateAddition;                              // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CheckSeriesLoseCount;                              // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SeriesLoseMatchRateBase;                           // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SeriesLoseMatchRateAddition;                       // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSoloLeagueStageMatchRobotInfo) == 0x000004, "Wrong alignment on FSoloLeagueStageMatchRobotInfo");
static_assert(sizeof(FSoloLeagueStageMatchRobotInfo) == 0x000024, "Wrong size on FSoloLeagueStageMatchRobotInfo");
static_assert(offsetof(FSoloLeagueStageMatchRobotInfo, Stage) == 0x000000, "Member 'FSoloLeagueStageMatchRobotInfo::Stage' has a wrong offset!");
static_assert(offsetof(FSoloLeagueStageMatchRobotInfo, RecordCount) == 0x000004, "Member 'FSoloLeagueStageMatchRobotInfo::RecordCount' has a wrong offset!");
static_assert(offsetof(FSoloLeagueStageMatchRobotInfo, CheckWinRate) == 0x000008, "Member 'FSoloLeagueStageMatchRobotInfo::CheckWinRate' has a wrong offset!");
static_assert(offsetof(FSoloLeagueStageMatchRobotInfo, WinMatchRateBase) == 0x00000C, "Member 'FSoloLeagueStageMatchRobotInfo::WinMatchRateBase' has a wrong offset!");
static_assert(offsetof(FSoloLeagueStageMatchRobotInfo, WinRateAdditionDec) == 0x000010, "Member 'FSoloLeagueStageMatchRobotInfo::WinRateAdditionDec' has a wrong offset!");
static_assert(offsetof(FSoloLeagueStageMatchRobotInfo, WinMatchRateAddition) == 0x000014, "Member 'FSoloLeagueStageMatchRobotInfo::WinMatchRateAddition' has a wrong offset!");
static_assert(offsetof(FSoloLeagueStageMatchRobotInfo, CheckSeriesLoseCount) == 0x000018, "Member 'FSoloLeagueStageMatchRobotInfo::CheckSeriesLoseCount' has a wrong offset!");
static_assert(offsetof(FSoloLeagueStageMatchRobotInfo, SeriesLoseMatchRateBase) == 0x00001C, "Member 'FSoloLeagueStageMatchRobotInfo::SeriesLoseMatchRateBase' has a wrong offset!");
static_assert(offsetof(FSoloLeagueStageMatchRobotInfo, SeriesLoseMatchRateAddition) == 0x000020, "Member 'FSoloLeagueStageMatchRobotInfo::SeriesLoseMatchRateAddition' has a wrong offset!");

// ScriptStruct QRSL.UsingIngredientData
// 0x000C (0x000C - 0x0000)
struct FUsingIngredientData final
{
public:
	class FName                                   IngredientName;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IngredientAmount;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUsingIngredientData) == 0x000004, "Wrong alignment on FUsingIngredientData");
static_assert(sizeof(FUsingIngredientData) == 0x00000C, "Wrong size on FUsingIngredientData");
static_assert(offsetof(FUsingIngredientData, IngredientName) == 0x000000, "Member 'FUsingIngredientData::IngredientName' has a wrong offset!");
static_assert(offsetof(FUsingIngredientData, IngredientAmount) == 0x000008, "Member 'FUsingIngredientData::IngredientAmount' has a wrong offset!");

// ScriptStruct QRSL.DishChangeData
// 0x000C (0x000C - 0x0000)
struct FDishChangeData final
{
public:
	struct FDishData                              DishData;                                          // 0x0000(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDishChangeData) == 0x000004, "Wrong alignment on FDishChangeData");
static_assert(sizeof(FDishChangeData) == 0x00000C, "Wrong size on FDishChangeData");
static_assert(offsetof(FDishChangeData, DishData) == 0x000000, "Member 'FDishChangeData::DishData' has a wrong offset!");

// ScriptStruct QRSL.WormholeGridEdgeInfo
// 0x0040 (0x0040 - 0x0000)
struct FWormholeGridEdgeInfo final
{
public:
	EWormholeEdgeDirection                        EdgeDirection;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CE5[0xF];                                     // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             EdgeTransform;                                     // 0x0010(0x0030)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholeGridEdgeInfo) == 0x000010, "Wrong alignment on FWormholeGridEdgeInfo");
static_assert(sizeof(FWormholeGridEdgeInfo) == 0x000040, "Wrong size on FWormholeGridEdgeInfo");
static_assert(offsetof(FWormholeGridEdgeInfo, EdgeDirection) == 0x000000, "Member 'FWormholeGridEdgeInfo::EdgeDirection' has a wrong offset!");
static_assert(offsetof(FWormholeGridEdgeInfo, EdgeTransform) == 0x000010, "Member 'FWormholeGridEdgeInfo::EdgeTransform' has a wrong offset!");

// ScriptStruct QRSL.QRSLAchievementRecord
// 0x0010 (0x0010 - 0x0000)
struct FQRSLAchievementRecord final
{
public:
	class FName                                   AchievementID;                                     // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Progress;                                          // 0x0008(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGotAward;                                         // 0x000C(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CE6[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQRSLAchievementRecord) == 0x000004, "Wrong alignment on FQRSLAchievementRecord");
static_assert(sizeof(FQRSLAchievementRecord) == 0x000010, "Wrong size on FQRSLAchievementRecord");
static_assert(offsetof(FQRSLAchievementRecord, AchievementID) == 0x000000, "Member 'FQRSLAchievementRecord::AchievementID' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementRecord, Progress) == 0x000008, "Member 'FQRSLAchievementRecord::Progress' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementRecord, bGotAward) == 0x00000C, "Member 'FQRSLAchievementRecord::bGotAward' has a wrong offset!");

// ScriptStruct QRSL.ActivityLivenessInfo
// 0x0008 (0x0008 - 0x0000)
struct FActivityLivenessInfo final
{
public:
	EGameActivityType                             ActivityType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CE7[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LivenessValue;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActivityLivenessInfo) == 0x000004, "Wrong alignment on FActivityLivenessInfo");
static_assert(sizeof(FActivityLivenessInfo) == 0x000008, "Wrong size on FActivityLivenessInfo");
static_assert(offsetof(FActivityLivenessInfo, ActivityType) == 0x000000, "Member 'FActivityLivenessInfo::ActivityType' has a wrong offset!");
static_assert(offsetof(FActivityLivenessInfo, LivenessValue) == 0x000004, "Member 'FActivityLivenessInfo::LivenessValue' has a wrong offset!");

// ScriptStruct QRSL.IngredientTypeData
// 0x0018 (0x0020 - 0x0008)
struct FIngredientTypeData final : public FTableRowBase
{
public:
	class FText                                   IngredientText;                                    // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIngredientTypeData) == 0x000008, "Wrong alignment on FIngredientTypeData");
static_assert(sizeof(FIngredientTypeData) == 0x000020, "Wrong size on FIngredientTypeData");
static_assert(offsetof(FIngredientTypeData, IngredientText) == 0x000008, "Member 'FIngredientTypeData::IngredientText' has a wrong offset!");

// ScriptStruct QRSL.QRSLWorkGuideSymbolSubData
// 0x000C (0x000C - 0x0000)
struct FQRSLWorkGuideSymbolSubData final
{
public:
	class FName                                   SymbolName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLWorkGuideSymbolSubData) == 0x000004, "Wrong alignment on FQRSLWorkGuideSymbolSubData");
static_assert(sizeof(FQRSLWorkGuideSymbolSubData) == 0x00000C, "Wrong size on FQRSLWorkGuideSymbolSubData");
static_assert(offsetof(FQRSLWorkGuideSymbolSubData, SymbolName) == 0x000000, "Member 'FQRSLWorkGuideSymbolSubData::SymbolName' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSymbolSubData, Count) == 0x000008, "Member 'FQRSLWorkGuideSymbolSubData::Count' has a wrong offset!");

// ScriptStruct QRSL.BiochemistryRefreshChestInfo
// 0x0008 (0x0008 - 0x0000)
struct FBiochemistryRefreshChestInfo final
{
public:
	EBiochemistryChestType                        ChestType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CE8[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RefreshChestTurn;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBiochemistryRefreshChestInfo) == 0x000004, "Wrong alignment on FBiochemistryRefreshChestInfo");
static_assert(sizeof(FBiochemistryRefreshChestInfo) == 0x000008, "Wrong size on FBiochemistryRefreshChestInfo");
static_assert(offsetof(FBiochemistryRefreshChestInfo, ChestType) == 0x000000, "Member 'FBiochemistryRefreshChestInfo::ChestType' has a wrong offset!");
static_assert(offsetof(FBiochemistryRefreshChestInfo, RefreshChestTurn) == 0x000004, "Member 'FBiochemistryRefreshChestInfo::RefreshChestTurn' has a wrong offset!");

// ScriptStruct QRSL.BiochemistryRefreshChestInfoTay
// 0x0018 (0x0018 - 0x0000)
struct FBiochemistryRefreshChestInfoTay final
{
public:
	int32                                         MonsterNum;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CE9[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBiochemistryRefreshChestInfo>  ChestInfoTay;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBiochemistryRefreshChestInfoTay) == 0x000008, "Wrong alignment on FBiochemistryRefreshChestInfoTay");
static_assert(sizeof(FBiochemistryRefreshChestInfoTay) == 0x000018, "Wrong size on FBiochemistryRefreshChestInfoTay");
static_assert(offsetof(FBiochemistryRefreshChestInfoTay, MonsterNum) == 0x000000, "Member 'FBiochemistryRefreshChestInfoTay::MonsterNum' has a wrong offset!");
static_assert(offsetof(FBiochemistryRefreshChestInfoTay, ChestInfoTay) == 0x000008, "Member 'FBiochemistryRefreshChestInfoTay::ChestInfoTay' has a wrong offset!");

// ScriptStruct QRSL.QRSLSupplyShortcut
// 0x0014 (0x0014 - 0x0000)
struct FQRSLSupplyShortcut final
{
public:
	bool                                          bAutoChooseEnoughSupply;                           // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CEA[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MiddleHPLimit;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowHPLimit;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHottaItemNetID                        ShortcutItemNetID;                                 // 0x000C(0x0008)(Transient, SaveGame, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLSupplyShortcut) == 0x000004, "Wrong alignment on FQRSLSupplyShortcut");
static_assert(sizeof(FQRSLSupplyShortcut) == 0x000014, "Wrong size on FQRSLSupplyShortcut");
static_assert(offsetof(FQRSLSupplyShortcut, bAutoChooseEnoughSupply) == 0x000000, "Member 'FQRSLSupplyShortcut::bAutoChooseEnoughSupply' has a wrong offset!");
static_assert(offsetof(FQRSLSupplyShortcut, MiddleHPLimit) == 0x000004, "Member 'FQRSLSupplyShortcut::MiddleHPLimit' has a wrong offset!");
static_assert(offsetof(FQRSLSupplyShortcut, LowHPLimit) == 0x000008, "Member 'FQRSLSupplyShortcut::LowHPLimit' has a wrong offset!");
static_assert(offsetof(FQRSLSupplyShortcut, ShortcutItemNetID) == 0x00000C, "Member 'FQRSLSupplyShortcut::ShortcutItemNetID' has a wrong offset!");

// ScriptStruct QRSL.SoloLeagueRecord
// 0x0048 (0x0048 - 0x0000)
struct FSoloLeagueRecord final
{
public:
	ESoloLeagueResult                             Result;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CEB[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AvatarID;                                          // 0x0004(0x0008)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AvararFrameID;                                     // 0x000C(0x0008)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CEC[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RoleName;                                          // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelfScore;                                         // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RivalScore;                                        // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackValue;                                       // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefendValue;                                       // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RoleId;                                            // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RoleLevel;                                         // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterSex                                 RoleSex;                                           // 0x0044(0x0001)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CED[0x3];                                     // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSoloLeagueRecord) == 0x000008, "Wrong alignment on FSoloLeagueRecord");
static_assert(sizeof(FSoloLeagueRecord) == 0x000048, "Wrong size on FSoloLeagueRecord");
static_assert(offsetof(FSoloLeagueRecord, Result) == 0x000000, "Member 'FSoloLeagueRecord::Result' has a wrong offset!");
static_assert(offsetof(FSoloLeagueRecord, AvatarID) == 0x000004, "Member 'FSoloLeagueRecord::AvatarID' has a wrong offset!");
static_assert(offsetof(FSoloLeagueRecord, AvararFrameID) == 0x00000C, "Member 'FSoloLeagueRecord::AvararFrameID' has a wrong offset!");
static_assert(offsetof(FSoloLeagueRecord, RoleName) == 0x000018, "Member 'FSoloLeagueRecord::RoleName' has a wrong offset!");
static_assert(offsetof(FSoloLeagueRecord, SelfScore) == 0x000028, "Member 'FSoloLeagueRecord::SelfScore' has a wrong offset!");
static_assert(offsetof(FSoloLeagueRecord, RivalScore) == 0x00002C, "Member 'FSoloLeagueRecord::RivalScore' has a wrong offset!");
static_assert(offsetof(FSoloLeagueRecord, AttackValue) == 0x000030, "Member 'FSoloLeagueRecord::AttackValue' has a wrong offset!");
static_assert(offsetof(FSoloLeagueRecord, DefendValue) == 0x000034, "Member 'FSoloLeagueRecord::DefendValue' has a wrong offset!");
static_assert(offsetof(FSoloLeagueRecord, RoleId) == 0x000038, "Member 'FSoloLeagueRecord::RoleId' has a wrong offset!");
static_assert(offsetof(FSoloLeagueRecord, RoleLevel) == 0x000040, "Member 'FSoloLeagueRecord::RoleLevel' has a wrong offset!");
static_assert(offsetof(FSoloLeagueRecord, RoleSex) == 0x000044, "Member 'FSoloLeagueRecord::RoleSex' has a wrong offset!");

// ScriptStruct QRSL.StrongholdActiveInfo
// 0x0028 (0x0028 - 0x0000)
struct FStrongholdActiveInfo final
{
public:
	class AQRSLPlayerCharacter*                   SpawnInstigator;                                   // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DangerousLevelName;                                // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastPeaceTime;                                     // 0x0010(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CEE[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AHottaAISpawnManager*>           ActivatedSpawners;                                 // 0x0018(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStrongholdActiveInfo) == 0x000008, "Wrong alignment on FStrongholdActiveInfo");
static_assert(sizeof(FStrongholdActiveInfo) == 0x000028, "Wrong size on FStrongholdActiveInfo");
static_assert(offsetof(FStrongholdActiveInfo, SpawnInstigator) == 0x000000, "Member 'FStrongholdActiveInfo::SpawnInstigator' has a wrong offset!");
static_assert(offsetof(FStrongholdActiveInfo, DangerousLevelName) == 0x000008, "Member 'FStrongholdActiveInfo::DangerousLevelName' has a wrong offset!");
static_assert(offsetof(FStrongholdActiveInfo, LastPeaceTime) == 0x000010, "Member 'FStrongholdActiveInfo::LastPeaceTime' has a wrong offset!");
static_assert(offsetof(FStrongholdActiveInfo, ActivatedSpawners) == 0x000018, "Member 'FStrongholdActiveInfo::ActivatedSpawners' has a wrong offset!");

// ScriptStruct QRSL.8V8CompetitionScore
// 0x0008 (0x0008 - 0x0000)
struct FEightV8CompetitionScore final
{
public:
	float                                         StageStars;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProtectScore;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEightV8CompetitionScore) == 0x000004, "Wrong alignment on FEightV8CompetitionScore");
static_assert(sizeof(FEightV8CompetitionScore) == 0x000008, "Wrong size on FEightV8CompetitionScore");
static_assert(offsetof(FEightV8CompetitionScore, StageStars) == 0x000000, "Member 'FEightV8CompetitionScore::StageStars' has a wrong offset!");
static_assert(offsetof(FEightV8CompetitionScore, ProtectScore) == 0x000004, "Member 'FEightV8CompetitionScore::ProtectScore' has a wrong offset!");

// ScriptStruct QRSL.TruckRobberyGiftWeight
// 0x0018 (0x0018 - 0x0000)
struct FTruckRobberyGiftWeight final
{
public:
	class FString                                 GiftID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CEF[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTruckRobberyGiftWeight) == 0x000008, "Wrong alignment on FTruckRobberyGiftWeight");
static_assert(sizeof(FTruckRobberyGiftWeight) == 0x000018, "Wrong size on FTruckRobberyGiftWeight");
static_assert(offsetof(FTruckRobberyGiftWeight, GiftID) == 0x000000, "Member 'FTruckRobberyGiftWeight::GiftID' has a wrong offset!");
static_assert(offsetof(FTruckRobberyGiftWeight, Weight) == 0x000010, "Member 'FTruckRobberyGiftWeight::Weight' has a wrong offset!");

// ScriptStruct QRSL.WormholeLayerCacheData
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FWormholeLayerCacheData final
{
public:
	uint8                                         Pad_1CF0[0x58];                                    // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWormholeLayerCacheData) == 0x000008, "Wrong alignment on FWormholeLayerCacheData");
static_assert(sizeof(FWormholeLayerCacheData) == 0x000058, "Wrong size on FWormholeLayerCacheData");

// ScriptStruct QRSL.QRSLWorkGuideSymbolData
// 0x0060 (0x0060 - 0x0000)
struct FQRSLWorkGuideSymbolData final
{
public:
	struct FGuid                                  Uid;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SymbolID;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComeCount;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ratio;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Extend;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Total;                                             // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedRemove;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CF1[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FQRSLWorkGuideSymbolSubData>    AdjoinDataArray;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<struct FQRSLWorkGuideSymbolSubData>    RemoveDataArray;                                   // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<int32>                                 AnimationArray;                                    // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLWorkGuideSymbolData) == 0x000008, "Wrong alignment on FQRSLWorkGuideSymbolData");
static_assert(sizeof(FQRSLWorkGuideSymbolData) == 0x000060, "Wrong size on FQRSLWorkGuideSymbolData");
static_assert(offsetof(FQRSLWorkGuideSymbolData, Uid) == 0x000000, "Member 'FQRSLWorkGuideSymbolData::Uid' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSymbolData, SymbolID) == 0x000010, "Member 'FQRSLWorkGuideSymbolData::SymbolID' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSymbolData, ComeCount) == 0x000018, "Member 'FQRSLWorkGuideSymbolData::ComeCount' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSymbolData, Ratio) == 0x00001C, "Member 'FQRSLWorkGuideSymbolData::Ratio' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSymbolData, Extend) == 0x000020, "Member 'FQRSLWorkGuideSymbolData::Extend' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSymbolData, Total) == 0x000024, "Member 'FQRSLWorkGuideSymbolData::Total' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSymbolData, NeedRemove) == 0x000028, "Member 'FQRSLWorkGuideSymbolData::NeedRemove' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSymbolData, AdjoinDataArray) == 0x000030, "Member 'FQRSLWorkGuideSymbolData::AdjoinDataArray' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSymbolData, RemoveDataArray) == 0x000040, "Member 'FQRSLWorkGuideSymbolData::RemoveDataArray' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSymbolData, AnimationArray) == 0x000050, "Member 'FQRSLWorkGuideSymbolData::AnimationArray' has a wrong offset!");

// ScriptStruct QRSL.MonsterJobScore
// 0x0050 (0x0050 - 0x0000)
struct FMonsterJobScore final
{
public:
	TMap<EMonsterJobType, int32>                  MonsterScore;                                      // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMonsterJobScore) == 0x000008, "Wrong alignment on FMonsterJobScore");
static_assert(sizeof(FMonsterJobScore) == 0x000050, "Wrong size on FMonsterJobScore");
static_assert(offsetof(FMonsterJobScore, MonsterScore) == 0x000000, "Member 'FMonsterJobScore::MonsterScore' has a wrong offset!");

// ScriptStruct QRSL.QRSLHackerIdentitySystemData
// 0x0050 (0x0050 - 0x0000)
struct FQRSLHackerIdentitySystemData final
{
public:
	int32                                         SystemLevel;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipLoginForm;                                    // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CF2[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ActivatedUserCardIndex;                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CF3[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           UnlockedUserCardIDArray;                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<class FName>                           UnlockedAbilityIDArray;                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<int32>                                 AbilitySlotArray;                                  // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	int32                                         BlockAbilitySlotFlags;                             // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CF4[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHottaDateTimePoint                    UnsealAbilitySlotDateTimePoint;                    // 0x0048(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, SaveGame, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLHackerIdentitySystemData) == 0x000008, "Wrong alignment on FQRSLHackerIdentitySystemData");
static_assert(sizeof(FQRSLHackerIdentitySystemData) == 0x000050, "Wrong size on FQRSLHackerIdentitySystemData");
static_assert(offsetof(FQRSLHackerIdentitySystemData, SystemLevel) == 0x000000, "Member 'FQRSLHackerIdentitySystemData::SystemLevel' has a wrong offset!");
static_assert(offsetof(FQRSLHackerIdentitySystemData, bSkipLoginForm) == 0x000004, "Member 'FQRSLHackerIdentitySystemData::bSkipLoginForm' has a wrong offset!");
static_assert(offsetof(FQRSLHackerIdentitySystemData, ActivatedUserCardIndex) == 0x000008, "Member 'FQRSLHackerIdentitySystemData::ActivatedUserCardIndex' has a wrong offset!");
static_assert(offsetof(FQRSLHackerIdentitySystemData, UnlockedUserCardIDArray) == 0x000010, "Member 'FQRSLHackerIdentitySystemData::UnlockedUserCardIDArray' has a wrong offset!");
static_assert(offsetof(FQRSLHackerIdentitySystemData, UnlockedAbilityIDArray) == 0x000020, "Member 'FQRSLHackerIdentitySystemData::UnlockedAbilityIDArray' has a wrong offset!");
static_assert(offsetof(FQRSLHackerIdentitySystemData, AbilitySlotArray) == 0x000030, "Member 'FQRSLHackerIdentitySystemData::AbilitySlotArray' has a wrong offset!");
static_assert(offsetof(FQRSLHackerIdentitySystemData, BlockAbilitySlotFlags) == 0x000040, "Member 'FQRSLHackerIdentitySystemData::BlockAbilitySlotFlags' has a wrong offset!");
static_assert(offsetof(FQRSLHackerIdentitySystemData, UnsealAbilitySlotDateTimePoint) == 0x000048, "Member 'FQRSLHackerIdentitySystemData::UnsealAbilitySlotDateTimePoint' has a wrong offset!");

// ScriptStruct QRSL.8V8PlayerInfo
// 0x0050 (0x0050 - 0x0000)
struct FEightV8PlayerInfo final
{
public:
	int64                                         PlayerID;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	E8V8PlayerCamp                                PlayerCamp;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	E8V8PlayerState                               PlayerState;                                       // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CF5[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DeathNum;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AssistNum;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillNum;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HoldNum;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BossFightNum;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GatherNum;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AwardNum;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CF6[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         EntryTicks;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CF7[0x8];                                     // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEightV8PlayerInfo) == 0x000008, "Wrong alignment on FEightV8PlayerInfo");
static_assert(sizeof(FEightV8PlayerInfo) == 0x000050, "Wrong size on FEightV8PlayerInfo");
static_assert(offsetof(FEightV8PlayerInfo, PlayerID) == 0x000000, "Member 'FEightV8PlayerInfo::PlayerID' has a wrong offset!");
static_assert(offsetof(FEightV8PlayerInfo, PlayerCamp) == 0x000008, "Member 'FEightV8PlayerInfo::PlayerCamp' has a wrong offset!");
static_assert(offsetof(FEightV8PlayerInfo, PlayerState) == 0x000009, "Member 'FEightV8PlayerInfo::PlayerState' has a wrong offset!");
static_assert(offsetof(FEightV8PlayerInfo, DeathNum) == 0x00000C, "Member 'FEightV8PlayerInfo::DeathNum' has a wrong offset!");
static_assert(offsetof(FEightV8PlayerInfo, AssistNum) == 0x000010, "Member 'FEightV8PlayerInfo::AssistNum' has a wrong offset!");
static_assert(offsetof(FEightV8PlayerInfo, KillNum) == 0x000014, "Member 'FEightV8PlayerInfo::KillNum' has a wrong offset!");
static_assert(offsetof(FEightV8PlayerInfo, HoldNum) == 0x000018, "Member 'FEightV8PlayerInfo::HoldNum' has a wrong offset!");
static_assert(offsetof(FEightV8PlayerInfo, BossFightNum) == 0x00001C, "Member 'FEightV8PlayerInfo::BossFightNum' has a wrong offset!");
static_assert(offsetof(FEightV8PlayerInfo, GatherNum) == 0x000020, "Member 'FEightV8PlayerInfo::GatherNum' has a wrong offset!");
static_assert(offsetof(FEightV8PlayerInfo, Score) == 0x000024, "Member 'FEightV8PlayerInfo::Score' has a wrong offset!");
static_assert(offsetof(FEightV8PlayerInfo, AwardNum) == 0x000028, "Member 'FEightV8PlayerInfo::AwardNum' has a wrong offset!");
static_assert(offsetof(FEightV8PlayerInfo, EntryTicks) == 0x000030, "Member 'FEightV8PlayerInfo::EntryTicks' has a wrong offset!");
static_assert(offsetof(FEightV8PlayerInfo, Name) == 0x000038, "Member 'FEightV8PlayerInfo::Name' has a wrong offset!");

// ScriptStruct QRSL.AssistModeWidgetInfo
// 0x0078 (0x0078 - 0x0000)
struct FAssistModeWidgetInfo final
{
public:
	class FName                                   BtnName;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ModeTitle;                                         // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ModeSelectedIcon;                                  // 0x0020(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ModeUnSelectedIcon;                                // 0x0048(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UQRSLUI_Button*                         ModeBtn;                                           // 0x0070(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAssistModeWidgetInfo) == 0x000008, "Wrong alignment on FAssistModeWidgetInfo");
static_assert(sizeof(FAssistModeWidgetInfo) == 0x000078, "Wrong size on FAssistModeWidgetInfo");
static_assert(offsetof(FAssistModeWidgetInfo, BtnName) == 0x000000, "Member 'FAssistModeWidgetInfo::BtnName' has a wrong offset!");
static_assert(offsetof(FAssistModeWidgetInfo, ModeTitle) == 0x000008, "Member 'FAssistModeWidgetInfo::ModeTitle' has a wrong offset!");
static_assert(offsetof(FAssistModeWidgetInfo, ModeSelectedIcon) == 0x000020, "Member 'FAssistModeWidgetInfo::ModeSelectedIcon' has a wrong offset!");
static_assert(offsetof(FAssistModeWidgetInfo, ModeUnSelectedIcon) == 0x000048, "Member 'FAssistModeWidgetInfo::ModeUnSelectedIcon' has a wrong offset!");
static_assert(offsetof(FAssistModeWidgetInfo, ModeBtn) == 0x000070, "Member 'FAssistModeWidgetInfo::ModeBtn' has a wrong offset!");

// ScriptStruct QRSL.WormholeMonsterGenerationData
// 0x0010 (0x0010 - 0x0000)
struct FWormholeMonsterGenerationData final
{
public:
	class FName                                   MonsterRandomPoolID;                               // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenerateAmount;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholeMonsterGenerationData) == 0x000004, "Wrong alignment on FWormholeMonsterGenerationData");
static_assert(sizeof(FWormholeMonsterGenerationData) == 0x000010, "Wrong size on FWormholeMonsterGenerationData");
static_assert(offsetof(FWormholeMonsterGenerationData, MonsterRandomPoolID) == 0x000000, "Member 'FWormholeMonsterGenerationData::MonsterRandomPoolID' has a wrong offset!");
static_assert(offsetof(FWormholeMonsterGenerationData, Weight) == 0x000008, "Member 'FWormholeMonsterGenerationData::Weight' has a wrong offset!");
static_assert(offsetof(FWormholeMonsterGenerationData, GenerateAmount) == 0x00000C, "Member 'FWormholeMonsterGenerationData::GenerateAmount' has a wrong offset!");

// ScriptStruct QRSL.QRSLAchievementGradeInfo
// 0x00A8 (0x00B0 - 0x0008)
struct FQRSLAchievementGradeInfo final : public FTableRowBase
{
public:
	int32                                         Grade;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAwardInfo>                     AwardInfo;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   GradeName;                                         // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              GradeTitlePicture;                                 // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              GradePicture;                                      // 0x0060(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              GradeUnlockPicture;                                // 0x0088(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLAchievementGradeInfo) == 0x000008, "Wrong alignment on FQRSLAchievementGradeInfo");
static_assert(sizeof(FQRSLAchievementGradeInfo) == 0x0000B0, "Wrong size on FQRSLAchievementGradeInfo");
static_assert(offsetof(FQRSLAchievementGradeInfo, Grade) == 0x000008, "Member 'FQRSLAchievementGradeInfo::Grade' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementGradeInfo, Score) == 0x00000C, "Member 'FQRSLAchievementGradeInfo::Score' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementGradeInfo, AwardInfo) == 0x000010, "Member 'FQRSLAchievementGradeInfo::AwardInfo' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementGradeInfo, GradeName) == 0x000020, "Member 'FQRSLAchievementGradeInfo::GradeName' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementGradeInfo, GradeTitlePicture) == 0x000038, "Member 'FQRSLAchievementGradeInfo::GradeTitlePicture' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementGradeInfo, GradePicture) == 0x000060, "Member 'FQRSLAchievementGradeInfo::GradePicture' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementGradeInfo, GradeUnlockPicture) == 0x000088, "Member 'FQRSLAchievementGradeInfo::GradeUnlockPicture' has a wrong offset!");

// ScriptStruct QRSL.InteractActorInfo
// 0x00E8 (0x00E8 - 0x0000)
struct FInteractActorInfo final
{
public:
	struct FInteractEntry                         MyEntry;                                           // 0x0000(0x00E0)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  MyActor;                                           // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInteractActorInfo) == 0x000008, "Wrong alignment on FInteractActorInfo");
static_assert(sizeof(FInteractActorInfo) == 0x0000E8, "Wrong size on FInteractActorInfo");
static_assert(offsetof(FInteractActorInfo, MyEntry) == 0x000000, "Member 'FInteractActorInfo::MyEntry' has a wrong offset!");
static_assert(offsetof(FInteractActorInfo, MyActor) == 0x0000E0, "Member 'FInteractActorInfo::MyActor' has a wrong offset!");

// ScriptStruct QRSL.AreaData
// 0x00B8 (0x00C0 - 0x0008)
struct FAreaData final : public FTableRowBase
{
public:
	class FText                                   AreaTitle;                                         // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         AreaPriority;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CF8[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UUIParticleAsset>        AreaParticleAsset;                                 // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           SubAreas;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVector2D                              FieldOfViewSize;                                   // 0x0060(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETowerType                                    TowerType;                                         // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CF9[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PointID;                                           // 0x006C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CFA[0x4];                                     // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EAreaType>                             AreaTypes;                                         // 0x0078(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   QuestID;                                           // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UUIParticleAsset>        QuestSubmittedAsset;                               // 0x0090(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFactionDefinition                            Faction;                                           // 0x00B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CFB[0x7];                                     // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAreaData) == 0x000008, "Wrong alignment on FAreaData");
static_assert(sizeof(FAreaData) == 0x0000C0, "Wrong size on FAreaData");
static_assert(offsetof(FAreaData, AreaTitle) == 0x000008, "Member 'FAreaData::AreaTitle' has a wrong offset!");
static_assert(offsetof(FAreaData, AreaPriority) == 0x000020, "Member 'FAreaData::AreaPriority' has a wrong offset!");
static_assert(offsetof(FAreaData, AreaParticleAsset) == 0x000028, "Member 'FAreaData::AreaParticleAsset' has a wrong offset!");
static_assert(offsetof(FAreaData, SubAreas) == 0x000050, "Member 'FAreaData::SubAreas' has a wrong offset!");
static_assert(offsetof(FAreaData, FieldOfViewSize) == 0x000060, "Member 'FAreaData::FieldOfViewSize' has a wrong offset!");
static_assert(offsetof(FAreaData, TowerType) == 0x000068, "Member 'FAreaData::TowerType' has a wrong offset!");
static_assert(offsetof(FAreaData, PointID) == 0x00006C, "Member 'FAreaData::PointID' has a wrong offset!");
static_assert(offsetof(FAreaData, AreaTypes) == 0x000078, "Member 'FAreaData::AreaTypes' has a wrong offset!");
static_assert(offsetof(FAreaData, QuestID) == 0x000088, "Member 'FAreaData::QuestID' has a wrong offset!");
static_assert(offsetof(FAreaData, QuestSubmittedAsset) == 0x000090, "Member 'FAreaData::QuestSubmittedAsset' has a wrong offset!");
static_assert(offsetof(FAreaData, Faction) == 0x0000B8, "Member 'FAreaData::Faction' has a wrong offset!");

// ScriptStruct QRSL.QRSWorkGuideActivityData
// 0x00C0 (0x00C0 - 0x0000)
struct FQRSWorkGuideActivityData final
{
public:
	TArray<struct FQRSLWorkGuideSymbolData>       SymbolLibArray;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<struct FQRSLWorkGuideItemData>         ItemLibArray;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<class FName>                           UsedSymbolArray;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<class FName>                           UsedItemArray;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	int32                                         WorkIncome;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Round;                                             // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Turn;                                              // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RefreshCount;                                      // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemoveCount;                                       // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeleteSymbolCount;                                 // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetSymbolCount;                                    // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TurnCount;                                         // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxRound;                                          // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiffTime;                                          // 0x0064(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 AwardStateArray;                                   // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	int32                                         SimpleModeDailyCount;                              // 0x0078(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorkGuideWorkStage;                                // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          BattleGroundSymbolArray;                           // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<class FName>                           AddSymbolArray;                                    // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           SelectSymbolArray;                                 // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           ShopRefreshItemsArray;                             // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSWorkGuideActivityData) == 0x000008, "Wrong alignment on FQRSWorkGuideActivityData");
static_assert(sizeof(FQRSWorkGuideActivityData) == 0x0000C0, "Wrong size on FQRSWorkGuideActivityData");
static_assert(offsetof(FQRSWorkGuideActivityData, SymbolLibArray) == 0x000000, "Member 'FQRSWorkGuideActivityData::SymbolLibArray' has a wrong offset!");
static_assert(offsetof(FQRSWorkGuideActivityData, ItemLibArray) == 0x000010, "Member 'FQRSWorkGuideActivityData::ItemLibArray' has a wrong offset!");
static_assert(offsetof(FQRSWorkGuideActivityData, UsedSymbolArray) == 0x000020, "Member 'FQRSWorkGuideActivityData::UsedSymbolArray' has a wrong offset!");
static_assert(offsetof(FQRSWorkGuideActivityData, UsedItemArray) == 0x000030, "Member 'FQRSWorkGuideActivityData::UsedItemArray' has a wrong offset!");
static_assert(offsetof(FQRSWorkGuideActivityData, WorkIncome) == 0x000040, "Member 'FQRSWorkGuideActivityData::WorkIncome' has a wrong offset!");
static_assert(offsetof(FQRSWorkGuideActivityData, Round) == 0x000044, "Member 'FQRSWorkGuideActivityData::Round' has a wrong offset!");
static_assert(offsetof(FQRSWorkGuideActivityData, Turn) == 0x000048, "Member 'FQRSWorkGuideActivityData::Turn' has a wrong offset!");
static_assert(offsetof(FQRSWorkGuideActivityData, RefreshCount) == 0x00004C, "Member 'FQRSWorkGuideActivityData::RefreshCount' has a wrong offset!");
static_assert(offsetof(FQRSWorkGuideActivityData, RemoveCount) == 0x000050, "Member 'FQRSWorkGuideActivityData::RemoveCount' has a wrong offset!");
static_assert(offsetof(FQRSWorkGuideActivityData, DeleteSymbolCount) == 0x000054, "Member 'FQRSWorkGuideActivityData::DeleteSymbolCount' has a wrong offset!");
static_assert(offsetof(FQRSWorkGuideActivityData, GetSymbolCount) == 0x000058, "Member 'FQRSWorkGuideActivityData::GetSymbolCount' has a wrong offset!");
static_assert(offsetof(FQRSWorkGuideActivityData, TurnCount) == 0x00005C, "Member 'FQRSWorkGuideActivityData::TurnCount' has a wrong offset!");
static_assert(offsetof(FQRSWorkGuideActivityData, MaxRound) == 0x000060, "Member 'FQRSWorkGuideActivityData::MaxRound' has a wrong offset!");
static_assert(offsetof(FQRSWorkGuideActivityData, DiffTime) == 0x000064, "Member 'FQRSWorkGuideActivityData::DiffTime' has a wrong offset!");
static_assert(offsetof(FQRSWorkGuideActivityData, AwardStateArray) == 0x000068, "Member 'FQRSWorkGuideActivityData::AwardStateArray' has a wrong offset!");
static_assert(offsetof(FQRSWorkGuideActivityData, SimpleModeDailyCount) == 0x000078, "Member 'FQRSWorkGuideActivityData::SimpleModeDailyCount' has a wrong offset!");
static_assert(offsetof(FQRSWorkGuideActivityData, WorkGuideWorkStage) == 0x00007C, "Member 'FQRSWorkGuideActivityData::WorkGuideWorkStage' has a wrong offset!");
static_assert(offsetof(FQRSWorkGuideActivityData, BattleGroundSymbolArray) == 0x000080, "Member 'FQRSWorkGuideActivityData::BattleGroundSymbolArray' has a wrong offset!");
static_assert(offsetof(FQRSWorkGuideActivityData, AddSymbolArray) == 0x000090, "Member 'FQRSWorkGuideActivityData::AddSymbolArray' has a wrong offset!");
static_assert(offsetof(FQRSWorkGuideActivityData, SelectSymbolArray) == 0x0000A0, "Member 'FQRSWorkGuideActivityData::SelectSymbolArray' has a wrong offset!");
static_assert(offsetof(FQRSWorkGuideActivityData, ShopRefreshItemsArray) == 0x0000B0, "Member 'FQRSWorkGuideActivityData::ShopRefreshItemsArray' has a wrong offset!");

// ScriptStruct QRSL.QRSLHackerTerminalAppData
// 0x0010 (0x0010 - 0x0000)
struct FQRSLHackerTerminalAppData final
{
public:
	class FName                                   AppID;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppVersion;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRunning;                                          // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CFC[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQRSLHackerTerminalAppData) == 0x000004, "Wrong alignment on FQRSLHackerTerminalAppData");
static_assert(sizeof(FQRSLHackerTerminalAppData) == 0x000010, "Wrong size on FQRSLHackerTerminalAppData");
static_assert(offsetof(FQRSLHackerTerminalAppData, AppID) == 0x000000, "Member 'FQRSLHackerTerminalAppData::AppID' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalAppData, AppVersion) == 0x000008, "Member 'FQRSLHackerTerminalAppData::AppVersion' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalAppData, bRunning) == 0x00000C, "Member 'FQRSLHackerTerminalAppData::bRunning' has a wrong offset!");

// ScriptStruct QRSL.AchievementTypeCategory
// 0x0028 (0x0028 - 0x0000)
struct FAchievementTypeCategory final
{
public:
	class FText                                   MainCategory;                                      // 0x0000(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FText>                           AppendCategory;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAchievementTypeCategory) == 0x000008, "Wrong alignment on FAchievementTypeCategory");
static_assert(sizeof(FAchievementTypeCategory) == 0x000028, "Wrong size on FAchievementTypeCategory");
static_assert(offsetof(FAchievementTypeCategory, MainCategory) == 0x000000, "Member 'FAchievementTypeCategory::MainCategory' has a wrong offset!");
static_assert(offsetof(FAchievementTypeCategory, AppendCategory) == 0x000018, "Member 'FAchievementTypeCategory::AppendCategory' has a wrong offset!");

// ScriptStruct QRSL.StampContractMessage
// 0x0038 (0x0038 - 0x0000)
struct FStampContractMessage final
{
public:
	int32                                         PlayerCount;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MonthOrDay;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MessageType;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CFD[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CommonPlayerRoleID;                                // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         InvitatePlayerRoleID;                              // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         StampContractID;                                   // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int64>                                 RoleIDArray;                                       // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStampContractMessage) == 0x000008, "Wrong alignment on FStampContractMessage");
static_assert(sizeof(FStampContractMessage) == 0x000038, "Wrong size on FStampContractMessage");
static_assert(offsetof(FStampContractMessage, PlayerCount) == 0x000000, "Member 'FStampContractMessage::PlayerCount' has a wrong offset!");
static_assert(offsetof(FStampContractMessage, MonthOrDay) == 0x000004, "Member 'FStampContractMessage::MonthOrDay' has a wrong offset!");
static_assert(offsetof(FStampContractMessage, MessageType) == 0x000008, "Member 'FStampContractMessage::MessageType' has a wrong offset!");
static_assert(offsetof(FStampContractMessage, CommonPlayerRoleID) == 0x000010, "Member 'FStampContractMessage::CommonPlayerRoleID' has a wrong offset!");
static_assert(offsetof(FStampContractMessage, InvitatePlayerRoleID) == 0x000018, "Member 'FStampContractMessage::InvitatePlayerRoleID' has a wrong offset!");
static_assert(offsetof(FStampContractMessage, StampContractID) == 0x000020, "Member 'FStampContractMessage::StampContractID' has a wrong offset!");
static_assert(offsetof(FStampContractMessage, RoleIDArray) == 0x000028, "Member 'FStampContractMessage::RoleIDArray' has a wrong offset!");

// ScriptStruct QRSL.TaxiCameraSettings
// 0x0008 (0x0178 - 0x0170)
struct FTaxiCameraSettings final : public FCameraSettings
{
public:
	float                                         TaxiMaxYaw;                                        // 0x0170(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TaxiMaxPitch;                                      // 0x0174(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTaxiCameraSettings) == 0x000004, "Wrong alignment on FTaxiCameraSettings");
static_assert(sizeof(FTaxiCameraSettings) == 0x000178, "Wrong size on FTaxiCameraSettings");
static_assert(offsetof(FTaxiCameraSettings, TaxiMaxYaw) == 0x000170, "Member 'FTaxiCameraSettings::TaxiMaxYaw' has a wrong offset!");
static_assert(offsetof(FTaxiCameraSettings, TaxiMaxPitch) == 0x000174, "Member 'FTaxiCameraSettings::TaxiMaxPitch' has a wrong offset!");

// ScriptStruct QRSL.ComboTriggerSectionData
// 0x0028 (0x0028 - 0x0000)
struct FComboTriggerSectionData final
{
public:
	TSubclassOf<class UHottaSkill>                TriggerSkillClass;                                 // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ExSectionName;                                     // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJump;                                             // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CFE[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   WidgetName;                                        // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CFF[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FComboTriggerSectionData) == 0x000008, "Wrong alignment on FComboTriggerSectionData");
static_assert(sizeof(FComboTriggerSectionData) == 0x000028, "Wrong size on FComboTriggerSectionData");
static_assert(offsetof(FComboTriggerSectionData, TriggerSkillClass) == 0x000000, "Member 'FComboTriggerSectionData::TriggerSkillClass' has a wrong offset!");
static_assert(offsetof(FComboTriggerSectionData, SectionName) == 0x000008, "Member 'FComboTriggerSectionData::SectionName' has a wrong offset!");
static_assert(offsetof(FComboTriggerSectionData, ExSectionName) == 0x000010, "Member 'FComboTriggerSectionData::ExSectionName' has a wrong offset!");
static_assert(offsetof(FComboTriggerSectionData, bJump) == 0x000018, "Member 'FComboTriggerSectionData::bJump' has a wrong offset!");
static_assert(offsetof(FComboTriggerSectionData, WidgetName) == 0x00001C, "Member 'FComboTriggerSectionData::WidgetName' has a wrong offset!");

// ScriptStruct QRSL.LeisureRoomDataRecordElementInfo
// 0x000C (0x000C - 0x0000)
struct FLeisureRoomDataRecordElementInfo final
{
public:
	ELeisureRoomDataType                          DataType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELeisureRoomDataUnlockType                    DataUnlockType;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D00[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LeisureRoomDataID;                                 // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLeisureRoomDataRecordElementInfo) == 0x000004, "Wrong alignment on FLeisureRoomDataRecordElementInfo");
static_assert(sizeof(FLeisureRoomDataRecordElementInfo) == 0x00000C, "Wrong size on FLeisureRoomDataRecordElementInfo");
static_assert(offsetof(FLeisureRoomDataRecordElementInfo, DataType) == 0x000000, "Member 'FLeisureRoomDataRecordElementInfo::DataType' has a wrong offset!");
static_assert(offsetof(FLeisureRoomDataRecordElementInfo, DataUnlockType) == 0x000001, "Member 'FLeisureRoomDataRecordElementInfo::DataUnlockType' has a wrong offset!");
static_assert(offsetof(FLeisureRoomDataRecordElementInfo, LeisureRoomDataID) == 0x000004, "Member 'FLeisureRoomDataRecordElementInfo::LeisureRoomDataID' has a wrong offset!");

// ScriptStruct QRSL.LeisureRoomDataRecordInfo
// 0x0040 (0x0040 - 0x0000)
struct FLeisureRoomDataRecordInfo final
{
public:
	class FName                                   LeisureRoomID;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeisureRoomName;                                   // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsExistRedHeartFlag;                              // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D01[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLeisureRoomDataRecordElementInfo> DataRecordElementInfos;                            // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	TArray<struct FLeisureRoomUsedDataRecordInfo> UsedDataRecordInfos;                               // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLeisureRoomDataRecordInfo) == 0x000008, "Wrong alignment on FLeisureRoomDataRecordInfo");
static_assert(sizeof(FLeisureRoomDataRecordInfo) == 0x000040, "Wrong size on FLeisureRoomDataRecordInfo");
static_assert(offsetof(FLeisureRoomDataRecordInfo, LeisureRoomID) == 0x000000, "Member 'FLeisureRoomDataRecordInfo::LeisureRoomID' has a wrong offset!");
static_assert(offsetof(FLeisureRoomDataRecordInfo, LeisureRoomName) == 0x000008, "Member 'FLeisureRoomDataRecordInfo::LeisureRoomName' has a wrong offset!");
static_assert(offsetof(FLeisureRoomDataRecordInfo, bIsExistRedHeartFlag) == 0x000018, "Member 'FLeisureRoomDataRecordInfo::bIsExistRedHeartFlag' has a wrong offset!");
static_assert(offsetof(FLeisureRoomDataRecordInfo, DataRecordElementInfos) == 0x000020, "Member 'FLeisureRoomDataRecordInfo::DataRecordElementInfos' has a wrong offset!");
static_assert(offsetof(FLeisureRoomDataRecordInfo, UsedDataRecordInfos) == 0x000030, "Member 'FLeisureRoomDataRecordInfo::UsedDataRecordInfos' has a wrong offset!");

// ScriptStruct QRSL.QRSLHackerTerminalActivatedData
// 0x0010 (0x0010 - 0x0000)
struct FQRSLHackerTerminalActivatedData final
{
public:
	EHackerTerminalMarketItemType                 MarketItemType;                                    // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D02[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Flag;                                              // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLHackerTerminalActivatedData) == 0x000008, "Wrong alignment on FQRSLHackerTerminalActivatedData");
static_assert(sizeof(FQRSLHackerTerminalActivatedData) == 0x000010, "Wrong size on FQRSLHackerTerminalActivatedData");
static_assert(offsetof(FQRSLHackerTerminalActivatedData, MarketItemType) == 0x000000, "Member 'FQRSLHackerTerminalActivatedData::MarketItemType' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalActivatedData, Flag) == 0x000008, "Member 'FQRSLHackerTerminalActivatedData::Flag' has a wrong offset!");

// ScriptStruct QRSL.LeisureRoomActionDataInfo
// 0x0008 (0x0070 - 0x0068)
struct FLeisureRoomActionDataInfo final : public FLeisureRoomBaseDataInfo
{
public:
	ELeisureRoomActionDataType                    ActionDataType;                                    // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D03[0x7];                                     // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLeisureRoomActionDataInfo) == 0x000008, "Wrong alignment on FLeisureRoomActionDataInfo");
static_assert(sizeof(FLeisureRoomActionDataInfo) == 0x000070, "Wrong size on FLeisureRoomActionDataInfo");
static_assert(offsetof(FLeisureRoomActionDataInfo, ActionDataType) == 0x000068, "Member 'FLeisureRoomActionDataInfo::ActionDataType' has a wrong offset!");

// ScriptStruct QRSL.OrienteeringTrack
// 0x000C (0x000C - 0x0000)
struct FOrienteeringTrack final
{
public:
	class FName                                   TrackName;                                         // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOrienteeringTrack) == 0x000004, "Wrong alignment on FOrienteeringTrack");
static_assert(sizeof(FOrienteeringTrack) == 0x00000C, "Wrong size on FOrienteeringTrack");
static_assert(offsetof(FOrienteeringTrack, TrackName) == 0x000000, "Member 'FOrienteeringTrack::TrackName' has a wrong offset!");
static_assert(offsetof(FOrienteeringTrack, Count) == 0x000008, "Member 'FOrienteeringTrack::Count' has a wrong offset!");

// ScriptStruct QRSL.GamepadCommandMenusTableRow
// 0x0060 (0x0068 - 0x0008)
struct FGamepadCommandMenusTableRow final : public FTableRowBase
{
public:
	ELevelSceneType                               LevelSceneType;                                    // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D04[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   EntryWidgetTable;                                  // 0x0010(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   EntryWidgetList;                                   // 0x0038(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTeamScene;                                      // 0x0060(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsStandaloneScene;                                // 0x0061(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D05[0x6];                                     // 0x0062(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGamepadCommandMenusTableRow) == 0x000008, "Wrong alignment on FGamepadCommandMenusTableRow");
static_assert(sizeof(FGamepadCommandMenusTableRow) == 0x000068, "Wrong size on FGamepadCommandMenusTableRow");
static_assert(offsetof(FGamepadCommandMenusTableRow, LevelSceneType) == 0x000008, "Member 'FGamepadCommandMenusTableRow::LevelSceneType' has a wrong offset!");
static_assert(offsetof(FGamepadCommandMenusTableRow, EntryWidgetTable) == 0x000010, "Member 'FGamepadCommandMenusTableRow::EntryWidgetTable' has a wrong offset!");
static_assert(offsetof(FGamepadCommandMenusTableRow, EntryWidgetList) == 0x000038, "Member 'FGamepadCommandMenusTableRow::EntryWidgetList' has a wrong offset!");
static_assert(offsetof(FGamepadCommandMenusTableRow, bIsTeamScene) == 0x000060, "Member 'FGamepadCommandMenusTableRow::bIsTeamScene' has a wrong offset!");
static_assert(offsetof(FGamepadCommandMenusTableRow, bIsStandaloneScene) == 0x000061, "Member 'FGamepadCommandMenusTableRow::bIsStandaloneScene' has a wrong offset!");

// ScriptStruct QRSL.PersonalityScoreData
// 0x0008 (0x0008 - 0x0000)
struct FPersonalityScoreData final
{
public:
	EPersonalityType                              PersonalityType;                                   // 0x0000(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D06[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Score;                                             // 0x0004(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPersonalityScoreData) == 0x000004, "Wrong alignment on FPersonalityScoreData");
static_assert(sizeof(FPersonalityScoreData) == 0x000008, "Wrong size on FPersonalityScoreData");
static_assert(offsetof(FPersonalityScoreData, PersonalityType) == 0x000000, "Member 'FPersonalityScoreData::PersonalityType' has a wrong offset!");
static_assert(offsetof(FPersonalityScoreData, Score) == 0x000004, "Member 'FPersonalityScoreData::Score' has a wrong offset!");

// ScriptStruct QRSL.WormholePickItemDropPool
// 0x0010 (0x0010 - 0x0000)
struct FWormholePickItemDropPool final
{
public:
	class FName                                   PoolID;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomCount;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenerateAmount;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholePickItemDropPool) == 0x000004, "Wrong alignment on FWormholePickItemDropPool");
static_assert(sizeof(FWormholePickItemDropPool) == 0x000010, "Wrong size on FWormholePickItemDropPool");
static_assert(offsetof(FWormholePickItemDropPool, PoolID) == 0x000000, "Member 'FWormholePickItemDropPool::PoolID' has a wrong offset!");
static_assert(offsetof(FWormholePickItemDropPool, RandomCount) == 0x000008, "Member 'FWormholePickItemDropPool::RandomCount' has a wrong offset!");
static_assert(offsetof(FWormholePickItemDropPool, GenerateAmount) == 0x00000C, "Member 'FWormholePickItemDropPool::GenerateAmount' has a wrong offset!");

// ScriptStruct QRSL.WormholeWeatherWeightData
// 0x0008 (0x0008 - 0x0000)
struct FWormholeWeatherWeightData final
{
public:
	EWeatherState                                 WeatherState;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D07[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Weight;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholeWeatherWeightData) == 0x000004, "Wrong alignment on FWormholeWeatherWeightData");
static_assert(sizeof(FWormholeWeatherWeightData) == 0x000008, "Wrong size on FWormholeWeatherWeightData");
static_assert(offsetof(FWormholeWeatherWeightData, WeatherState) == 0x000000, "Member 'FWormholeWeatherWeightData::WeatherState' has a wrong offset!");
static_assert(offsetof(FWormholeWeatherWeightData, Weight) == 0x000004, "Member 'FWormholeWeatherWeightData::Weight' has a wrong offset!");

// ScriptStruct QRSL.WormholeVisualSpawnData
// 0x0030 (0x0030 - 0x0000)
struct FWormholeVisualSpawnData final
{
public:
	TSoftClassPtr<class UClass>                   VisualTemplate;                                    // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VisualAmount;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D08[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWormholeVisualSpawnData) == 0x000008, "Wrong alignment on FWormholeVisualSpawnData");
static_assert(sizeof(FWormholeVisualSpawnData) == 0x000030, "Wrong size on FWormholeVisualSpawnData");
static_assert(offsetof(FWormholeVisualSpawnData, VisualTemplate) == 0x000000, "Member 'FWormholeVisualSpawnData::VisualTemplate' has a wrong offset!");
static_assert(offsetof(FWormholeVisualSpawnData, VisualAmount) == 0x000028, "Member 'FWormholeVisualSpawnData::VisualAmount' has a wrong offset!");

// ScriptStruct QRSL.WormholeMapGradeData
// 0x0148 (0x0150 - 0x0008)
struct FWormholeMapGradeData final : public FTableRowBase
{
public:
	int32                                         Layer;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Grade;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TravelMapName;                                     // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   AreaTitle;                                         // 0x0020(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         PassScore;                                         // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Energy;                                            // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EWormholeDifficulty, struct FWormholeDifficultyAdditionData> DifficultyAdditions;                               // 0x0040(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   EndlessRewards;                                    // 0x0090(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MonsterLevel;                                      // 0x0098(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CountDownSeconds;                                  // 0x009C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowMonsters;                                     // 0x00A0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanResetEffectBuff;                                // 0x00A1(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D09[0x6];                                     // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWormholeMonsterGenerationData> InsideEffectBuffMonsterPool;                       // 0x00A8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         BuffMonsterGenerateTypeCount;                      // 0x00B8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DayProbability;                                    // 0x00BC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FWormholeWeatherWeightData>     WeatherPool;                                       // 0x00C0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         WeatherCount;                                      // 0x00D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D0A[0x4];                                     // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWormholeVisualSpawnData>       VisualPool;                                        // 0x00D8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         MaxAwardRuneCount;                                 // 0x00E8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D0B[0x4];                                     // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWormholePickItemDropPool>      LevelDropPools;                                    // 0x00F0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EMonsterJobType, struct FWormholeMonstersPoolData> MonsterDropRandom;                                 // 0x0100(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholeMapGradeData) == 0x000008, "Wrong alignment on FWormholeMapGradeData");
static_assert(sizeof(FWormholeMapGradeData) == 0x000150, "Wrong size on FWormholeMapGradeData");
static_assert(offsetof(FWormholeMapGradeData, Layer) == 0x000008, "Member 'FWormholeMapGradeData::Layer' has a wrong offset!");
static_assert(offsetof(FWormholeMapGradeData, Grade) == 0x00000C, "Member 'FWormholeMapGradeData::Grade' has a wrong offset!");
static_assert(offsetof(FWormholeMapGradeData, TravelMapName) == 0x000010, "Member 'FWormholeMapGradeData::TravelMapName' has a wrong offset!");
static_assert(offsetof(FWormholeMapGradeData, AreaTitle) == 0x000020, "Member 'FWormholeMapGradeData::AreaTitle' has a wrong offset!");
static_assert(offsetof(FWormholeMapGradeData, PassScore) == 0x000038, "Member 'FWormholeMapGradeData::PassScore' has a wrong offset!");
static_assert(offsetof(FWormholeMapGradeData, Energy) == 0x00003C, "Member 'FWormholeMapGradeData::Energy' has a wrong offset!");
static_assert(offsetof(FWormholeMapGradeData, DifficultyAdditions) == 0x000040, "Member 'FWormholeMapGradeData::DifficultyAdditions' has a wrong offset!");
static_assert(offsetof(FWormholeMapGradeData, EndlessRewards) == 0x000090, "Member 'FWormholeMapGradeData::EndlessRewards' has a wrong offset!");
static_assert(offsetof(FWormholeMapGradeData, MonsterLevel) == 0x000098, "Member 'FWormholeMapGradeData::MonsterLevel' has a wrong offset!");
static_assert(offsetof(FWormholeMapGradeData, CountDownSeconds) == 0x00009C, "Member 'FWormholeMapGradeData::CountDownSeconds' has a wrong offset!");
static_assert(offsetof(FWormholeMapGradeData, bShowMonsters) == 0x0000A0, "Member 'FWormholeMapGradeData::bShowMonsters' has a wrong offset!");
static_assert(offsetof(FWormholeMapGradeData, CanResetEffectBuff) == 0x0000A1, "Member 'FWormholeMapGradeData::CanResetEffectBuff' has a wrong offset!");
static_assert(offsetof(FWormholeMapGradeData, InsideEffectBuffMonsterPool) == 0x0000A8, "Member 'FWormholeMapGradeData::InsideEffectBuffMonsterPool' has a wrong offset!");
static_assert(offsetof(FWormholeMapGradeData, BuffMonsterGenerateTypeCount) == 0x0000B8, "Member 'FWormholeMapGradeData::BuffMonsterGenerateTypeCount' has a wrong offset!");
static_assert(offsetof(FWormholeMapGradeData, DayProbability) == 0x0000BC, "Member 'FWormholeMapGradeData::DayProbability' has a wrong offset!");
static_assert(offsetof(FWormholeMapGradeData, WeatherPool) == 0x0000C0, "Member 'FWormholeMapGradeData::WeatherPool' has a wrong offset!");
static_assert(offsetof(FWormholeMapGradeData, WeatherCount) == 0x0000D0, "Member 'FWormholeMapGradeData::WeatherCount' has a wrong offset!");
static_assert(offsetof(FWormholeMapGradeData, VisualPool) == 0x0000D8, "Member 'FWormholeMapGradeData::VisualPool' has a wrong offset!");
static_assert(offsetof(FWormholeMapGradeData, MaxAwardRuneCount) == 0x0000E8, "Member 'FWormholeMapGradeData::MaxAwardRuneCount' has a wrong offset!");
static_assert(offsetof(FWormholeMapGradeData, LevelDropPools) == 0x0000F0, "Member 'FWormholeMapGradeData::LevelDropPools' has a wrong offset!");
static_assert(offsetof(FWormholeMapGradeData, MonsterDropRandom) == 0x000100, "Member 'FWormholeMapGradeData::MonsterDropRandom' has a wrong offset!");

// ScriptStruct QRSL.HackerTerminalSMSSendMessageTimerHandle
// 0x001C (0x001C - 0x0000)
struct FHackerTerminalSMSSendMessageTimerHandle final
{
public:
	class FName                                   SMSGroupID;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SMSBranchID;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         BranchIndex;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D0C[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SMSSendTimerHandle;                                // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHackerTerminalSMSSendMessageTimerHandle) == 0x000004, "Wrong alignment on FHackerTerminalSMSSendMessageTimerHandle");
static_assert(sizeof(FHackerTerminalSMSSendMessageTimerHandle) == 0x00001C, "Wrong size on FHackerTerminalSMSSendMessageTimerHandle");
static_assert(offsetof(FHackerTerminalSMSSendMessageTimerHandle, SMSGroupID) == 0x000000, "Member 'FHackerTerminalSMSSendMessageTimerHandle::SMSGroupID' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSSendMessageTimerHandle, SMSBranchID) == 0x000008, "Member 'FHackerTerminalSMSSendMessageTimerHandle::SMSBranchID' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSSendMessageTimerHandle, BranchIndex) == 0x000010, "Member 'FHackerTerminalSMSSendMessageTimerHandle::BranchIndex' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSSendMessageTimerHandle, SMSSendTimerHandle) == 0x000014, "Member 'FHackerTerminalSMSSendMessageTimerHandle::SMSSendTimerHandle' has a wrong offset!");

// ScriptStruct QRSL.HorseRacingData
// 0x0118 (0x0120 - 0x0008)
struct FHorseRacingData final : public FTableRowBase
{
public:
	int32                                         Weight;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D0D[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<TSoftClassPtr<class UClass>, int32>      TrapAdditionWeight;                                // 0x0010(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Horse;                                             // 0x0060(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Preview;                                           // 0x0088(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Endurance;                                         // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Speed;                                             // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Body;                                              // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D0E[0x4];                                     // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x00C0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Avatar;                                            // 0x00D8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           AnteBubbles;                                       // 0x0100(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UAnimationAsset>> AnteAnims;                                         // 0x0110(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHorseRacingData) == 0x000008, "Wrong alignment on FHorseRacingData");
static_assert(sizeof(FHorseRacingData) == 0x000120, "Wrong size on FHorseRacingData");
static_assert(offsetof(FHorseRacingData, Weight) == 0x000008, "Member 'FHorseRacingData::Weight' has a wrong offset!");
static_assert(offsetof(FHorseRacingData, TrapAdditionWeight) == 0x000010, "Member 'FHorseRacingData::TrapAdditionWeight' has a wrong offset!");
static_assert(offsetof(FHorseRacingData, Horse) == 0x000060, "Member 'FHorseRacingData::Horse' has a wrong offset!");
static_assert(offsetof(FHorseRacingData, Preview) == 0x000088, "Member 'FHorseRacingData::Preview' has a wrong offset!");
static_assert(offsetof(FHorseRacingData, Endurance) == 0x0000B0, "Member 'FHorseRacingData::Endurance' has a wrong offset!");
static_assert(offsetof(FHorseRacingData, Speed) == 0x0000B4, "Member 'FHorseRacingData::Speed' has a wrong offset!");
static_assert(offsetof(FHorseRacingData, Body) == 0x0000B8, "Member 'FHorseRacingData::Body' has a wrong offset!");
static_assert(offsetof(FHorseRacingData, Name) == 0x0000C0, "Member 'FHorseRacingData::Name' has a wrong offset!");
static_assert(offsetof(FHorseRacingData, Avatar) == 0x0000D8, "Member 'FHorseRacingData::Avatar' has a wrong offset!");
static_assert(offsetof(FHorseRacingData, AnteBubbles) == 0x000100, "Member 'FHorseRacingData::AnteBubbles' has a wrong offset!");
static_assert(offsetof(FHorseRacingData, AnteAnims) == 0x000110, "Member 'FHorseRacingData::AnteAnims' has a wrong offset!");

// ScriptStruct QRSL.BeachVolleyballTeamBallDefaultPoint
// 0x0040 (0x0040 - 0x0000)
struct FBeachVolleyballTeamBallDefaultPoint final
{
public:
	EActivityClone_TeamNo                         TeamNo;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D0F[0xF];                                     // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BallDefaultPoint;                                  // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBeachVolleyballTeamBallDefaultPoint) == 0x000010, "Wrong alignment on FBeachVolleyballTeamBallDefaultPoint");
static_assert(sizeof(FBeachVolleyballTeamBallDefaultPoint) == 0x000040, "Wrong size on FBeachVolleyballTeamBallDefaultPoint");
static_assert(offsetof(FBeachVolleyballTeamBallDefaultPoint, TeamNo) == 0x000000, "Member 'FBeachVolleyballTeamBallDefaultPoint::TeamNo' has a wrong offset!");
static_assert(offsetof(FBeachVolleyballTeamBallDefaultPoint, BallDefaultPoint) == 0x000010, "Member 'FBeachVolleyballTeamBallDefaultPoint::BallDefaultPoint' has a wrong offset!");

// ScriptStruct QRSL.HackerTerminalSMSSaveQusetData
// 0x000C (0x000C - 0x0000)
struct FHackerTerminalSMSSaveQusetData final
{
public:
	class FName                                   SMSQuestID;                                        // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAcceptQuest;                                      // 0x0008(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D10[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHackerTerminalSMSSaveQusetData) == 0x000004, "Wrong alignment on FHackerTerminalSMSSaveQusetData");
static_assert(sizeof(FHackerTerminalSMSSaveQusetData) == 0x00000C, "Wrong size on FHackerTerminalSMSSaveQusetData");
static_assert(offsetof(FHackerTerminalSMSSaveQusetData, SMSQuestID) == 0x000000, "Member 'FHackerTerminalSMSSaveQusetData::SMSQuestID' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSSaveQusetData, bAcceptQuest) == 0x000008, "Member 'FHackerTerminalSMSSaveQusetData::bAcceptQuest' has a wrong offset!");

// ScriptStruct QRSL.QRSLHackerInsuranceData
// 0x0008 (0x0008 - 0x0000)
struct FQRSLHackerInsuranceData final
{
public:
	int32                                         VipLevel;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHackerInsuranceAutoRepair;                        // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D11[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQRSLHackerInsuranceData) == 0x000004, "Wrong alignment on FQRSLHackerInsuranceData");
static_assert(sizeof(FQRSLHackerInsuranceData) == 0x000008, "Wrong size on FQRSLHackerInsuranceData");
static_assert(offsetof(FQRSLHackerInsuranceData, VipLevel) == 0x000000, "Member 'FQRSLHackerInsuranceData::VipLevel' has a wrong offset!");
static_assert(offsetof(FQRSLHackerInsuranceData, bHackerInsuranceAutoRepair) == 0x000004, "Member 'FQRSLHackerInsuranceData::bHackerInsuranceAutoRepair' has a wrong offset!");

// ScriptStruct QRSL.TreasureHuntPointRow
// 0x0018 (0x0020 - 0x0008)
struct FTreasureHuntPointRow final : public FTableRowBase
{
public:
	struct FVector                                Location;                                          // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   YahahaID;                                          // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D12[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTreasureHuntPointRow) == 0x000008, "Wrong alignment on FTreasureHuntPointRow");
static_assert(sizeof(FTreasureHuntPointRow) == 0x000020, "Wrong size on FTreasureHuntPointRow");
static_assert(offsetof(FTreasureHuntPointRow, Location) == 0x000008, "Member 'FTreasureHuntPointRow::Location' has a wrong offset!");
static_assert(offsetof(FTreasureHuntPointRow, YahahaID) == 0x000014, "Member 'FTreasureHuntPointRow::YahahaID' has a wrong offset!");

// ScriptStruct QRSL.ItemOutputSource
// 0x0070 (0x0078 - 0x0008)
struct FItemOutputSource final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          HasPostfixName;                                    // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D13[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0028(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   UIClass;                                           // 0x0050(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemOutputSource) == 0x000008, "Wrong alignment on FItemOutputSource");
static_assert(sizeof(FItemOutputSource) == 0x000078, "Wrong size on FItemOutputSource");
static_assert(offsetof(FItemOutputSource, Name) == 0x000008, "Member 'FItemOutputSource::Name' has a wrong offset!");
static_assert(offsetof(FItemOutputSource, HasPostfixName) == 0x000020, "Member 'FItemOutputSource::HasPostfixName' has a wrong offset!");
static_assert(offsetof(FItemOutputSource, Icon) == 0x000028, "Member 'FItemOutputSource::Icon' has a wrong offset!");
static_assert(offsetof(FItemOutputSource, UIClass) == 0x000050, "Member 'FItemOutputSource::UIClass' has a wrong offset!");

// ScriptStruct QRSL.QRSLHackerTerminalEquippedFashionData
// 0x000C (0x000C - 0x0000)
struct FQRSLHackerTerminalEquippedFashionData final
{
public:
	EHackerTerminalMarketItemType                 MarketItemType;                                    // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D14[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EquippedFashionId;                                 // 0x0004(0x0008)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLHackerTerminalEquippedFashionData) == 0x000004, "Wrong alignment on FQRSLHackerTerminalEquippedFashionData");
static_assert(sizeof(FQRSLHackerTerminalEquippedFashionData) == 0x00000C, "Wrong size on FQRSLHackerTerminalEquippedFashionData");
static_assert(offsetof(FQRSLHackerTerminalEquippedFashionData, MarketItemType) == 0x000000, "Member 'FQRSLHackerTerminalEquippedFashionData::MarketItemType' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalEquippedFashionData, EquippedFashionId) == 0x000004, "Member 'FQRSLHackerTerminalEquippedFashionData::EquippedFashionId' has a wrong offset!");

// ScriptStruct QRSL.QRSLHackerTerminalFashionData
// 0x0020 (0x0020 - 0x0000)
struct FQRSLHackerTerminalFashionData final
{
public:
	TArray<struct FQRSLHackerTerminalActivatedData> HackerTerminalFashionActivatedData;                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<struct FQRSLHackerTerminalEquippedFashionData> HackerTerminalFashionEquippedData;                 // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLHackerTerminalFashionData) == 0x000008, "Wrong alignment on FQRSLHackerTerminalFashionData");
static_assert(sizeof(FQRSLHackerTerminalFashionData) == 0x000020, "Wrong size on FQRSLHackerTerminalFashionData");
static_assert(offsetof(FQRSLHackerTerminalFashionData, HackerTerminalFashionActivatedData) == 0x000000, "Member 'FQRSLHackerTerminalFashionData::HackerTerminalFashionActivatedData' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalFashionData, HackerTerminalFashionEquippedData) == 0x000010, "Member 'FQRSLHackerTerminalFashionData::HackerTerminalFashionEquippedData' has a wrong offset!");

// ScriptStruct QRSL.LoadingTypeMaps
// 0x0050 (0x0050 - 0x0000)
struct FLoadingTypeMaps final
{
public:
	TSet<class FName>                             Maps;                                              // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLoadingTypeMaps) == 0x000008, "Wrong alignment on FLoadingTypeMaps");
static_assert(sizeof(FLoadingTypeMaps) == 0x000050, "Wrong size on FLoadingTypeMaps");
static_assert(offsetof(FLoadingTypeMaps, Maps) == 0x000000, "Member 'FLoadingTypeMaps::Maps' has a wrong offset!");

// ScriptStruct QRSL.PaoPaoFightCharacterDescriptionData
// 0x0058 (0x0058 - 0x0000)
struct FPaoPaoFightCharacterDescriptionData final
{
public:
	class FText                                   CharacterName;                                     // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              CharacterImage;                                    // 0x0018(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   CharacterDescription;                              // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaoPaoFightCharacterDescriptionData) == 0x000008, "Wrong alignment on FPaoPaoFightCharacterDescriptionData");
static_assert(sizeof(FPaoPaoFightCharacterDescriptionData) == 0x000058, "Wrong size on FPaoPaoFightCharacterDescriptionData");
static_assert(offsetof(FPaoPaoFightCharacterDescriptionData, CharacterName) == 0x000000, "Member 'FPaoPaoFightCharacterDescriptionData::CharacterName' has a wrong offset!");
static_assert(offsetof(FPaoPaoFightCharacterDescriptionData, CharacterImage) == 0x000018, "Member 'FPaoPaoFightCharacterDescriptionData::CharacterImage' has a wrong offset!");
static_assert(offsetof(FPaoPaoFightCharacterDescriptionData, CharacterDescription) == 0x000040, "Member 'FPaoPaoFightCharacterDescriptionData::CharacterDescription' has a wrong offset!");

// ScriptStruct QRSL.RacingClonePlayerInfo
// 0x0080 (0x0080 - 0x0000)
struct FRacingClonePlayerInfo final
{
public:
	int64                                         PlayerRoleID;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AQRSLPlayerCharacter>    Player;                                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AQRSLWheeledVehicle>     VehicleActor;                                      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartPointIndex;                                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOffLine;                                          // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D15[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurCheckAreaIndex;                                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextCheckAreaIndex;                                // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D16[0x8];                                     // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CurVehicleLocation;                                // 0x0040(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D17[0x10];                                    // 0x0070(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRacingClonePlayerInfo) == 0x000010, "Wrong alignment on FRacingClonePlayerInfo");
static_assert(sizeof(FRacingClonePlayerInfo) == 0x000080, "Wrong size on FRacingClonePlayerInfo");
static_assert(offsetof(FRacingClonePlayerInfo, PlayerRoleID) == 0x000000, "Member 'FRacingClonePlayerInfo::PlayerRoleID' has a wrong offset!");
static_assert(offsetof(FRacingClonePlayerInfo, PlayerName) == 0x000008, "Member 'FRacingClonePlayerInfo::PlayerName' has a wrong offset!");
static_assert(offsetof(FRacingClonePlayerInfo, Player) == 0x000018, "Member 'FRacingClonePlayerInfo::Player' has a wrong offset!");
static_assert(offsetof(FRacingClonePlayerInfo, VehicleActor) == 0x000020, "Member 'FRacingClonePlayerInfo::VehicleActor' has a wrong offset!");
static_assert(offsetof(FRacingClonePlayerInfo, StartPointIndex) == 0x000028, "Member 'FRacingClonePlayerInfo::StartPointIndex' has a wrong offset!");
static_assert(offsetof(FRacingClonePlayerInfo, bOffLine) == 0x00002C, "Member 'FRacingClonePlayerInfo::bOffLine' has a wrong offset!");
static_assert(offsetof(FRacingClonePlayerInfo, CurCheckAreaIndex) == 0x000030, "Member 'FRacingClonePlayerInfo::CurCheckAreaIndex' has a wrong offset!");
static_assert(offsetof(FRacingClonePlayerInfo, NextCheckAreaIndex) == 0x000034, "Member 'FRacingClonePlayerInfo::NextCheckAreaIndex' has a wrong offset!");
static_assert(offsetof(FRacingClonePlayerInfo, CurVehicleLocation) == 0x000040, "Member 'FRacingClonePlayerInfo::CurVehicleLocation' has a wrong offset!");

// ScriptStruct QRSL.QRSLHackerTerminalUserCardData
// 0x000C (0x000C - 0x0000)
struct FQRSLHackerTerminalUserCardData final
{
public:
	class FName                                   UserCardID;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLHackerTerminalUserCardData) == 0x000004, "Wrong alignment on FQRSLHackerTerminalUserCardData");
static_assert(sizeof(FQRSLHackerTerminalUserCardData) == 0x00000C, "Wrong size on FQRSLHackerTerminalUserCardData");
static_assert(offsetof(FQRSLHackerTerminalUserCardData, UserCardID) == 0x000000, "Member 'FQRSLHackerTerminalUserCardData::UserCardID' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalUserCardData, Level) == 0x000008, "Member 'FQRSLHackerTerminalUserCardData::Level' has a wrong offset!");

// ScriptStruct QRSL.WormholeRuneGenerateData
// 0x000C (0x000C - 0x0000)
struct FWormholeRuneGenerateData final
{
public:
	class FName                                   RuneID;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholeRuneGenerateData) == 0x000004, "Wrong alignment on FWormholeRuneGenerateData");
static_assert(sizeof(FWormholeRuneGenerateData) == 0x00000C, "Wrong size on FWormholeRuneGenerateData");
static_assert(offsetof(FWormholeRuneGenerateData, RuneID) == 0x000000, "Member 'FWormholeRuneGenerateData::RuneID' has a wrong offset!");
static_assert(offsetof(FWormholeRuneGenerateData, Weight) == 0x000008, "Member 'FWormholeRuneGenerateData::Weight' has a wrong offset!");

// ScriptStruct QRSL.WormholeRuneSynthesisData
// 0x0020 (0x0028 - 0x0008)
struct FWormholeRuneSynthesisData final : public FTableRowBase
{
public:
	int32                                         FragmentCount[0x3];                                // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D18[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWormholeRuneGenerateData>      RuneGenerateData;                                  // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholeRuneSynthesisData) == 0x000008, "Wrong alignment on FWormholeRuneSynthesisData");
static_assert(sizeof(FWormholeRuneSynthesisData) == 0x000028, "Wrong size on FWormholeRuneSynthesisData");
static_assert(offsetof(FWormholeRuneSynthesisData, FragmentCount) == 0x000008, "Member 'FWormholeRuneSynthesisData::FragmentCount' has a wrong offset!");
static_assert(offsetof(FWormholeRuneSynthesisData, RuneGenerateData) == 0x000018, "Member 'FWormholeRuneSynthesisData::RuneGenerateData' has a wrong offset!");

// ScriptStruct QRSL.ImageItem
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FImageItem final
{
public:
	uint8                                         Pad_1D19[0x18];                                    // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FImageItem) == 0x000008, "Wrong alignment on FImageItem");
static_assert(sizeof(FImageItem) == 0x000018, "Wrong size on FImageItem");

// ScriptStruct QRSL.QRSLHackerTerminalDeviceBatteryData
// 0x0004 (0x0004 - 0x0000)
struct FQRSLHackerTerminalDeviceBatteryData final
{
public:
	float                                         BatteryLevel;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLHackerTerminalDeviceBatteryData) == 0x000004, "Wrong alignment on FQRSLHackerTerminalDeviceBatteryData");
static_assert(sizeof(FQRSLHackerTerminalDeviceBatteryData) == 0x000004, "Wrong size on FQRSLHackerTerminalDeviceBatteryData");
static_assert(offsetof(FQRSLHackerTerminalDeviceBatteryData, BatteryLevel) == 0x000000, "Member 'FQRSLHackerTerminalDeviceBatteryData::BatteryLevel' has a wrong offset!");

// ScriptStruct QRSL.QRSLHackerTerminalDeviceData
// 0x0020 (0x0020 - 0x0000)
struct FQRSLHackerTerminalDeviceData final
{
public:
	class FName                                   DeviceID;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeviceVersion;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQRSLHackerTerminalDeviceBatteryData   BatteryData;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, SaveGame, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FQRSLHackerTerminalAppData>     AppDataArray;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLHackerTerminalDeviceData) == 0x000008, "Wrong alignment on FQRSLHackerTerminalDeviceData");
static_assert(sizeof(FQRSLHackerTerminalDeviceData) == 0x000020, "Wrong size on FQRSLHackerTerminalDeviceData");
static_assert(offsetof(FQRSLHackerTerminalDeviceData, DeviceID) == 0x000000, "Member 'FQRSLHackerTerminalDeviceData::DeviceID' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalDeviceData, DeviceVersion) == 0x000008, "Member 'FQRSLHackerTerminalDeviceData::DeviceVersion' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalDeviceData, BatteryData) == 0x00000C, "Member 'FQRSLHackerTerminalDeviceData::BatteryData' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalDeviceData, AppDataArray) == 0x000010, "Member 'FQRSLHackerTerminalDeviceData::AppDataArray' has a wrong offset!");

// ScriptStruct QRSL.RecommendTextEntry
// 0x00C0 (0x00C0 - 0x0000)
struct FRecommendTextEntry final
{
public:
	class FText                                   Titles[0x3];                                       // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Descriptions[0x3];                                 // 0x0048(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   NoneTitle;                                         // 0x0090(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   NoneDesc;                                          // 0x00A8(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecommendTextEntry) == 0x000008, "Wrong alignment on FRecommendTextEntry");
static_assert(sizeof(FRecommendTextEntry) == 0x0000C0, "Wrong size on FRecommendTextEntry");
static_assert(offsetof(FRecommendTextEntry, Titles) == 0x000000, "Member 'FRecommendTextEntry::Titles' has a wrong offset!");
static_assert(offsetof(FRecommendTextEntry, Descriptions) == 0x000048, "Member 'FRecommendTextEntry::Descriptions' has a wrong offset!");
static_assert(offsetof(FRecommendTextEntry, NoneTitle) == 0x000090, "Member 'FRecommendTextEntry::NoneTitle' has a wrong offset!");
static_assert(offsetof(FRecommendTextEntry, NoneDesc) == 0x0000A8, "Member 'FRecommendTextEntry::NoneDesc' has a wrong offset!");

// ScriptStruct QRSL.QRSLDialogueData
// 0x0140 (0x0140 - 0x0000)
struct FQRSLDialogueData final
{
public:
	TMap<class FName, int32>                      Intergers;                                         // 0x0000(0x0050)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      Floats;                                            // 0x0050(0x0050)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
	TMap<class FName, class FName>                Names;                                             // 0x00A0(0x0050)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
	TSet<class FName>                             TrueBools;                                         // 0x00F0(0x0050)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLDialogueData) == 0x000008, "Wrong alignment on FQRSLDialogueData");
static_assert(sizeof(FQRSLDialogueData) == 0x000140, "Wrong size on FQRSLDialogueData");
static_assert(offsetof(FQRSLDialogueData, Intergers) == 0x000000, "Member 'FQRSLDialogueData::Intergers' has a wrong offset!");
static_assert(offsetof(FQRSLDialogueData, Floats) == 0x000050, "Member 'FQRSLDialogueData::Floats' has a wrong offset!");
static_assert(offsetof(FQRSLDialogueData, Names) == 0x0000A0, "Member 'FQRSLDialogueData::Names' has a wrong offset!");
static_assert(offsetof(FQRSLDialogueData, TrueBools) == 0x0000F0, "Member 'FQRSLDialogueData::TrueBools' has a wrong offset!");

// ScriptStruct QRSL.QRSLWorkGuideSymbolAddData
// 0x0018 (0x0018 - 0x0000)
struct FQRSLWorkGuideSymbolAddData final
{
public:
	class FName                                   SymbolID;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Uid;                                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLWorkGuideSymbolAddData) == 0x000004, "Wrong alignment on FQRSLWorkGuideSymbolAddData");
static_assert(sizeof(FQRSLWorkGuideSymbolAddData) == 0x000018, "Wrong size on FQRSLWorkGuideSymbolAddData");
static_assert(offsetof(FQRSLWorkGuideSymbolAddData, SymbolID) == 0x000000, "Member 'FQRSLWorkGuideSymbolAddData::SymbolID' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSymbolAddData, Uid) == 0x000008, "Member 'FQRSLWorkGuideSymbolAddData::Uid' has a wrong offset!");

// ScriptStruct QRSL.MainCategorySettingInfo
// 0x0098 (0x0098 - 0x0000)
struct FMainCategorySettingInfo final
{
public:
	struct FVector                                CameraLocation;                                    // 0x0000(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CameraRotator;                                     // 0x000C(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bHidePreviewActor : 1;                             // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHidePreviewWidget : 1;                            // 0x0018(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHideWeapon : 1;                                   // 0x0018(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHideCurrency : 1;                                 // 0x0018(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDisableCaptureMove : 1;                           // 0x0018(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1D1A[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         HiddenTags;                                        // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FString>                         ShowTags;                                          // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   BlockID;                                           // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ERoleCharacterType, struct FTransform>   CharacterTypeCameraTransform;                      // 0x0048(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMainCategorySettingInfo) == 0x000008, "Wrong alignment on FMainCategorySettingInfo");
static_assert(sizeof(FMainCategorySettingInfo) == 0x000098, "Wrong size on FMainCategorySettingInfo");
static_assert(offsetof(FMainCategorySettingInfo, CameraLocation) == 0x000000, "Member 'FMainCategorySettingInfo::CameraLocation' has a wrong offset!");
static_assert(offsetof(FMainCategorySettingInfo, CameraRotator) == 0x00000C, "Member 'FMainCategorySettingInfo::CameraRotator' has a wrong offset!");
static_assert(offsetof(FMainCategorySettingInfo, HiddenTags) == 0x000020, "Member 'FMainCategorySettingInfo::HiddenTags' has a wrong offset!");
static_assert(offsetof(FMainCategorySettingInfo, ShowTags) == 0x000030, "Member 'FMainCategorySettingInfo::ShowTags' has a wrong offset!");
static_assert(offsetof(FMainCategorySettingInfo, BlockID) == 0x000040, "Member 'FMainCategorySettingInfo::BlockID' has a wrong offset!");
static_assert(offsetof(FMainCategorySettingInfo, CharacterTypeCameraTransform) == 0x000048, "Member 'FMainCategorySettingInfo::CharacterTypeCameraTransform' has a wrong offset!");

// ScriptStruct QRSL.LotteryDescriptionItemInfo
// 0x0018 (0x0018 - 0x0000)
struct FLotteryDescriptionItemInfo final
{
public:
	class FName                                   ContainerWidgetName;                               // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ItemIdList;                                        // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLotteryDescriptionItemInfo) == 0x000008, "Wrong alignment on FLotteryDescriptionItemInfo");
static_assert(sizeof(FLotteryDescriptionItemInfo) == 0x000018, "Wrong size on FLotteryDescriptionItemInfo");
static_assert(offsetof(FLotteryDescriptionItemInfo, ContainerWidgetName) == 0x000000, "Member 'FLotteryDescriptionItemInfo::ContainerWidgetName' has a wrong offset!");
static_assert(offsetof(FLotteryDescriptionItemInfo, ItemIdList) == 0x000008, "Member 'FLotteryDescriptionItemInfo::ItemIdList' has a wrong offset!");

// ScriptStruct QRSL.YunTaiMarticalRoundDataInfo
// 0x00A0 (0x00A0 - 0x0000)
struct FYunTaiMarticalRoundDataInfo final
{
public:
	int64                                         QuestIndex;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            NpcMontage;                                        // 0x0008(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ERoleCharacterType, TSoftObjectPtr<class UAnimMontage>> MotionMontageMap;                                  // 0x0030(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<int32>                                 QTEAnswerList;                                     // 0x0080(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FHottaDropItemInfo>             RoundRewardItems;                                  // 0x0090(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYunTaiMarticalRoundDataInfo) == 0x000008, "Wrong alignment on FYunTaiMarticalRoundDataInfo");
static_assert(sizeof(FYunTaiMarticalRoundDataInfo) == 0x0000A0, "Wrong size on FYunTaiMarticalRoundDataInfo");
static_assert(offsetof(FYunTaiMarticalRoundDataInfo, QuestIndex) == 0x000000, "Member 'FYunTaiMarticalRoundDataInfo::QuestIndex' has a wrong offset!");
static_assert(offsetof(FYunTaiMarticalRoundDataInfo, NpcMontage) == 0x000008, "Member 'FYunTaiMarticalRoundDataInfo::NpcMontage' has a wrong offset!");
static_assert(offsetof(FYunTaiMarticalRoundDataInfo, MotionMontageMap) == 0x000030, "Member 'FYunTaiMarticalRoundDataInfo::MotionMontageMap' has a wrong offset!");
static_assert(offsetof(FYunTaiMarticalRoundDataInfo, QTEAnswerList) == 0x000080, "Member 'FYunTaiMarticalRoundDataInfo::QTEAnswerList' has a wrong offset!");
static_assert(offsetof(FYunTaiMarticalRoundDataInfo, RoundRewardItems) == 0x000090, "Member 'FYunTaiMarticalRoundDataInfo::RoundRewardItems' has a wrong offset!");

// ScriptStruct QRSL.YunTaiMarticalRoundDataRow
// 0x0010 (0x0018 - 0x0008)
struct FYunTaiMarticalRoundDataRow final : public FTableRowBase
{
public:
	TArray<struct FYunTaiMarticalRoundDataInfo>   RoundDataInfoList;                                 // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYunTaiMarticalRoundDataRow) == 0x000008, "Wrong alignment on FYunTaiMarticalRoundDataRow");
static_assert(sizeof(FYunTaiMarticalRoundDataRow) == 0x000018, "Wrong size on FYunTaiMarticalRoundDataRow");
static_assert(offsetof(FYunTaiMarticalRoundDataRow, RoundDataInfoList) == 0x000008, "Member 'FYunTaiMarticalRoundDataRow::RoundDataInfoList' has a wrong offset!");

// ScriptStruct QRSL.ActivityClone_PlayerInfo
// 0x0040 (0x0040 - 0x0000)
struct FActivityClone_PlayerInfo final
{
public:
	int64                                         PlayerID;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AvatarID;                                          // 0x000C(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AvatarFrameID;                                     // 0x0014(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D1B[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerName;                                        // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsOnline : 1;                                     // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EActivityClone_TeamNo                         TeamNo;                                            // 0x0031(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActivityClonePlayerState                     PlayerState;                                       // 0x0032(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCharacterIsDead;                                  // 0x0033(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerRank;                                        // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bSettled : 1;                                      // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1D1C[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActivityClone_PlayerInfo) == 0x000008, "Wrong alignment on FActivityClone_PlayerInfo");
static_assert(sizeof(FActivityClone_PlayerInfo) == 0x000040, "Wrong size on FActivityClone_PlayerInfo");
static_assert(offsetof(FActivityClone_PlayerInfo, PlayerID) == 0x000000, "Member 'FActivityClone_PlayerInfo::PlayerID' has a wrong offset!");
static_assert(offsetof(FActivityClone_PlayerInfo, Score) == 0x000008, "Member 'FActivityClone_PlayerInfo::Score' has a wrong offset!");
static_assert(offsetof(FActivityClone_PlayerInfo, AvatarID) == 0x00000C, "Member 'FActivityClone_PlayerInfo::AvatarID' has a wrong offset!");
static_assert(offsetof(FActivityClone_PlayerInfo, AvatarFrameID) == 0x000014, "Member 'FActivityClone_PlayerInfo::AvatarFrameID' has a wrong offset!");
static_assert(offsetof(FActivityClone_PlayerInfo, PlayerName) == 0x000020, "Member 'FActivityClone_PlayerInfo::PlayerName' has a wrong offset!");
static_assert(offsetof(FActivityClone_PlayerInfo, TeamNo) == 0x000031, "Member 'FActivityClone_PlayerInfo::TeamNo' has a wrong offset!");
static_assert(offsetof(FActivityClone_PlayerInfo, PlayerState) == 0x000032, "Member 'FActivityClone_PlayerInfo::PlayerState' has a wrong offset!");
static_assert(offsetof(FActivityClone_PlayerInfo, bCharacterIsDead) == 0x000033, "Member 'FActivityClone_PlayerInfo::bCharacterIsDead' has a wrong offset!");
static_assert(offsetof(FActivityClone_PlayerInfo, PlayerRank) == 0x000034, "Member 'FActivityClone_PlayerInfo::PlayerRank' has a wrong offset!");

// ScriptStruct QRSL.8V8OfferJobNode
// 0x0098 (0x0098 - 0x0000)
struct FEightV8OfferJobNode final
{
public:
	class FName                                   JobId;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Desc;                                              // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	E8V8JobType                                   CusType;                                           // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D1D[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0040(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinNum;                                            // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNum;                                            // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   JobBuff;                                           // 0x0070(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEightV8OfferJobNode) == 0x000008, "Wrong alignment on FEightV8OfferJobNode");
static_assert(sizeof(FEightV8OfferJobNode) == 0x000098, "Wrong size on FEightV8OfferJobNode");
static_assert(offsetof(FEightV8OfferJobNode, JobId) == 0x000000, "Member 'FEightV8OfferJobNode::JobId' has a wrong offset!");
static_assert(offsetof(FEightV8OfferJobNode, Name) == 0x000008, "Member 'FEightV8OfferJobNode::Name' has a wrong offset!");
static_assert(offsetof(FEightV8OfferJobNode, Desc) == 0x000020, "Member 'FEightV8OfferJobNode::Desc' has a wrong offset!");
static_assert(offsetof(FEightV8OfferJobNode, Weight) == 0x000038, "Member 'FEightV8OfferJobNode::Weight' has a wrong offset!");
static_assert(offsetof(FEightV8OfferJobNode, CusType) == 0x00003C, "Member 'FEightV8OfferJobNode::CusType' has a wrong offset!");
static_assert(offsetof(FEightV8OfferJobNode, Icon) == 0x000040, "Member 'FEightV8OfferJobNode::Icon' has a wrong offset!");
static_assert(offsetof(FEightV8OfferJobNode, MinNum) == 0x000068, "Member 'FEightV8OfferJobNode::MinNum' has a wrong offset!");
static_assert(offsetof(FEightV8OfferJobNode, MaxNum) == 0x00006C, "Member 'FEightV8OfferJobNode::MaxNum' has a wrong offset!");
static_assert(offsetof(FEightV8OfferJobNode, JobBuff) == 0x000070, "Member 'FEightV8OfferJobNode::JobBuff' has a wrong offset!");

// ScriptStruct QRSL.MultiSoloLeagueStageInfo
// 0x000C (0x000C - 0x0000)
struct FMultiSoloLeagueStageInfo final
{
public:
	ESoloLeagueStage                              CurStage;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D1E[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ElapseSeconds;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESoloLeagueStage                              NextStage;                                         // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSyncRoomInfo;                                   // 0x0009(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D1F[0x2];                                     // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMultiSoloLeagueStageInfo) == 0x000004, "Wrong alignment on FMultiSoloLeagueStageInfo");
static_assert(sizeof(FMultiSoloLeagueStageInfo) == 0x00000C, "Wrong size on FMultiSoloLeagueStageInfo");
static_assert(offsetof(FMultiSoloLeagueStageInfo, CurStage) == 0x000000, "Member 'FMultiSoloLeagueStageInfo::CurStage' has a wrong offset!");
static_assert(offsetof(FMultiSoloLeagueStageInfo, ElapseSeconds) == 0x000004, "Member 'FMultiSoloLeagueStageInfo::ElapseSeconds' has a wrong offset!");
static_assert(offsetof(FMultiSoloLeagueStageInfo, NextStage) == 0x000008, "Member 'FMultiSoloLeagueStageInfo::NextStage' has a wrong offset!");
static_assert(offsetof(FMultiSoloLeagueStageInfo, bIsSyncRoomInfo) == 0x000009, "Member 'FMultiSoloLeagueStageInfo::bIsSyncRoomInfo' has a wrong offset!");

// ScriptStruct QRSL.UseShortcutItemConfig
// 0x0110 (0x0110 - 0x0000)
struct FUseShortcutItemConfig final
{
public:
	float                                         UseItemTime;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedMultiplier;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInteractingInfo                       InteractInfo;                                      // 0x0008(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   MontageId;                                         // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ECharacterSex, TSoftObjectPtr<class UAnimMontage>> UseItemMontage;                                    // 0x0088(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	EShortcutItemType                             ShortcutItemType;                                  // 0x00D8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D20[0x37];                                    // 0x00D9(0x0037)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUseShortcutItemConfig) == 0x000008, "Wrong alignment on FUseShortcutItemConfig");
static_assert(sizeof(FUseShortcutItemConfig) == 0x000110, "Wrong size on FUseShortcutItemConfig");
static_assert(offsetof(FUseShortcutItemConfig, UseItemTime) == 0x000000, "Member 'FUseShortcutItemConfig::UseItemTime' has a wrong offset!");
static_assert(offsetof(FUseShortcutItemConfig, SpeedMultiplier) == 0x000004, "Member 'FUseShortcutItemConfig::SpeedMultiplier' has a wrong offset!");
static_assert(offsetof(FUseShortcutItemConfig, InteractInfo) == 0x000008, "Member 'FUseShortcutItemConfig::InteractInfo' has a wrong offset!");
static_assert(offsetof(FUseShortcutItemConfig, MontageId) == 0x000080, "Member 'FUseShortcutItemConfig::MontageId' has a wrong offset!");
static_assert(offsetof(FUseShortcutItemConfig, UseItemMontage) == 0x000088, "Member 'FUseShortcutItemConfig::UseItemMontage' has a wrong offset!");
static_assert(offsetof(FUseShortcutItemConfig, ShortcutItemType) == 0x0000D8, "Member 'FUseShortcutItemConfig::ShortcutItemType' has a wrong offset!");

// ScriptStruct QRSL.MowingPerfectCondition
// 0x0030 (0x0030 - 0x0000)
struct FMowingPerfectCondition final
{
public:
	class FText                                   Desc;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EMowingCondition                              Type;                                              // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D21[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Progress;                                          // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMowingCondState                              State;                                             // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D22[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMowingPerfectCondition) == 0x000008, "Wrong alignment on FMowingPerfectCondition");
static_assert(sizeof(FMowingPerfectCondition) == 0x000030, "Wrong size on FMowingPerfectCondition");
static_assert(offsetof(FMowingPerfectCondition, Desc) == 0x000000, "Member 'FMowingPerfectCondition::Desc' has a wrong offset!");
static_assert(offsetof(FMowingPerfectCondition, Type) == 0x000018, "Member 'FMowingPerfectCondition::Type' has a wrong offset!");
static_assert(offsetof(FMowingPerfectCondition, Value) == 0x00001C, "Member 'FMowingPerfectCondition::Value' has a wrong offset!");
static_assert(offsetof(FMowingPerfectCondition, Score) == 0x000020, "Member 'FMowingPerfectCondition::Score' has a wrong offset!");
static_assert(offsetof(FMowingPerfectCondition, Progress) == 0x000024, "Member 'FMowingPerfectCondition::Progress' has a wrong offset!");
static_assert(offsetof(FMowingPerfectCondition, State) == 0x000028, "Member 'FMowingPerfectCondition::State' has a wrong offset!");

// ScriptStruct QRSL.MowingPlayerInfo
// 0x0078 (0x0078 - 0x0000)
struct FMowingPlayerInfo final
{
public:
	int64                                         PlayerID;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECampDefinition                               PlayerCamp;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	E8V8PlayerState                               PlayerState;                                       // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D23[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReliveCount;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaveIdx;                                           // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProgressVar;                                       // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFinish;                                          // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D24[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMowingPerfectCondition>        PerConditions;                                     // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         FinishSeconds;                                     // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeScore;                                         // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CondScore;                                         // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReliveScore;                                       // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AwardCount;                                        // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D25[0x1C];                                    // 0x005C(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMowingPlayerInfo) == 0x000008, "Wrong alignment on FMowingPlayerInfo");
static_assert(sizeof(FMowingPlayerInfo) == 0x000078, "Wrong size on FMowingPlayerInfo");
static_assert(offsetof(FMowingPlayerInfo, PlayerID) == 0x000000, "Member 'FMowingPlayerInfo::PlayerID' has a wrong offset!");
static_assert(offsetof(FMowingPlayerInfo, PlayerCamp) == 0x000008, "Member 'FMowingPlayerInfo::PlayerCamp' has a wrong offset!");
static_assert(offsetof(FMowingPlayerInfo, PlayerState) == 0x000009, "Member 'FMowingPlayerInfo::PlayerState' has a wrong offset!");
static_assert(offsetof(FMowingPlayerInfo, PlayerName) == 0x000010, "Member 'FMowingPlayerInfo::PlayerName' has a wrong offset!");
static_assert(offsetof(FMowingPlayerInfo, ReliveCount) == 0x000020, "Member 'FMowingPlayerInfo::ReliveCount' has a wrong offset!");
static_assert(offsetof(FMowingPlayerInfo, WaveIdx) == 0x000024, "Member 'FMowingPlayerInfo::WaveIdx' has a wrong offset!");
static_assert(offsetof(FMowingPlayerInfo, ProgressVar) == 0x000028, "Member 'FMowingPlayerInfo::ProgressVar' has a wrong offset!");
static_assert(offsetof(FMowingPlayerInfo, Score) == 0x00002C, "Member 'FMowingPlayerInfo::Score' has a wrong offset!");
static_assert(offsetof(FMowingPlayerInfo, IsFinish) == 0x000030, "Member 'FMowingPlayerInfo::IsFinish' has a wrong offset!");
static_assert(offsetof(FMowingPlayerInfo, PerConditions) == 0x000038, "Member 'FMowingPlayerInfo::PerConditions' has a wrong offset!");
static_assert(offsetof(FMowingPlayerInfo, FinishSeconds) == 0x000048, "Member 'FMowingPlayerInfo::FinishSeconds' has a wrong offset!");
static_assert(offsetof(FMowingPlayerInfo, TimeScore) == 0x00004C, "Member 'FMowingPlayerInfo::TimeScore' has a wrong offset!");
static_assert(offsetof(FMowingPlayerInfo, CondScore) == 0x000050, "Member 'FMowingPlayerInfo::CondScore' has a wrong offset!");
static_assert(offsetof(FMowingPlayerInfo, ReliveScore) == 0x000054, "Member 'FMowingPlayerInfo::ReliveScore' has a wrong offset!");
static_assert(offsetof(FMowingPlayerInfo, AwardCount) == 0x000058, "Member 'FMowingPlayerInfo::AwardCount' has a wrong offset!");

// ScriptStruct QRSL.SquatJumpPlayerInfo
// 0x0050 (0x0050 - 0x0000)
struct FSquatJumpPlayerInfo final
{
public:
	int64                                         PlayerID;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESquatJumpPlayerState                         PlayerState;                                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D26[0x47];                                    // 0x0009(0x0047)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSquatJumpPlayerInfo) == 0x000008, "Wrong alignment on FSquatJumpPlayerInfo");
static_assert(sizeof(FSquatJumpPlayerInfo) == 0x000050, "Wrong size on FSquatJumpPlayerInfo");
static_assert(offsetof(FSquatJumpPlayerInfo, PlayerID) == 0x000000, "Member 'FSquatJumpPlayerInfo::PlayerID' has a wrong offset!");
static_assert(offsetof(FSquatJumpPlayerInfo, PlayerState) == 0x000008, "Member 'FSquatJumpPlayerInfo::PlayerState' has a wrong offset!");

// ScriptStruct QRSL.QRSLPreheatTaskScoreAward
// 0x0050 (0x0050 - 0x0000)
struct FQRSLPreheatTaskScoreAward final
{
public:
	int32                                         Score;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DropGroupID;                                       // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D27[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PuzzleArray;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   PuzzleTips;                                        // 0x0020(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   AwardedPuzzleTips;                                 // 0x0038(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLPreheatTaskScoreAward) == 0x000008, "Wrong alignment on FQRSLPreheatTaskScoreAward");
static_assert(sizeof(FQRSLPreheatTaskScoreAward) == 0x000050, "Wrong size on FQRSLPreheatTaskScoreAward");
static_assert(offsetof(FQRSLPreheatTaskScoreAward, Score) == 0x000000, "Member 'FQRSLPreheatTaskScoreAward::Score' has a wrong offset!");
static_assert(offsetof(FQRSLPreheatTaskScoreAward, DropGroupID) == 0x000004, "Member 'FQRSLPreheatTaskScoreAward::DropGroupID' has a wrong offset!");
static_assert(offsetof(FQRSLPreheatTaskScoreAward, PuzzleArray) == 0x000010, "Member 'FQRSLPreheatTaskScoreAward::PuzzleArray' has a wrong offset!");
static_assert(offsetof(FQRSLPreheatTaskScoreAward, PuzzleTips) == 0x000020, "Member 'FQRSLPreheatTaskScoreAward::PuzzleTips' has a wrong offset!");
static_assert(offsetof(FQRSLPreheatTaskScoreAward, AwardedPuzzleTips) == 0x000038, "Member 'FQRSLPreheatTaskScoreAward::AwardedPuzzleTips' has a wrong offset!");

// ScriptStruct QRSL.QRSLHackerTerminalAppVersionConfig
// 0x0110 (0x0118 - 0x0008)
struct FQRSLHackerTerminalAppVersionConfig final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0008(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      ActorIconMaterial;                                 // 0x0030(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   FormClass;                                         // 0x0058(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequireDeviceMinVersion;                           // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQRSLHackerTerminalAppAutoStartupType         AutoStartupType;                                   // 0x0084(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D28[0x3];                                     // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           NotConsumePowerTags;                               // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         PowerInNormalMode;                                 // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowDozeMode;                                    // 0x009C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D29[0x3];                                     // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PowerInDozeMode;                                   // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowNoSignalMode;                                // 0x00A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D2A[0x3];                                     // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UseMemorySize;                                     // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D2B[0x4];                                     // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   VersionDescriptor;                                 // 0x00B0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   UpgradeDescriptor;                                 // 0x00C8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FHottaCostItem>                 CostItemArray;                                     // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   AppFunctionMarkClass;                              // 0x00F0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLHackerTerminalAppVersionConfig) == 0x000008, "Wrong alignment on FQRSLHackerTerminalAppVersionConfig");
static_assert(sizeof(FQRSLHackerTerminalAppVersionConfig) == 0x000118, "Wrong size on FQRSLHackerTerminalAppVersionConfig");
static_assert(offsetof(FQRSLHackerTerminalAppVersionConfig, Icon) == 0x000008, "Member 'FQRSLHackerTerminalAppVersionConfig::Icon' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalAppVersionConfig, ActorIconMaterial) == 0x000030, "Member 'FQRSLHackerTerminalAppVersionConfig::ActorIconMaterial' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalAppVersionConfig, FormClass) == 0x000058, "Member 'FQRSLHackerTerminalAppVersionConfig::FormClass' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalAppVersionConfig, RequireDeviceMinVersion) == 0x000080, "Member 'FQRSLHackerTerminalAppVersionConfig::RequireDeviceMinVersion' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalAppVersionConfig, AutoStartupType) == 0x000084, "Member 'FQRSLHackerTerminalAppVersionConfig::AutoStartupType' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalAppVersionConfig, NotConsumePowerTags) == 0x000088, "Member 'FQRSLHackerTerminalAppVersionConfig::NotConsumePowerTags' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalAppVersionConfig, PowerInNormalMode) == 0x000098, "Member 'FQRSLHackerTerminalAppVersionConfig::PowerInNormalMode' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalAppVersionConfig, bAllowDozeMode) == 0x00009C, "Member 'FQRSLHackerTerminalAppVersionConfig::bAllowDozeMode' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalAppVersionConfig, PowerInDozeMode) == 0x0000A0, "Member 'FQRSLHackerTerminalAppVersionConfig::PowerInDozeMode' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalAppVersionConfig, bAllowNoSignalMode) == 0x0000A4, "Member 'FQRSLHackerTerminalAppVersionConfig::bAllowNoSignalMode' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalAppVersionConfig, UseMemorySize) == 0x0000A8, "Member 'FQRSLHackerTerminalAppVersionConfig::UseMemorySize' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalAppVersionConfig, VersionDescriptor) == 0x0000B0, "Member 'FQRSLHackerTerminalAppVersionConfig::VersionDescriptor' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalAppVersionConfig, UpgradeDescriptor) == 0x0000C8, "Member 'FQRSLHackerTerminalAppVersionConfig::UpgradeDescriptor' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalAppVersionConfig, CostItemArray) == 0x0000E0, "Member 'FQRSLHackerTerminalAppVersionConfig::CostItemArray' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalAppVersionConfig, AppFunctionMarkClass) == 0x0000F0, "Member 'FQRSLHackerTerminalAppVersionConfig::AppFunctionMarkClass' has a wrong offset!");

// ScriptStruct QRSL.QRSLHackerTerminalAppConfig
// 0x0080 (0x0088 - 0x0008)
struct FQRSLHackerTerminalAppConfig final : public FTableRowBase
{
public:
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         MaxVersionNumber;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D2C[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   AppClass;                                          // 0x0028(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSystemApp;                                        // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoUnlock;                                       // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D2D[0x6];                                     // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Category;                                          // 0x0058(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Developer;                                         // 0x0070(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLHackerTerminalAppConfig) == 0x000008, "Wrong alignment on FQRSLHackerTerminalAppConfig");
static_assert(sizeof(FQRSLHackerTerminalAppConfig) == 0x000088, "Wrong size on FQRSLHackerTerminalAppConfig");
static_assert(offsetof(FQRSLHackerTerminalAppConfig, DisplayName) == 0x000008, "Member 'FQRSLHackerTerminalAppConfig::DisplayName' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalAppConfig, MaxVersionNumber) == 0x000020, "Member 'FQRSLHackerTerminalAppConfig::MaxVersionNumber' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalAppConfig, AppClass) == 0x000028, "Member 'FQRSLHackerTerminalAppConfig::AppClass' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalAppConfig, bSystemApp) == 0x000050, "Member 'FQRSLHackerTerminalAppConfig::bSystemApp' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalAppConfig, bAutoUnlock) == 0x000051, "Member 'FQRSLHackerTerminalAppConfig::bAutoUnlock' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalAppConfig, Category) == 0x000058, "Member 'FQRSLHackerTerminalAppConfig::Category' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalAppConfig, Developer) == 0x000070, "Member 'FQRSLHackerTerminalAppConfig::Developer' has a wrong offset!");

// ScriptStruct QRSL.PersonalityData
// 0x0028 (0x0030 - 0x0008)
struct FPersonalityData final : public FTableRowBase
{
public:
	EPersonalityType                              PersonalityType;                                   // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D2E[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   PersonalityText;                                   // 0x0010(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         ShownScore;                                        // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMainPersonality;                                 // 0x002C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D2F[0x3];                                     // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPersonalityData) == 0x000008, "Wrong alignment on FPersonalityData");
static_assert(sizeof(FPersonalityData) == 0x000030, "Wrong size on FPersonalityData");
static_assert(offsetof(FPersonalityData, PersonalityType) == 0x000008, "Member 'FPersonalityData::PersonalityType' has a wrong offset!");
static_assert(offsetof(FPersonalityData, PersonalityText) == 0x000010, "Member 'FPersonalityData::PersonalityText' has a wrong offset!");
static_assert(offsetof(FPersonalityData, ShownScore) == 0x000028, "Member 'FPersonalityData::ShownScore' has a wrong offset!");
static_assert(offsetof(FPersonalityData, IsMainPersonality) == 0x00002C, "Member 'FPersonalityData::IsMainPersonality' has a wrong offset!");

// ScriptStruct QRSL.UpdateContent
// 0x0020 (0x0028 - 0x0008)
struct FUpdateContent final : public FTableRowBase
{
public:
	class FString                                 UpdateTitle;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UpdateContent;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUpdateContent) == 0x000008, "Wrong alignment on FUpdateContent");
static_assert(sizeof(FUpdateContent) == 0x000028, "Wrong size on FUpdateContent");
static_assert(offsetof(FUpdateContent, UpdateTitle) == 0x000008, "Member 'FUpdateContent::UpdateTitle' has a wrong offset!");
static_assert(offsetof(FUpdateContent, UpdateContent) == 0x000018, "Member 'FUpdateContent::UpdateContent' has a wrong offset!");

// ScriptStruct QRSL.UpdateData
// 0x0078 (0x0080 - 0x0008)
struct FUpdateData final : public FTableRowBase
{
public:
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChannelTag;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceUpdate;                                      // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D30[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UpdateVersion;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UpdateUrl;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayBeginTime;                                  // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayEndedTime;                                  // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FUpdateContent>                 Contents;                                          // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUpdateData) == 0x000008, "Wrong alignment on FUpdateData");
static_assert(sizeof(FUpdateData) == 0x000080, "Wrong size on FUpdateData");
static_assert(offsetof(FUpdateData, Name) == 0x000008, "Member 'FUpdateData::Name' has a wrong offset!");
static_assert(offsetof(FUpdateData, ChannelTag) == 0x000018, "Member 'FUpdateData::ChannelTag' has a wrong offset!");
static_assert(offsetof(FUpdateData, bForceUpdate) == 0x000028, "Member 'FUpdateData::bForceUpdate' has a wrong offset!");
static_assert(offsetof(FUpdateData, UpdateVersion) == 0x000030, "Member 'FUpdateData::UpdateVersion' has a wrong offset!");
static_assert(offsetof(FUpdateData, UpdateUrl) == 0x000040, "Member 'FUpdateData::UpdateUrl' has a wrong offset!");
static_assert(offsetof(FUpdateData, DisplayBeginTime) == 0x000050, "Member 'FUpdateData::DisplayBeginTime' has a wrong offset!");
static_assert(offsetof(FUpdateData, DisplayEndedTime) == 0x000060, "Member 'FUpdateData::DisplayEndedTime' has a wrong offset!");
static_assert(offsetof(FUpdateData, Contents) == 0x000070, "Member 'FUpdateData::Contents' has a wrong offset!");

// ScriptStruct QRSL.QRSLCalendarStageConfig
// 0x00D0 (0x00D0 - 0x0000)
struct FQRSLCalendarStageConfig final
{
public:
	class FName                                   StageID;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   StageClass;                                        // 0x0008(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             SpawnStageTransform;                               // 0x0030(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   BornPointClass;                                    // 0x0060(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D31[0x8];                                     // 0x0088(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BornPointTransform;                                // 0x0090(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D32[0xC];                                     // 0x00C4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQRSLCalendarStageConfig) == 0x000010, "Wrong alignment on FQRSLCalendarStageConfig");
static_assert(sizeof(FQRSLCalendarStageConfig) == 0x0000D0, "Wrong size on FQRSLCalendarStageConfig");
static_assert(offsetof(FQRSLCalendarStageConfig, StageID) == 0x000000, "Member 'FQRSLCalendarStageConfig::StageID' has a wrong offset!");
static_assert(offsetof(FQRSLCalendarStageConfig, StageClass) == 0x000008, "Member 'FQRSLCalendarStageConfig::StageClass' has a wrong offset!");
static_assert(offsetof(FQRSLCalendarStageConfig, SpawnStageTransform) == 0x000030, "Member 'FQRSLCalendarStageConfig::SpawnStageTransform' has a wrong offset!");
static_assert(offsetof(FQRSLCalendarStageConfig, BornPointClass) == 0x000060, "Member 'FQRSLCalendarStageConfig::BornPointClass' has a wrong offset!");
static_assert(offsetof(FQRSLCalendarStageConfig, BornPointTransform) == 0x000090, "Member 'FQRSLCalendarStageConfig::BornPointTransform' has a wrong offset!");
static_assert(offsetof(FQRSLCalendarStageConfig, HalfHeight) == 0x0000C0, "Member 'FQRSLCalendarStageConfig::HalfHeight' has a wrong offset!");

// ScriptStruct QRSL.WeaponNode
// 0x0020 (0x0020 - 0x0000)
struct FWeaponNode final
{
public:
	class FText                                   WeaponName;                                        // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   BuffID;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponNode) == 0x000008, "Wrong alignment on FWeaponNode");
static_assert(sizeof(FWeaponNode) == 0x000020, "Wrong size on FWeaponNode");
static_assert(offsetof(FWeaponNode, WeaponName) == 0x000000, "Member 'FWeaponNode::WeaponName' has a wrong offset!");
static_assert(offsetof(FWeaponNode, BuffID) == 0x000018, "Member 'FWeaponNode::BuffID' has a wrong offset!");

// ScriptStruct QRSL.WSMonsterPosInfo
// 0x0010 (0x0010 - 0x0000)
struct FWSMonsterPosInfo final
{
public:
	TArray<struct FTransform>                     MonsterTransforms;                                 // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWSMonsterPosInfo) == 0x000008, "Wrong alignment on FWSMonsterPosInfo");
static_assert(sizeof(FWSMonsterPosInfo) == 0x000010, "Wrong size on FWSMonsterPosInfo");
static_assert(offsetof(FWSMonsterPosInfo, MonsterTransforms) == 0x000000, "Member 'FWSMonsterPosInfo::MonsterTransforms' has a wrong offset!");

// ScriptStruct QRSL.HottaScriptObjectModel
// 0x0058 (0x0058 - 0x0000)
struct FHottaScriptObjectModel final
{
public:
	int32                                         ExcuteIndex;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHottaScriptObjectCmdType                     ScriptObjectCmdType;                               // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D33[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FunctionName;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FunctionParams;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsWhile;                                           // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D34[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Times;                                             // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D35[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ClassName;                                         // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHottaScriptCmdClassType                      EClass;                                            // 0x0048(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D36[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UObject>                 WeakInvoker;                                       // 0x004C(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D37[0x4];                                     // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHottaScriptObjectModel) == 0x000008, "Wrong alignment on FHottaScriptObjectModel");
static_assert(sizeof(FHottaScriptObjectModel) == 0x000058, "Wrong size on FHottaScriptObjectModel");
static_assert(offsetof(FHottaScriptObjectModel, ExcuteIndex) == 0x000000, "Member 'FHottaScriptObjectModel::ExcuteIndex' has a wrong offset!");
static_assert(offsetof(FHottaScriptObjectModel, ScriptObjectCmdType) == 0x000004, "Member 'FHottaScriptObjectModel::ScriptObjectCmdType' has a wrong offset!");
static_assert(offsetof(FHottaScriptObjectModel, FunctionName) == 0x000008, "Member 'FHottaScriptObjectModel::FunctionName' has a wrong offset!");
static_assert(offsetof(FHottaScriptObjectModel, FunctionParams) == 0x000018, "Member 'FHottaScriptObjectModel::FunctionParams' has a wrong offset!");
static_assert(offsetof(FHottaScriptObjectModel, IsWhile) == 0x000028, "Member 'FHottaScriptObjectModel::IsWhile' has a wrong offset!");
static_assert(offsetof(FHottaScriptObjectModel, Times) == 0x00002C, "Member 'FHottaScriptObjectModel::Times' has a wrong offset!");
static_assert(offsetof(FHottaScriptObjectModel, DelayTime) == 0x000030, "Member 'FHottaScriptObjectModel::DelayTime' has a wrong offset!");
static_assert(offsetof(FHottaScriptObjectModel, ClassName) == 0x000038, "Member 'FHottaScriptObjectModel::ClassName' has a wrong offset!");
static_assert(offsetof(FHottaScriptObjectModel, EClass) == 0x000048, "Member 'FHottaScriptObjectModel::EClass' has a wrong offset!");
static_assert(offsetof(FHottaScriptObjectModel, WeakInvoker) == 0x00004C, "Member 'FHottaScriptObjectModel::WeakInvoker' has a wrong offset!");

// ScriptStruct QRSL.BeachVolleyballTeamInfo
// 0x0050 (0x0050 - 0x0000)
struct FBeachVolleyballTeamInfo final
{
public:
	EActivityClone_TeamNo                         TeamNo;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D38[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int64>                                 TeamPlayerIDTay;                                   // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         TeamPlayerNameTay;                                 // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           TeamPlayerAvatarIdTay;                             // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         TeamScore;                                         // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D39[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         LastServePlayerId;                                 // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamBatFrequency;                                  // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D3A[0x4];                                     // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBeachVolleyballTeamInfo) == 0x000008, "Wrong alignment on FBeachVolleyballTeamInfo");
static_assert(sizeof(FBeachVolleyballTeamInfo) == 0x000050, "Wrong size on FBeachVolleyballTeamInfo");
static_assert(offsetof(FBeachVolleyballTeamInfo, TeamNo) == 0x000000, "Member 'FBeachVolleyballTeamInfo::TeamNo' has a wrong offset!");
static_assert(offsetof(FBeachVolleyballTeamInfo, TeamPlayerIDTay) == 0x000008, "Member 'FBeachVolleyballTeamInfo::TeamPlayerIDTay' has a wrong offset!");
static_assert(offsetof(FBeachVolleyballTeamInfo, TeamPlayerNameTay) == 0x000018, "Member 'FBeachVolleyballTeamInfo::TeamPlayerNameTay' has a wrong offset!");
static_assert(offsetof(FBeachVolleyballTeamInfo, TeamPlayerAvatarIdTay) == 0x000028, "Member 'FBeachVolleyballTeamInfo::TeamPlayerAvatarIdTay' has a wrong offset!");
static_assert(offsetof(FBeachVolleyballTeamInfo, TeamScore) == 0x000038, "Member 'FBeachVolleyballTeamInfo::TeamScore' has a wrong offset!");
static_assert(offsetof(FBeachVolleyballTeamInfo, LastServePlayerId) == 0x000040, "Member 'FBeachVolleyballTeamInfo::LastServePlayerId' has a wrong offset!");
static_assert(offsetof(FBeachVolleyballTeamInfo, TeamBatFrequency) == 0x000048, "Member 'FBeachVolleyballTeamInfo::TeamBatFrequency' has a wrong offset!");

// ScriptStruct QRSL.BeachVolleyballServeInfo
// 0x0050 (0x0050 - 0x0000)
struct FBeachVolleyballServeInfo final
{
public:
	int64                                         ServePlayerId;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D3B[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BallPointOfFall;                                   // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EActivityClone_TeamNo                         ServeTeamNo;                                       // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bServed;                                           // 0x0041(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D3C[0xE];                                     // 0x0042(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBeachVolleyballServeInfo) == 0x000010, "Wrong alignment on FBeachVolleyballServeInfo");
static_assert(sizeof(FBeachVolleyballServeInfo) == 0x000050, "Wrong size on FBeachVolleyballServeInfo");
static_assert(offsetof(FBeachVolleyballServeInfo, ServePlayerId) == 0x000000, "Member 'FBeachVolleyballServeInfo::ServePlayerId' has a wrong offset!");
static_assert(offsetof(FBeachVolleyballServeInfo, BallPointOfFall) == 0x000010, "Member 'FBeachVolleyballServeInfo::BallPointOfFall' has a wrong offset!");
static_assert(offsetof(FBeachVolleyballServeInfo, ServeTeamNo) == 0x000040, "Member 'FBeachVolleyballServeInfo::ServeTeamNo' has a wrong offset!");
static_assert(offsetof(FBeachVolleyballServeInfo, bServed) == 0x000041, "Member 'FBeachVolleyballServeInfo::bServed' has a wrong offset!");

// ScriptStruct QRSL.BeachVolleyballGameInfo
// 0x0080 (0x0080 - 0x0000)
struct FBeachVolleyballGameInfo final
{
public:
	TArray<struct FBeachVolleyballTeamInfo>       TeamInfoTay;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	EBeachVolleyballGameStageType                 GameStage;                                         // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D3D[0xF];                                     // 0x0011(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBeachVolleyballServeInfo              ServeInfo;                                         // 0x0020(0x0050)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	int64                                         LastBatPlayerId;                                   // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGameOver;                                         // 0x0078(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D3E[0x7];                                     // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBeachVolleyballGameInfo) == 0x000010, "Wrong alignment on FBeachVolleyballGameInfo");
static_assert(sizeof(FBeachVolleyballGameInfo) == 0x000080, "Wrong size on FBeachVolleyballGameInfo");
static_assert(offsetof(FBeachVolleyballGameInfo, TeamInfoTay) == 0x000000, "Member 'FBeachVolleyballGameInfo::TeamInfoTay' has a wrong offset!");
static_assert(offsetof(FBeachVolleyballGameInfo, GameStage) == 0x000010, "Member 'FBeachVolleyballGameInfo::GameStage' has a wrong offset!");
static_assert(offsetof(FBeachVolleyballGameInfo, ServeInfo) == 0x000020, "Member 'FBeachVolleyballGameInfo::ServeInfo' has a wrong offset!");
static_assert(offsetof(FBeachVolleyballGameInfo, LastBatPlayerId) == 0x000070, "Member 'FBeachVolleyballGameInfo::LastBatPlayerId' has a wrong offset!");
static_assert(offsetof(FBeachVolleyballGameInfo, bGameOver) == 0x000078, "Member 'FBeachVolleyballGameInfo::bGameOver' has a wrong offset!");

// ScriptStruct QRSL.HackerTerminalSMSMessageInfoBaseData
// 0x0000 (0x0000 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x01) FHackerTerminalSMSMessageInfoBaseData
{
};
#pragma pack(pop)
static_assert(alignof(FHackerTerminalSMSMessageInfoBaseData) == 0x000001, "Wrong alignment on FHackerTerminalSMSMessageInfoBaseData");
static_assert(sizeof(FHackerTerminalSMSMessageInfoBaseData) == 0x000001, "Wrong size on FHackerTerminalSMSMessageInfoBaseData");

// ScriptStruct QRSL.HackerTerminalSMSMessageInfoReplyData
// 0x0020 (0x0020 - 0x0000)
struct FHackerTerminalSMSMessageInfoReplyData final : public FHackerTerminalSMSMessageInfoBaseData
{
public:
	class FText                                   MessageText;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   ReplyPointBranchID;                                // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHackerTerminalSMSMessageInfoReplyData) == 0x000008, "Wrong alignment on FHackerTerminalSMSMessageInfoReplyData");
static_assert(sizeof(FHackerTerminalSMSMessageInfoReplyData) == 0x000020, "Wrong size on FHackerTerminalSMSMessageInfoReplyData");
static_assert(offsetof(FHackerTerminalSMSMessageInfoReplyData, MessageText) == 0x000000, "Member 'FHackerTerminalSMSMessageInfoReplyData::MessageText' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSMessageInfoReplyData, ReplyPointBranchID) == 0x000018, "Member 'FHackerTerminalSMSMessageInfoReplyData::ReplyPointBranchID' has a wrong offset!");

// ScriptStruct QRSL.WidgetMoveSlotNode
// 0x0010 (0x0010 - 0x0000)
struct FWidgetMoveSlotNode final
{
public:
	class FName                                   WidgetID;                                          // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FPositionX;                                        // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FPositionY;                                        // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetMoveSlotNode) == 0x000004, "Wrong alignment on FWidgetMoveSlotNode");
static_assert(sizeof(FWidgetMoveSlotNode) == 0x000010, "Wrong size on FWidgetMoveSlotNode");
static_assert(offsetof(FWidgetMoveSlotNode, WidgetID) == 0x000000, "Member 'FWidgetMoveSlotNode::WidgetID' has a wrong offset!");
static_assert(offsetof(FWidgetMoveSlotNode, FPositionX) == 0x000008, "Member 'FWidgetMoveSlotNode::FPositionX' has a wrong offset!");
static_assert(offsetof(FWidgetMoveSlotNode, FPositionY) == 0x00000C, "Member 'FWidgetMoveSlotNode::FPositionY' has a wrong offset!");

// ScriptStruct QRSL.WidgetMoveSlotInfo
// 0x0010 (0x0010 - 0x0000)
struct FWidgetMoveSlotInfo final
{
public:
	TArray<struct FWidgetMoveSlotNode>            WidgetSlotInfo;                                    // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetMoveSlotInfo) == 0x000008, "Wrong alignment on FWidgetMoveSlotInfo");
static_assert(sizeof(FWidgetMoveSlotInfo) == 0x000010, "Wrong size on FWidgetMoveSlotInfo");
static_assert(offsetof(FWidgetMoveSlotInfo, WidgetSlotInfo) == 0x000000, "Member 'FWidgetMoveSlotInfo::WidgetSlotInfo' has a wrong offset!");

// ScriptStruct QRSL.BeachVolleyballPlayerInfo
// 0x0028 (0x0028 - 0x0000)
struct FBeachVolleyballPlayerInfo final
{
public:
	int64                                         PlayerID;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHitBall;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D3F[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitBallVector;                                     // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PassBallVector;                                    // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanSmashBall;                                     // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSubsidiarySmash;                                  // 0x0025(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D40[0x2];                                     // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBeachVolleyballPlayerInfo) == 0x000008, "Wrong alignment on FBeachVolleyballPlayerInfo");
static_assert(sizeof(FBeachVolleyballPlayerInfo) == 0x000028, "Wrong size on FBeachVolleyballPlayerInfo");
static_assert(offsetof(FBeachVolleyballPlayerInfo, PlayerID) == 0x000000, "Member 'FBeachVolleyballPlayerInfo::PlayerID' has a wrong offset!");
static_assert(offsetof(FBeachVolleyballPlayerInfo, bHitBall) == 0x000008, "Member 'FBeachVolleyballPlayerInfo::bHitBall' has a wrong offset!");
static_assert(offsetof(FBeachVolleyballPlayerInfo, HitBallVector) == 0x00000C, "Member 'FBeachVolleyballPlayerInfo::HitBallVector' has a wrong offset!");
static_assert(offsetof(FBeachVolleyballPlayerInfo, PassBallVector) == 0x000018, "Member 'FBeachVolleyballPlayerInfo::PassBallVector' has a wrong offset!");
static_assert(offsetof(FBeachVolleyballPlayerInfo, bCanSmashBall) == 0x000024, "Member 'FBeachVolleyballPlayerInfo::bCanSmashBall' has a wrong offset!");
static_assert(offsetof(FBeachVolleyballPlayerInfo, bSubsidiarySmash) == 0x000025, "Member 'FBeachVolleyballPlayerInfo::bSubsidiarySmash' has a wrong offset!");

// ScriptStruct QRSL.HorseRacingChooseInfo
// 0x0038 (0x0038 - 0x0000)
struct FHorseRacingChooseInfo final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int64>                                 RoleIdList;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  Runner;                                            // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ATargetPoint>            Destination;                                       // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FinalRank;                                         // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RacingDistance;                                    // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D41[0x8];                                     // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHorseRacingChooseInfo) == 0x000008, "Wrong alignment on FHorseRacingChooseInfo");
static_assert(sizeof(FHorseRacingChooseInfo) == 0x000038, "Wrong size on FHorseRacingChooseInfo");
static_assert(offsetof(FHorseRacingChooseInfo, ID) == 0x000000, "Member 'FHorseRacingChooseInfo::ID' has a wrong offset!");
static_assert(offsetof(FHorseRacingChooseInfo, RoleIdList) == 0x000008, "Member 'FHorseRacingChooseInfo::RoleIdList' has a wrong offset!");
static_assert(offsetof(FHorseRacingChooseInfo, Runner) == 0x000018, "Member 'FHorseRacingChooseInfo::Runner' has a wrong offset!");
static_assert(offsetof(FHorseRacingChooseInfo, Destination) == 0x000020, "Member 'FHorseRacingChooseInfo::Destination' has a wrong offset!");
static_assert(offsetof(FHorseRacingChooseInfo, FinalRank) == 0x000028, "Member 'FHorseRacingChooseInfo::FinalRank' has a wrong offset!");
static_assert(offsetof(FHorseRacingChooseInfo, RacingDistance) == 0x00002C, "Member 'FHorseRacingChooseInfo::RacingDistance' has a wrong offset!");

// ScriptStruct QRSL.DangerousValueRangeSpawner
// 0x0018 (0x0018 - 0x0000)
struct FDangerousValueRangeSpawner final
{
public:
	struct FHottaIntRange                         DangerousRange;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class AHottaAISpawnManager*>           AISpawners;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDangerousValueRangeSpawner) == 0x000008, "Wrong alignment on FDangerousValueRangeSpawner");
static_assert(sizeof(FDangerousValueRangeSpawner) == 0x000018, "Wrong size on FDangerousValueRangeSpawner");
static_assert(offsetof(FDangerousValueRangeSpawner, DangerousRange) == 0x000000, "Member 'FDangerousValueRangeSpawner::DangerousRange' has a wrong offset!");
static_assert(offsetof(FDangerousValueRangeSpawner, AISpawners) == 0x000008, "Member 'FDangerousValueRangeSpawner::AISpawners' has a wrong offset!");

// ScriptStruct QRSL.DangerousValueBasedSpawnerStronghold
// 0x0058 (0x0058 - 0x0000)
struct FDangerousValueBasedSpawnerStronghold final
{
public:
	class ATargetPoint*                           BasePoint;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FDangerousValueRangeSpawner> DangerousValueRangeSpawnerMap;                     // 0x0008(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDangerousValueBasedSpawnerStronghold) == 0x000008, "Wrong alignment on FDangerousValueBasedSpawnerStronghold");
static_assert(sizeof(FDangerousValueBasedSpawnerStronghold) == 0x000058, "Wrong size on FDangerousValueBasedSpawnerStronghold");
static_assert(offsetof(FDangerousValueBasedSpawnerStronghold, BasePoint) == 0x000000, "Member 'FDangerousValueBasedSpawnerStronghold::BasePoint' has a wrong offset!");
static_assert(offsetof(FDangerousValueBasedSpawnerStronghold, DangerousValueRangeSpawnerMap) == 0x000008, "Member 'FDangerousValueBasedSpawnerStronghold::DangerousValueRangeSpawnerMap' has a wrong offset!");

// ScriptStruct QRSL.EnergyGrabAwardData
// 0x0010 (0x0018 - 0x0008)
struct FEnergyGrabAwardData final : public FTableRowBase
{
public:
	class FName                                   DefenderAwards;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GrabberAwards;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEnergyGrabAwardData) == 0x000008, "Wrong alignment on FEnergyGrabAwardData");
static_assert(sizeof(FEnergyGrabAwardData) == 0x000018, "Wrong size on FEnergyGrabAwardData");
static_assert(offsetof(FEnergyGrabAwardData, DefenderAwards) == 0x000008, "Member 'FEnergyGrabAwardData::DefenderAwards' has a wrong offset!");
static_assert(offsetof(FEnergyGrabAwardData, GrabberAwards) == 0x000010, "Member 'FEnergyGrabAwardData::GrabberAwards' has a wrong offset!");

// ScriptStruct QRSL.ExamAwardData
// 0x0060 (0x0060 - 0x0000)
struct FExamAwardData final
{
public:
	TArray<struct FAwardInfo>                     ItemAwards;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            ExpAward;                                          // 0x0010(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExamAwardData) == 0x000008, "Wrong alignment on FExamAwardData");
static_assert(sizeof(FExamAwardData) == 0x000060, "Wrong size on FExamAwardData");
static_assert(offsetof(FExamAwardData, ItemAwards) == 0x000000, "Member 'FExamAwardData::ItemAwards' has a wrong offset!");
static_assert(offsetof(FExamAwardData, ExpAward) == 0x000010, "Member 'FExamAwardData::ExpAward' has a wrong offset!");

// ScriptStruct QRSL.ExamData
// 0x00F8 (0x0100 - 0x0008)
struct FExamData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UDataTable>              SoftQuestionBankTable;                             // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuestionAmount;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GameplayEnterLimitID;                              // 0x0034(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D42[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FExamAwardData                         RightAward;                                        // 0x0040(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FExamAwardData                         WrongAward;                                        // 0x00A0(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExamData) == 0x000008, "Wrong alignment on FExamData");
static_assert(sizeof(FExamData) == 0x000100, "Wrong size on FExamData");
static_assert(offsetof(FExamData, SoftQuestionBankTable) == 0x000008, "Member 'FExamData::SoftQuestionBankTable' has a wrong offset!");
static_assert(offsetof(FExamData, QuestionAmount) == 0x000030, "Member 'FExamData::QuestionAmount' has a wrong offset!");
static_assert(offsetof(FExamData, GameplayEnterLimitID) == 0x000034, "Member 'FExamData::GameplayEnterLimitID' has a wrong offset!");
static_assert(offsetof(FExamData, RightAward) == 0x000040, "Member 'FExamData::RightAward' has a wrong offset!");
static_assert(offsetof(FExamData, WrongAward) == 0x0000A0, "Member 'FExamData::WrongAward' has a wrong offset!");

// ScriptStruct QRSL.LotteryShopGoodInfo
// 0x0020 (0x0020 - 0x0000)
struct FLotteryShopGoodInfo final
{
public:
	class FName                                   ShopName;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ShopGoodID;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LimitCount;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodPrice;                                         // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GoodDiscount;                                      // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHottaCurrencyType                            CurrencyType;                                      // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D43[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLotteryShopGoodInfo) == 0x000004, "Wrong alignment on FLotteryShopGoodInfo");
static_assert(sizeof(FLotteryShopGoodInfo) == 0x000020, "Wrong size on FLotteryShopGoodInfo");
static_assert(offsetof(FLotteryShopGoodInfo, ShopName) == 0x000000, "Member 'FLotteryShopGoodInfo::ShopName' has a wrong offset!");
static_assert(offsetof(FLotteryShopGoodInfo, ShopGoodID) == 0x000008, "Member 'FLotteryShopGoodInfo::ShopGoodID' has a wrong offset!");
static_assert(offsetof(FLotteryShopGoodInfo, LimitCount) == 0x000010, "Member 'FLotteryShopGoodInfo::LimitCount' has a wrong offset!");
static_assert(offsetof(FLotteryShopGoodInfo, GoodPrice) == 0x000014, "Member 'FLotteryShopGoodInfo::GoodPrice' has a wrong offset!");
static_assert(offsetof(FLotteryShopGoodInfo, GoodDiscount) == 0x000018, "Member 'FLotteryShopGoodInfo::GoodDiscount' has a wrong offset!");
static_assert(offsetof(FLotteryShopGoodInfo, CurrencyType) == 0x00001C, "Member 'FLotteryShopGoodInfo::CurrencyType' has a wrong offset!");

// ScriptStruct QRSL.BreakFateRankingData
// 0x0018 (0x0018 - 0x0000)
struct FBreakFateRankingData final
{
public:
	class FString                                 TeamID;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LiveTimer;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ranking;                                           // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBreakFateRankingData) == 0x000008, "Wrong alignment on FBreakFateRankingData");
static_assert(sizeof(FBreakFateRankingData) == 0x000018, "Wrong size on FBreakFateRankingData");
static_assert(offsetof(FBreakFateRankingData, TeamID) == 0x000000, "Member 'FBreakFateRankingData::TeamID' has a wrong offset!");
static_assert(offsetof(FBreakFateRankingData, LiveTimer) == 0x000010, "Member 'FBreakFateRankingData::LiveTimer' has a wrong offset!");
static_assert(offsetof(FBreakFateRankingData, Ranking) == 0x000014, "Member 'FBreakFateRankingData::Ranking' has a wrong offset!");

// ScriptStruct QRSL.ExamQuestionData
// 0x0078 (0x0080 - 0x0008)
struct FExamQuestionData final : public FTableRowBase
{
public:
	class FText                                   QuestionDescription;                               // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   RightAnswer;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   WrongAnswer1;                                      // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   WrongAnswer2;                                      // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   WrongAnswer3;                                      // 0x0068(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExamQuestionData) == 0x000008, "Wrong alignment on FExamQuestionData");
static_assert(sizeof(FExamQuestionData) == 0x000080, "Wrong size on FExamQuestionData");
static_assert(offsetof(FExamQuestionData, QuestionDescription) == 0x000008, "Member 'FExamQuestionData::QuestionDescription' has a wrong offset!");
static_assert(offsetof(FExamQuestionData, RightAnswer) == 0x000020, "Member 'FExamQuestionData::RightAnswer' has a wrong offset!");
static_assert(offsetof(FExamQuestionData, WrongAnswer1) == 0x000038, "Member 'FExamQuestionData::WrongAnswer1' has a wrong offset!");
static_assert(offsetof(FExamQuestionData, WrongAnswer2) == 0x000050, "Member 'FExamQuestionData::WrongAnswer2' has a wrong offset!");
static_assert(offsetof(FExamQuestionData, WrongAnswer3) == 0x000068, "Member 'FExamQuestionData::WrongAnswer3' has a wrong offset!");

// ScriptStruct QRSL.OptionPakModel
// 0x0050 (0x0050 - 0x0000)
struct FOptionPakModel final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileMD5;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOptionPakStatus                              Status;                                            // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D44[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FileUUID;                                          // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TaskId;                                            // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RepoID;                                            // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FileType;                                          // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FinishedSize;                                      // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSize;                                         // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalProgress;                                     // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptionPakModel) == 0x000008, "Wrong alignment on FOptionPakModel");
static_assert(sizeof(FOptionPakModel) == 0x000050, "Wrong size on FOptionPakModel");
static_assert(offsetof(FOptionPakModel, Filename) == 0x000000, "Member 'FOptionPakModel::Filename' has a wrong offset!");
static_assert(offsetof(FOptionPakModel, FileMD5) == 0x000010, "Member 'FOptionPakModel::FileMD5' has a wrong offset!");
static_assert(offsetof(FOptionPakModel, Status) == 0x000020, "Member 'FOptionPakModel::Status' has a wrong offset!");
static_assert(offsetof(FOptionPakModel, FileUUID) == 0x000028, "Member 'FOptionPakModel::FileUUID' has a wrong offset!");
static_assert(offsetof(FOptionPakModel, TaskId) == 0x000038, "Member 'FOptionPakModel::TaskId' has a wrong offset!");
static_assert(offsetof(FOptionPakModel, RepoID) == 0x00003C, "Member 'FOptionPakModel::RepoID' has a wrong offset!");
static_assert(offsetof(FOptionPakModel, FileType) == 0x000040, "Member 'FOptionPakModel::FileType' has a wrong offset!");
static_assert(offsetof(FOptionPakModel, FinishedSize) == 0x000044, "Member 'FOptionPakModel::FinishedSize' has a wrong offset!");
static_assert(offsetof(FOptionPakModel, TotalSize) == 0x000048, "Member 'FOptionPakModel::TotalSize' has a wrong offset!");
static_assert(offsetof(FOptionPakModel, TotalProgress) == 0x00004C, "Member 'FOptionPakModel::TotalProgress' has a wrong offset!");

// ScriptStruct QRSL.FightTitleNameNode
// 0x0048 (0x0048 - 0x0000)
struct FFightTitleNameNode final
{
public:
	class FText                                   TextTitle;                                         // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   TextTotal;                                         // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   TextPercent;                                       // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFightTitleNameNode) == 0x000008, "Wrong alignment on FFightTitleNameNode");
static_assert(sizeof(FFightTitleNameNode) == 0x000048, "Wrong size on FFightTitleNameNode");
static_assert(offsetof(FFightTitleNameNode, TextTitle) == 0x000000, "Member 'FFightTitleNameNode::TextTitle' has a wrong offset!");
static_assert(offsetof(FFightTitleNameNode, TextTotal) == 0x000018, "Member 'FFightTitleNameNode::TextTotal' has a wrong offset!");
static_assert(offsetof(FFightTitleNameNode, TextPercent) == 0x000030, "Member 'FFightTitleNameNode::TextPercent' has a wrong offset!");

// ScriptStruct QRSL.OptionPakProgressModel
// 0x0028 (0x0028 - 0x0000)
struct FOptionPakProgressModel final
{
public:
	int32                                         FinishedSize;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSize;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Speed;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainTime;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepProgress;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalProgress;                                     // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptionPakProgressModel) == 0x000008, "Wrong alignment on FOptionPakProgressModel");
static_assert(sizeof(FOptionPakProgressModel) == 0x000028, "Wrong size on FOptionPakProgressModel");
static_assert(offsetof(FOptionPakProgressModel, FinishedSize) == 0x000000, "Member 'FOptionPakProgressModel::FinishedSize' has a wrong offset!");
static_assert(offsetof(FOptionPakProgressModel, TotalSize) == 0x000004, "Member 'FOptionPakProgressModel::TotalSize' has a wrong offset!");
static_assert(offsetof(FOptionPakProgressModel, Speed) == 0x000008, "Member 'FOptionPakProgressModel::Speed' has a wrong offset!");
static_assert(offsetof(FOptionPakProgressModel, RemainTime) == 0x00000C, "Member 'FOptionPakProgressModel::RemainTime' has a wrong offset!");
static_assert(offsetof(FOptionPakProgressModel, StepProgress) == 0x000010, "Member 'FOptionPakProgressModel::StepProgress' has a wrong offset!");
static_assert(offsetof(FOptionPakProgressModel, TotalProgress) == 0x000014, "Member 'FOptionPakProgressModel::TotalProgress' has a wrong offset!");
static_assert(offsetof(FOptionPakProgressModel, Filename) == 0x000018, "Member 'FOptionPakProgressModel::Filename' has a wrong offset!");

// ScriptStruct QRSL.InvisibleWidgetInfo
// 0x0020 (0x0020 - 0x0000)
struct FInvisibleWidgetInfo final
{
public:
	TArray<class FName>                           RemoveWidgetName;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           HiddenWidgetName;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInvisibleWidgetInfo) == 0x000008, "Wrong alignment on FInvisibleWidgetInfo");
static_assert(sizeof(FInvisibleWidgetInfo) == 0x000020, "Wrong size on FInvisibleWidgetInfo");
static_assert(offsetof(FInvisibleWidgetInfo, RemoveWidgetName) == 0x000000, "Member 'FInvisibleWidgetInfo::RemoveWidgetName' has a wrong offset!");
static_assert(offsetof(FInvisibleWidgetInfo, HiddenWidgetName) == 0x000010, "Member 'FInvisibleWidgetInfo::HiddenWidgetName' has a wrong offset!");

// ScriptStruct QRSL.HottaUpdateResult
// 0x0010 (0x0050 - 0x0040)
struct FHottaUpdateResult final : public FHottaBaseResult
{
public:
	EHottaUpdateActionType                        ActionType;                                        // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D45[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RepoID;                                            // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TaskId;                                            // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D46[0x4];                                     // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHottaUpdateResult) == 0x000008, "Wrong alignment on FHottaUpdateResult");
static_assert(sizeof(FHottaUpdateResult) == 0x000050, "Wrong size on FHottaUpdateResult");
static_assert(offsetof(FHottaUpdateResult, ActionType) == 0x000040, "Member 'FHottaUpdateResult::ActionType' has a wrong offset!");
static_assert(offsetof(FHottaUpdateResult, RepoID) == 0x000044, "Member 'FHottaUpdateResult::RepoID' has a wrong offset!");
static_assert(offsetof(FHottaUpdateResult, TaskId) == 0x000048, "Member 'FHottaUpdateResult::TaskId' has a wrong offset!");

// ScriptStruct QRSL.FilterTypeData
// 0x0020 (0x0020 - 0x0000)
struct FFilterTypeData final
{
public:
	int32                                         FilterTypeEnumValue;                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D47[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   FilterTypeName;                                    // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFilterTypeData) == 0x000008, "Wrong alignment on FFilterTypeData");
static_assert(sizeof(FFilterTypeData) == 0x000020, "Wrong size on FFilterTypeData");
static_assert(offsetof(FFilterTypeData, FilterTypeEnumValue) == 0x000000, "Member 'FFilterTypeData::FilterTypeEnumValue' has a wrong offset!");
static_assert(offsetof(FFilterTypeData, FilterTypeName) == 0x000008, "Member 'FFilterTypeData::FilterTypeName' has a wrong offset!");

// ScriptStruct QRSL.HottaCustomerResult
// 0x0008 (0x0048 - 0x0040)
struct FHottaCustomerResult final : public FHottaBaseResult
{
public:
	int32                                         MsgType;                                           // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D48[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHottaCustomerResult) == 0x000008, "Wrong alignment on FHottaCustomerResult");
static_assert(sizeof(FHottaCustomerResult) == 0x000048, "Wrong size on FHottaCustomerResult");
static_assert(offsetof(FHottaCustomerResult, MsgType) == 0x000040, "Member 'FHottaCustomerResult::MsgType' has a wrong offset!");

// ScriptStruct QRSL.HottaIDTokenResult
// 0x0010 (0x0050 - 0x0040)
struct FHottaIDTokenResult final : public FHottaBaseResult
{
public:
	class FString                                 IdToken;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHottaIDTokenResult) == 0x000008, "Wrong alignment on FHottaIDTokenResult");
static_assert(sizeof(FHottaIDTokenResult) == 0x000050, "Wrong size on FHottaIDTokenResult");
static_assert(offsetof(FHottaIDTokenResult, IdToken) == 0x000040, "Member 'FHottaIDTokenResult::IdToken' has a wrong offset!");

// ScriptStruct QRSL.BuffWidgetInfo
// 0x0020 (0x0020 - 0x0000)
struct FBuffWidgetInfo final
{
public:
	class FName                                   ReceiveButton;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BuffImage;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DescriptionText;                                   // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SelectedImage;                                     // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuffWidgetInfo) == 0x000004, "Wrong alignment on FBuffWidgetInfo");
static_assert(sizeof(FBuffWidgetInfo) == 0x000020, "Wrong size on FBuffWidgetInfo");
static_assert(offsetof(FBuffWidgetInfo, ReceiveButton) == 0x000000, "Member 'FBuffWidgetInfo::ReceiveButton' has a wrong offset!");
static_assert(offsetof(FBuffWidgetInfo, BuffImage) == 0x000008, "Member 'FBuffWidgetInfo::BuffImage' has a wrong offset!");
static_assert(offsetof(FBuffWidgetInfo, DescriptionText) == 0x000010, "Member 'FBuffWidgetInfo::DescriptionText' has a wrong offset!");
static_assert(offsetof(FBuffWidgetInfo, SelectedImage) == 0x000018, "Member 'FBuffWidgetInfo::SelectedImage' has a wrong offset!");

// ScriptStruct QRSL.HottaAccountProfile
// 0x00D8 (0x00D8 - 0x0000)
struct FHottaAccountProfile final
{
public:
	class FString                                 UserName;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Birthday;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BirthdayYear;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BirthdayMonth;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BirthdayDay;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsReceiveEmail;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LangType;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExtraJson;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Email;                                             // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Phone;                                             // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PhoneAreaCode;                                     // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AccountType;                                       // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D49[0x4];                                     // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NickName;                                          // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PrivacyPolicy;                                     // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TermsOfService;                                    // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PrivacyUpdateTime;                                 // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TermsUpdateTime;                                   // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UsernamePassVerify;                                // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D4A[0x4];                                     // 0x00D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHottaAccountProfile) == 0x000008, "Wrong alignment on FHottaAccountProfile");
static_assert(sizeof(FHottaAccountProfile) == 0x0000D8, "Wrong size on FHottaAccountProfile");
static_assert(offsetof(FHottaAccountProfile, UserName) == 0x000000, "Member 'FHottaAccountProfile::UserName' has a wrong offset!");
static_assert(offsetof(FHottaAccountProfile, Birthday) == 0x000010, "Member 'FHottaAccountProfile::Birthday' has a wrong offset!");
static_assert(offsetof(FHottaAccountProfile, BirthdayYear) == 0x000020, "Member 'FHottaAccountProfile::BirthdayYear' has a wrong offset!");
static_assert(offsetof(FHottaAccountProfile, BirthdayMonth) == 0x000024, "Member 'FHottaAccountProfile::BirthdayMonth' has a wrong offset!");
static_assert(offsetof(FHottaAccountProfile, BirthdayDay) == 0x000028, "Member 'FHottaAccountProfile::BirthdayDay' has a wrong offset!");
static_assert(offsetof(FHottaAccountProfile, IsReceiveEmail) == 0x00002C, "Member 'FHottaAccountProfile::IsReceiveEmail' has a wrong offset!");
static_assert(offsetof(FHottaAccountProfile, Region) == 0x000030, "Member 'FHottaAccountProfile::Region' has a wrong offset!");
static_assert(offsetof(FHottaAccountProfile, LangType) == 0x000040, "Member 'FHottaAccountProfile::LangType' has a wrong offset!");
static_assert(offsetof(FHottaAccountProfile, ExtraJson) == 0x000050, "Member 'FHottaAccountProfile::ExtraJson' has a wrong offset!");
static_assert(offsetof(FHottaAccountProfile, Email) == 0x000060, "Member 'FHottaAccountProfile::Email' has a wrong offset!");
static_assert(offsetof(FHottaAccountProfile, Phone) == 0x000070, "Member 'FHottaAccountProfile::Phone' has a wrong offset!");
static_assert(offsetof(FHottaAccountProfile, PhoneAreaCode) == 0x000080, "Member 'FHottaAccountProfile::PhoneAreaCode' has a wrong offset!");
static_assert(offsetof(FHottaAccountProfile, AccountType) == 0x000090, "Member 'FHottaAccountProfile::AccountType' has a wrong offset!");
static_assert(offsetof(FHottaAccountProfile, NickName) == 0x000098, "Member 'FHottaAccountProfile::NickName' has a wrong offset!");
static_assert(offsetof(FHottaAccountProfile, PrivacyPolicy) == 0x0000A8, "Member 'FHottaAccountProfile::PrivacyPolicy' has a wrong offset!");
static_assert(offsetof(FHottaAccountProfile, TermsOfService) == 0x0000B8, "Member 'FHottaAccountProfile::TermsOfService' has a wrong offset!");
static_assert(offsetof(FHottaAccountProfile, PrivacyUpdateTime) == 0x0000C8, "Member 'FHottaAccountProfile::PrivacyUpdateTime' has a wrong offset!");
static_assert(offsetof(FHottaAccountProfile, TermsUpdateTime) == 0x0000CC, "Member 'FHottaAccountProfile::TermsUpdateTime' has a wrong offset!");
static_assert(offsetof(FHottaAccountProfile, UsernamePassVerify) == 0x0000D0, "Member 'FHottaAccountProfile::UsernamePassVerify' has a wrong offset!");

// ScriptStruct QRSL.HottaAccountResult
// 0x0238 (0x0278 - 0x0040)
struct FHottaAccountResult final : public FHottaBaseResult
{
public:
	int32                                         ChannelID;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D4B[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Channel;                                           // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SeqId;                                             // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserName;                                          // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Uid;                                               // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Token;                                             // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpireTime;                                        // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsRegister;                                        // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsSetPassword;                                     // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsReceiveEmail;                                    // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VerifyCodeExpireTime;                              // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RequestIsLogin;                                    // 0x00AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D4C[0x3];                                     // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CanBind;                                           // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D4D[0x4];                                     // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PpAcceptanceVersion;                               // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TosAcceptanceVersion;                              // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              PpAcceptanceTime;                                  // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              TosAcceptanceTime;                                 // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHottaAccountProfile                   Profile;                                           // 0x00E8(0x00D8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         IsUserNameAvailable;                               // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasGameSaccUid;                                    // 0x01C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D4E[0x3];                                     // 0x01C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameSaccUid;                                       // 0x01C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasGameSaccOpenId;                                 // 0x01D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D4F[0x7];                                     // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameSaccOpenId;                                    // 0x01E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasLiUid;                                          // 0x01F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D50[0x7];                                     // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LiUid;                                             // 0x01F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasLiOpenId;                                       // 0x0208(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D51[0x7];                                     // 0x0209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LiOpenId;                                          // 0x0210(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedNotify;                                        // 0x0220(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D52[0x7];                                     // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserAgreedGameTos;                                 // 0x0228(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserAgreedGamePP;                                  // 0x0238(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserAgreedLiPP;                                    // 0x0248(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserAgreedLiDt;                                    // 0x0258(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserAgreedLiTos;                                   // 0x0268(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHottaAccountResult) == 0x000008, "Wrong alignment on FHottaAccountResult");
static_assert(sizeof(FHottaAccountResult) == 0x000278, "Wrong size on FHottaAccountResult");
static_assert(offsetof(FHottaAccountResult, ChannelID) == 0x000040, "Member 'FHottaAccountResult::ChannelID' has a wrong offset!");
static_assert(offsetof(FHottaAccountResult, Channel) == 0x000048, "Member 'FHottaAccountResult::Channel' has a wrong offset!");
static_assert(offsetof(FHottaAccountResult, SeqId) == 0x000058, "Member 'FHottaAccountResult::SeqId' has a wrong offset!");
static_assert(offsetof(FHottaAccountResult, UserName) == 0x000068, "Member 'FHottaAccountResult::UserName' has a wrong offset!");
static_assert(offsetof(FHottaAccountResult, Uid) == 0x000078, "Member 'FHottaAccountResult::Uid' has a wrong offset!");
static_assert(offsetof(FHottaAccountResult, Token) == 0x000088, "Member 'FHottaAccountResult::Token' has a wrong offset!");
static_assert(offsetof(FHottaAccountResult, ExpireTime) == 0x000098, "Member 'FHottaAccountResult::ExpireTime' has a wrong offset!");
static_assert(offsetof(FHottaAccountResult, IsRegister) == 0x00009C, "Member 'FHottaAccountResult::IsRegister' has a wrong offset!");
static_assert(offsetof(FHottaAccountResult, IsSetPassword) == 0x0000A0, "Member 'FHottaAccountResult::IsSetPassword' has a wrong offset!");
static_assert(offsetof(FHottaAccountResult, IsReceiveEmail) == 0x0000A4, "Member 'FHottaAccountResult::IsReceiveEmail' has a wrong offset!");
static_assert(offsetof(FHottaAccountResult, VerifyCodeExpireTime) == 0x0000A8, "Member 'FHottaAccountResult::VerifyCodeExpireTime' has a wrong offset!");
static_assert(offsetof(FHottaAccountResult, RequestIsLogin) == 0x0000AC, "Member 'FHottaAccountResult::RequestIsLogin' has a wrong offset!");
static_assert(offsetof(FHottaAccountResult, CanBind) == 0x0000B0, "Member 'FHottaAccountResult::CanBind' has a wrong offset!");
static_assert(offsetof(FHottaAccountResult, PpAcceptanceVersion) == 0x0000B8, "Member 'FHottaAccountResult::PpAcceptanceVersion' has a wrong offset!");
static_assert(offsetof(FHottaAccountResult, TosAcceptanceVersion) == 0x0000C8, "Member 'FHottaAccountResult::TosAcceptanceVersion' has a wrong offset!");
static_assert(offsetof(FHottaAccountResult, PpAcceptanceTime) == 0x0000D8, "Member 'FHottaAccountResult::PpAcceptanceTime' has a wrong offset!");
static_assert(offsetof(FHottaAccountResult, TosAcceptanceTime) == 0x0000E0, "Member 'FHottaAccountResult::TosAcceptanceTime' has a wrong offset!");
static_assert(offsetof(FHottaAccountResult, Profile) == 0x0000E8, "Member 'FHottaAccountResult::Profile' has a wrong offset!");
static_assert(offsetof(FHottaAccountResult, IsUserNameAvailable) == 0x0001C0, "Member 'FHottaAccountResult::IsUserNameAvailable' has a wrong offset!");
static_assert(offsetof(FHottaAccountResult, HasGameSaccUid) == 0x0001C4, "Member 'FHottaAccountResult::HasGameSaccUid' has a wrong offset!");
static_assert(offsetof(FHottaAccountResult, GameSaccUid) == 0x0001C8, "Member 'FHottaAccountResult::GameSaccUid' has a wrong offset!");
static_assert(offsetof(FHottaAccountResult, HasGameSaccOpenId) == 0x0001D8, "Member 'FHottaAccountResult::HasGameSaccOpenId' has a wrong offset!");
static_assert(offsetof(FHottaAccountResult, GameSaccOpenId) == 0x0001E0, "Member 'FHottaAccountResult::GameSaccOpenId' has a wrong offset!");
static_assert(offsetof(FHottaAccountResult, HasLiUid) == 0x0001F0, "Member 'FHottaAccountResult::HasLiUid' has a wrong offset!");
static_assert(offsetof(FHottaAccountResult, LiUid) == 0x0001F8, "Member 'FHottaAccountResult::LiUid' has a wrong offset!");
static_assert(offsetof(FHottaAccountResult, HasLiOpenId) == 0x000208, "Member 'FHottaAccountResult::HasLiOpenId' has a wrong offset!");
static_assert(offsetof(FHottaAccountResult, LiOpenId) == 0x000210, "Member 'FHottaAccountResult::LiOpenId' has a wrong offset!");
static_assert(offsetof(FHottaAccountResult, NeedNotify) == 0x000220, "Member 'FHottaAccountResult::NeedNotify' has a wrong offset!");
static_assert(offsetof(FHottaAccountResult, UserAgreedGameTos) == 0x000228, "Member 'FHottaAccountResult::UserAgreedGameTos' has a wrong offset!");
static_assert(offsetof(FHottaAccountResult, UserAgreedGamePP) == 0x000238, "Member 'FHottaAccountResult::UserAgreedGamePP' has a wrong offset!");
static_assert(offsetof(FHottaAccountResult, UserAgreedLiPP) == 0x000248, "Member 'FHottaAccountResult::UserAgreedLiPP' has a wrong offset!");
static_assert(offsetof(FHottaAccountResult, UserAgreedLiDt) == 0x000258, "Member 'FHottaAccountResult::UserAgreedLiDt' has a wrong offset!");
static_assert(offsetof(FHottaAccountResult, UserAgreedLiTos) == 0x000268, "Member 'FHottaAccountResult::UserAgreedLiTos' has a wrong offset!");

// ScriptStruct QRSL.HottaAuthResult
// 0x0118 (0x0158 - 0x0040)
struct FHottaAuthResult final : public FHottaBaseResult
{
public:
	class FString                                 OpenID;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Token;                                             // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TokenExpireTime;                                   // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FirstLogin;                                        // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RegChannelDis;                                     // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserName;                                          // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gender;                                            // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D53[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Birthday;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PicUrl;                                            // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Pf;                                                // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PfKey;                                             // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedRealNameAuth;                                  // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D54[0x3];                                     // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ChannelID;                                         // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHottaLoginChannel                            ChannelName;                                       // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D55[0x7];                                     // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ChannelInfo;                                       // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ConfirmCode;                                       // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConfirmCodeExpireTime;                             // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D56[0x4];                                     // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BindList;                                          // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LegalDocumentsAcceptedVersion;                     // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeleteAccountStatus;                               // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeleteLIAccountStatus;                             // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TransferCode;                                      // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TransferCodeExpireTime;                            // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D57[0x4];                                     // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Email;                                             // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHottaAuthResult) == 0x000008, "Wrong alignment on FHottaAuthResult");
static_assert(sizeof(FHottaAuthResult) == 0x000158, "Wrong size on FHottaAuthResult");
static_assert(offsetof(FHottaAuthResult, OpenID) == 0x000040, "Member 'FHottaAuthResult::OpenID' has a wrong offset!");
static_assert(offsetof(FHottaAuthResult, Token) == 0x000050, "Member 'FHottaAuthResult::Token' has a wrong offset!");
static_assert(offsetof(FHottaAuthResult, TokenExpireTime) == 0x000060, "Member 'FHottaAuthResult::TokenExpireTime' has a wrong offset!");
static_assert(offsetof(FHottaAuthResult, FirstLogin) == 0x000064, "Member 'FHottaAuthResult::FirstLogin' has a wrong offset!");
static_assert(offsetof(FHottaAuthResult, RegChannelDis) == 0x000068, "Member 'FHottaAuthResult::RegChannelDis' has a wrong offset!");
static_assert(offsetof(FHottaAuthResult, UserName) == 0x000078, "Member 'FHottaAuthResult::UserName' has a wrong offset!");
static_assert(offsetof(FHottaAuthResult, Gender) == 0x000088, "Member 'FHottaAuthResult::Gender' has a wrong offset!");
static_assert(offsetof(FHottaAuthResult, Birthday) == 0x000090, "Member 'FHottaAuthResult::Birthday' has a wrong offset!");
static_assert(offsetof(FHottaAuthResult, PicUrl) == 0x0000A0, "Member 'FHottaAuthResult::PicUrl' has a wrong offset!");
static_assert(offsetof(FHottaAuthResult, Pf) == 0x0000B0, "Member 'FHottaAuthResult::Pf' has a wrong offset!");
static_assert(offsetof(FHottaAuthResult, PfKey) == 0x0000C0, "Member 'FHottaAuthResult::PfKey' has a wrong offset!");
static_assert(offsetof(FHottaAuthResult, NeedRealNameAuth) == 0x0000D0, "Member 'FHottaAuthResult::NeedRealNameAuth' has a wrong offset!");
static_assert(offsetof(FHottaAuthResult, ChannelID) == 0x0000D4, "Member 'FHottaAuthResult::ChannelID' has a wrong offset!");
static_assert(offsetof(FHottaAuthResult, ChannelName) == 0x0000D8, "Member 'FHottaAuthResult::ChannelName' has a wrong offset!");
static_assert(offsetof(FHottaAuthResult, ChannelInfo) == 0x0000E0, "Member 'FHottaAuthResult::ChannelInfo' has a wrong offset!");
static_assert(offsetof(FHottaAuthResult, ConfirmCode) == 0x0000F0, "Member 'FHottaAuthResult::ConfirmCode' has a wrong offset!");
static_assert(offsetof(FHottaAuthResult, ConfirmCodeExpireTime) == 0x000100, "Member 'FHottaAuthResult::ConfirmCodeExpireTime' has a wrong offset!");
static_assert(offsetof(FHottaAuthResult, BindList) == 0x000108, "Member 'FHottaAuthResult::BindList' has a wrong offset!");
static_assert(offsetof(FHottaAuthResult, LegalDocumentsAcceptedVersion) == 0x000118, "Member 'FHottaAuthResult::LegalDocumentsAcceptedVersion' has a wrong offset!");
static_assert(offsetof(FHottaAuthResult, DeleteAccountStatus) == 0x000128, "Member 'FHottaAuthResult::DeleteAccountStatus' has a wrong offset!");
static_assert(offsetof(FHottaAuthResult, DeleteLIAccountStatus) == 0x00012C, "Member 'FHottaAuthResult::DeleteLIAccountStatus' has a wrong offset!");
static_assert(offsetof(FHottaAuthResult, TransferCode) == 0x000130, "Member 'FHottaAuthResult::TransferCode' has a wrong offset!");
static_assert(offsetof(FHottaAuthResult, TransferCodeExpireTime) == 0x000140, "Member 'FHottaAuthResult::TransferCodeExpireTime' has a wrong offset!");
static_assert(offsetof(FHottaAuthResult, Email) == 0x000148, "Member 'FHottaAuthResult::Email' has a wrong offset!");

// ScriptStruct QRSL.ArtifactSkillWidgets
// 0x0028 (0x0028 - 0x0000)
struct FArtifactSkillWidgets final
{
public:
	class UQRSLUI_CoolDownButton*                 CoolDownButton;                                    // 0x0000(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvasPanel*                           AmountPanel;                                       // 0x0008(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             AmountText;                                        // 0x0010(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UQRSLUI_AttackJoyStick*                 AttackJoyStick;                                    // 0x0018(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 QualityImg;                                        // 0x0020(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArtifactSkillWidgets) == 0x000008, "Wrong alignment on FArtifactSkillWidgets");
static_assert(sizeof(FArtifactSkillWidgets) == 0x000028, "Wrong size on FArtifactSkillWidgets");
static_assert(offsetof(FArtifactSkillWidgets, CoolDownButton) == 0x000000, "Member 'FArtifactSkillWidgets::CoolDownButton' has a wrong offset!");
static_assert(offsetof(FArtifactSkillWidgets, AmountPanel) == 0x000008, "Member 'FArtifactSkillWidgets::AmountPanel' has a wrong offset!");
static_assert(offsetof(FArtifactSkillWidgets, AmountText) == 0x000010, "Member 'FArtifactSkillWidgets::AmountText' has a wrong offset!");
static_assert(offsetof(FArtifactSkillWidgets, AttackJoyStick) == 0x000018, "Member 'FArtifactSkillWidgets::AttackJoyStick' has a wrong offset!");
static_assert(offsetof(FArtifactSkillWidgets, QualityImg) == 0x000020, "Member 'FArtifactSkillWidgets::QualityImg' has a wrong offset!");

// ScriptStruct QRSL.HottaUpdateOptionalRepoInitResult
// 0x0008 (0x0048 - 0x0040)
struct FHottaUpdateOptionalRepoInitResult final : public FHottaBaseResult
{
public:
	EHottaUpdateActionType                        ActionType;                                        // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D58[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RepoID;                                            // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHottaUpdateOptionalRepoInitResult) == 0x000008, "Wrong alignment on FHottaUpdateOptionalRepoInitResult");
static_assert(sizeof(FHottaUpdateOptionalRepoInitResult) == 0x000048, "Wrong size on FHottaUpdateOptionalRepoInitResult");
static_assert(offsetof(FHottaUpdateOptionalRepoInitResult, ActionType) == 0x000040, "Member 'FHottaUpdateOptionalRepoInitResult::ActionType' has a wrong offset!");
static_assert(offsetof(FHottaUpdateOptionalRepoInitResult, RepoID) == 0x000044, "Member 'FHottaUpdateOptionalRepoInitResult::RepoID' has a wrong offset!");

// ScriptStruct QRSL.HottaInteractNode
// 0x00F8 (0x00F8 - 0x0000)
struct FHottaInteractNode final
{
public:
	TWeakObjectPtr<class UHottaInteractEntryWidget> InteractEntryWidget;                               // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInteractActorInfo                     InteractActorInfo;                                 // 0x0008(0x00E8)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bUsed;                                             // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D59[0x7];                                     // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHottaInteractNode) == 0x000008, "Wrong alignment on FHottaInteractNode");
static_assert(sizeof(FHottaInteractNode) == 0x0000F8, "Wrong size on FHottaInteractNode");
static_assert(offsetof(FHottaInteractNode, InteractEntryWidget) == 0x000000, "Member 'FHottaInteractNode::InteractEntryWidget' has a wrong offset!");
static_assert(offsetof(FHottaInteractNode, InteractActorInfo) == 0x000008, "Member 'FHottaInteractNode::InteractActorInfo' has a wrong offset!");
static_assert(offsetof(FHottaInteractNode, bUsed) == 0x0000F0, "Member 'FHottaInteractNode::bUsed' has a wrong offset!");

// ScriptStruct QRSL.InteractiveBehaviorAnimInfo
// 0x0088 (0x0088 - 0x0000)
struct FInteractiveBehaviorAnimInfo final
{
public:
	class UAnimSequence*                          InteractiveIdleAnim;                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EInteractiveBodyType, TSoftObjectPtr<class UAnimSequenceBase>> DynamicIdleAnimMap;                                // 0x0008(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	class UAimOffsetBlendSpace*                   HeadInteractiveAimOffset;                          // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            InteractiveWholeBlendSpace;                        // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WholeMouseValidSize;                               // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WholeValidStartPoint;                              // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WholeBlendSpaceFinishEventMinRange;                // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WholeBlendSpaceFinishEventMaxRange;                // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInteractiveBehaviorAnimInfo) == 0x000008, "Wrong alignment on FInteractiveBehaviorAnimInfo");
static_assert(sizeof(FInteractiveBehaviorAnimInfo) == 0x000088, "Wrong size on FInteractiveBehaviorAnimInfo");
static_assert(offsetof(FInteractiveBehaviorAnimInfo, InteractiveIdleAnim) == 0x000000, "Member 'FInteractiveBehaviorAnimInfo::InteractiveIdleAnim' has a wrong offset!");
static_assert(offsetof(FInteractiveBehaviorAnimInfo, DynamicIdleAnimMap) == 0x000008, "Member 'FInteractiveBehaviorAnimInfo::DynamicIdleAnimMap' has a wrong offset!");
static_assert(offsetof(FInteractiveBehaviorAnimInfo, HeadInteractiveAimOffset) == 0x000058, "Member 'FInteractiveBehaviorAnimInfo::HeadInteractiveAimOffset' has a wrong offset!");
static_assert(offsetof(FInteractiveBehaviorAnimInfo, InteractiveWholeBlendSpace) == 0x000060, "Member 'FInteractiveBehaviorAnimInfo::InteractiveWholeBlendSpace' has a wrong offset!");
static_assert(offsetof(FInteractiveBehaviorAnimInfo, WholeMouseValidSize) == 0x000068, "Member 'FInteractiveBehaviorAnimInfo::WholeMouseValidSize' has a wrong offset!");
static_assert(offsetof(FInteractiveBehaviorAnimInfo, WholeValidStartPoint) == 0x000070, "Member 'FInteractiveBehaviorAnimInfo::WholeValidStartPoint' has a wrong offset!");
static_assert(offsetof(FInteractiveBehaviorAnimInfo, WholeBlendSpaceFinishEventMinRange) == 0x000078, "Member 'FInteractiveBehaviorAnimInfo::WholeBlendSpaceFinishEventMinRange' has a wrong offset!");
static_assert(offsetof(FInteractiveBehaviorAnimInfo, WholeBlendSpaceFinishEventMaxRange) == 0x000080, "Member 'FInteractiveBehaviorAnimInfo::WholeBlendSpaceFinishEventMaxRange' has a wrong offset!");

// ScriptStruct QRSL.KeepFowardAwardRow
// 0x0018 (0x0020 - 0x0008)
struct FKeepFowardAwardRow final : public FTableRowBase
{
public:
	int32                                         Difficulty;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AwardDropID;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AwardMiniGameCoin;                                 // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExtraAwardMiniGameCoin;                            // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeepFowardAwardRow) == 0x000008, "Wrong alignment on FKeepFowardAwardRow");
static_assert(sizeof(FKeepFowardAwardRow) == 0x000020, "Wrong size on FKeepFowardAwardRow");
static_assert(offsetof(FKeepFowardAwardRow, Difficulty) == 0x000008, "Member 'FKeepFowardAwardRow::Difficulty' has a wrong offset!");
static_assert(offsetof(FKeepFowardAwardRow, Score) == 0x00000C, "Member 'FKeepFowardAwardRow::Score' has a wrong offset!");
static_assert(offsetof(FKeepFowardAwardRow, AwardDropID) == 0x000010, "Member 'FKeepFowardAwardRow::AwardDropID' has a wrong offset!");
static_assert(offsetof(FKeepFowardAwardRow, AwardMiniGameCoin) == 0x000018, "Member 'FKeepFowardAwardRow::AwardMiniGameCoin' has a wrong offset!");
static_assert(offsetof(FKeepFowardAwardRow, ExtraAwardMiniGameCoin) == 0x00001C, "Member 'FKeepFowardAwardRow::ExtraAwardMiniGameCoin' has a wrong offset!");

// ScriptStruct QRSL.MatrixCameraSettingInfo
// 0x0018 (0x0018 - 0x0000)
struct FMatrixCameraSettingInfo final
{
public:
	struct FVector                                CameraLocation;                                    // 0x0000(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CameraRotator;                                     // 0x000C(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatrixCameraSettingInfo) == 0x000004, "Wrong alignment on FMatrixCameraSettingInfo");
static_assert(sizeof(FMatrixCameraSettingInfo) == 0x000018, "Wrong size on FMatrixCameraSettingInfo");
static_assert(offsetof(FMatrixCameraSettingInfo, CameraLocation) == 0x000000, "Member 'FMatrixCameraSettingInfo::CameraLocation' has a wrong offset!");
static_assert(offsetof(FMatrixCameraSettingInfo, CameraRotator) == 0x00000C, "Member 'FMatrixCameraSettingInfo::CameraRotator' has a wrong offset!");

// ScriptStruct QRSL.KeepForwardRow
// 0x0020 (0x0028 - 0x0008)
struct FKeepForwardRow final : public FTableRowBase
{
public:
	int32                                         Difficulty;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RowNum;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ColNum;                                            // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D5A[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Data;                                              // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeepForwardRow) == 0x000008, "Wrong alignment on FKeepForwardRow");
static_assert(sizeof(FKeepForwardRow) == 0x000028, "Wrong size on FKeepForwardRow");
static_assert(offsetof(FKeepForwardRow, Difficulty) == 0x000008, "Member 'FKeepForwardRow::Difficulty' has a wrong offset!");
static_assert(offsetof(FKeepForwardRow, RowNum) == 0x00000C, "Member 'FKeepForwardRow::RowNum' has a wrong offset!");
static_assert(offsetof(FKeepForwardRow, ColNum) == 0x000010, "Member 'FKeepForwardRow::ColNum' has a wrong offset!");
static_assert(offsetof(FKeepForwardRow, Data) == 0x000018, "Member 'FKeepForwardRow::Data' has a wrong offset!");

// ScriptStruct QRSL.CloudGameSafeZoneInfo
// 0x001C (0x001C - 0x0000)
struct alignas(0x04) FCloudGameSafeZoneInfo final
{
public:
	uint8                                         Pad_1D5B[0x1C];                                    // 0x0000(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudGameSafeZoneInfo) == 0x000004, "Wrong alignment on FCloudGameSafeZoneInfo");
static_assert(sizeof(FCloudGameSafeZoneInfo) == 0x00001C, "Wrong size on FCloudGameSafeZoneInfo");

// ScriptStruct QRSL.OneSDKRoleInfo
// 0x0070 (0x0070 - 0x0000)
struct alignas(0x08) FOneSDKRoleInfo final
{
public:
	uint8                                         Pad_1D5C[0x70];                                    // 0x0000(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOneSDKRoleInfo) == 0x000008, "Wrong alignment on FOneSDKRoleInfo");
static_assert(sizeof(FOneSDKRoleInfo) == 0x000070, "Wrong size on FOneSDKRoleInfo");

// ScriptStruct QRSL.PinchFaceInfoPage
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FPinchFaceInfoPage final
{
public:
	uint8                                         Pad_1D5D[0x20];                                    // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPinchFaceInfoPage) == 0x000008, "Wrong alignment on FPinchFaceInfoPage");
static_assert(sizeof(FPinchFaceInfoPage) == 0x000020, "Wrong size on FPinchFaceInfoPage");

// ScriptStruct QRSL.PinchFaceInfo
// 0x00A8 (0x00A8 - 0x0000)
struct alignas(0x08) FPinchFaceInfo final
{
public:
	uint8                                         Pad_1D5E[0xA8];                                    // 0x0000(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPinchFaceInfo) == 0x000008, "Wrong alignment on FPinchFaceInfo");
static_assert(sizeof(FPinchFaceInfo) == 0x0000A8, "Wrong size on FPinchFaceInfo");

// ScriptStruct QRSL.BreakFateCacheTips
// 0x0078 (0x0078 - 0x0000)
struct alignas(0x08) FBreakFateCacheTips final
{
public:
	uint8                                         Pad_1D5F[0x78];                                    // 0x0000(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBreakFateCacheTips) == 0x000008, "Wrong alignment on FBreakFateCacheTips");
static_assert(sizeof(FBreakFateCacheTips) == 0x000078, "Wrong size on FBreakFateCacheTips");

// ScriptStruct QRSL.LotteryChooseRadioStyle
// 0x00A0 (0x00A0 - 0x0000)
struct FLotteryChooseRadioStyle final
{
public:
	class FString                                 ChooseId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ChooseEntranceImage;                               // 0x0010(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              TabCheckedImage;                                   // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              TabUnCheckedImage;                                 // 0x0060(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TabTextContent;                                    // 0x0088(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLotteryChooseRadioStyle) == 0x000008, "Wrong alignment on FLotteryChooseRadioStyle");
static_assert(sizeof(FLotteryChooseRadioStyle) == 0x0000A0, "Wrong size on FLotteryChooseRadioStyle");
static_assert(offsetof(FLotteryChooseRadioStyle, ChooseId) == 0x000000, "Member 'FLotteryChooseRadioStyle::ChooseId' has a wrong offset!");
static_assert(offsetof(FLotteryChooseRadioStyle, ChooseEntranceImage) == 0x000010, "Member 'FLotteryChooseRadioStyle::ChooseEntranceImage' has a wrong offset!");
static_assert(offsetof(FLotteryChooseRadioStyle, TabCheckedImage) == 0x000038, "Member 'FLotteryChooseRadioStyle::TabCheckedImage' has a wrong offset!");
static_assert(offsetof(FLotteryChooseRadioStyle, TabUnCheckedImage) == 0x000060, "Member 'FLotteryChooseRadioStyle::TabUnCheckedImage' has a wrong offset!");
static_assert(offsetof(FLotteryChooseRadioStyle, TabTextContent) == 0x000088, "Member 'FLotteryChooseRadioStyle::TabTextContent' has a wrong offset!");

// ScriptStruct QRSL.PinchUploadResult
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FPinchUploadResult final
{
public:
	uint8                                         Pad_1D60[0x8];                                     // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPinchUploadResult) == 0x000004, "Wrong alignment on FPinchUploadResult");
static_assert(sizeof(FPinchUploadResult) == 0x000008, "Wrong size on FPinchUploadResult");

// ScriptStruct QRSL.PinchTag
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FPinchTag final
{
public:
	uint8                                         Pad_1D61[0x18];                                    // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPinchTag) == 0x000008, "Wrong alignment on FPinchTag");
static_assert(sizeof(FPinchTag) == 0x000018, "Wrong size on FPinchTag");

// ScriptStruct QRSL.QRSLWorkGuideSimpleAwardConfig
// 0x000C (0x000C - 0x0000)
struct FQRSLWorkGuideSimpleAwardConfig final
{
public:
	int32                                         InCome;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DropGroupID;                                       // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLWorkGuideSimpleAwardConfig) == 0x000004, "Wrong alignment on FQRSLWorkGuideSimpleAwardConfig");
static_assert(sizeof(FQRSLWorkGuideSimpleAwardConfig) == 0x00000C, "Wrong size on FQRSLWorkGuideSimpleAwardConfig");
static_assert(offsetof(FQRSLWorkGuideSimpleAwardConfig, InCome) == 0x000000, "Member 'FQRSLWorkGuideSimpleAwardConfig::InCome' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSimpleAwardConfig, DropGroupID) == 0x000004, "Member 'FQRSLWorkGuideSimpleAwardConfig::DropGroupID' has a wrong offset!");

// ScriptStruct QRSL.VipServiceInfo
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x08) FVipServiceInfo final
{
public:
	uint8                                         Pad_1D62[0x48];                                    // 0x0000(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVipServiceInfo) == 0x000008, "Wrong alignment on FVipServiceInfo");
static_assert(sizeof(FVipServiceInfo) == 0x000048, "Wrong size on FVipServiceInfo");

// ScriptStruct QRSL.MXMessage
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FMXMessage final
{
public:
	uint8                                         Pad_1D63[0x28];                                    // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMXMessage) == 0x000008, "Wrong alignment on FMXMessage");
static_assert(sizeof(FMXMessage) == 0x000028, "Wrong size on FMXMessage");

// ScriptStruct QRSL.PlayerStartPoints
// 0x0018 (0x0018 - 0x0000)
struct FPlayerStartPoints final
{
public:
	TArray<struct FTransform>                     PointArray;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D64[0x8];                                     // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerStartPoints) == 0x000008, "Wrong alignment on FPlayerStartPoints");
static_assert(sizeof(FPlayerStartPoints) == 0x000018, "Wrong size on FPlayerStartPoints");
static_assert(offsetof(FPlayerStartPoints, PointArray) == 0x000000, "Member 'FPlayerStartPoints::PointArray' has a wrong offset!");

// ScriptStruct QRSL.PaoPaoFightTeamBornPointsDataRow
// 0x0050 (0x0058 - 0x0008)
struct FPaoPaoFightTeamBornPointsDataRow final : public FTableRowBase
{
public:
	TMap<EActivityClone_TeamNo, struct FPlayerStartPoints> TeamStartPointsMap;                                // 0x0008(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaoPaoFightTeamBornPointsDataRow) == 0x000008, "Wrong alignment on FPaoPaoFightTeamBornPointsDataRow");
static_assert(sizeof(FPaoPaoFightTeamBornPointsDataRow) == 0x000058, "Wrong size on FPaoPaoFightTeamBornPointsDataRow");
static_assert(offsetof(FPaoPaoFightTeamBornPointsDataRow, TeamStartPointsMap) == 0x000008, "Member 'FPaoPaoFightTeamBornPointsDataRow::TeamStartPointsMap' has a wrong offset!");

// ScriptStruct QRSL.WormholeDifficultyInfoData
// 0x0090 (0x0098 - 0x0008)
struct FWormholeDifficultyInfoData final : public FTableRowBase
{
public:
	class FText                                   DifficultyText;                                    // 0x0008(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              DifficultyIcon;                                    // 0x0020(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              DifficultyImage;                                   // 0x0048(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              DifficultySymbolTexture;                           // 0x0070(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholeDifficultyInfoData) == 0x000008, "Wrong alignment on FWormholeDifficultyInfoData");
static_assert(sizeof(FWormholeDifficultyInfoData) == 0x000098, "Wrong size on FWormholeDifficultyInfoData");
static_assert(offsetof(FWormholeDifficultyInfoData, DifficultyText) == 0x000008, "Member 'FWormholeDifficultyInfoData::DifficultyText' has a wrong offset!");
static_assert(offsetof(FWormholeDifficultyInfoData, DifficultyIcon) == 0x000020, "Member 'FWormholeDifficultyInfoData::DifficultyIcon' has a wrong offset!");
static_assert(offsetof(FWormholeDifficultyInfoData, DifficultyImage) == 0x000048, "Member 'FWormholeDifficultyInfoData::DifficultyImage' has a wrong offset!");
static_assert(offsetof(FWormholeDifficultyInfoData, DifficultySymbolTexture) == 0x000070, "Member 'FWormholeDifficultyInfoData::DifficultySymbolTexture' has a wrong offset!");

// ScriptStruct QRSL.FActivityClonePlayerTeamGE
// 0x0010 (0x0010 - 0x0000)
struct FFActivityClonePlayerTeamGE final
{
public:
	TArray<TSoftClassPtr<class UClass>>           TeamGEArray;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFActivityClonePlayerTeamGE) == 0x000008, "Wrong alignment on FFActivityClonePlayerTeamGE");
static_assert(sizeof(FFActivityClonePlayerTeamGE) == 0x000010, "Wrong size on FFActivityClonePlayerTeamGE");
static_assert(offsetof(FFActivityClonePlayerTeamGE, TeamGEArray) == 0x000000, "Member 'FFActivityClonePlayerTeamGE::TeamGEArray' has a wrong offset!");

// ScriptStruct QRSL.ArtifactStrengthEatenCardsData
// 0x000C (0x000C - 0x0000)
struct FArtifactStrengthEatenCardsData final
{
public:
	class FName                                   ArtifactID;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArtifactStrengthEatenCardsData) == 0x000004, "Wrong alignment on FArtifactStrengthEatenCardsData");
static_assert(sizeof(FArtifactStrengthEatenCardsData) == 0x00000C, "Wrong size on FArtifactStrengthEatenCardsData");
static_assert(offsetof(FArtifactStrengthEatenCardsData, ArtifactID) == 0x000000, "Member 'FArtifactStrengthEatenCardsData::ArtifactID' has a wrong offset!");
static_assert(offsetof(FArtifactStrengthEatenCardsData, Amount) == 0x000008, "Member 'FArtifactStrengthEatenCardsData::Amount' has a wrong offset!");

// ScriptStruct QRSL.ActivityCloneAwardData
// 0x0020 (0x0028 - 0x0008)
struct FActivityCloneAwardData final : public FTableRowBase
{
public:
	class FText                                   RankText;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   DropID;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActivityCloneAwardData) == 0x000008, "Wrong alignment on FActivityCloneAwardData");
static_assert(sizeof(FActivityCloneAwardData) == 0x000028, "Wrong size on FActivityCloneAwardData");
static_assert(offsetof(FActivityCloneAwardData, RankText) == 0x000008, "Member 'FActivityCloneAwardData::RankText' has a wrong offset!");
static_assert(offsetof(FActivityCloneAwardData, DropID) == 0x000020, "Member 'FActivityCloneAwardData::DropID' has a wrong offset!");

// ScriptStruct QRSL.FuncIDEntry
// 0x0020 (0x0020 - 0x0000)
struct FFuncIDEntry final
{
public:
	class FName                                   FuncIDs[0x3];                                      // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NoneFuncID;                                        // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFuncIDEntry) == 0x000004, "Wrong alignment on FFuncIDEntry");
static_assert(sizeof(FFuncIDEntry) == 0x000020, "Wrong size on FFuncIDEntry");
static_assert(offsetof(FFuncIDEntry, FuncIDs) == 0x000000, "Member 'FFuncIDEntry::FuncIDs' has a wrong offset!");
static_assert(offsetof(FFuncIDEntry, NoneFuncID) == 0x000018, "Member 'FFuncIDEntry::NoneFuncID' has a wrong offset!");

// ScriptStruct QRSL.MentorshipPlayerInfo
// 0x0118 (0x0118 - 0x0000)
struct FMentorshipPlayerInfo final
{
public:
	struct FUniqueNetIdRepl                       UniqueId;                                          // 0x0000(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoleName;                                          // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RoleLevel;                                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D65[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AvatarID;                                          // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarFrameID;                                     // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TeamID;                                            // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuildUniqueId                         GuildUID;                                          // 0x0070(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 GuildName;                                         // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuildPost                                    GuildPost;                                         // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAcceptFriendInvite;                               // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideBattleScore;                                  // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D66[0x5];                                     // 0x008B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RoleNameReportID;                                  // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuildNameReportID;                                 // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RoleTotalRecharge;                                 // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HistoryMaxGS;                                      // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         OffLineTime;                                       // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D67[0x58];                                    // 0x00C0(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMentorshipPlayerInfo) == 0x000008, "Wrong alignment on FMentorshipPlayerInfo");
static_assert(sizeof(FMentorshipPlayerInfo) == 0x000118, "Wrong size on FMentorshipPlayerInfo");
static_assert(offsetof(FMentorshipPlayerInfo, UniqueId) == 0x000000, "Member 'FMentorshipPlayerInfo::UniqueId' has a wrong offset!");
static_assert(offsetof(FMentorshipPlayerInfo, RoleName) == 0x000028, "Member 'FMentorshipPlayerInfo::RoleName' has a wrong offset!");
static_assert(offsetof(FMentorshipPlayerInfo, RoleLevel) == 0x000038, "Member 'FMentorshipPlayerInfo::RoleLevel' has a wrong offset!");
static_assert(offsetof(FMentorshipPlayerInfo, AvatarID) == 0x000040, "Member 'FMentorshipPlayerInfo::AvatarID' has a wrong offset!");
static_assert(offsetof(FMentorshipPlayerInfo, AvatarFrameID) == 0x000050, "Member 'FMentorshipPlayerInfo::AvatarFrameID' has a wrong offset!");
static_assert(offsetof(FMentorshipPlayerInfo, TeamID) == 0x000060, "Member 'FMentorshipPlayerInfo::TeamID' has a wrong offset!");
static_assert(offsetof(FMentorshipPlayerInfo, GuildUID) == 0x000070, "Member 'FMentorshipPlayerInfo::GuildUID' has a wrong offset!");
static_assert(offsetof(FMentorshipPlayerInfo, GuildName) == 0x000078, "Member 'FMentorshipPlayerInfo::GuildName' has a wrong offset!");
static_assert(offsetof(FMentorshipPlayerInfo, GuildPost) == 0x000088, "Member 'FMentorshipPlayerInfo::GuildPost' has a wrong offset!");
static_assert(offsetof(FMentorshipPlayerInfo, bAcceptFriendInvite) == 0x000089, "Member 'FMentorshipPlayerInfo::bAcceptFriendInvite' has a wrong offset!");
static_assert(offsetof(FMentorshipPlayerInfo, bHideBattleScore) == 0x00008A, "Member 'FMentorshipPlayerInfo::bHideBattleScore' has a wrong offset!");
static_assert(offsetof(FMentorshipPlayerInfo, RoleNameReportID) == 0x000090, "Member 'FMentorshipPlayerInfo::RoleNameReportID' has a wrong offset!");
static_assert(offsetof(FMentorshipPlayerInfo, GuildNameReportID) == 0x0000A0, "Member 'FMentorshipPlayerInfo::GuildNameReportID' has a wrong offset!");
static_assert(offsetof(FMentorshipPlayerInfo, RoleTotalRecharge) == 0x0000B0, "Member 'FMentorshipPlayerInfo::RoleTotalRecharge' has a wrong offset!");
static_assert(offsetof(FMentorshipPlayerInfo, HistoryMaxGS) == 0x0000B4, "Member 'FMentorshipPlayerInfo::HistoryMaxGS' has a wrong offset!");
static_assert(offsetof(FMentorshipPlayerInfo, OffLineTime) == 0x0000B8, "Member 'FMentorshipPlayerInfo::OffLineTime' has a wrong offset!");

// ScriptStruct QRSL.RecommendGoToEntries
// 0x0060 (0x0060 - 0x0000)
struct FRecommendGoToEntries final
{
public:
	class FString                                 GoToPaths[0x3];                                    // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BlockIDs[0x3];                                     // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NoneGoToPath;                                      // 0x0048(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NoneBlockID;                                       // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecommendGoToEntries) == 0x000008, "Wrong alignment on FRecommendGoToEntries");
static_assert(sizeof(FRecommendGoToEntries) == 0x000060, "Wrong size on FRecommendGoToEntries");
static_assert(offsetof(FRecommendGoToEntries, GoToPaths) == 0x000000, "Member 'FRecommendGoToEntries::GoToPaths' has a wrong offset!");
static_assert(offsetof(FRecommendGoToEntries, BlockIDs) == 0x000030, "Member 'FRecommendGoToEntries::BlockIDs' has a wrong offset!");
static_assert(offsetof(FRecommendGoToEntries, NoneGoToPath) == 0x000048, "Member 'FRecommendGoToEntries::NoneGoToPath' has a wrong offset!");
static_assert(offsetof(FRecommendGoToEntries, NoneBlockID) == 0x000058, "Member 'FRecommendGoToEntries::NoneBlockID' has a wrong offset!");

// ScriptStruct QRSL.ActivityClone_BigRichManMoveInfo
// 0x001C (0x001C - 0x0000)
struct FActivityClone_BigRichManMoveInfo final
{
public:
	struct FVector                                MiYaMoveVector;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               MiYaMoveRotator;                                   // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bNeedSwerve;                                       // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D68[0x3];                                     // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActivityClone_BigRichManMoveInfo) == 0x000004, "Wrong alignment on FActivityClone_BigRichManMoveInfo");
static_assert(sizeof(FActivityClone_BigRichManMoveInfo) == 0x00001C, "Wrong size on FActivityClone_BigRichManMoveInfo");
static_assert(offsetof(FActivityClone_BigRichManMoveInfo, MiYaMoveVector) == 0x000000, "Member 'FActivityClone_BigRichManMoveInfo::MiYaMoveVector' has a wrong offset!");
static_assert(offsetof(FActivityClone_BigRichManMoveInfo, MiYaMoveRotator) == 0x00000C, "Member 'FActivityClone_BigRichManMoveInfo::MiYaMoveRotator' has a wrong offset!");
static_assert(offsetof(FActivityClone_BigRichManMoveInfo, bNeedSwerve) == 0x000018, "Member 'FActivityClone_BigRichManMoveInfo::bNeedSwerve' has a wrong offset!");

// ScriptStruct QRSL.BreakFateSpawnerOverride
// 0x0018 (0x0018 - 0x0000)
struct FBreakFateSpawnerOverride final
{
public:
	class AHottaSpawnManagerBase*                 Spawner;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpawnID;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHottaSpawnPointContainerActor*         SharedPointContainer;                              // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBreakFateSpawnerOverride) == 0x000008, "Wrong alignment on FBreakFateSpawnerOverride");
static_assert(sizeof(FBreakFateSpawnerOverride) == 0x000018, "Wrong size on FBreakFateSpawnerOverride");
static_assert(offsetof(FBreakFateSpawnerOverride, Spawner) == 0x000000, "Member 'FBreakFateSpawnerOverride::Spawner' has a wrong offset!");
static_assert(offsetof(FBreakFateSpawnerOverride, SpawnID) == 0x000008, "Member 'FBreakFateSpawnerOverride::SpawnID' has a wrong offset!");
static_assert(offsetof(FBreakFateSpawnerOverride, SharedPointContainer) == 0x000010, "Member 'FBreakFateSpawnerOverride::SharedPointContainer' has a wrong offset!");

// ScriptStruct QRSL.PoisonSpawnerList
// 0x0010 (0x0010 - 0x0000)
struct FPoisonSpawnerList final
{
public:
	TArray<struct FBreakFateSpawnerOverride>      SpawnerOverrides;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoisonSpawnerList) == 0x000008, "Wrong alignment on FPoisonSpawnerList");
static_assert(sizeof(FPoisonSpawnerList) == 0x000010, "Wrong size on FPoisonSpawnerList");
static_assert(offsetof(FPoisonSpawnerList, SpawnerOverrides) == 0x000000, "Member 'FPoisonSpawnerList::SpawnerOverrides' has a wrong offset!");

// ScriptStruct QRSL.WormholeBattleData
// 0x0040 (0x0040 - 0x0000)
struct FWormholeBattleData final
{
public:
	int32                                         Layer;                                             // 0x0000(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Grade;                                             // 0x0004(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWormholeDifficulty                           Difficulty;                                        // 0x0008(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDay;                                            // 0x0009(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D69[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EWeatherState>                         Weathers;                                          // 0x0010(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	TArray<int32>                                 InsideEffectBuffMonstersIndex;                     // 0x0020(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	TArray<class FName>                           MonsterAdditionBuffs;                              // 0x0030(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholeBattleData) == 0x000008, "Wrong alignment on FWormholeBattleData");
static_assert(sizeof(FWormholeBattleData) == 0x000040, "Wrong size on FWormholeBattleData");
static_assert(offsetof(FWormholeBattleData, Layer) == 0x000000, "Member 'FWormholeBattleData::Layer' has a wrong offset!");
static_assert(offsetof(FWormholeBattleData, Grade) == 0x000004, "Member 'FWormholeBattleData::Grade' has a wrong offset!");
static_assert(offsetof(FWormholeBattleData, Difficulty) == 0x000008, "Member 'FWormholeBattleData::Difficulty' has a wrong offset!");
static_assert(offsetof(FWormholeBattleData, bIsDay) == 0x000009, "Member 'FWormholeBattleData::bIsDay' has a wrong offset!");
static_assert(offsetof(FWormholeBattleData, Weathers) == 0x000010, "Member 'FWormholeBattleData::Weathers' has a wrong offset!");
static_assert(offsetof(FWormholeBattleData, InsideEffectBuffMonstersIndex) == 0x000020, "Member 'FWormholeBattleData::InsideEffectBuffMonstersIndex' has a wrong offset!");
static_assert(offsetof(FWormholeBattleData, MonsterAdditionBuffs) == 0x000030, "Member 'FWormholeBattleData::MonsterAdditionBuffs' has a wrong offset!");

// ScriptStruct QRSL.QRSLAchievementCondition
// 0x0060 (0x0060 - 0x0000)
struct FQRSLAchievementCondition final
{
public:
	EQRSLAchievement                              Type;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQRSLAchievementCompareType                   Compare;                                           // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D6A[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percent;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D6B[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              Timespan;                                          // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemQuality                                  ItemQuality;                                       // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHottaOutputPathType                          ItemSource;                                        // 0x0021(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSuccess;                                        // 0x0022(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHottaAvatarType                              AvatarType;                                        // 0x0023(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFashionType                                  FashionType;                                       // 0x0024(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQRSLQuestType                                QuestType;                                         // 0x0025(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHottaCurrencyType                            CurrencyType;                                      // 0x0026(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHottaCharacterStateType                      StateType;                                         // 0x0027(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemRarity                                   RarityType;                                        // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D6C[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   Target;                                            // 0x0030(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETowerType                                    TowerType;                                         // 0x0058(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D6D[0x7];                                     // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQRSLAchievementCondition) == 0x000008, "Wrong alignment on FQRSLAchievementCondition");
static_assert(sizeof(FQRSLAchievementCondition) == 0x000060, "Wrong size on FQRSLAchievementCondition");
static_assert(offsetof(FQRSLAchievementCondition, Type) == 0x000000, "Member 'FQRSLAchievementCondition::Type' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementCondition, Compare) == 0x000001, "Member 'FQRSLAchievementCondition::Compare' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementCondition, Value) == 0x000004, "Member 'FQRSLAchievementCondition::Value' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementCondition, Tag) == 0x000008, "Member 'FQRSLAchievementCondition::Tag' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementCondition, Percent) == 0x000010, "Member 'FQRSLAchievementCondition::Percent' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementCondition, Timespan) == 0x000018, "Member 'FQRSLAchievementCondition::Timespan' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementCondition, ItemQuality) == 0x000020, "Member 'FQRSLAchievementCondition::ItemQuality' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementCondition, ItemSource) == 0x000021, "Member 'FQRSLAchievementCondition::ItemSource' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementCondition, bIsSuccess) == 0x000022, "Member 'FQRSLAchievementCondition::bIsSuccess' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementCondition, AvatarType) == 0x000023, "Member 'FQRSLAchievementCondition::AvatarType' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementCondition, FashionType) == 0x000024, "Member 'FQRSLAchievementCondition::FashionType' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementCondition, QuestType) == 0x000025, "Member 'FQRSLAchievementCondition::QuestType' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementCondition, CurrencyType) == 0x000026, "Member 'FQRSLAchievementCondition::CurrencyType' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementCondition, StateType) == 0x000027, "Member 'FQRSLAchievementCondition::StateType' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementCondition, RarityType) == 0x000028, "Member 'FQRSLAchievementCondition::RarityType' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementCondition, Target) == 0x000030, "Member 'FQRSLAchievementCondition::Target' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementCondition, TowerType) == 0x000058, "Member 'FQRSLAchievementCondition::TowerType' has a wrong offset!");

// ScriptStruct QRSL.QRSLAchievementConfigInfo
// 0x0120 (0x0128 - 0x0008)
struct FQRSLAchievementConfigInfo final : public FTableRowBase
{
public:
	int32                                         Amout;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCanFinishInStandalone;                          // 0x000C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAchievementTask                              Type;                                              // 0x000D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsImmediateCompleted;                             // 0x000E(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D6E[0x1];                                     // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ImmediateCondition_Level;                          // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D6F[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FQRSLAchievementCondition>      Condition;                                         // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EAchievementProgressUpdate                    UpdateType;                                        // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsConditionValueUpdateProgress;                   // 0x0029(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D70[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCurrencyData>                  CurrencyData;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FAwardInfo>                     AwardInfo;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   TitleId;                                           // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   ContentId;                                         // 0x0068(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   MainCategoryID;                                    // 0x0080(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   AppendCategoryID;                                  // 0x0098(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x00B0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitialDisplayAmount;                              // 0x00D8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D71[0x4];                                     // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ProgressUnitSuffix;                                // 0x00E0(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         ProgressScaleValue;                                // 0x00F8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ProgressDigitsCount;                               // 0x00FC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UnlockPersonalityID;                               // 0x0100(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPersonalityType                              AddPersonalityType;                                // 0x0108(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D72[0x3];                                     // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AddPersonalityScore;                               // 0x010C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TrophyId;                                          // 0x0110(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BitIndex;                                          // 0x0120(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D73[0x4];                                     // 0x0124(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQRSLAchievementConfigInfo) == 0x000008, "Wrong alignment on FQRSLAchievementConfigInfo");
static_assert(sizeof(FQRSLAchievementConfigInfo) == 0x000128, "Wrong size on FQRSLAchievementConfigInfo");
static_assert(offsetof(FQRSLAchievementConfigInfo, Amout) == 0x000008, "Member 'FQRSLAchievementConfigInfo::Amout' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementConfigInfo, bIsCanFinishInStandalone) == 0x00000C, "Member 'FQRSLAchievementConfigInfo::bIsCanFinishInStandalone' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementConfigInfo, Type) == 0x00000D, "Member 'FQRSLAchievementConfigInfo::Type' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementConfigInfo, bIsImmediateCompleted) == 0x00000E, "Member 'FQRSLAchievementConfigInfo::bIsImmediateCompleted' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementConfigInfo, ImmediateCondition_Level) == 0x000010, "Member 'FQRSLAchievementConfigInfo::ImmediateCondition_Level' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementConfigInfo, Condition) == 0x000018, "Member 'FQRSLAchievementConfigInfo::Condition' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementConfigInfo, UpdateType) == 0x000028, "Member 'FQRSLAchievementConfigInfo::UpdateType' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementConfigInfo, bIsConditionValueUpdateProgress) == 0x000029, "Member 'FQRSLAchievementConfigInfo::bIsConditionValueUpdateProgress' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementConfigInfo, CurrencyData) == 0x000030, "Member 'FQRSLAchievementConfigInfo::CurrencyData' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementConfigInfo, AwardInfo) == 0x000040, "Member 'FQRSLAchievementConfigInfo::AwardInfo' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementConfigInfo, TitleId) == 0x000050, "Member 'FQRSLAchievementConfigInfo::TitleId' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementConfigInfo, ContentId) == 0x000068, "Member 'FQRSLAchievementConfigInfo::ContentId' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementConfigInfo, MainCategoryID) == 0x000080, "Member 'FQRSLAchievementConfigInfo::MainCategoryID' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementConfigInfo, AppendCategoryID) == 0x000098, "Member 'FQRSLAchievementConfigInfo::AppendCategoryID' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementConfigInfo, Icon) == 0x0000B0, "Member 'FQRSLAchievementConfigInfo::Icon' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementConfigInfo, InitialDisplayAmount) == 0x0000D8, "Member 'FQRSLAchievementConfigInfo::InitialDisplayAmount' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementConfigInfo, ProgressUnitSuffix) == 0x0000E0, "Member 'FQRSLAchievementConfigInfo::ProgressUnitSuffix' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementConfigInfo, ProgressScaleValue) == 0x0000F8, "Member 'FQRSLAchievementConfigInfo::ProgressScaleValue' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementConfigInfo, ProgressDigitsCount) == 0x0000FC, "Member 'FQRSLAchievementConfigInfo::ProgressDigitsCount' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementConfigInfo, UnlockPersonalityID) == 0x000100, "Member 'FQRSLAchievementConfigInfo::UnlockPersonalityID' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementConfigInfo, AddPersonalityType) == 0x000108, "Member 'FQRSLAchievementConfigInfo::AddPersonalityType' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementConfigInfo, AddPersonalityScore) == 0x00010C, "Member 'FQRSLAchievementConfigInfo::AddPersonalityScore' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementConfigInfo, TrophyId) == 0x000110, "Member 'FQRSLAchievementConfigInfo::TrophyId' has a wrong offset!");
static_assert(offsetof(FQRSLAchievementConfigInfo, BitIndex) == 0x000120, "Member 'FQRSLAchievementConfigInfo::BitIndex' has a wrong offset!");

// ScriptStruct QRSL.CookingLevelData
// 0x0080 (0x0088 - 0x0008)
struct FCookingLevelData final : public FTableRowBase
{
public:
	int32                                         LevelUpExp;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedPlayerLevel;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DailyMaxExp;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D74[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TitleText;                                         // 0x0018(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            FoodStarWeight;                                    // 0x0030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         SuccessRateAdditionCoef;                           // 0x0080(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActivedRecipeWeightReduce;                         // 0x0084(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCookingLevelData) == 0x000008, "Wrong alignment on FCookingLevelData");
static_assert(sizeof(FCookingLevelData) == 0x000088, "Wrong size on FCookingLevelData");
static_assert(offsetof(FCookingLevelData, LevelUpExp) == 0x000008, "Member 'FCookingLevelData::LevelUpExp' has a wrong offset!");
static_assert(offsetof(FCookingLevelData, NeedPlayerLevel) == 0x00000C, "Member 'FCookingLevelData::NeedPlayerLevel' has a wrong offset!");
static_assert(offsetof(FCookingLevelData, DailyMaxExp) == 0x000010, "Member 'FCookingLevelData::DailyMaxExp' has a wrong offset!");
static_assert(offsetof(FCookingLevelData, TitleText) == 0x000018, "Member 'FCookingLevelData::TitleText' has a wrong offset!");
static_assert(offsetof(FCookingLevelData, FoodStarWeight) == 0x000030, "Member 'FCookingLevelData::FoodStarWeight' has a wrong offset!");
static_assert(offsetof(FCookingLevelData, SuccessRateAdditionCoef) == 0x000080, "Member 'FCookingLevelData::SuccessRateAdditionCoef' has a wrong offset!");
static_assert(offsetof(FCookingLevelData, ActivedRecipeWeightReduce) == 0x000084, "Member 'FCookingLevelData::ActivedRecipeWeightReduce' has a wrong offset!");

// ScriptStruct QRSL.TurretBomb
// 0x0010 (0x0010 - 0x0000)
struct FTurretBomb final
{
public:
	bool                                          bIsBombing;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D75[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BombLocation;                                      // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTurretBomb) == 0x000004, "Wrong alignment on FTurretBomb");
static_assert(sizeof(FTurretBomb) == 0x000010, "Wrong size on FTurretBomb");
static_assert(offsetof(FTurretBomb, bIsBombing) == 0x000000, "Member 'FTurretBomb::bIsBombing' has a wrong offset!");
static_assert(offsetof(FTurretBomb, BombLocation) == 0x000004, "Member 'FTurretBomb::BombLocation' has a wrong offset!");

// ScriptStruct QRSL.BicycleState
// 0x0040 (0x0040 - 0x0000)
struct FBicycleState final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardForce;                                      // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardTyreDirectionAngle;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInStampede;                                       // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D76[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StampedeSpeed;                                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputBrakeValue;                                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TarForwardForceChangeSpeed;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSaveSpeed;                                        // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D77[0x3];                                     // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBicycleState) == 0x000004, "Wrong alignment on FBicycleState");
static_assert(sizeof(FBicycleState) == 0x000040, "Wrong size on FBicycleState");
static_assert(offsetof(FBicycleState, Location) == 0x000000, "Member 'FBicycleState::Location' has a wrong offset!");
static_assert(offsetof(FBicycleState, Rotation) == 0x00000C, "Member 'FBicycleState::Rotation' has a wrong offset!");
static_assert(offsetof(FBicycleState, Velocity) == 0x000018, "Member 'FBicycleState::Velocity' has a wrong offset!");
static_assert(offsetof(FBicycleState, ForwardForce) == 0x000024, "Member 'FBicycleState::ForwardForce' has a wrong offset!");
static_assert(offsetof(FBicycleState, ForwardTyreDirectionAngle) == 0x000028, "Member 'FBicycleState::ForwardTyreDirectionAngle' has a wrong offset!");
static_assert(offsetof(FBicycleState, bInStampede) == 0x00002C, "Member 'FBicycleState::bInStampede' has a wrong offset!");
static_assert(offsetof(FBicycleState, StampedeSpeed) == 0x000030, "Member 'FBicycleState::StampedeSpeed' has a wrong offset!");
static_assert(offsetof(FBicycleState, InputBrakeValue) == 0x000034, "Member 'FBicycleState::InputBrakeValue' has a wrong offset!");
static_assert(offsetof(FBicycleState, TarForwardForceChangeSpeed) == 0x000038, "Member 'FBicycleState::TarForwardForceChangeSpeed' has a wrong offset!");
static_assert(offsetof(FBicycleState, bSaveSpeed) == 0x00003C, "Member 'FBicycleState::bSaveSpeed' has a wrong offset!");

// ScriptStruct QRSL.InventoryWrapInfo
// 0x000C (0x000C - 0x0000)
struct FInventoryWrapInfo final
{
public:
	int32                                         SwitchIndex;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WrapName;                                          // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInventoryWrapInfo) == 0x000004, "Wrong alignment on FInventoryWrapInfo");
static_assert(sizeof(FInventoryWrapInfo) == 0x00000C, "Wrong size on FInventoryWrapInfo");
static_assert(offsetof(FInventoryWrapInfo, SwitchIndex) == 0x000000, "Member 'FInventoryWrapInfo::SwitchIndex' has a wrong offset!");
static_assert(offsetof(FInventoryWrapInfo, WrapName) == 0x000004, "Member 'FInventoryWrapInfo::WrapName' has a wrong offset!");

// ScriptStruct QRSL.BigRichManTablePrice
// 0x0010 (0x0010 - 0x0000)
struct FBigRichManTablePrice final
{
public:
	TArray<int32>                                 TablePrice;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBigRichManTablePrice) == 0x000008, "Wrong alignment on FBigRichManTablePrice");
static_assert(sizeof(FBigRichManTablePrice) == 0x000010, "Wrong size on FBigRichManTablePrice");
static_assert(offsetof(FBigRichManTablePrice, TablePrice) == 0x000000, "Member 'FBigRichManTablePrice::TablePrice' has a wrong offset!");

// ScriptStruct QRSL.BiochemistryWeaponInfo
// 0x0058 (0x0058 - 0x0000)
struct FBiochemistryWeaponInfo final
{
public:
	class FName                                   WeaponID;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   WeaponActorClass;                                  // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              WeaponImage;                                       // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBiochemistryWeaponInfo) == 0x000008, "Wrong alignment on FBiochemistryWeaponInfo");
static_assert(sizeof(FBiochemistryWeaponInfo) == 0x000058, "Wrong size on FBiochemistryWeaponInfo");
static_assert(offsetof(FBiochemistryWeaponInfo, WeaponID) == 0x000000, "Member 'FBiochemistryWeaponInfo::WeaponID' has a wrong offset!");
static_assert(offsetof(FBiochemistryWeaponInfo, WeaponActorClass) == 0x000008, "Member 'FBiochemistryWeaponInfo::WeaponActorClass' has a wrong offset!");
static_assert(offsetof(FBiochemistryWeaponInfo, WeaponImage) == 0x000030, "Member 'FBiochemistryWeaponInfo::WeaponImage' has a wrong offset!");

// ScriptStruct QRSL.BiochemistryDamageMarkData
// 0x0008 (0x0008 - 0x0000)
struct FBiochemistryDamageMarkData final
{
public:
	int32                                         Damage;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Mark;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBiochemistryDamageMarkData) == 0x000004, "Wrong alignment on FBiochemistryDamageMarkData");
static_assert(sizeof(FBiochemistryDamageMarkData) == 0x000008, "Wrong size on FBiochemistryDamageMarkData");
static_assert(offsetof(FBiochemistryDamageMarkData, Damage) == 0x000000, "Member 'FBiochemistryDamageMarkData::Damage' has a wrong offset!");
static_assert(offsetof(FBiochemistryDamageMarkData, Mark) == 0x000004, "Member 'FBiochemistryDamageMarkData::Mark' has a wrong offset!");

// ScriptStruct QRSL.BiochemistrySurvivalMarkData
// 0x0018 (0x0020 - 0x0008)
struct FBiochemistrySurvivalMarkData final : public FTableRowBase
{
public:
	int32                                         SurvivaTime;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D78[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 SurvivaMark;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBiochemistrySurvivalMarkData) == 0x000008, "Wrong alignment on FBiochemistrySurvivalMarkData");
static_assert(sizeof(FBiochemistrySurvivalMarkData) == 0x000020, "Wrong size on FBiochemistrySurvivalMarkData");
static_assert(offsetof(FBiochemistrySurvivalMarkData, SurvivaTime) == 0x000008, "Member 'FBiochemistrySurvivalMarkData::SurvivaTime' has a wrong offset!");
static_assert(offsetof(FBiochemistrySurvivalMarkData, SurvivaMark) == 0x000010, "Member 'FBiochemistrySurvivalMarkData::SurvivaMark' has a wrong offset!");

// ScriptStruct QRSL.GamepadCommandTableStickMenuParams
// 0x0040 (0x0040 - 0x0000)
struct FGamepadCommandTableStickMenuParams final
{
public:
	class FName                                   StickButton_F;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StickButton_RF;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StickButton_R;                                     // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StickButton_RB;                                    // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StickButton_B;                                     // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StickButton_LB;                                    // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StickButton_L;                                     // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StickButton_LF;                                    // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGamepadCommandTableStickMenuParams) == 0x000004, "Wrong alignment on FGamepadCommandTableStickMenuParams");
static_assert(sizeof(FGamepadCommandTableStickMenuParams) == 0x000040, "Wrong size on FGamepadCommandTableStickMenuParams");
static_assert(offsetof(FGamepadCommandTableStickMenuParams, StickButton_F) == 0x000000, "Member 'FGamepadCommandTableStickMenuParams::StickButton_F' has a wrong offset!");
static_assert(offsetof(FGamepadCommandTableStickMenuParams, StickButton_RF) == 0x000008, "Member 'FGamepadCommandTableStickMenuParams::StickButton_RF' has a wrong offset!");
static_assert(offsetof(FGamepadCommandTableStickMenuParams, StickButton_R) == 0x000010, "Member 'FGamepadCommandTableStickMenuParams::StickButton_R' has a wrong offset!");
static_assert(offsetof(FGamepadCommandTableStickMenuParams, StickButton_RB) == 0x000018, "Member 'FGamepadCommandTableStickMenuParams::StickButton_RB' has a wrong offset!");
static_assert(offsetof(FGamepadCommandTableStickMenuParams, StickButton_B) == 0x000020, "Member 'FGamepadCommandTableStickMenuParams::StickButton_B' has a wrong offset!");
static_assert(offsetof(FGamepadCommandTableStickMenuParams, StickButton_LB) == 0x000028, "Member 'FGamepadCommandTableStickMenuParams::StickButton_LB' has a wrong offset!");
static_assert(offsetof(FGamepadCommandTableStickMenuParams, StickButton_L) == 0x000030, "Member 'FGamepadCommandTableStickMenuParams::StickButton_L' has a wrong offset!");
static_assert(offsetof(FGamepadCommandTableStickMenuParams, StickButton_LF) == 0x000038, "Member 'FGamepadCommandTableStickMenuParams::StickButton_LF' has a wrong offset!");

// ScriptStruct QRSL.BiochemistryRefreshChestTurnInfo
// 0x0020 (0x0028 - 0x0008)
struct FBiochemistryRefreshChestTurnInfo final : public FTableRowBase
{
public:
	int32                                         RefreshChestTurn;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChestExistTime;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChestRefreshTime;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D79[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBiochemistryRefreshChestInfoTay> RefreshChestInfoTay;                               // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBiochemistryRefreshChestTurnInfo) == 0x000008, "Wrong alignment on FBiochemistryRefreshChestTurnInfo");
static_assert(sizeof(FBiochemistryRefreshChestTurnInfo) == 0x000028, "Wrong size on FBiochemistryRefreshChestTurnInfo");
static_assert(offsetof(FBiochemistryRefreshChestTurnInfo, RefreshChestTurn) == 0x000008, "Member 'FBiochemistryRefreshChestTurnInfo::RefreshChestTurn' has a wrong offset!");
static_assert(offsetof(FBiochemistryRefreshChestTurnInfo, ChestExistTime) == 0x00000C, "Member 'FBiochemistryRefreshChestTurnInfo::ChestExistTime' has a wrong offset!");
static_assert(offsetof(FBiochemistryRefreshChestTurnInfo, ChestRefreshTime) == 0x000010, "Member 'FBiochemistryRefreshChestTurnInfo::ChestRefreshTime' has a wrong offset!");
static_assert(offsetof(FBiochemistryRefreshChestTurnInfo, RefreshChestInfoTay) == 0x000018, "Member 'FBiochemistryRefreshChestTurnInfo::RefreshChestInfoTay' has a wrong offset!");

// ScriptStruct QRSL.BiochemistryChestStaticInfo
// 0x00A8 (0x00A8 - 0x0000)
struct FBiochemistryChestStaticInfo final
{
public:
	EBiochemistryChestType                        ChestType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D7A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   BonsBoxActor;                                      // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   BuffClass;                                         // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   MonsterBuffClass;                                  // 0x0058(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ChestParticleActor;                                // 0x0080(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBiochemistryChestStaticInfo) == 0x000008, "Wrong alignment on FBiochemistryChestStaticInfo");
static_assert(sizeof(FBiochemistryChestStaticInfo) == 0x0000A8, "Wrong size on FBiochemistryChestStaticInfo");
static_assert(offsetof(FBiochemistryChestStaticInfo, ChestType) == 0x000000, "Member 'FBiochemistryChestStaticInfo::ChestType' has a wrong offset!");
static_assert(offsetof(FBiochemistryChestStaticInfo, BonsBoxActor) == 0x000008, "Member 'FBiochemistryChestStaticInfo::BonsBoxActor' has a wrong offset!");
static_assert(offsetof(FBiochemistryChestStaticInfo, BuffClass) == 0x000030, "Member 'FBiochemistryChestStaticInfo::BuffClass' has a wrong offset!");
static_assert(offsetof(FBiochemistryChestStaticInfo, MonsterBuffClass) == 0x000058, "Member 'FBiochemistryChestStaticInfo::MonsterBuffClass' has a wrong offset!");
static_assert(offsetof(FBiochemistryChestStaticInfo, ChestParticleActor) == 0x000080, "Member 'FBiochemistryChestStaticInfo::ChestParticleActor' has a wrong offset!");

// ScriptStruct QRSL.CardData
// 0x0038 (0x0038 - 0x0000)
struct FCardData final
{
public:
	class FName                                   ArtifactID;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Destription;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UTexture2D*                             DisPlayPhoto;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             CardPhoto;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             BackPhoto;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCardData) == 0x000008, "Wrong alignment on FCardData");
static_assert(sizeof(FCardData) == 0x000038, "Wrong size on FCardData");
static_assert(offsetof(FCardData, ArtifactID) == 0x000000, "Member 'FCardData::ArtifactID' has a wrong offset!");
static_assert(offsetof(FCardData, Destription) == 0x000008, "Member 'FCardData::Destription' has a wrong offset!");
static_assert(offsetof(FCardData, DisPlayPhoto) == 0x000020, "Member 'FCardData::DisPlayPhoto' has a wrong offset!");
static_assert(offsetof(FCardData, CardPhoto) == 0x000028, "Member 'FCardData::CardPhoto' has a wrong offset!");
static_assert(offsetof(FCardData, BackPhoto) == 0x000030, "Member 'FCardData::BackPhoto' has a wrong offset!");

// ScriptStruct QRSL.CardDataArray
// 0x0010 (0x0010 - 0x0000)
struct FCardDataArray final
{
public:
	TArray<struct FCardData>                      CardDataArray;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCardDataArray) == 0x000008, "Wrong alignment on FCardDataArray");
static_assert(sizeof(FCardDataArray) == 0x000010, "Wrong size on FCardDataArray");
static_assert(offsetof(FCardDataArray, CardDataArray) == 0x000000, "Member 'FCardDataArray::CardDataArray' has a wrong offset!");

// ScriptStruct QRSL.BiochemistryGameInfo
// 0x000C (0x000C - 0x0000)
struct FBiochemistryGameInfo final
{
public:
	EBiochemistryGameType                         GameType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBiochemistryGameProcessType                  ProcessType;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D7B[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RefreshChestTurn;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SurvivalTurn;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBiochemistryGameInfo) == 0x000004, "Wrong alignment on FBiochemistryGameInfo");
static_assert(sizeof(FBiochemistryGameInfo) == 0x00000C, "Wrong size on FBiochemistryGameInfo");
static_assert(offsetof(FBiochemistryGameInfo, GameType) == 0x000000, "Member 'FBiochemistryGameInfo::GameType' has a wrong offset!");
static_assert(offsetof(FBiochemistryGameInfo, ProcessType) == 0x000001, "Member 'FBiochemistryGameInfo::ProcessType' has a wrong offset!");
static_assert(offsetof(FBiochemistryGameInfo, RefreshChestTurn) == 0x000004, "Member 'FBiochemistryGameInfo::RefreshChestTurn' has a wrong offset!");
static_assert(offsetof(FBiochemistryGameInfo, SurvivalTurn) == 0x000008, "Member 'FBiochemistryGameInfo::SurvivalTurn' has a wrong offset!");

// ScriptStruct QRSL.TeammateIndicatorInfo
// 0x000C (0x000C - 0x0000)
struct FTeammateIndicatorInfo final
{
public:
	ETeammateIndex                                TeammateIndex;                                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D7C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UQRSLUI_AzimuthIndicator> IndicatorWidget;                                   // 0x0004(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTeammateIndicatorInfo) == 0x000004, "Wrong alignment on FTeammateIndicatorInfo");
static_assert(sizeof(FTeammateIndicatorInfo) == 0x00000C, "Wrong size on FTeammateIndicatorInfo");
static_assert(offsetof(FTeammateIndicatorInfo, TeammateIndex) == 0x000000, "Member 'FTeammateIndicatorInfo::TeammateIndex' has a wrong offset!");
static_assert(offsetof(FTeammateIndicatorInfo, IndicatorWidget) == 0x000004, "Member 'FTeammateIndicatorInfo::IndicatorWidget' has a wrong offset!");

// ScriptStruct QRSL.BiochemistryPlayerInfo
// 0x0058 (0x0058 - 0x0000)
struct FBiochemistryPlayerInfo final
{
public:
	int64                                         PlayerID;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AvatarID;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AvatarFrameID;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBiochemistryPlayerType                       PlayerType;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D7D[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SurvivalMark;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageMark;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InfectMark;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SupplyMark;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerDamage;                                      // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHottaDropItemInfo>             DropItemInfoTay;                                   // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bLeave;                                            // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D7E[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBiochemistryPlayerInfo) == 0x000008, "Wrong alignment on FBiochemistryPlayerInfo");
static_assert(sizeof(FBiochemistryPlayerInfo) == 0x000058, "Wrong size on FBiochemistryPlayerInfo");
static_assert(offsetof(FBiochemistryPlayerInfo, PlayerID) == 0x000000, "Member 'FBiochemistryPlayerInfo::PlayerID' has a wrong offset!");
static_assert(offsetof(FBiochemistryPlayerInfo, PlayerName) == 0x000008, "Member 'FBiochemistryPlayerInfo::PlayerName' has a wrong offset!");
static_assert(offsetof(FBiochemistryPlayerInfo, AvatarID) == 0x000018, "Member 'FBiochemistryPlayerInfo::AvatarID' has a wrong offset!");
static_assert(offsetof(FBiochemistryPlayerInfo, AvatarFrameID) == 0x000020, "Member 'FBiochemistryPlayerInfo::AvatarFrameID' has a wrong offset!");
static_assert(offsetof(FBiochemistryPlayerInfo, PlayerType) == 0x000028, "Member 'FBiochemistryPlayerInfo::PlayerType' has a wrong offset!");
static_assert(offsetof(FBiochemistryPlayerInfo, SurvivalMark) == 0x00002C, "Member 'FBiochemistryPlayerInfo::SurvivalMark' has a wrong offset!");
static_assert(offsetof(FBiochemistryPlayerInfo, DamageMark) == 0x000030, "Member 'FBiochemistryPlayerInfo::DamageMark' has a wrong offset!");
static_assert(offsetof(FBiochemistryPlayerInfo, InfectMark) == 0x000034, "Member 'FBiochemistryPlayerInfo::InfectMark' has a wrong offset!");
static_assert(offsetof(FBiochemistryPlayerInfo, SupplyMark) == 0x000038, "Member 'FBiochemistryPlayerInfo::SupplyMark' has a wrong offset!");
static_assert(offsetof(FBiochemistryPlayerInfo, PlayerDamage) == 0x00003C, "Member 'FBiochemistryPlayerInfo::PlayerDamage' has a wrong offset!");
static_assert(offsetof(FBiochemistryPlayerInfo, DropItemInfoTay) == 0x000040, "Member 'FBiochemistryPlayerInfo::DropItemInfoTay' has a wrong offset!");
static_assert(offsetof(FBiochemistryPlayerInfo, bLeave) == 0x000050, "Member 'FBiochemistryPlayerInfo::bLeave' has a wrong offset!");

// ScriptStruct QRSL.SupplementTargetPointInfo
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x10) FSupplementTargetPointInfo final
{
public:
	uint8                                         Pad_1D7F[0x50];                                    // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSupplementTargetPointInfo) == 0x000010, "Wrong alignment on FSupplementTargetPointInfo");
static_assert(sizeof(FSupplementTargetPointInfo) == 0x000050, "Wrong size on FSupplementTargetPointInfo");

// ScriptStruct QRSL.QRSLCalendarBossConfig
// 0x00B0 (0x00B0 - 0x0000)
struct FQRSLCalendarBossConfig final
{
public:
	TSoftClassPtr<class UClass>                   MonsterCharacterClass;                             // 0x0000(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D80[0x8];                                     // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnMonsterTransform;                             // 0x0030(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         BossLifeTime;                                      // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D81[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              BossIcon;                                          // 0x0068(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID;                                            // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DropGroupID;                                       // 0x009C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D82[0xC];                                     // 0x00A4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQRSLCalendarBossConfig) == 0x000010, "Wrong alignment on FQRSLCalendarBossConfig");
static_assert(sizeof(FQRSLCalendarBossConfig) == 0x0000B0, "Wrong size on FQRSLCalendarBossConfig");
static_assert(offsetof(FQRSLCalendarBossConfig, MonsterCharacterClass) == 0x000000, "Member 'FQRSLCalendarBossConfig::MonsterCharacterClass' has a wrong offset!");
static_assert(offsetof(FQRSLCalendarBossConfig, SpawnMonsterTransform) == 0x000030, "Member 'FQRSLCalendarBossConfig::SpawnMonsterTransform' has a wrong offset!");
static_assert(offsetof(FQRSLCalendarBossConfig, BossLifeTime) == 0x000060, "Member 'FQRSLCalendarBossConfig::BossLifeTime' has a wrong offset!");
static_assert(offsetof(FQRSLCalendarBossConfig, BossIcon) == 0x000068, "Member 'FQRSLCalendarBossConfig::BossIcon' has a wrong offset!");
static_assert(offsetof(FQRSLCalendarBossConfig, ItemID) == 0x000090, "Member 'FQRSLCalendarBossConfig::ItemID' has a wrong offset!");
static_assert(offsetof(FQRSLCalendarBossConfig, ItemCount) == 0x000098, "Member 'FQRSLCalendarBossConfig::ItemCount' has a wrong offset!");
static_assert(offsetof(FQRSLCalendarBossConfig, DropGroupID) == 0x00009C, "Member 'FQRSLCalendarBossConfig::DropGroupID' has a wrong offset!");

// ScriptStruct QRSL.WormholeGridMapsData
// 0x0050 (0x0058 - 0x0008)
struct FWormholeGridMapsData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UWorld>                  LevelObj;                                          // 0x0008(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              MapImage;                                          // 0x0030(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholeGridMapsData) == 0x000008, "Wrong alignment on FWormholeGridMapsData");
static_assert(sizeof(FWormholeGridMapsData) == 0x000058, "Wrong size on FWormholeGridMapsData");
static_assert(offsetof(FWormholeGridMapsData, LevelObj) == 0x000008, "Member 'FWormholeGridMapsData::LevelObj' has a wrong offset!");
static_assert(offsetof(FWormholeGridMapsData, MapImage) == 0x000030, "Member 'FWormholeGridMapsData::MapImage' has a wrong offset!");

// ScriptStruct QRSL.QRSLCalendarQuest
// 0x0048 (0x0048 - 0x0000)
struct FQRSLCalendarQuest final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconImage;                                         // 0x0008(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFCalendarQuestType                           QuestType;                                         // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D83[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TextID;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLCalendarQuest) == 0x000008, "Wrong alignment on FQRSLCalendarQuest");
static_assert(sizeof(FQRSLCalendarQuest) == 0x000048, "Wrong size on FQRSLCalendarQuest");
static_assert(offsetof(FQRSLCalendarQuest, QuestID) == 0x000000, "Member 'FQRSLCalendarQuest::QuestID' has a wrong offset!");
static_assert(offsetof(FQRSLCalendarQuest, IconImage) == 0x000008, "Member 'FQRSLCalendarQuest::IconImage' has a wrong offset!");
static_assert(offsetof(FQRSLCalendarQuest, QuestType) == 0x000030, "Member 'FQRSLCalendarQuest::QuestType' has a wrong offset!");
static_assert(offsetof(FQRSLCalendarQuest, TextID) == 0x000038, "Member 'FQRSLCalendarQuest::TextID' has a wrong offset!");

// ScriptStruct QRSL.QRSLCalendarQuestConfig
// 0x0080 (0x0080 - 0x0000)
struct FQRSLCalendarQuestConfig final
{
public:
	TArray<struct FQRSLCalendarQuest>             QuestArray;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FQRSLCalendarQuest                     StoryQuest;                                        // 0x0010(0x0048)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconImage;                                         // 0x0058(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLCalendarQuestConfig) == 0x000008, "Wrong alignment on FQRSLCalendarQuestConfig");
static_assert(sizeof(FQRSLCalendarQuestConfig) == 0x000080, "Wrong size on FQRSLCalendarQuestConfig");
static_assert(offsetof(FQRSLCalendarQuestConfig, QuestArray) == 0x000000, "Member 'FQRSLCalendarQuestConfig::QuestArray' has a wrong offset!");
static_assert(offsetof(FQRSLCalendarQuestConfig, StoryQuest) == 0x000010, "Member 'FQRSLCalendarQuestConfig::StoryQuest' has a wrong offset!");
static_assert(offsetof(FQRSLCalendarQuestConfig, IconImage) == 0x000058, "Member 'FQRSLCalendarQuestConfig::IconImage' has a wrong offset!");

// ScriptStruct QRSL.HorseStatus
// 0x0018 (0x0018 - 0x0000)
struct FHorseStatus final
{
public:
	int32                                         HorseIndex;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SeatStatus[0x2];                                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D84[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AHottaPlayerCharacter>   MountedPlayers[0x2];                               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHorseStatus) == 0x000004, "Wrong alignment on FHorseStatus");
static_assert(sizeof(FHorseStatus) == 0x000018, "Wrong size on FHorseStatus");
static_assert(offsetof(FHorseStatus, HorseIndex) == 0x000000, "Member 'FHorseStatus::HorseIndex' has a wrong offset!");
static_assert(offsetof(FHorseStatus, SeatStatus) == 0x000004, "Member 'FHorseStatus::SeatStatus' has a wrong offset!");
static_assert(offsetof(FHorseStatus, MountedPlayers) == 0x000008, "Member 'FHorseStatus::MountedPlayers' has a wrong offset!");

// ScriptStruct QRSL.RewawrdWidget
// 0x0028 (0x0028 - 0x0000)
struct FRewawrdWidget final
{
public:
	class FName                                   ReceiveRadioBoxName;                               // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RewardImageName;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHottaRadioBox*                         ReceiveRadioBox;                                   // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 RewardImage;                                       // 0x0018(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemNameID;                                        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRewawrdWidget) == 0x000008, "Wrong alignment on FRewawrdWidget");
static_assert(sizeof(FRewawrdWidget) == 0x000028, "Wrong size on FRewawrdWidget");
static_assert(offsetof(FRewawrdWidget, ReceiveRadioBoxName) == 0x000000, "Member 'FRewawrdWidget::ReceiveRadioBoxName' has a wrong offset!");
static_assert(offsetof(FRewawrdWidget, RewardImageName) == 0x000008, "Member 'FRewawrdWidget::RewardImageName' has a wrong offset!");
static_assert(offsetof(FRewawrdWidget, ReceiveRadioBox) == 0x000010, "Member 'FRewawrdWidget::ReceiveRadioBox' has a wrong offset!");
static_assert(offsetof(FRewawrdWidget, RewardImage) == 0x000018, "Member 'FRewawrdWidget::RewardImage' has a wrong offset!");
static_assert(offsetof(FRewawrdWidget, ItemNameID) == 0x000020, "Member 'FRewawrdWidget::ItemNameID' has a wrong offset!");

// ScriptStruct QRSL.MountSkinConfig
// 0x01C8 (0x01D0 - 0x0008)
struct FMountSkinConfig final : public FTableRowBase
{
public:
	class FName                                   OwnerMountId;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0010(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              BigImage;                                          // 0x0028(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0050(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   MountActorClass;                                   // 0x0078(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   PhysicsVehicleActorClass;                          // 0x00A0(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D85[0x8];                                     // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PreviewActorTransform;                             // 0x00D0(0x0030)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0100(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         AutoUnlockWhenMountLevel;                          // 0x0118(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D86[0x4];                                     // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   UnlockDescription;                                 // 0x0120(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   DefaultColorId;                                    // 0x0138(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowNeedUnLock;                                   // 0x0140(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D87[0x7];                                     // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EHottaOverSeaRegionType, bool>           OverSeaShowNeedUnLock;                             // 0x0148(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bPrviewActorHideMesh;                              // 0x0198(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanRepeatedlyObtained;                            // 0x0199(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D88[0x6];                                     // 0x019A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PreSkinConditions;                                 // 0x01A0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   PreConditionsNoMetMsg;                             // 0x01B0(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D89[0x8];                                     // 0x01C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMountSkinConfig) == 0x000010, "Wrong alignment on FMountSkinConfig");
static_assert(sizeof(FMountSkinConfig) == 0x0001D0, "Wrong size on FMountSkinConfig");
static_assert(offsetof(FMountSkinConfig, OwnerMountId) == 0x000008, "Member 'FMountSkinConfig::OwnerMountId' has a wrong offset!");
static_assert(offsetof(FMountSkinConfig, Name) == 0x000010, "Member 'FMountSkinConfig::Name' has a wrong offset!");
static_assert(offsetof(FMountSkinConfig, BigImage) == 0x000028, "Member 'FMountSkinConfig::BigImage' has a wrong offset!");
static_assert(offsetof(FMountSkinConfig, Icon) == 0x000050, "Member 'FMountSkinConfig::Icon' has a wrong offset!");
static_assert(offsetof(FMountSkinConfig, MountActorClass) == 0x000078, "Member 'FMountSkinConfig::MountActorClass' has a wrong offset!");
static_assert(offsetof(FMountSkinConfig, PhysicsVehicleActorClass) == 0x0000A0, "Member 'FMountSkinConfig::PhysicsVehicleActorClass' has a wrong offset!");
static_assert(offsetof(FMountSkinConfig, PreviewActorTransform) == 0x0000D0, "Member 'FMountSkinConfig::PreviewActorTransform' has a wrong offset!");
static_assert(offsetof(FMountSkinConfig, Description) == 0x000100, "Member 'FMountSkinConfig::Description' has a wrong offset!");
static_assert(offsetof(FMountSkinConfig, AutoUnlockWhenMountLevel) == 0x000118, "Member 'FMountSkinConfig::AutoUnlockWhenMountLevel' has a wrong offset!");
static_assert(offsetof(FMountSkinConfig, UnlockDescription) == 0x000120, "Member 'FMountSkinConfig::UnlockDescription' has a wrong offset!");
static_assert(offsetof(FMountSkinConfig, DefaultColorId) == 0x000138, "Member 'FMountSkinConfig::DefaultColorId' has a wrong offset!");
static_assert(offsetof(FMountSkinConfig, bShowNeedUnLock) == 0x000140, "Member 'FMountSkinConfig::bShowNeedUnLock' has a wrong offset!");
static_assert(offsetof(FMountSkinConfig, OverSeaShowNeedUnLock) == 0x000148, "Member 'FMountSkinConfig::OverSeaShowNeedUnLock' has a wrong offset!");
static_assert(offsetof(FMountSkinConfig, bPrviewActorHideMesh) == 0x000198, "Member 'FMountSkinConfig::bPrviewActorHideMesh' has a wrong offset!");
static_assert(offsetof(FMountSkinConfig, bCanRepeatedlyObtained) == 0x000199, "Member 'FMountSkinConfig::bCanRepeatedlyObtained' has a wrong offset!");
static_assert(offsetof(FMountSkinConfig, PreSkinConditions) == 0x0001A0, "Member 'FMountSkinConfig::PreSkinConditions' has a wrong offset!");
static_assert(offsetof(FMountSkinConfig, PreConditionsNoMetMsg) == 0x0001B0, "Member 'FMountSkinConfig::PreConditionsNoMetMsg' has a wrong offset!");

// ScriptStruct QRSL.HorseEntry
// 0x0038 (0x0038 - 0x0000)
struct FHorseEntry final
{
public:
	int32                                         HorseIndex;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HorseSeatSockets[0x2];                             // 0x0004(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MeshTag;                                           // 0x0014(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InteractSphereTag;                                 // 0x001C(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8A[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   MeshComponent;                                     // 0x0028(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHottaInteractableSphereComponent*      InteractSphere;                                    // 0x0030(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHorseEntry) == 0x000008, "Wrong alignment on FHorseEntry");
static_assert(sizeof(FHorseEntry) == 0x000038, "Wrong size on FHorseEntry");
static_assert(offsetof(FHorseEntry, HorseIndex) == 0x000000, "Member 'FHorseEntry::HorseIndex' has a wrong offset!");
static_assert(offsetof(FHorseEntry, HorseSeatSockets) == 0x000004, "Member 'FHorseEntry::HorseSeatSockets' has a wrong offset!");
static_assert(offsetof(FHorseEntry, MeshTag) == 0x000014, "Member 'FHorseEntry::MeshTag' has a wrong offset!");
static_assert(offsetof(FHorseEntry, InteractSphereTag) == 0x00001C, "Member 'FHorseEntry::InteractSphereTag' has a wrong offset!");
static_assert(offsetof(FHorseEntry, MeshComponent) == 0x000028, "Member 'FHorseEntry::MeshComponent' has a wrong offset!");
static_assert(offsetof(FHorseEntry, InteractSphere) == 0x000030, "Member 'FHorseEntry::InteractSphere' has a wrong offset!");

// ScriptStruct QRSL.SetMVectorValue
// 0x0028 (0x0028 - 0x0000)
struct FSetMVectorValue final
{
public:
	class FName                                   ChangeName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           StartValue;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           EndValue;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSetMVectorValue) == 0x000004, "Wrong alignment on FSetMVectorValue");
static_assert(sizeof(FSetMVectorValue) == 0x000028, "Wrong size on FSetMVectorValue");
static_assert(offsetof(FSetMVectorValue, ChangeName) == 0x000000, "Member 'FSetMVectorValue::ChangeName' has a wrong offset!");
static_assert(offsetof(FSetMVectorValue, StartValue) == 0x000008, "Member 'FSetMVectorValue::StartValue' has a wrong offset!");
static_assert(offsetof(FSetMVectorValue, EndValue) == 0x000018, "Member 'FSetMVectorValue::EndValue' has a wrong offset!");

// ScriptStruct QRSL.ChangeColorConfig
// 0x0058 (0x0058 - 0x0000)
struct FChangeColorConfig final
{
public:
	uint8                                         bBeginChangeColor : 1;                             // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1D8B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ChangeMeshName;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationTime;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8C[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSetMVectorValue>               Vectors;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSetMScaleValue>                Scales;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ElementIndexes;                                    // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8D[0x8];                                     // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChangeColorConfig) == 0x000008, "Wrong alignment on FChangeColorConfig");
static_assert(sizeof(FChangeColorConfig) == 0x000058, "Wrong size on FChangeColorConfig");
static_assert(offsetof(FChangeColorConfig, ChangeMeshName) == 0x000008, "Member 'FChangeColorConfig::ChangeMeshName' has a wrong offset!");
static_assert(offsetof(FChangeColorConfig, DurationTime) == 0x000018, "Member 'FChangeColorConfig::DurationTime' has a wrong offset!");
static_assert(offsetof(FChangeColorConfig, Vectors) == 0x000020, "Member 'FChangeColorConfig::Vectors' has a wrong offset!");
static_assert(offsetof(FChangeColorConfig, Scales) == 0x000030, "Member 'FChangeColorConfig::Scales' has a wrong offset!");
static_assert(offsetof(FChangeColorConfig, ElementIndexes) == 0x000040, "Member 'FChangeColorConfig::ElementIndexes' has a wrong offset!");

// ScriptStruct QRSL.WeeklyBigAwardConfig
// 0x0038 (0x0038 - 0x0000)
struct FWeeklyBigAwardConfig final
{
public:
	int32                                         BigAwardSection;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8E[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              BigAwardIcon;                                      // 0x0008(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeeklyBigAwardJumpTo                         JumpToType;                                        // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8F[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeeklyBigAwardConfig) == 0x000008, "Wrong alignment on FWeeklyBigAwardConfig");
static_assert(sizeof(FWeeklyBigAwardConfig) == 0x000038, "Wrong size on FWeeklyBigAwardConfig");
static_assert(offsetof(FWeeklyBigAwardConfig, BigAwardSection) == 0x000000, "Member 'FWeeklyBigAwardConfig::BigAwardSection' has a wrong offset!");
static_assert(offsetof(FWeeklyBigAwardConfig, BigAwardIcon) == 0x000008, "Member 'FWeeklyBigAwardConfig::BigAwardIcon' has a wrong offset!");
static_assert(offsetof(FWeeklyBigAwardConfig, JumpToType) == 0x000030, "Member 'FWeeklyBigAwardConfig::JumpToType' has a wrong offset!");

// ScriptStruct QRSL.WeaponMountInfo
// 0x0050 (0x0050 - 0x0000)
struct FWeaponMountInfo final
{
public:
	class FName                                   WeaponTagName;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CheckSpaceMeshSocketName;                          // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CheckSpaceCenterOffset;                            // 0x0010(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CheckSpaceHalfSize;                                // 0x001C(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponMountMaxStepHeight;                          // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponMountPerchRadiusThreshold;                   // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               WeaponMountRotationRate;                           // 0x0030(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RotationScale;                                     // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AxisMoveForwardScale;                              // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AxisMoveRightScale;                                // 0x0044(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndRideMontageName;                                // 0x0048(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponMountInfo) == 0x000004, "Wrong alignment on FWeaponMountInfo");
static_assert(sizeof(FWeaponMountInfo) == 0x000050, "Wrong size on FWeaponMountInfo");
static_assert(offsetof(FWeaponMountInfo, WeaponTagName) == 0x000000, "Member 'FWeaponMountInfo::WeaponTagName' has a wrong offset!");
static_assert(offsetof(FWeaponMountInfo, CheckSpaceMeshSocketName) == 0x000008, "Member 'FWeaponMountInfo::CheckSpaceMeshSocketName' has a wrong offset!");
static_assert(offsetof(FWeaponMountInfo, CheckSpaceCenterOffset) == 0x000010, "Member 'FWeaponMountInfo::CheckSpaceCenterOffset' has a wrong offset!");
static_assert(offsetof(FWeaponMountInfo, CheckSpaceHalfSize) == 0x00001C, "Member 'FWeaponMountInfo::CheckSpaceHalfSize' has a wrong offset!");
static_assert(offsetof(FWeaponMountInfo, WeaponMountMaxStepHeight) == 0x000028, "Member 'FWeaponMountInfo::WeaponMountMaxStepHeight' has a wrong offset!");
static_assert(offsetof(FWeaponMountInfo, WeaponMountPerchRadiusThreshold) == 0x00002C, "Member 'FWeaponMountInfo::WeaponMountPerchRadiusThreshold' has a wrong offset!");
static_assert(offsetof(FWeaponMountInfo, WeaponMountRotationRate) == 0x000030, "Member 'FWeaponMountInfo::WeaponMountRotationRate' has a wrong offset!");
static_assert(offsetof(FWeaponMountInfo, RotationScale) == 0x00003C, "Member 'FWeaponMountInfo::RotationScale' has a wrong offset!");
static_assert(offsetof(FWeaponMountInfo, AxisMoveForwardScale) == 0x000040, "Member 'FWeaponMountInfo::AxisMoveForwardScale' has a wrong offset!");
static_assert(offsetof(FWeaponMountInfo, AxisMoveRightScale) == 0x000044, "Member 'FWeaponMountInfo::AxisMoveRightScale' has a wrong offset!");
static_assert(offsetof(FWeaponMountInfo, EndRideMontageName) == 0x000048, "Member 'FWeaponMountInfo::EndRideMontageName' has a wrong offset!");

// ScriptStruct QRSL.CompassGashaponExhibitionConfig
// 0x0018 (0x0018 - 0x0000)
struct FCompassGashaponExhibitionConfig final
{
public:
	class FName                                   ExhibitionAnim;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExhibitBaseInterval;                               // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExhibitAccelerate;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExhibitMinInterval;                                // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExhibitNextInterval;                               // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCompassGashaponExhibitionConfig) == 0x000004, "Wrong alignment on FCompassGashaponExhibitionConfig");
static_assert(sizeof(FCompassGashaponExhibitionConfig) == 0x000018, "Wrong size on FCompassGashaponExhibitionConfig");
static_assert(offsetof(FCompassGashaponExhibitionConfig, ExhibitionAnim) == 0x000000, "Member 'FCompassGashaponExhibitionConfig::ExhibitionAnim' has a wrong offset!");
static_assert(offsetof(FCompassGashaponExhibitionConfig, ExhibitBaseInterval) == 0x000008, "Member 'FCompassGashaponExhibitionConfig::ExhibitBaseInterval' has a wrong offset!");
static_assert(offsetof(FCompassGashaponExhibitionConfig, ExhibitAccelerate) == 0x00000C, "Member 'FCompassGashaponExhibitionConfig::ExhibitAccelerate' has a wrong offset!");
static_assert(offsetof(FCompassGashaponExhibitionConfig, ExhibitMinInterval) == 0x000010, "Member 'FCompassGashaponExhibitionConfig::ExhibitMinInterval' has a wrong offset!");
static_assert(offsetof(FCompassGashaponExhibitionConfig, ExhibitNextInterval) == 0x000014, "Member 'FCompassGashaponExhibitionConfig::ExhibitNextInterval' has a wrong offset!");

// ScriptStruct QRSL.ClashRoyalePlayerHeadInfo
// 0x0014 (0x0014 - 0x0000)
struct FClashRoyalePlayerHeadInfo final
{
public:
	class FName                                   AvatarID;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AvatarFrameID;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MyTag;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClashRoyalePlayerHeadInfo) == 0x000004, "Wrong alignment on FClashRoyalePlayerHeadInfo");
static_assert(sizeof(FClashRoyalePlayerHeadInfo) == 0x000014, "Wrong size on FClashRoyalePlayerHeadInfo");
static_assert(offsetof(FClashRoyalePlayerHeadInfo, AvatarID) == 0x000000, "Member 'FClashRoyalePlayerHeadInfo::AvatarID' has a wrong offset!");
static_assert(offsetof(FClashRoyalePlayerHeadInfo, AvatarFrameID) == 0x000008, "Member 'FClashRoyalePlayerHeadInfo::AvatarFrameID' has a wrong offset!");
static_assert(offsetof(FClashRoyalePlayerHeadInfo, MyTag) == 0x000010, "Member 'FClashRoyalePlayerHeadInfo::MyTag' has a wrong offset!");

// ScriptStruct QRSL.ClashRoyaleProbabilityInfo
// 0x0018 (0x0018 - 0x0000)
struct FClashRoyaleProbabilityInfo final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D90[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FClashRoyaleProbabilityCfg>     ProbabilityArray;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClashRoyaleProbabilityInfo) == 0x000008, "Wrong alignment on FClashRoyaleProbabilityInfo");
static_assert(sizeof(FClashRoyaleProbabilityInfo) == 0x000018, "Wrong size on FClashRoyaleProbabilityInfo");
static_assert(offsetof(FClashRoyaleProbabilityInfo, PlayerIndex) == 0x000000, "Member 'FClashRoyaleProbabilityInfo::PlayerIndex' has a wrong offset!");
static_assert(offsetof(FClashRoyaleProbabilityInfo, ProbabilityArray) == 0x000008, "Member 'FClashRoyaleProbabilityInfo::ProbabilityArray' has a wrong offset!");

// ScriptStruct QRSL.MountSkinCardItemData
// 0x0010 (0x0010 - 0x0000)
struct FMountSkinCardItemData final
{
public:
	TArray<class FName>                           SkinCardItemArray;                                 // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMountSkinCardItemData) == 0x000008, "Wrong alignment on FMountSkinCardItemData");
static_assert(sizeof(FMountSkinCardItemData) == 0x000010, "Wrong size on FMountSkinCardItemData");
static_assert(offsetof(FMountSkinCardItemData, SkinCardItemArray) == 0x000000, "Member 'FMountSkinCardItemData::SkinCardItemArray' has a wrong offset!");

// ScriptStruct QRSL.ClashRoyaleMonsterNPCInfo
// 0x0010 (0x0010 - 0x0000)
struct FClashRoyaleMonsterNPCInfo final
{
public:
	class FName                                   MonsterNPCName;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AHottaAICharacter>       ClashRoyaleAICharacter;                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClashRoyaleMonsterNPCInfo) == 0x000004, "Wrong alignment on FClashRoyaleMonsterNPCInfo");
static_assert(sizeof(FClashRoyaleMonsterNPCInfo) == 0x000010, "Wrong size on FClashRoyaleMonsterNPCInfo");
static_assert(offsetof(FClashRoyaleMonsterNPCInfo, MonsterNPCName) == 0x000000, "Member 'FClashRoyaleMonsterNPCInfo::MonsterNPCName' has a wrong offset!");
static_assert(offsetof(FClashRoyaleMonsterNPCInfo, ClashRoyaleAICharacter) == 0x000008, "Member 'FClashRoyaleMonsterNPCInfo::ClashRoyaleAICharacter' has a wrong offset!");

// ScriptStruct QRSL.ClashRoyaleSpawnMonsterInfo
// 0x0010 (0x0010 - 0x0000)
struct FClashRoyaleSpawnMonsterInfo final
{
public:
	TArray<struct FClashRoyaleMonsterNPCInfo>     ClashRoyaleMonsterNPCInfoArray;                    // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClashRoyaleSpawnMonsterInfo) == 0x000008, "Wrong alignment on FClashRoyaleSpawnMonsterInfo");
static_assert(sizeof(FClashRoyaleSpawnMonsterInfo) == 0x000010, "Wrong size on FClashRoyaleSpawnMonsterInfo");
static_assert(offsetof(FClashRoyaleSpawnMonsterInfo, ClashRoyaleMonsterNPCInfoArray) == 0x000000, "Member 'FClashRoyaleSpawnMonsterInfo::ClashRoyaleMonsterNPCInfoArray' has a wrong offset!");

// ScriptStruct QRSL.ClashRoyaleMonsterCount
// 0x000C (0x000C - 0x0000)
struct FClashRoyaleMonsterCount final
{
public:
	class FName                                   MonsterTag;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MonsterCount;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClashRoyaleMonsterCount) == 0x000004, "Wrong alignment on FClashRoyaleMonsterCount");
static_assert(sizeof(FClashRoyaleMonsterCount) == 0x00000C, "Wrong size on FClashRoyaleMonsterCount");
static_assert(offsetof(FClashRoyaleMonsterCount, MonsterTag) == 0x000000, "Member 'FClashRoyaleMonsterCount::MonsterTag' has a wrong offset!");
static_assert(offsetof(FClashRoyaleMonsterCount, MonsterCount) == 0x000008, "Member 'FClashRoyaleMonsterCount::MonsterCount' has a wrong offset!");

// ScriptStruct QRSL.QRSLWorkGuideSymbolCountEvent
// 0x0020 (0x0020 - 0x0000)
struct FQRSLWorkGuideSymbolCountEvent final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D91[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CanExecuteRadio;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWorkGuideCountEventType                      EventType;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D92[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SymbolName;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpawnSymbolID;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLWorkGuideSymbolCountEvent) == 0x000004, "Wrong alignment on FQRSLWorkGuideSymbolCountEvent");
static_assert(sizeof(FQRSLWorkGuideSymbolCountEvent) == 0x000020, "Wrong size on FQRSLWorkGuideSymbolCountEvent");
static_assert(offsetof(FQRSLWorkGuideSymbolCountEvent, Count) == 0x000000, "Member 'FQRSLWorkGuideSymbolCountEvent::Count' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSymbolCountEvent, IsLoop) == 0x000004, "Member 'FQRSLWorkGuideSymbolCountEvent::IsLoop' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSymbolCountEvent, CanExecuteRadio) == 0x000008, "Member 'FQRSLWorkGuideSymbolCountEvent::CanExecuteRadio' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSymbolCountEvent, EventType) == 0x00000C, "Member 'FQRSLWorkGuideSymbolCountEvent::EventType' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSymbolCountEvent, SymbolName) == 0x000010, "Member 'FQRSLWorkGuideSymbolCountEvent::SymbolName' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSymbolCountEvent, SpawnSymbolID) == 0x000018, "Member 'FQRSLWorkGuideSymbolCountEvent::SpawnSymbolID' has a wrong offset!");

// ScriptStruct QRSL.QRSWorkGuideSpawnSymbolData
// 0x000C (0x000C - 0x0000)
struct FQRSWorkGuideSpawnSymbolData final
{
public:
	class FName                                   SymbolName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSWorkGuideSpawnSymbolData) == 0x000004, "Wrong alignment on FQRSWorkGuideSpawnSymbolData");
static_assert(sizeof(FQRSWorkGuideSpawnSymbolData) == 0x00000C, "Wrong size on FQRSWorkGuideSpawnSymbolData");
static_assert(offsetof(FQRSWorkGuideSpawnSymbolData, SymbolName) == 0x000000, "Member 'FQRSWorkGuideSpawnSymbolData::SymbolName' has a wrong offset!");
static_assert(offsetof(FQRSWorkGuideSpawnSymbolData, Count) == 0x000008, "Member 'FQRSWorkGuideSpawnSymbolData::Count' has a wrong offset!");

// ScriptStruct QRSL.WorkGuideAdjoinData
// 0x0010 (0x0010 - 0x0000)
struct FWorkGuideAdjoinData final
{
public:
	EWorkGuideAdjoinType                          Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWorkGuideAdjoinEventType                     Event;                                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D93[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NameValue;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorkGuideAdjoinData) == 0x000004, "Wrong alignment on FWorkGuideAdjoinData");
static_assert(sizeof(FWorkGuideAdjoinData) == 0x000010, "Wrong size on FWorkGuideAdjoinData");
static_assert(offsetof(FWorkGuideAdjoinData, Type) == 0x000000, "Member 'FWorkGuideAdjoinData::Type' has a wrong offset!");
static_assert(offsetof(FWorkGuideAdjoinData, Event) == 0x000001, "Member 'FWorkGuideAdjoinData::Event' has a wrong offset!");
static_assert(offsetof(FWorkGuideAdjoinData, Value) == 0x000004, "Member 'FWorkGuideAdjoinData::Value' has a wrong offset!");
static_assert(offsetof(FWorkGuideAdjoinData, NameValue) == 0x000008, "Member 'FWorkGuideAdjoinData::NameValue' has a wrong offset!");

// ScriptStruct QRSL.QRSLWorkGuideSymbolAdjoinEvent
// 0x0060 (0x0060 - 0x0000)
struct FQRSLWorkGuideSymbolAdjoinEvent final
{
public:
	class FName                                   AdjoinSymbolID;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           AdjoinSymbolArray;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EWorkGuideSpawnSymbolConditionType            ConditionType;                                     // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D94[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FQRSWorkGuideSpawnSymbolData>   ConditionArray;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         SpawnSymbolRatio;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D95[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FQRSWorkGuideSpawnSymbolData>   SpawnSymbolArray;                                  // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          ForceExecuteAdjoinEvent;                           // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D96[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWorkGuideAdjoinData>           AdjoinEventArray;                                  // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLWorkGuideSymbolAdjoinEvent) == 0x000008, "Wrong alignment on FQRSLWorkGuideSymbolAdjoinEvent");
static_assert(sizeof(FQRSLWorkGuideSymbolAdjoinEvent) == 0x000060, "Wrong size on FQRSLWorkGuideSymbolAdjoinEvent");
static_assert(offsetof(FQRSLWorkGuideSymbolAdjoinEvent, AdjoinSymbolID) == 0x000000, "Member 'FQRSLWorkGuideSymbolAdjoinEvent::AdjoinSymbolID' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSymbolAdjoinEvent, AdjoinSymbolArray) == 0x000008, "Member 'FQRSLWorkGuideSymbolAdjoinEvent::AdjoinSymbolArray' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSymbolAdjoinEvent, ConditionType) == 0x000018, "Member 'FQRSLWorkGuideSymbolAdjoinEvent::ConditionType' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSymbolAdjoinEvent, ConditionArray) == 0x000020, "Member 'FQRSLWorkGuideSymbolAdjoinEvent::ConditionArray' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSymbolAdjoinEvent, SpawnSymbolRatio) == 0x000030, "Member 'FQRSLWorkGuideSymbolAdjoinEvent::SpawnSymbolRatio' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSymbolAdjoinEvent, SpawnSymbolArray) == 0x000038, "Member 'FQRSLWorkGuideSymbolAdjoinEvent::SpawnSymbolArray' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSymbolAdjoinEvent, ForceExecuteAdjoinEvent) == 0x000048, "Member 'FQRSLWorkGuideSymbolAdjoinEvent::ForceExecuteAdjoinEvent' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSymbolAdjoinEvent, AdjoinEventArray) == 0x000050, "Member 'FQRSLWorkGuideSymbolAdjoinEvent::AdjoinEventArray' has a wrong offset!");

// ScriptStruct QRSL.QRSLWorkGuideSymbolConfig
// 0x00A8 (0x00B0 - 0x0008)
struct FQRSLWorkGuideSymbolConfig final : public FTableRowBase
{
public:
	class FName                                   ID;                                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0010(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0028(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0050(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           RelevantArray;                                     // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EWorkGuideQualityType                         Quality;                                           // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSimple;                                          // 0x0081(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInRandomSelect;                                  // 0x0082(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D97[0x1];                                     // 0x0083(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CoinCount;                                         // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComeRound;                                         // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D98[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FQRSLWorkGuideSymbolCountEvent> CountEventArray;                                   // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FQRSLWorkGuideSymbolAdjoinEvent> AdjoinEventArray;                                  // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLWorkGuideSymbolConfig) == 0x000008, "Wrong alignment on FQRSLWorkGuideSymbolConfig");
static_assert(sizeof(FQRSLWorkGuideSymbolConfig) == 0x0000B0, "Wrong size on FQRSLWorkGuideSymbolConfig");
static_assert(offsetof(FQRSLWorkGuideSymbolConfig, ID) == 0x000008, "Member 'FQRSLWorkGuideSymbolConfig::ID' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSymbolConfig, Name) == 0x000010, "Member 'FQRSLWorkGuideSymbolConfig::Name' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSymbolConfig, Icon) == 0x000028, "Member 'FQRSLWorkGuideSymbolConfig::Icon' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSymbolConfig, Description) == 0x000050, "Member 'FQRSLWorkGuideSymbolConfig::Description' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSymbolConfig, Tag) == 0x000068, "Member 'FQRSLWorkGuideSymbolConfig::Tag' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSymbolConfig, RelevantArray) == 0x000070, "Member 'FQRSLWorkGuideSymbolConfig::RelevantArray' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSymbolConfig, Quality) == 0x000080, "Member 'FQRSLWorkGuideSymbolConfig::Quality' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSymbolConfig, IsSimple) == 0x000081, "Member 'FQRSLWorkGuideSymbolConfig::IsSimple' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSymbolConfig, IsInRandomSelect) == 0x000082, "Member 'FQRSLWorkGuideSymbolConfig::IsInRandomSelect' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSymbolConfig, CoinCount) == 0x000084, "Member 'FQRSLWorkGuideSymbolConfig::CoinCount' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSymbolConfig, ComeRound) == 0x000088, "Member 'FQRSLWorkGuideSymbolConfig::ComeRound' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSymbolConfig, CountEventArray) == 0x000090, "Member 'FQRSLWorkGuideSymbolConfig::CountEventArray' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideSymbolConfig, AdjoinEventArray) == 0x0000A0, "Member 'FQRSLWorkGuideSymbolConfig::AdjoinEventArray' has a wrong offset!");

// ScriptStruct QRSL.RedPointCondition
// 0x0030 (0x0030 - 0x0000)
struct FRedPointCondition final
{
public:
	ERedPointConditionType                        ConditionType;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvert;                                           // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D99[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHottaItemData                         ItemData;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameActivityCfgKey                    GameActivityKey;                                   // 0x0018(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRedPointCondition) == 0x000008, "Wrong alignment on FRedPointCondition");
static_assert(sizeof(FRedPointCondition) == 0x000030, "Wrong size on FRedPointCondition");
static_assert(offsetof(FRedPointCondition, ConditionType) == 0x000000, "Member 'FRedPointCondition::ConditionType' has a wrong offset!");
static_assert(offsetof(FRedPointCondition, bInvert) == 0x000001, "Member 'FRedPointCondition::bInvert' has a wrong offset!");
static_assert(offsetof(FRedPointCondition, ItemData) == 0x000008, "Member 'FRedPointCondition::ItemData' has a wrong offset!");
static_assert(offsetof(FRedPointCondition, GameActivityKey) == 0x000018, "Member 'FRedPointCondition::GameActivityKey' has a wrong offset!");

// ScriptStruct QRSL.RedPointLogicOperator
// 0x0018 (0x0018 - 0x0000)
struct FRedPointLogicOperator final
{
public:
	ERedPointLogicOperatorType                    OperatorType;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRedPointCondition>             Conditions;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRedPointLogicOperator) == 0x000008, "Wrong alignment on FRedPointLogicOperator");
static_assert(sizeof(FRedPointLogicOperator) == 0x000018, "Wrong size on FRedPointLogicOperator");
static_assert(offsetof(FRedPointLogicOperator, OperatorType) == 0x000000, "Member 'FRedPointLogicOperator::OperatorType' has a wrong offset!");
static_assert(offsetof(FRedPointLogicOperator, Conditions) == 0x000008, "Member 'FRedPointLogicOperator::Conditions' has a wrong offset!");

// ScriptStruct QRSL.QRSLConditionDrivenRedPoint
// 0x0030 (0x0038 - 0x0008)
struct FQRSLConditionDrivenRedPoint final : public FTableRowBase
{
public:
	class FName                                   RedPointType;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RedPointMsgId;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRedPointLogicOperator                 ConditionOperator;                                 // 0x0020(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLConditionDrivenRedPoint) == 0x000008, "Wrong alignment on FQRSLConditionDrivenRedPoint");
static_assert(sizeof(FQRSLConditionDrivenRedPoint) == 0x000038, "Wrong size on FQRSLConditionDrivenRedPoint");
static_assert(offsetof(FQRSLConditionDrivenRedPoint, RedPointType) == 0x000008, "Member 'FQRSLConditionDrivenRedPoint::RedPointType' has a wrong offset!");
static_assert(offsetof(FQRSLConditionDrivenRedPoint, RedPointMsgId) == 0x000010, "Member 'FQRSLConditionDrivenRedPoint::RedPointMsgId' has a wrong offset!");
static_assert(offsetof(FQRSLConditionDrivenRedPoint, ConditionOperator) == 0x000020, "Member 'FQRSLConditionDrivenRedPoint::ConditionOperator' has a wrong offset!");

// ScriptStruct QRSL.CameraPostProcessMobileDOFData
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x04) FCameraPostProcessMobileDOFData final
{
public:
	uint8                                         Pad_1D9B[0x30];                                    // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCameraPostProcessMobileDOFData) == 0x000004, "Wrong alignment on FCameraPostProcessMobileDOFData");
static_assert(sizeof(FCameraPostProcessMobileDOFData) == 0x000030, "Wrong size on FCameraPostProcessMobileDOFData");

// ScriptStruct QRSL.DefaultDishData
// 0x0008 (0x0008 - 0x0000)
struct FDefaultDishData final
{
public:
	class FName                                   DishName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDefaultDishData) == 0x000004, "Wrong alignment on FDefaultDishData");
static_assert(sizeof(FDefaultDishData) == 0x000008, "Wrong size on FDefaultDishData");
static_assert(offsetof(FDefaultDishData, DishName) == 0x000000, "Member 'FDefaultDishData::DishName' has a wrong offset!");

// ScriptStruct QRSL.CooperationPlayChild
// 0x0010 (0x0010 - 0x0000)
struct FCooperationPlayChild final
{
public:
	TSubclassOf<class AQRSLCooperationPlayChildActor> ChildActorClass;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChildActorSocket;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCooperationPlayChild) == 0x000008, "Wrong alignment on FCooperationPlayChild");
static_assert(sizeof(FCooperationPlayChild) == 0x000010, "Wrong size on FCooperationPlayChild");
static_assert(offsetof(FCooperationPlayChild, ChildActorClass) == 0x000000, "Member 'FCooperationPlayChild::ChildActorClass' has a wrong offset!");
static_assert(offsetof(FCooperationPlayChild, ChildActorSocket) == 0x000008, "Member 'FCooperationPlayChild::ChildActorSocket' has a wrong offset!");

// ScriptStruct QRSL.CooperationPlayMonster
// 0x0010 (0x0010 - 0x0000)
struct FCooperationPlayMonster final
{
public:
	TSubclassOf<class AQRSLSymbioticMonsterCharacter> MonsterClass;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChildActorSocket;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCooperationPlayMonster) == 0x000008, "Wrong alignment on FCooperationPlayMonster");
static_assert(sizeof(FCooperationPlayMonster) == 0x000010, "Wrong size on FCooperationPlayMonster");
static_assert(offsetof(FCooperationPlayMonster, MonsterClass) == 0x000000, "Member 'FCooperationPlayMonster::MonsterClass' has a wrong offset!");
static_assert(offsetof(FCooperationPlayMonster, ChildActorSocket) == 0x000008, "Member 'FCooperationPlayMonster::ChildActorSocket' has a wrong offset!");

// ScriptStruct QRSL.CooperationPlayChildStatus
// 0x0018 (0x0018 - 0x0000)
struct FCooperationPlayChildStatus final
{
public:
	class AActor*                                 ChildActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9C[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHottaCharacter*                        InistigateCharacter;                               // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCooperationPlayChildStatus) == 0x000008, "Wrong alignment on FCooperationPlayChildStatus");
static_assert(sizeof(FCooperationPlayChildStatus) == 0x000018, "Wrong size on FCooperationPlayChildStatus");
static_assert(offsetof(FCooperationPlayChildStatus, ChildActor) == 0x000000, "Member 'FCooperationPlayChildStatus::ChildActor' has a wrong offset!");
static_assert(offsetof(FCooperationPlayChildStatus, bSuccess) == 0x000008, "Member 'FCooperationPlayChildStatus::bSuccess' has a wrong offset!");
static_assert(offsetof(FCooperationPlayChildStatus, InistigateCharacter) == 0x000010, "Member 'FCooperationPlayChildStatus::InistigateCharacter' has a wrong offset!");

// ScriptStruct QRSL.MsgBoxConfig
// 0x00A0 (0x00A8 - 0x0008)
struct FMsgBoxConfig final : public FTableRowBase
{
public:
	float                                         IndateSeconds;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHasAnimation;                                   // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9D[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GotoFormPath;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   QBoxContent;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              MsgIcon;                                           // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   MsgTitle;                                          // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   MsgDesc;                                           // 0x0078(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   MsgRoleName;                                       // 0x0090(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMsgBoxConfig) == 0x000008, "Wrong alignment on FMsgBoxConfig");
static_assert(sizeof(FMsgBoxConfig) == 0x0000A8, "Wrong size on FMsgBoxConfig");
static_assert(offsetof(FMsgBoxConfig, IndateSeconds) == 0x000008, "Member 'FMsgBoxConfig::IndateSeconds' has a wrong offset!");
static_assert(offsetof(FMsgBoxConfig, bIsHasAnimation) == 0x00000C, "Member 'FMsgBoxConfig::bIsHasAnimation' has a wrong offset!");
static_assert(offsetof(FMsgBoxConfig, GotoFormPath) == 0x000010, "Member 'FMsgBoxConfig::GotoFormPath' has a wrong offset!");
static_assert(offsetof(FMsgBoxConfig, QBoxContent) == 0x000020, "Member 'FMsgBoxConfig::QBoxContent' has a wrong offset!");
static_assert(offsetof(FMsgBoxConfig, MsgIcon) == 0x000038, "Member 'FMsgBoxConfig::MsgIcon' has a wrong offset!");
static_assert(offsetof(FMsgBoxConfig, MsgTitle) == 0x000060, "Member 'FMsgBoxConfig::MsgTitle' has a wrong offset!");
static_assert(offsetof(FMsgBoxConfig, MsgDesc) == 0x000078, "Member 'FMsgBoxConfig::MsgDesc' has a wrong offset!");
static_assert(offsetof(FMsgBoxConfig, MsgRoleName) == 0x000090, "Member 'FMsgBoxConfig::MsgRoleName' has a wrong offset!");

// ScriptStruct QRSL.MiniGameDescInfo
// 0x0040 (0x0040 - 0x0000)
struct FMiniGameDescInfo final
{
public:
	class FText                                   GameTypeName;                                      // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IntroducePhoto;                                    // 0x0018(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMiniGameDescInfo) == 0x000008, "Wrong alignment on FMiniGameDescInfo");
static_assert(sizeof(FMiniGameDescInfo) == 0x000040, "Wrong size on FMiniGameDescInfo");
static_assert(offsetof(FMiniGameDescInfo, GameTypeName) == 0x000000, "Member 'FMiniGameDescInfo::GameTypeName' has a wrong offset!");
static_assert(offsetof(FMiniGameDescInfo, IntroducePhoto) == 0x000018, "Member 'FMiniGameDescInfo::IntroducePhoto' has a wrong offset!");

// ScriptStruct QRSL.CarTagRandRule
// 0x0030 (0x0030 - 0x0000)
struct FCarTagRandRule final
{
public:
	TArray<class FText>                           PrefixList;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<int32>                                 NumRandomRule;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FString                                 ExcludedStr;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCarTagRandRule) == 0x000008, "Wrong alignment on FCarTagRandRule");
static_assert(sizeof(FCarTagRandRule) == 0x000030, "Wrong size on FCarTagRandRule");
static_assert(offsetof(FCarTagRandRule, PrefixList) == 0x000000, "Member 'FCarTagRandRule::PrefixList' has a wrong offset!");
static_assert(offsetof(FCarTagRandRule, NumRandomRule) == 0x000010, "Member 'FCarTagRandRule::NumRandomRule' has a wrong offset!");
static_assert(offsetof(FCarTagRandRule, ExcludedStr) == 0x000020, "Member 'FCarTagRandRule::ExcludedStr' has a wrong offset!");

// ScriptStruct QRSL.StepCostNode
// 0x0008 (0x0008 - 0x0000)
struct FStepCostNode final
{
public:
	float                                         StepDist;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeterPrice;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStepCostNode) == 0x000004, "Wrong alignment on FStepCostNode");
static_assert(sizeof(FStepCostNode) == 0x000008, "Wrong size on FStepCostNode");
static_assert(offsetof(FStepCostNode, StepDist) == 0x000000, "Member 'FStepCostNode::StepDist' has a wrong offset!");
static_assert(offsetof(FStepCostNode, MeterPrice) == 0x000004, "Member 'FStepCostNode::MeterPrice' has a wrong offset!");

// ScriptStruct QRSL.SiteNode
// 0x0010 (0x0010 - 0x0000)
struct FSiteNode final
{
public:
	int32                                         Index;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0004(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSiteNode) == 0x000004, "Wrong alignment on FSiteNode");
static_assert(sizeof(FSiteNode) == 0x000010, "Wrong size on FSiteNode");
static_assert(offsetof(FSiteNode, Index) == 0x000000, "Member 'FSiteNode::Index' has a wrong offset!");
static_assert(offsetof(FSiteNode, Location) == 0x000004, "Member 'FSiteNode::Location' has a wrong offset!");

// ScriptStruct QRSL.DidiTaxiPointRow
// 0x0048 (0x0050 - 0x0008)
struct FDidiTaxiPointRow final : public FTableRowBase
{
public:
	int32                                         SiteIndex;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GetOnRadius;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GetOnQuest;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   SiteName;                                          // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         ServiceIdx;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsStation;                                        // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9E[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SiteLocation;                                      // 0x0038(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SiteRotation;                                      // 0x0044(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDidiTaxiPointRow) == 0x000008, "Wrong alignment on FDidiTaxiPointRow");
static_assert(sizeof(FDidiTaxiPointRow) == 0x000050, "Wrong size on FDidiTaxiPointRow");
static_assert(offsetof(FDidiTaxiPointRow, SiteIndex) == 0x000008, "Member 'FDidiTaxiPointRow::SiteIndex' has a wrong offset!");
static_assert(offsetof(FDidiTaxiPointRow, GetOnRadius) == 0x00000C, "Member 'FDidiTaxiPointRow::GetOnRadius' has a wrong offset!");
static_assert(offsetof(FDidiTaxiPointRow, GetOnQuest) == 0x000010, "Member 'FDidiTaxiPointRow::GetOnQuest' has a wrong offset!");
static_assert(offsetof(FDidiTaxiPointRow, SiteName) == 0x000018, "Member 'FDidiTaxiPointRow::SiteName' has a wrong offset!");
static_assert(offsetof(FDidiTaxiPointRow, ServiceIdx) == 0x000030, "Member 'FDidiTaxiPointRow::ServiceIdx' has a wrong offset!");
static_assert(offsetof(FDidiTaxiPointRow, bIsStation) == 0x000034, "Member 'FDidiTaxiPointRow::bIsStation' has a wrong offset!");
static_assert(offsetof(FDidiTaxiPointRow, SiteLocation) == 0x000038, "Member 'FDidiTaxiPointRow::SiteLocation' has a wrong offset!");
static_assert(offsetof(FDidiTaxiPointRow, SiteRotation) == 0x000044, "Member 'FDidiTaxiPointRow::SiteRotation' has a wrong offset!");

// ScriptStruct QRSL.2V2BuffLocInfo
// 0x0010 (0x0010 - 0x0000)
struct FTwoV2BuffLocInfo final
{
public:
	struct FVector                                CenterLocation;                                    // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTwoV2BuffLocInfo) == 0x000004, "Wrong alignment on FTwoV2BuffLocInfo");
static_assert(sizeof(FTwoV2BuffLocInfo) == 0x000010, "Wrong size on FTwoV2BuffLocInfo");
static_assert(offsetof(FTwoV2BuffLocInfo, CenterLocation) == 0x000000, "Member 'FTwoV2BuffLocInfo::CenterLocation' has a wrong offset!");
static_assert(offsetof(FTwoV2BuffLocInfo, Radius) == 0x00000C, "Member 'FTwoV2BuffLocInfo::Radius' has a wrong offset!");

// ScriptStruct QRSL.8V8SettleFactor
// 0x0008 (0x0008 - 0x0000)
struct FEightV8SettleFactor final
{
public:
	float                                         Factor;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxVal;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEightV8SettleFactor) == 0x000004, "Wrong alignment on FEightV8SettleFactor");
static_assert(sizeof(FEightV8SettleFactor) == 0x000008, "Wrong size on FEightV8SettleFactor");
static_assert(offsetof(FEightV8SettleFactor, Factor) == 0x000000, "Member 'FEightV8SettleFactor::Factor' has a wrong offset!");
static_assert(offsetof(FEightV8SettleFactor, MaxVal) == 0x000004, "Member 'FEightV8SettleFactor::MaxVal' has a wrong offset!");

// ScriptStruct QRSL.2V2CampInfo
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FTwoV2CampInfo final
{
public:
	uint8                                         Pad_1D9F[0x60];                                    // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTwoV2CampInfo) == 0x000008, "Wrong alignment on FTwoV2CampInfo");
static_assert(sizeof(FTwoV2CampInfo) == 0x000060, "Wrong size on FTwoV2CampInfo");

// ScriptStruct QRSL.ClashRoyalePlayerStartData
// 0x0018 (0x0018 - 0x0000)
struct FClashRoyalePlayerStartData final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DA0[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         RoleId;                                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DA1[0x8];                                     // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClashRoyalePlayerStartData) == 0x000008, "Wrong alignment on FClashRoyalePlayerStartData");
static_assert(sizeof(FClashRoyalePlayerStartData) == 0x000018, "Wrong size on FClashRoyalePlayerStartData");
static_assert(offsetof(FClashRoyalePlayerStartData, PlayerIndex) == 0x000000, "Member 'FClashRoyalePlayerStartData::PlayerIndex' has a wrong offset!");
static_assert(offsetof(FClashRoyalePlayerStartData, RoleId) == 0x000008, "Member 'FClashRoyalePlayerStartData::RoleId' has a wrong offset!");

// ScriptStruct QRSL.DreamDefendAwardItemData
// 0x0010 (0x0010 - 0x0000)
struct FDreamDefendAwardItemData final
{
public:
	class FName                                   AwardItemId;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AwardBaseAmount;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeductAwardAmountByMissScore;                      // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDreamDefendAwardItemData) == 0x000004, "Wrong alignment on FDreamDefendAwardItemData");
static_assert(sizeof(FDreamDefendAwardItemData) == 0x000010, "Wrong size on FDreamDefendAwardItemData");
static_assert(offsetof(FDreamDefendAwardItemData, AwardItemId) == 0x000000, "Member 'FDreamDefendAwardItemData::AwardItemId' has a wrong offset!");
static_assert(offsetof(FDreamDefendAwardItemData, AwardBaseAmount) == 0x000008, "Member 'FDreamDefendAwardItemData::AwardBaseAmount' has a wrong offset!");
static_assert(offsetof(FDreamDefendAwardItemData, DeductAwardAmountByMissScore) == 0x00000C, "Member 'FDreamDefendAwardItemData::DeductAwardAmountByMissScore' has a wrong offset!");

// ScriptStruct QRSL.DreamDefendAwardData
// 0x0010 (0x0010 - 0x0000)
struct FDreamDefendAwardData final
{
public:
	TArray<struct FDreamDefendAwardItemData>      AwardItems;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDreamDefendAwardData) == 0x000008, "Wrong alignment on FDreamDefendAwardData");
static_assert(sizeof(FDreamDefendAwardData) == 0x000010, "Wrong size on FDreamDefendAwardData");
static_assert(offsetof(FDreamDefendAwardData, AwardItems) == 0x000000, "Member 'FDreamDefendAwardData::AwardItems' has a wrong offset!");

// ScriptStruct QRSL.MountNode_IdNum
// 0x000C (0x000C - 0x0000)
struct FMountNode_IdNum final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMountNode_IdNum) == 0x000004, "Wrong alignment on FMountNode_IdNum");
static_assert(sizeof(FMountNode_IdNum) == 0x00000C, "Wrong size on FMountNode_IdNum");
static_assert(offsetof(FMountNode_IdNum, ID) == 0x000000, "Member 'FMountNode_IdNum::ID' has a wrong offset!");
static_assert(offsetof(FMountNode_IdNum, Num) == 0x000008, "Member 'FMountNode_IdNum::Num' has a wrong offset!");

// ScriptStruct QRSL.PersonalityScoreSlotAnimInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FPersonalityScoreSlotAnimInfo final
{
public:
	uint8                                         Pad_1DA2[0x18];                                    // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPersonalityScoreSlotAnimInfo) == 0x000008, "Wrong alignment on FPersonalityScoreSlotAnimInfo");
static_assert(sizeof(FPersonalityScoreSlotAnimInfo) == 0x000018, "Wrong size on FPersonalityScoreSlotAnimInfo");

// ScriptStruct QRSL.EliminateStarPlayerStartData
// 0x0018 (0x0018 - 0x0000)
struct FEliminateStarPlayerStartData final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DA3[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         RoleId;                                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DA4[0x8];                                     // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEliminateStarPlayerStartData) == 0x000008, "Wrong alignment on FEliminateStarPlayerStartData");
static_assert(sizeof(FEliminateStarPlayerStartData) == 0x000018, "Wrong size on FEliminateStarPlayerStartData");
static_assert(offsetof(FEliminateStarPlayerStartData, PlayerIndex) == 0x000000, "Member 'FEliminateStarPlayerStartData::PlayerIndex' has a wrong offset!");
static_assert(offsetof(FEliminateStarPlayerStartData, RoleId) == 0x000008, "Member 'FEliminateStarPlayerStartData::RoleId' has a wrong offset!");

// ScriptStruct QRSL.GuildMazePlayerInfo
// 0x0010 (0x0010 - 0x0000)
struct FGuildMazePlayerInfo final
{
public:
	int64                                         PlayerUID;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AQRSLPlayerCharacter>    Player;                                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuildMazePlayerInfo) == 0x000008, "Wrong alignment on FGuildMazePlayerInfo");
static_assert(sizeof(FGuildMazePlayerInfo) == 0x000010, "Wrong size on FGuildMazePlayerInfo");
static_assert(offsetof(FGuildMazePlayerInfo, PlayerUID) == 0x000000, "Member 'FGuildMazePlayerInfo::PlayerUID' has a wrong offset!");
static_assert(offsetof(FGuildMazePlayerInfo, Player) == 0x000008, "Member 'FGuildMazePlayerInfo::Player' has a wrong offset!");

// ScriptStruct QRSL.HorseRacingAwardInfo
// 0x0028 (0x0028 - 0x0000)
struct FHorseRacingAwardInfo final
{
public:
	struct FInt32Range                            Rank;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DropID;                                            // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHottaDropItemInfo>             Items;                                             // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHorseRacingAwardInfo) == 0x000008, "Wrong alignment on FHorseRacingAwardInfo");
static_assert(sizeof(FHorseRacingAwardInfo) == 0x000028, "Wrong size on FHorseRacingAwardInfo");
static_assert(offsetof(FHorseRacingAwardInfo, Rank) == 0x000000, "Member 'FHorseRacingAwardInfo::Rank' has a wrong offset!");
static_assert(offsetof(FHorseRacingAwardInfo, DropID) == 0x000010, "Member 'FHorseRacingAwardInfo::DropID' has a wrong offset!");
static_assert(offsetof(FHorseRacingAwardInfo, Items) == 0x000018, "Member 'FHorseRacingAwardInfo::Items' has a wrong offset!");

// ScriptStruct QRSL.RacingPlayerInfo
// 0x00B0 (0x00B0 - 0x0000)
struct FRacingPlayerInfo final
{
public:
	int64                                         PlayerRoleID;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AQRSLPlayerCharacter>    Player;                                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AQRSLWheeledVehicle>     VehicleActor;                                      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartPointIndex;                                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DA5[0xC];                                     // 0x002C(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurRank;                                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastRoundTotalUseTime;                             // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CompleteTotalUseTime;                              // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DA6[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 RoundUseTimes;                                     // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bOffLine;                                          // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DA7[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurRoundIndex;                                     // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurCheckAreaIndex;                                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextCheckAreaIndex;                                // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DA8[0x8];                                     // 0x0068(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CurVehicleLocation;                                // 0x0070(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DA9[0x10];                                    // 0x00A0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRacingPlayerInfo) == 0x000010, "Wrong alignment on FRacingPlayerInfo");
static_assert(sizeof(FRacingPlayerInfo) == 0x0000B0, "Wrong size on FRacingPlayerInfo");
static_assert(offsetof(FRacingPlayerInfo, PlayerRoleID) == 0x000000, "Member 'FRacingPlayerInfo::PlayerRoleID' has a wrong offset!");
static_assert(offsetof(FRacingPlayerInfo, PlayerName) == 0x000008, "Member 'FRacingPlayerInfo::PlayerName' has a wrong offset!");
static_assert(offsetof(FRacingPlayerInfo, Player) == 0x000018, "Member 'FRacingPlayerInfo::Player' has a wrong offset!");
static_assert(offsetof(FRacingPlayerInfo, VehicleActor) == 0x000020, "Member 'FRacingPlayerInfo::VehicleActor' has a wrong offset!");
static_assert(offsetof(FRacingPlayerInfo, StartPointIndex) == 0x000028, "Member 'FRacingPlayerInfo::StartPointIndex' has a wrong offset!");
static_assert(offsetof(FRacingPlayerInfo, CurRank) == 0x000038, "Member 'FRacingPlayerInfo::CurRank' has a wrong offset!");
static_assert(offsetof(FRacingPlayerInfo, LastRoundTotalUseTime) == 0x00003C, "Member 'FRacingPlayerInfo::LastRoundTotalUseTime' has a wrong offset!");
static_assert(offsetof(FRacingPlayerInfo, CompleteTotalUseTime) == 0x000040, "Member 'FRacingPlayerInfo::CompleteTotalUseTime' has a wrong offset!");
static_assert(offsetof(FRacingPlayerInfo, RoundUseTimes) == 0x000048, "Member 'FRacingPlayerInfo::RoundUseTimes' has a wrong offset!");
static_assert(offsetof(FRacingPlayerInfo, bOffLine) == 0x000058, "Member 'FRacingPlayerInfo::bOffLine' has a wrong offset!");
static_assert(offsetof(FRacingPlayerInfo, CurRoundIndex) == 0x00005C, "Member 'FRacingPlayerInfo::CurRoundIndex' has a wrong offset!");
static_assert(offsetof(FRacingPlayerInfo, CurCheckAreaIndex) == 0x000060, "Member 'FRacingPlayerInfo::CurCheckAreaIndex' has a wrong offset!");
static_assert(offsetof(FRacingPlayerInfo, NextCheckAreaIndex) == 0x000064, "Member 'FRacingPlayerInfo::NextCheckAreaIndex' has a wrong offset!");
static_assert(offsetof(FRacingPlayerInfo, CurVehicleLocation) == 0x000070, "Member 'FRacingPlayerInfo::CurVehicleLocation' has a wrong offset!");

// ScriptStruct QRSL.ShotGamePlayerInfo
// 0x0078 (0x0078 - 0x0000)
struct FShotGamePlayerInfo final
{
public:
	int64                                         PlayerRoleID;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerAvatarID;                                    // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerAvatarFrameID;                               // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AQRSLPlayerCharacter>    Player;                                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartPointIndex;                                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurShotGameScore;                                  // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOut;                                              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DAA[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Rank;                                              // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHottaDropItemInfo>             RewardItems;                                       // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CurAritfactSlot;                                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DAB[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Artifacts;                                         // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShotGamePlayerInfo) == 0x000008, "Wrong alignment on FShotGamePlayerInfo");
static_assert(sizeof(FShotGamePlayerInfo) == 0x000078, "Wrong size on FShotGamePlayerInfo");
static_assert(offsetof(FShotGamePlayerInfo, PlayerRoleID) == 0x000000, "Member 'FShotGamePlayerInfo::PlayerRoleID' has a wrong offset!");
static_assert(offsetof(FShotGamePlayerInfo, PlayerName) == 0x000008, "Member 'FShotGamePlayerInfo::PlayerName' has a wrong offset!");
static_assert(offsetof(FShotGamePlayerInfo, PlayerAvatarID) == 0x000018, "Member 'FShotGamePlayerInfo::PlayerAvatarID' has a wrong offset!");
static_assert(offsetof(FShotGamePlayerInfo, PlayerAvatarFrameID) == 0x000028, "Member 'FShotGamePlayerInfo::PlayerAvatarFrameID' has a wrong offset!");
static_assert(offsetof(FShotGamePlayerInfo, Player) == 0x000038, "Member 'FShotGamePlayerInfo::Player' has a wrong offset!");
static_assert(offsetof(FShotGamePlayerInfo, StartPointIndex) == 0x000040, "Member 'FShotGamePlayerInfo::StartPointIndex' has a wrong offset!");
static_assert(offsetof(FShotGamePlayerInfo, CurShotGameScore) == 0x000044, "Member 'FShotGamePlayerInfo::CurShotGameScore' has a wrong offset!");
static_assert(offsetof(FShotGamePlayerInfo, bOut) == 0x000048, "Member 'FShotGamePlayerInfo::bOut' has a wrong offset!");
static_assert(offsetof(FShotGamePlayerInfo, Rank) == 0x00004C, "Member 'FShotGamePlayerInfo::Rank' has a wrong offset!");
static_assert(offsetof(FShotGamePlayerInfo, RewardItems) == 0x000050, "Member 'FShotGamePlayerInfo::RewardItems' has a wrong offset!");
static_assert(offsetof(FShotGamePlayerInfo, CurAritfactSlot) == 0x000060, "Member 'FShotGamePlayerInfo::CurAritfactSlot' has a wrong offset!");
static_assert(offsetof(FShotGamePlayerInfo, Artifacts) == 0x000068, "Member 'FShotGamePlayerInfo::Artifacts' has a wrong offset!");

// ScriptStruct QRSL.ShotGroupGamePlayerInfo
// 0x0038 (0x0038 - 0x0000)
struct FShotGroupGamePlayerInfo final
{
public:
	int64                                         PlayerRoleID;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AQRSLPlayerCharacter>    Player;                                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurAritfactSlot;                                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DAC[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Artifacts;                                         // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShotGroupGamePlayerInfo) == 0x000008, "Wrong alignment on FShotGroupGamePlayerInfo");
static_assert(sizeof(FShotGroupGamePlayerInfo) == 0x000038, "Wrong size on FShotGroupGamePlayerInfo");
static_assert(offsetof(FShotGroupGamePlayerInfo, PlayerRoleID) == 0x000000, "Member 'FShotGroupGamePlayerInfo::PlayerRoleID' has a wrong offset!");
static_assert(offsetof(FShotGroupGamePlayerInfo, PlayerName) == 0x000008, "Member 'FShotGroupGamePlayerInfo::PlayerName' has a wrong offset!");
static_assert(offsetof(FShotGroupGamePlayerInfo, Player) == 0x000018, "Member 'FShotGroupGamePlayerInfo::Player' has a wrong offset!");
static_assert(offsetof(FShotGroupGamePlayerInfo, CurAritfactSlot) == 0x000020, "Member 'FShotGroupGamePlayerInfo::CurAritfactSlot' has a wrong offset!");
static_assert(offsetof(FShotGroupGamePlayerInfo, Artifacts) == 0x000028, "Member 'FShotGroupGamePlayerInfo::Artifacts' has a wrong offset!");

// ScriptStruct QRSL.SpeedContestPlayerInfo
// 0x0060 (0x0060 - 0x0000)
struct FSpeedContestPlayerInfo final
{
public:
	int64                                         PlayerRoleID;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerAvatarID;                                    // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerAvatarFrameID;                               // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AQRSLPlayerCharacter>    Player;                                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentPassedPointIndex;                           // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOut;                                              // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DAD[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Rank;                                              // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DAE[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHottaDropItemInfo>             RewardItems;                                       // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpeedContestPlayerInfo) == 0x000008, "Wrong alignment on FSpeedContestPlayerInfo");
static_assert(sizeof(FSpeedContestPlayerInfo) == 0x000060, "Wrong size on FSpeedContestPlayerInfo");
static_assert(offsetof(FSpeedContestPlayerInfo, PlayerRoleID) == 0x000000, "Member 'FSpeedContestPlayerInfo::PlayerRoleID' has a wrong offset!");
static_assert(offsetof(FSpeedContestPlayerInfo, PlayerName) == 0x000008, "Member 'FSpeedContestPlayerInfo::PlayerName' has a wrong offset!");
static_assert(offsetof(FSpeedContestPlayerInfo, PlayerAvatarID) == 0x000018, "Member 'FSpeedContestPlayerInfo::PlayerAvatarID' has a wrong offset!");
static_assert(offsetof(FSpeedContestPlayerInfo, PlayerAvatarFrameID) == 0x000028, "Member 'FSpeedContestPlayerInfo::PlayerAvatarFrameID' has a wrong offset!");
static_assert(offsetof(FSpeedContestPlayerInfo, Player) == 0x000038, "Member 'FSpeedContestPlayerInfo::Player' has a wrong offset!");
static_assert(offsetof(FSpeedContestPlayerInfo, CurrentPassedPointIndex) == 0x000040, "Member 'FSpeedContestPlayerInfo::CurrentPassedPointIndex' has a wrong offset!");
static_assert(offsetof(FSpeedContestPlayerInfo, bOut) == 0x000044, "Member 'FSpeedContestPlayerInfo::bOut' has a wrong offset!");
static_assert(offsetof(FSpeedContestPlayerInfo, Rank) == 0x000048, "Member 'FSpeedContestPlayerInfo::Rank' has a wrong offset!");
static_assert(offsetof(FSpeedContestPlayerInfo, RewardItems) == 0x000050, "Member 'FSpeedContestPlayerInfo::RewardItems' has a wrong offset!");

// ScriptStruct QRSL.CharmTypeSubCategory
// 0x0020 (0x0020 - 0x0000)
struct FCharmTypeSubCategory final
{
public:
	class FText                                   SubCategory;                                       // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	ECharmSubType                                 CharmSubType;                                      // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DAF[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharmTypeSubCategory) == 0x000008, "Wrong alignment on FCharmTypeSubCategory");
static_assert(sizeof(FCharmTypeSubCategory) == 0x000020, "Wrong size on FCharmTypeSubCategory");
static_assert(offsetof(FCharmTypeSubCategory, SubCategory) == 0x000000, "Member 'FCharmTypeSubCategory::SubCategory' has a wrong offset!");
static_assert(offsetof(FCharmTypeSubCategory, CharmSubType) == 0x000018, "Member 'FCharmTypeSubCategory::CharmSubType' has a wrong offset!");

// ScriptStruct QRSL.CharmTypeCategory
// 0x0030 (0x0030 - 0x0000)
struct FCharmTypeCategory final
{
public:
	class FText                                   MainCategory;                                      // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	ECharmType                                    CharmType;                                         // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DB0[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCharmTypeSubCategory>          SubCategories;                                     // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharmTypeCategory) == 0x000008, "Wrong alignment on FCharmTypeCategory");
static_assert(sizeof(FCharmTypeCategory) == 0x000030, "Wrong size on FCharmTypeCategory");
static_assert(offsetof(FCharmTypeCategory, MainCategory) == 0x000000, "Member 'FCharmTypeCategory::MainCategory' has a wrong offset!");
static_assert(offsetof(FCharmTypeCategory, CharmType) == 0x000018, "Member 'FCharmTypeCategory::CharmType' has a wrong offset!");
static_assert(offsetof(FCharmTypeCategory, SubCategories) == 0x000020, "Member 'FCharmTypeCategory::SubCategories' has a wrong offset!");

// ScriptStruct QRSL.TransferBoomSpecialBoomSpawnData
// 0x0018 (0x0018 - 0x0000)
struct FTransferBoomSpecialBoomSpawnData final
{
public:
	int32                                         TimePoint;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnNum;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class ATransferBoomSpecialBoomActor>> SpecialBoomActorClassArray;                        // 0x0008(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTransferBoomSpecialBoomSpawnData) == 0x000008, "Wrong alignment on FTransferBoomSpecialBoomSpawnData");
static_assert(sizeof(FTransferBoomSpecialBoomSpawnData) == 0x000018, "Wrong size on FTransferBoomSpecialBoomSpawnData");
static_assert(offsetof(FTransferBoomSpecialBoomSpawnData, TimePoint) == 0x000000, "Member 'FTransferBoomSpecialBoomSpawnData::TimePoint' has a wrong offset!");
static_assert(offsetof(FTransferBoomSpecialBoomSpawnData, SpawnNum) == 0x000004, "Member 'FTransferBoomSpecialBoomSpawnData::SpawnNum' has a wrong offset!");
static_assert(offsetof(FTransferBoomSpecialBoomSpawnData, SpecialBoomActorClassArray) == 0x000008, "Member 'FTransferBoomSpecialBoomSpawnData::SpecialBoomActorClassArray' has a wrong offset!");

// ScriptStruct QRSL.TransferBoomPlayerInfo
// 0x0058 (0x0058 - 0x0000)
struct FTransferBoomPlayerInfo final
{
public:
	int64                                         PlayerRoleID;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AQRSLPlayerCharacter>    Player;                                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppearanceIndex;                                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartPointIndex;                                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOut;                                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DB1[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Rank;                                              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHottaDropItemInfo>             RewardItems;                                       // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   AvatarID;                                          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AvatarFrameID;                                     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInjury;                                           // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DB2[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTransferBoomPlayerInfo) == 0x000008, "Wrong alignment on FTransferBoomPlayerInfo");
static_assert(sizeof(FTransferBoomPlayerInfo) == 0x000058, "Wrong size on FTransferBoomPlayerInfo");
static_assert(offsetof(FTransferBoomPlayerInfo, PlayerRoleID) == 0x000000, "Member 'FTransferBoomPlayerInfo::PlayerRoleID' has a wrong offset!");
static_assert(offsetof(FTransferBoomPlayerInfo, Player) == 0x000008, "Member 'FTransferBoomPlayerInfo::Player' has a wrong offset!");
static_assert(offsetof(FTransferBoomPlayerInfo, AppearanceIndex) == 0x000010, "Member 'FTransferBoomPlayerInfo::AppearanceIndex' has a wrong offset!");
static_assert(offsetof(FTransferBoomPlayerInfo, StartPointIndex) == 0x000014, "Member 'FTransferBoomPlayerInfo::StartPointIndex' has a wrong offset!");
static_assert(offsetof(FTransferBoomPlayerInfo, bOut) == 0x000018, "Member 'FTransferBoomPlayerInfo::bOut' has a wrong offset!");
static_assert(offsetof(FTransferBoomPlayerInfo, Rank) == 0x00001C, "Member 'FTransferBoomPlayerInfo::Rank' has a wrong offset!");
static_assert(offsetof(FTransferBoomPlayerInfo, PlayerName) == 0x000020, "Member 'FTransferBoomPlayerInfo::PlayerName' has a wrong offset!");
static_assert(offsetof(FTransferBoomPlayerInfo, RewardItems) == 0x000030, "Member 'FTransferBoomPlayerInfo::RewardItems' has a wrong offset!");
static_assert(offsetof(FTransferBoomPlayerInfo, AvatarID) == 0x000040, "Member 'FTransferBoomPlayerInfo::AvatarID' has a wrong offset!");
static_assert(offsetof(FTransferBoomPlayerInfo, AvatarFrameID) == 0x000048, "Member 'FTransferBoomPlayerInfo::AvatarFrameID' has a wrong offset!");
static_assert(offsetof(FTransferBoomPlayerInfo, bInjury) == 0x000050, "Member 'FTransferBoomPlayerInfo::bInjury' has a wrong offset!");

// ScriptStruct QRSL.WSCurrencyInfo
// 0x0010 (0x0010 - 0x0000)
struct FWSCurrencyInfo final
{
public:
	TArray<int32>                                 RankCurrencys;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWSCurrencyInfo) == 0x000008, "Wrong alignment on FWSCurrencyInfo");
static_assert(sizeof(FWSCurrencyInfo) == 0x000010, "Wrong size on FWSCurrencyInfo");
static_assert(offsetof(FWSCurrencyInfo, RankCurrencys) == 0x000000, "Member 'FWSCurrencyInfo::RankCurrencys' has a wrong offset!");

// ScriptStruct QRSL.WSMonsterNPCData
// 0x00B0 (0x00B0 - 0x0000)
struct FWSMonsterNPCData final
{
public:
	int32                                         PlotIndex;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DB3[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class AHottaAICharacter>> AllMonsters;                                       // 0x0008(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     MonsterTransforms;                                 // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DB4[0x8];                                     // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PlayerTransform;                                   // 0x0030(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             MainPlayerTransform;                               // 0x0060(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int64                                         RoleId;                                            // 0x0090(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AliveMonsterCount;                                 // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurWheel;                                          // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Waves;                                             // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DB5[0xC];                                     // 0x00A4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWSMonsterNPCData) == 0x000010, "Wrong alignment on FWSMonsterNPCData");
static_assert(sizeof(FWSMonsterNPCData) == 0x0000B0, "Wrong size on FWSMonsterNPCData");
static_assert(offsetof(FWSMonsterNPCData, PlotIndex) == 0x000000, "Member 'FWSMonsterNPCData::PlotIndex' has a wrong offset!");
static_assert(offsetof(FWSMonsterNPCData, AllMonsters) == 0x000008, "Member 'FWSMonsterNPCData::AllMonsters' has a wrong offset!");
static_assert(offsetof(FWSMonsterNPCData, MonsterTransforms) == 0x000018, "Member 'FWSMonsterNPCData::MonsterTransforms' has a wrong offset!");
static_assert(offsetof(FWSMonsterNPCData, PlayerTransform) == 0x000030, "Member 'FWSMonsterNPCData::PlayerTransform' has a wrong offset!");
static_assert(offsetof(FWSMonsterNPCData, MainPlayerTransform) == 0x000060, "Member 'FWSMonsterNPCData::MainPlayerTransform' has a wrong offset!");
static_assert(offsetof(FWSMonsterNPCData, RoleId) == 0x000090, "Member 'FWSMonsterNPCData::RoleId' has a wrong offset!");
static_assert(offsetof(FWSMonsterNPCData, AliveMonsterCount) == 0x000098, "Member 'FWSMonsterNPCData::AliveMonsterCount' has a wrong offset!");
static_assert(offsetof(FWSMonsterNPCData, CurWheel) == 0x00009C, "Member 'FWSMonsterNPCData::CurWheel' has a wrong offset!");
static_assert(offsetof(FWSMonsterNPCData, Waves) == 0x0000A0, "Member 'FWSMonsterNPCData::Waves' has a wrong offset!");

// ScriptStruct QRSL.GamepadCommandMenuWidgetBlockRow
// 0x0008 (0x0010 - 0x0008)
struct FGamepadCommandMenuWidgetBlockRow final : public FTableRowBase
{
public:
	bool                                          bBlock;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DB6[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGamepadCommandMenuWidgetBlockRow) == 0x000008, "Wrong alignment on FGamepadCommandMenuWidgetBlockRow");
static_assert(sizeof(FGamepadCommandMenuWidgetBlockRow) == 0x000010, "Wrong size on FGamepadCommandMenuWidgetBlockRow");
static_assert(offsetof(FGamepadCommandMenuWidgetBlockRow, bBlock) == 0x000008, "Member 'FGamepadCommandMenuWidgetBlockRow::bBlock' has a wrong offset!");

// ScriptStruct QRSL.BreakFateBossDamage
// 0x0020 (0x0020 - 0x0000)
struct FBreakFateBossDamage final
{
public:
	float                                         BoosMAXHP;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackDamageCountValue;                            // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBreakFateBossPlayerInfo>       PlayerDamage;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          GameSettled;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVictory;                                         // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DB7[0x6];                                     // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBreakFateBossDamage) == 0x000008, "Wrong alignment on FBreakFateBossDamage");
static_assert(sizeof(FBreakFateBossDamage) == 0x000020, "Wrong size on FBreakFateBossDamage");
static_assert(offsetof(FBreakFateBossDamage, BoosMAXHP) == 0x000000, "Member 'FBreakFateBossDamage::BoosMAXHP' has a wrong offset!");
static_assert(offsetof(FBreakFateBossDamage, AttackDamageCountValue) == 0x000004, "Member 'FBreakFateBossDamage::AttackDamageCountValue' has a wrong offset!");
static_assert(offsetof(FBreakFateBossDamage, PlayerDamage) == 0x000008, "Member 'FBreakFateBossDamage::PlayerDamage' has a wrong offset!");
static_assert(offsetof(FBreakFateBossDamage, GameSettled) == 0x000018, "Member 'FBreakFateBossDamage::GameSettled' has a wrong offset!");
static_assert(offsetof(FBreakFateBossDamage, IsVictory) == 0x000019, "Member 'FBreakFateBossDamage::IsVictory' has a wrong offset!");

// ScriptStruct QRSL.RandNameSexCountInfo
// 0x0050 (0x0050 - 0x0000)
struct FRandNameSexCountInfo final
{
public:
	TMap<ECharacterSex, int32>                    SectionSexCount;                                   // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRandNameSexCountInfo) == 0x000008, "Wrong alignment on FRandNameSexCountInfo");
static_assert(sizeof(FRandNameSexCountInfo) == 0x000050, "Wrong size on FRandNameSexCountInfo");
static_assert(offsetof(FRandNameSexCountInfo, SectionSexCount) == 0x000000, "Member 'FRandNameSexCountInfo::SectionSexCount' has a wrong offset!");

// ScriptStruct QRSL.ArtifactBattleFlyGridData
// 0x0020 (0x0020 - 0x0000)
struct FArtifactBattleFlyGridData final
{
public:
	class UQRSLUI_Artifact_Item_Slot*             FlyGrid;                                           // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlyTime;                                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              StartLoc;                                          // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              EndLoc;                                            // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DB8[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FArtifactBattleFlyGridData) == 0x000008, "Wrong alignment on FArtifactBattleFlyGridData");
static_assert(sizeof(FArtifactBattleFlyGridData) == 0x000020, "Wrong size on FArtifactBattleFlyGridData");
static_assert(offsetof(FArtifactBattleFlyGridData, FlyGrid) == 0x000000, "Member 'FArtifactBattleFlyGridData::FlyGrid' has a wrong offset!");
static_assert(offsetof(FArtifactBattleFlyGridData, FlyTime) == 0x000008, "Member 'FArtifactBattleFlyGridData::FlyTime' has a wrong offset!");
static_assert(offsetof(FArtifactBattleFlyGridData, StartLoc) == 0x00000C, "Member 'FArtifactBattleFlyGridData::StartLoc' has a wrong offset!");
static_assert(offsetof(FArtifactBattleFlyGridData, EndLoc) == 0x000014, "Member 'FArtifactBattleFlyGridData::EndLoc' has a wrong offset!");

// ScriptStruct QRSL.BreakFateBuffInfo
// 0x0018 (0x0018 - 0x0000)
struct FBreakFateBuffInfo final
{
public:
	class FName                                   NpcName;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BuffName;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   POIName;                                           // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBreakFateBuffInfo) == 0x000004, "Wrong alignment on FBreakFateBuffInfo");
static_assert(sizeof(FBreakFateBuffInfo) == 0x000018, "Wrong size on FBreakFateBuffInfo");
static_assert(offsetof(FBreakFateBuffInfo, NpcName) == 0x000000, "Member 'FBreakFateBuffInfo::NpcName' has a wrong offset!");
static_assert(offsetof(FBreakFateBuffInfo, BuffName) == 0x000008, "Member 'FBreakFateBuffInfo::BuffName' has a wrong offset!");
static_assert(offsetof(FBreakFateBuffInfo, POIName) == 0x000010, "Member 'FBreakFateBuffInfo::POIName' has a wrong offset!");

// ScriptStruct QRSL.BreakFateBuffPlayerInfo
// 0x0028 (0x0028 - 0x0000)
struct FBreakFateBuffPlayerInfo final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RoleId;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBreakFateBuffInfo>             BuffInfoTay;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBreakFateBuffPlayerInfo) == 0x000008, "Wrong alignment on FBreakFateBuffPlayerInfo");
static_assert(sizeof(FBreakFateBuffPlayerInfo) == 0x000028, "Wrong size on FBreakFateBuffPlayerInfo");
static_assert(offsetof(FBreakFateBuffPlayerInfo, PlayerName) == 0x000000, "Member 'FBreakFateBuffPlayerInfo::PlayerName' has a wrong offset!");
static_assert(offsetof(FBreakFateBuffPlayerInfo, RoleId) == 0x000010, "Member 'FBreakFateBuffPlayerInfo::RoleId' has a wrong offset!");
static_assert(offsetof(FBreakFateBuffPlayerInfo, BuffInfoTay) == 0x000018, "Member 'FBreakFateBuffPlayerInfo::BuffInfoTay' has a wrong offset!");

// ScriptStruct QRSL.HorseRacingTrap
// 0x0098 (0x00A0 - 0x0008)
struct FHorseRacingTrap final : public FTableRowBase
{
public:
	int32                                         Weight;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PoolID;                                            // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DB9[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   TrapClass;                                         // 0x0018(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIntroduce;                                        // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DBA[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TrapName;                                          // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   TrapDesc;                                          // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              TrapIcon;                                          // 0x0078(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHorseRacingTrap) == 0x000008, "Wrong alignment on FHorseRacingTrap");
static_assert(sizeof(FHorseRacingTrap) == 0x0000A0, "Wrong size on FHorseRacingTrap");
static_assert(offsetof(FHorseRacingTrap, Weight) == 0x000008, "Member 'FHorseRacingTrap::Weight' has a wrong offset!");
static_assert(offsetof(FHorseRacingTrap, PoolID) == 0x00000C, "Member 'FHorseRacingTrap::PoolID' has a wrong offset!");
static_assert(offsetof(FHorseRacingTrap, TrapClass) == 0x000018, "Member 'FHorseRacingTrap::TrapClass' has a wrong offset!");
static_assert(offsetof(FHorseRacingTrap, bIntroduce) == 0x000040, "Member 'FHorseRacingTrap::bIntroduce' has a wrong offset!");
static_assert(offsetof(FHorseRacingTrap, TrapName) == 0x000048, "Member 'FHorseRacingTrap::TrapName' has a wrong offset!");
static_assert(offsetof(FHorseRacingTrap, TrapDesc) == 0x000060, "Member 'FHorseRacingTrap::TrapDesc' has a wrong offset!");
static_assert(offsetof(FHorseRacingTrap, TrapIcon) == 0x000078, "Member 'FHorseRacingTrap::TrapIcon' has a wrong offset!");

// ScriptStruct QRSL.ShotGamePlayerScoreData
// 0x0010 (0x0010 - 0x0000)
struct FShotGamePlayerScoreData final
{
public:
	int64                                         PlayerRoleID;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShotGameScore;                                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DBB[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FShotGamePlayerScoreData) == 0x000008, "Wrong alignment on FShotGamePlayerScoreData");
static_assert(sizeof(FShotGamePlayerScoreData) == 0x000010, "Wrong size on FShotGamePlayerScoreData");
static_assert(offsetof(FShotGamePlayerScoreData, PlayerRoleID) == 0x000000, "Member 'FShotGamePlayerScoreData::PlayerRoleID' has a wrong offset!");
static_assert(offsetof(FShotGamePlayerScoreData, ShotGameScore) == 0x000008, "Member 'FShotGamePlayerScoreData::ShotGameScore' has a wrong offset!");

// ScriptStruct QRSL.HPBarColorTex
// 0x0010 (0x0010 - 0x0000)
struct FHPBarColorTex final
{
public:
	int32                                         Priority;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DBC[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             HPBarTex;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHPBarColorTex) == 0x000008, "Wrong alignment on FHPBarColorTex");
static_assert(sizeof(FHPBarColorTex) == 0x000010, "Wrong size on FHPBarColorTex");
static_assert(offsetof(FHPBarColorTex, Priority) == 0x000000, "Member 'FHPBarColorTex::Priority' has a wrong offset!");
static_assert(offsetof(FHPBarColorTex, HPBarTex) == 0x000008, "Member 'FHPBarColorTex::HPBarTex' has a wrong offset!");

// ScriptStruct QRSL.WeaponSurvival_PlayerInfo
// 0x0038 (0x0038 - 0x0000)
struct FWeaponSurvival_PlayerInfo final
{
public:
	int64                                         PlayerID;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AvatarID;                                          // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AvatarFrameID;                                     // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActivityClonePlayerState                     PlayerState;                                       // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DBD[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         SortTimeTicks;                                     // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponSurvival_PlayerInfo) == 0x000008, "Wrong alignment on FWeaponSurvival_PlayerInfo");
static_assert(sizeof(FWeaponSurvival_PlayerInfo) == 0x000038, "Wrong size on FWeaponSurvival_PlayerInfo");
static_assert(offsetof(FWeaponSurvival_PlayerInfo, PlayerID) == 0x000000, "Member 'FWeaponSurvival_PlayerInfo::PlayerID' has a wrong offset!");
static_assert(offsetof(FWeaponSurvival_PlayerInfo, AvatarID) == 0x000008, "Member 'FWeaponSurvival_PlayerInfo::AvatarID' has a wrong offset!");
static_assert(offsetof(FWeaponSurvival_PlayerInfo, AvatarFrameID) == 0x000010, "Member 'FWeaponSurvival_PlayerInfo::AvatarFrameID' has a wrong offset!");
static_assert(offsetof(FWeaponSurvival_PlayerInfo, PlayerName) == 0x000018, "Member 'FWeaponSurvival_PlayerInfo::PlayerName' has a wrong offset!");
static_assert(offsetof(FWeaponSurvival_PlayerInfo, PlayerState) == 0x000028, "Member 'FWeaponSurvival_PlayerInfo::PlayerState' has a wrong offset!");
static_assert(offsetof(FWeaponSurvival_PlayerInfo, SortTimeTicks) == 0x000030, "Member 'FWeaponSurvival_PlayerInfo::SortTimeTicks' has a wrong offset!");

// ScriptStruct QRSL.PublicBetaGiftInfo
// 0x0018 (0x0020 - 0x0008)
struct FPublicBetaGiftInfo final : public FTableRowBase
{
public:
	class FString                                 GiftID;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftAmount;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DBE[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPublicBetaGiftInfo) == 0x000008, "Wrong alignment on FPublicBetaGiftInfo");
static_assert(sizeof(FPublicBetaGiftInfo) == 0x000020, "Wrong size on FPublicBetaGiftInfo");
static_assert(offsetof(FPublicBetaGiftInfo, GiftID) == 0x000008, "Member 'FPublicBetaGiftInfo::GiftID' has a wrong offset!");
static_assert(offsetof(FPublicBetaGiftInfo, GiftAmount) == 0x000018, "Member 'FPublicBetaGiftInfo::GiftAmount' has a wrong offset!");

// ScriptStruct QRSL.APRandomLevelWithRewards
// 0x0030 (0x0030 - 0x0000)
struct FAPRandomLevelWithRewards final
{
public:
	TSoftObjectPtr<class UWorld>                  LevelWorld;                                        // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RandomRewards;                                     // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAPRandomLevelWithRewards) == 0x000008, "Wrong alignment on FAPRandomLevelWithRewards");
static_assert(sizeof(FAPRandomLevelWithRewards) == 0x000030, "Wrong size on FAPRandomLevelWithRewards");
static_assert(offsetof(FAPRandomLevelWithRewards, LevelWorld) == 0x000000, "Member 'FAPRandomLevelWithRewards::LevelWorld' has a wrong offset!");
static_assert(offsetof(FAPRandomLevelWithRewards, RandomRewards) == 0x000028, "Member 'FAPRandomLevelWithRewards::RandomRewards' has a wrong offset!");

// ScriptStruct QRSL.RoleContext
// 0x0030 (0x0030 - 0x0000)
struct FRoleContext final
{
public:
	class FString                                 RoleName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RoleLevel;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RoleSex;                                           // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RoleUID;                                           // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerName;                                        // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRoleContext) == 0x000008, "Wrong alignment on FRoleContext");
static_assert(sizeof(FRoleContext) == 0x000030, "Wrong size on FRoleContext");
static_assert(offsetof(FRoleContext, RoleName) == 0x000000, "Member 'FRoleContext::RoleName' has a wrong offset!");
static_assert(offsetof(FRoleContext, RoleLevel) == 0x000010, "Member 'FRoleContext::RoleLevel' has a wrong offset!");
static_assert(offsetof(FRoleContext, RoleSex) == 0x000014, "Member 'FRoleContext::RoleSex' has a wrong offset!");
static_assert(offsetof(FRoleContext, RoleUID) == 0x000018, "Member 'FRoleContext::RoleUID' has a wrong offset!");
static_assert(offsetof(FRoleContext, ServerName) == 0x000020, "Member 'FRoleContext::ServerName' has a wrong offset!");

// ScriptStruct QRSL.HackerTerminalSMSMessageInfoSendData
// 0x00F0 (0x00F0 - 0x0000)
struct FHackerTerminalSMSMessageInfoSendData final : public FHackerTerminalSMSMessageInfoBaseData
{
public:
	uint8                                         bSendNextMessage : 1;                              // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EAppSMSMessageType                            MessageType;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DBF[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   MessageText;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              MessageTexture;                                    // 0x0020(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RedPacketDropID;                                   // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       RedPacketNotOpenIcon;                              // 0x0050(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              RedPacketOpenIcon;                                 // 0x0078(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       RedPacketOpenEffect;                               // 0x00A0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bSystemNPC : 1;                                    // 0x00C8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1DC0[0x7];                                     // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   OverrideNPCName;                                   // 0x00D0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         DelayReply;                                        // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC1[0x4];                                     // 0x00EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHackerTerminalSMSMessageInfoSendData) == 0x000008, "Wrong alignment on FHackerTerminalSMSMessageInfoSendData");
static_assert(sizeof(FHackerTerminalSMSMessageInfoSendData) == 0x0000F0, "Wrong size on FHackerTerminalSMSMessageInfoSendData");
static_assert(offsetof(FHackerTerminalSMSMessageInfoSendData, MessageType) == 0x000001, "Member 'FHackerTerminalSMSMessageInfoSendData::MessageType' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSMessageInfoSendData, MessageText) == 0x000008, "Member 'FHackerTerminalSMSMessageInfoSendData::MessageText' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSMessageInfoSendData, MessageTexture) == 0x000020, "Member 'FHackerTerminalSMSMessageInfoSendData::MessageTexture' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSMessageInfoSendData, RedPacketDropID) == 0x000048, "Member 'FHackerTerminalSMSMessageInfoSendData::RedPacketDropID' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSMessageInfoSendData, RedPacketNotOpenIcon) == 0x000050, "Member 'FHackerTerminalSMSMessageInfoSendData::RedPacketNotOpenIcon' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSMessageInfoSendData, RedPacketOpenIcon) == 0x000078, "Member 'FHackerTerminalSMSMessageInfoSendData::RedPacketOpenIcon' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSMessageInfoSendData, RedPacketOpenEffect) == 0x0000A0, "Member 'FHackerTerminalSMSMessageInfoSendData::RedPacketOpenEffect' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSMessageInfoSendData, OverrideNPCName) == 0x0000D0, "Member 'FHackerTerminalSMSMessageInfoSendData::OverrideNPCName' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSMessageInfoSendData, DelayReply) == 0x0000E8, "Member 'FHackerTerminalSMSMessageInfoSendData::DelayReply' has a wrong offset!");

// ScriptStruct QRSL.HackerTerminalSMSBranchInfoData
// 0x0028 (0x0028 - 0x0000)
struct FHackerTerminalSMSBranchInfoData final
{
public:
	TArray<struct FHackerTerminalSMSMessageInfoSendData> SendMessageData;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FHackerTerminalSMSMessageInfoReplyData> ReplyMessageData;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   NextBranchID;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHackerTerminalSMSBranchInfoData) == 0x000008, "Wrong alignment on FHackerTerminalSMSBranchInfoData");
static_assert(sizeof(FHackerTerminalSMSBranchInfoData) == 0x000028, "Wrong size on FHackerTerminalSMSBranchInfoData");
static_assert(offsetof(FHackerTerminalSMSBranchInfoData, SendMessageData) == 0x000000, "Member 'FHackerTerminalSMSBranchInfoData::SendMessageData' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSBranchInfoData, ReplyMessageData) == 0x000010, "Member 'FHackerTerminalSMSBranchInfoData::ReplyMessageData' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSBranchInfoData, NextBranchID) == 0x000020, "Member 'FHackerTerminalSMSBranchInfoData::NextBranchID' has a wrong offset!");

// ScriptStruct QRSL.HackerTerminalSMSGroupData
// 0x0090 (0x0098 - 0x0008)
struct FHackerTerminalSMSGroupData final : public FTableRowBase
{
public:
	uint8                                         bBlueprintTrigger : 1;                             // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1DC2[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SettleGroupBranchID;                               // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CompleteQuestID;                                   // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AccpetQuestID;                                     // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GroupDropID;                                       // 0x0024(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAutoDestroyAfterRead : 1;                         // 0x002C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1DC3[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FHackerTerminalSMSBranchInfoData> BranchMessageDataMap;                              // 0x0030(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   GroupStartBranchID;                                // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           GroupEndBranchID;                                  // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHackerTerminalSMSGroupData) == 0x000008, "Wrong alignment on FHackerTerminalSMSGroupData");
static_assert(sizeof(FHackerTerminalSMSGroupData) == 0x000098, "Wrong size on FHackerTerminalSMSGroupData");
static_assert(offsetof(FHackerTerminalSMSGroupData, SettleGroupBranchID) == 0x00000C, "Member 'FHackerTerminalSMSGroupData::SettleGroupBranchID' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSGroupData, CompleteQuestID) == 0x000014, "Member 'FHackerTerminalSMSGroupData::CompleteQuestID' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSGroupData, AccpetQuestID) == 0x00001C, "Member 'FHackerTerminalSMSGroupData::AccpetQuestID' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSGroupData, GroupDropID) == 0x000024, "Member 'FHackerTerminalSMSGroupData::GroupDropID' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSGroupData, BranchMessageDataMap) == 0x000030, "Member 'FHackerTerminalSMSGroupData::BranchMessageDataMap' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSGroupData, GroupStartBranchID) == 0x000080, "Member 'FHackerTerminalSMSGroupData::GroupStartBranchID' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSGroupData, GroupEndBranchID) == 0x000088, "Member 'FHackerTerminalSMSGroupData::GroupEndBranchID' has a wrong offset!");

// ScriptStruct QRSL.QueenWeaponAttackSetData
// 0x0010 (0x0010 - 0x0000)
struct FQueenWeaponAttackSetData final
{
public:
	class FName                                   SquenceText;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SquenceComboBox;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQueenWeaponAttackSetData) == 0x000004, "Wrong alignment on FQueenWeaponAttackSetData");
static_assert(sizeof(FQueenWeaponAttackSetData) == 0x000010, "Wrong size on FQueenWeaponAttackSetData");
static_assert(offsetof(FQueenWeaponAttackSetData, SquenceText) == 0x000000, "Member 'FQueenWeaponAttackSetData::SquenceText' has a wrong offset!");
static_assert(offsetof(FQueenWeaponAttackSetData, SquenceComboBox) == 0x000008, "Member 'FQueenWeaponAttackSetData::SquenceComboBox' has a wrong offset!");

// ScriptStruct QRSL.CharmTypeLinkToFormInfo
// 0x0020 (0x0020 - 0x0000)
struct FCharmTypeLinkToFormInfo final
{
public:
	TArray<ECharmSubType>                         CharmSubTypes;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 LinkToFormName;                                    // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharmTypeLinkToFormInfo) == 0x000008, "Wrong alignment on FCharmTypeLinkToFormInfo");
static_assert(sizeof(FCharmTypeLinkToFormInfo) == 0x000020, "Wrong size on FCharmTypeLinkToFormInfo");
static_assert(offsetof(FCharmTypeLinkToFormInfo, CharmSubTypes) == 0x000000, "Member 'FCharmTypeLinkToFormInfo::CharmSubTypes' has a wrong offset!");
static_assert(offsetof(FCharmTypeLinkToFormInfo, LinkToFormName) == 0x000010, "Member 'FCharmTypeLinkToFormInfo::LinkToFormName' has a wrong offset!");

// ScriptStruct QRSL.CharmTypeLinkToFormAllInfo
// 0x0010 (0x0010 - 0x0000)
struct FCharmTypeLinkToFormAllInfo final
{
public:
	TArray<struct FCharmTypeLinkToFormInfo>       CharmTypeLinkToFormInfos;                          // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharmTypeLinkToFormAllInfo) == 0x000008, "Wrong alignment on FCharmTypeLinkToFormAllInfo");
static_assert(sizeof(FCharmTypeLinkToFormAllInfo) == 0x000010, "Wrong size on FCharmTypeLinkToFormAllInfo");
static_assert(offsetof(FCharmTypeLinkToFormAllInfo, CharmTypeLinkToFormInfos) == 0x000000, "Member 'FCharmTypeLinkToFormAllInfo::CharmTypeLinkToFormInfos' has a wrong offset!");

// ScriptStruct QRSL.HackerTerminalSMSMessageShowData
// 0x00B0 (0x00B0 - 0x0000)
struct FHackerTerminalSMSMessageShowData final
{
public:
	EAppSMSMessageType                            MessageType;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplyMessage;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC4[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BranchIndex;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   MessageText;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              MessageTexture;                                    // 0x0020(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       RedPacketNotOpenIcon;                              // 0x0048(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       RedPacketOpenEffect;                               // 0x0070(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OverrideNPCName;                                   // 0x0098(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHackerTerminalSMSMessageShowData) == 0x000008, "Wrong alignment on FHackerTerminalSMSMessageShowData");
static_assert(sizeof(FHackerTerminalSMSMessageShowData) == 0x0000B0, "Wrong size on FHackerTerminalSMSMessageShowData");
static_assert(offsetof(FHackerTerminalSMSMessageShowData, MessageType) == 0x000000, "Member 'FHackerTerminalSMSMessageShowData::MessageType' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSMessageShowData, bReplyMessage) == 0x000001, "Member 'FHackerTerminalSMSMessageShowData::bReplyMessage' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSMessageShowData, BranchIndex) == 0x000004, "Member 'FHackerTerminalSMSMessageShowData::BranchIndex' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSMessageShowData, MessageText) == 0x000008, "Member 'FHackerTerminalSMSMessageShowData::MessageText' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSMessageShowData, MessageTexture) == 0x000020, "Member 'FHackerTerminalSMSMessageShowData::MessageTexture' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSMessageShowData, RedPacketNotOpenIcon) == 0x000048, "Member 'FHackerTerminalSMSMessageShowData::RedPacketNotOpenIcon' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSMessageShowData, RedPacketOpenEffect) == 0x000070, "Member 'FHackerTerminalSMSMessageShowData::RedPacketOpenEffect' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSMessageShowData, OverrideNPCName) == 0x000098, "Member 'FHackerTerminalSMSMessageShowData::OverrideNPCName' has a wrong offset!");

// ScriptStruct QRSL.HackerTerminalSMSMessageBranchShowData
// 0x0048 (0x0048 - 0x0000)
struct FHackerTerminalSMSMessageBranchShowData final
{
public:
	class FName                                   MessageGroupID;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MessageBranchID;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MessageOption;                                     // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC5[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHackerTerminalSMSMessageShowData> AllSendMessages;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FHackerTerminalSMSMessageShowData> OptionMessages;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         BranchSendIndex;                                   // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BranchReadIndex;                                   // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAppSMSMessageType                            TwiceOperateMessageType;                           // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC6[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHackerTerminalSMSMessageBranchShowData) == 0x000008, "Wrong alignment on FHackerTerminalSMSMessageBranchShowData");
static_assert(sizeof(FHackerTerminalSMSMessageBranchShowData) == 0x000048, "Wrong size on FHackerTerminalSMSMessageBranchShowData");
static_assert(offsetof(FHackerTerminalSMSMessageBranchShowData, MessageGroupID) == 0x000000, "Member 'FHackerTerminalSMSMessageBranchShowData::MessageGroupID' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSMessageBranchShowData, MessageBranchID) == 0x000008, "Member 'FHackerTerminalSMSMessageBranchShowData::MessageBranchID' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSMessageBranchShowData, MessageOption) == 0x000010, "Member 'FHackerTerminalSMSMessageBranchShowData::MessageOption' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSMessageBranchShowData, AllSendMessages) == 0x000018, "Member 'FHackerTerminalSMSMessageBranchShowData::AllSendMessages' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSMessageBranchShowData, OptionMessages) == 0x000028, "Member 'FHackerTerminalSMSMessageBranchShowData::OptionMessages' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSMessageBranchShowData, BranchSendIndex) == 0x000038, "Member 'FHackerTerminalSMSMessageBranchShowData::BranchSendIndex' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSMessageBranchShowData, BranchReadIndex) == 0x00003C, "Member 'FHackerTerminalSMSMessageBranchShowData::BranchReadIndex' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSMessageBranchShowData, TwiceOperateMessageType) == 0x000040, "Member 'FHackerTerminalSMSMessageBranchShowData::TwiceOperateMessageType' has a wrong offset!");

// ScriptStruct QRSL.HackerTerminalSMSMessageGroupShowData
// 0x0018 (0x0018 - 0x0000)
struct FHackerTerminalSMSMessageGroupShowData final
{
public:
	class FName                                   GroupID;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHackerTerminalSMSMessageBranchShowData> AllBranchShowData;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHackerTerminalSMSMessageGroupShowData) == 0x000008, "Wrong alignment on FHackerTerminalSMSMessageGroupShowData");
static_assert(sizeof(FHackerTerminalSMSMessageGroupShowData) == 0x000018, "Wrong size on FHackerTerminalSMSMessageGroupShowData");
static_assert(offsetof(FHackerTerminalSMSMessageGroupShowData, GroupID) == 0x000000, "Member 'FHackerTerminalSMSMessageGroupShowData::GroupID' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSMessageGroupShowData, AllBranchShowData) == 0x000008, "Member 'FHackerTerminalSMSMessageGroupShowData::AllBranchShowData' has a wrong offset!");

// ScriptStruct QRSL.MarkTextNode
// 0x0058 (0x0058 - 0x0000)
struct FMarkTextNode final
{
public:
	class FText                                   MarkText;                                          // 0x0000(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   NotSatisfyMarkText;                                // 0x0018(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateColor                            MarkColor;                                         // 0x0030(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarkTextNode) == 0x000008, "Wrong alignment on FMarkTextNode");
static_assert(sizeof(FMarkTextNode) == 0x000058, "Wrong size on FMarkTextNode");
static_assert(offsetof(FMarkTextNode, MarkText) == 0x000000, "Member 'FMarkTextNode::MarkText' has a wrong offset!");
static_assert(offsetof(FMarkTextNode, NotSatisfyMarkText) == 0x000018, "Member 'FMarkTextNode::NotSatisfyMarkText' has a wrong offset!");
static_assert(offsetof(FMarkTextNode, MarkColor) == 0x000030, "Member 'FMarkTextNode::MarkColor' has a wrong offset!");

// ScriptStruct QRSL.WormholeRuneLayerData
// 0x0020 (0x0020 - 0x0000)
struct FWormholeRuneLayerData final
{
public:
	int32                                         Layer;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC7[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Desc;                                              // 0x0008(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholeRuneLayerData) == 0x000008, "Wrong alignment on FWormholeRuneLayerData");
static_assert(sizeof(FWormholeRuneLayerData) == 0x000020, "Wrong size on FWormholeRuneLayerData");
static_assert(offsetof(FWormholeRuneLayerData, Layer) == 0x000000, "Member 'FWormholeRuneLayerData::Layer' has a wrong offset!");
static_assert(offsetof(FWormholeRuneLayerData, Desc) == 0x000008, "Member 'FWormholeRuneLayerData::Desc' has a wrong offset!");

// ScriptStruct QRSL.WormholeRuneData
// 0x0010 (0x0018 - 0x0008)
struct FWormholeRuneData final : public FTableRowBase
{
public:
	TArray<struct FWormholeRuneLayerData>         LayerData;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholeRuneData) == 0x000008, "Wrong alignment on FWormholeRuneData");
static_assert(sizeof(FWormholeRuneData) == 0x000018, "Wrong size on FWormholeRuneData");
static_assert(offsetof(FWormholeRuneData, LayerData) == 0x000008, "Member 'FWormholeRuneData::LayerData' has a wrong offset!");

// ScriptStruct QRSL.HackerTerminalSMSNPCConfig
// 0x00A0 (0x00A8 - 0x0008)
struct FHackerTerminalSMSNPCConfig final : public FTableRowBase
{
public:
	class FText                                   NpcName;                                           // 0x0008(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         NPCSaveID;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC8[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   NPCSpecialTitle;                                   // 0x0028(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              NPCIcon;                                           // 0x0040(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NPCAge;                                            // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterSex                                 NPCSex;                                            // 0x0069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC9[0x6];                                     // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   NPCBirthplace;                                     // 0x0070(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EFactionDefinition                            AffiliationCamp;                                   // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DCA[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MessagePrefix;                                     // 0x008C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DCB[0x4];                                     // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           MessageGroupDataTable;                             // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHackerTerminalSMSNPCConfig) == 0x000008, "Wrong alignment on FHackerTerminalSMSNPCConfig");
static_assert(sizeof(FHackerTerminalSMSNPCConfig) == 0x0000A8, "Wrong size on FHackerTerminalSMSNPCConfig");
static_assert(offsetof(FHackerTerminalSMSNPCConfig, NpcName) == 0x000008, "Member 'FHackerTerminalSMSNPCConfig::NpcName' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSNPCConfig, NPCSaveID) == 0x000020, "Member 'FHackerTerminalSMSNPCConfig::NPCSaveID' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSNPCConfig, NPCSpecialTitle) == 0x000028, "Member 'FHackerTerminalSMSNPCConfig::NPCSpecialTitle' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSNPCConfig, NPCIcon) == 0x000040, "Member 'FHackerTerminalSMSNPCConfig::NPCIcon' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSNPCConfig, NPCAge) == 0x000068, "Member 'FHackerTerminalSMSNPCConfig::NPCAge' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSNPCConfig, NPCSex) == 0x000069, "Member 'FHackerTerminalSMSNPCConfig::NPCSex' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSNPCConfig, NPCBirthplace) == 0x000070, "Member 'FHackerTerminalSMSNPCConfig::NPCBirthplace' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSNPCConfig, AffiliationCamp) == 0x000088, "Member 'FHackerTerminalSMSNPCConfig::AffiliationCamp' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSNPCConfig, MessagePrefix) == 0x00008C, "Member 'FHackerTerminalSMSNPCConfig::MessagePrefix' has a wrong offset!");
static_assert(offsetof(FHackerTerminalSMSNPCConfig, MessageGroupDataTable) == 0x000098, "Member 'FHackerTerminalSMSNPCConfig::MessageGroupDataTable' has a wrong offset!");

// ScriptStruct QRSL.QRSLHackerIdentityAbilitySlotConfig
// 0x0010 (0x0010 - 0x0000)
struct FQRSLHackerIdentityAbilitySlotConfig final
{
public:
	int32                                         BlockAbilitySlotMinutes;                           // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHottaCostItem                         UnsealAbilitySlotCostItem;                         // 0x0004(0x000C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLHackerIdentityAbilitySlotConfig) == 0x000004, "Wrong alignment on FQRSLHackerIdentityAbilitySlotConfig");
static_assert(sizeof(FQRSLHackerIdentityAbilitySlotConfig) == 0x000010, "Wrong size on FQRSLHackerIdentityAbilitySlotConfig");
static_assert(offsetof(FQRSLHackerIdentityAbilitySlotConfig, BlockAbilitySlotMinutes) == 0x000000, "Member 'FQRSLHackerIdentityAbilitySlotConfig::BlockAbilitySlotMinutes' has a wrong offset!");
static_assert(offsetof(FQRSLHackerIdentityAbilitySlotConfig, UnsealAbilitySlotCostItem) == 0x000004, "Member 'FQRSLHackerIdentityAbilitySlotConfig::UnsealAbilitySlotCostItem' has a wrong offset!");

// ScriptStruct QRSL.OrienteeringAwardData
// 0x0028 (0x0030 - 0x0008)
struct FOrienteeringAwardData final : public FTableRowBase
{
public:
	class FText                                   RankText;                                          // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FName                                   DropID;                                            // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PreviewDropID;                                     // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOrienteeringAwardData) == 0x000008, "Wrong alignment on FOrienteeringAwardData");
static_assert(sizeof(FOrienteeringAwardData) == 0x000030, "Wrong size on FOrienteeringAwardData");
static_assert(offsetof(FOrienteeringAwardData, RankText) == 0x000008, "Member 'FOrienteeringAwardData::RankText' has a wrong offset!");
static_assert(offsetof(FOrienteeringAwardData, DropID) == 0x000020, "Member 'FOrienteeringAwardData::DropID' has a wrong offset!");
static_assert(offsetof(FOrienteeringAwardData, PreviewDropID) == 0x000028, "Member 'FOrienteeringAwardData::PreviewDropID' has a wrong offset!");

// ScriptStruct QRSL.QRSLHackerIdentitySystemAbilitySlotData
// 0x0002 (0x0002 - 0x0000)
struct FQRSLHackerIdentitySystemAbilitySlotData final
{
public:
	uint8                                         SlotIndex;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AbilityIndex;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLHackerIdentitySystemAbilitySlotData) == 0x000001, "Wrong alignment on FQRSLHackerIdentitySystemAbilitySlotData");
static_assert(sizeof(FQRSLHackerIdentitySystemAbilitySlotData) == 0x000002, "Wrong size on FQRSLHackerIdentitySystemAbilitySlotData");
static_assert(offsetof(FQRSLHackerIdentitySystemAbilitySlotData, SlotIndex) == 0x000000, "Member 'FQRSLHackerIdentitySystemAbilitySlotData::SlotIndex' has a wrong offset!");
static_assert(offsetof(FQRSLHackerIdentitySystemAbilitySlotData, AbilityIndex) == 0x000001, "Member 'FQRSLHackerIdentitySystemAbilitySlotData::AbilityIndex' has a wrong offset!");

// ScriptStruct QRSL.QRSLHackerIdentityUserCardConfig
// 0x0100 (0x0108 - 0x0008)
struct FQRSLHackerIdentityUserCardConfig final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UObject>                 LOGO;                                              // 0x0008(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 MiniLogo;                                          // 0x0030(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 Badge;                                             // 0x0058(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      ActorLogoMaterial;                                 // 0x0080(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      ActorNameMaterial;                                 // 0x00A8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x00D0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bAutoUnlock;                                       // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x00E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DCC[0x6];                                     // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Descriptor;                                        // 0x00F0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLHackerIdentityUserCardConfig) == 0x000008, "Wrong alignment on FQRSLHackerIdentityUserCardConfig");
static_assert(sizeof(FQRSLHackerIdentityUserCardConfig) == 0x000108, "Wrong size on FQRSLHackerIdentityUserCardConfig");
static_assert(offsetof(FQRSLHackerIdentityUserCardConfig, LOGO) == 0x000008, "Member 'FQRSLHackerIdentityUserCardConfig::LOGO' has a wrong offset!");
static_assert(offsetof(FQRSLHackerIdentityUserCardConfig, MiniLogo) == 0x000030, "Member 'FQRSLHackerIdentityUserCardConfig::MiniLogo' has a wrong offset!");
static_assert(offsetof(FQRSLHackerIdentityUserCardConfig, Badge) == 0x000058, "Member 'FQRSLHackerIdentityUserCardConfig::Badge' has a wrong offset!");
static_assert(offsetof(FQRSLHackerIdentityUserCardConfig, ActorLogoMaterial) == 0x000080, "Member 'FQRSLHackerIdentityUserCardConfig::ActorLogoMaterial' has a wrong offset!");
static_assert(offsetof(FQRSLHackerIdentityUserCardConfig, ActorNameMaterial) == 0x0000A8, "Member 'FQRSLHackerIdentityUserCardConfig::ActorNameMaterial' has a wrong offset!");
static_assert(offsetof(FQRSLHackerIdentityUserCardConfig, DisplayName) == 0x0000D0, "Member 'FQRSLHackerIdentityUserCardConfig::DisplayName' has a wrong offset!");
static_assert(offsetof(FQRSLHackerIdentityUserCardConfig, bAutoUnlock) == 0x0000E8, "Member 'FQRSLHackerIdentityUserCardConfig::bAutoUnlock' has a wrong offset!");
static_assert(offsetof(FQRSLHackerIdentityUserCardConfig, bEnable) == 0x0000E9, "Member 'FQRSLHackerIdentityUserCardConfig::bEnable' has a wrong offset!");
static_assert(offsetof(FQRSLHackerIdentityUserCardConfig, Descriptor) == 0x0000F0, "Member 'FQRSLHackerIdentityUserCardConfig::Descriptor' has a wrong offset!");

// ScriptStruct QRSL.QRSLHackerIdentityAbilityConfig
// 0x0080 (0x0088 - 0x0008)
struct FQRSLHackerIdentityAbilityConfig final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0008(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0030(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bAutoUnlock;                                       // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DCD[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHottaBuffLevelData                    BuffLevelData;                                     // 0x004C(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	class FText                                   Descriptor;                                        // 0x0058(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   UnlockDescriptor;                                  // 0x0070(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLHackerIdentityAbilityConfig) == 0x000008, "Wrong alignment on FQRSLHackerIdentityAbilityConfig");
static_assert(sizeof(FQRSLHackerIdentityAbilityConfig) == 0x000088, "Wrong size on FQRSLHackerIdentityAbilityConfig");
static_assert(offsetof(FQRSLHackerIdentityAbilityConfig, Icon) == 0x000008, "Member 'FQRSLHackerIdentityAbilityConfig::Icon' has a wrong offset!");
static_assert(offsetof(FQRSLHackerIdentityAbilityConfig, DisplayName) == 0x000030, "Member 'FQRSLHackerIdentityAbilityConfig::DisplayName' has a wrong offset!");
static_assert(offsetof(FQRSLHackerIdentityAbilityConfig, bAutoUnlock) == 0x000048, "Member 'FQRSLHackerIdentityAbilityConfig::bAutoUnlock' has a wrong offset!");
static_assert(offsetof(FQRSLHackerIdentityAbilityConfig, BuffLevelData) == 0x00004C, "Member 'FQRSLHackerIdentityAbilityConfig::BuffLevelData' has a wrong offset!");
static_assert(offsetof(FQRSLHackerIdentityAbilityConfig, Descriptor) == 0x000058, "Member 'FQRSLHackerIdentityAbilityConfig::Descriptor' has a wrong offset!");
static_assert(offsetof(FQRSLHackerIdentityAbilityConfig, UnlockDescriptor) == 0x000070, "Member 'FQRSLHackerIdentityAbilityConfig::UnlockDescriptor' has a wrong offset!");

// ScriptStruct QRSL.MountMaintenanceAwardConfig
// 0x0040 (0x0048 - 0x0008)
struct FMountMaintenanceAwardConfig final : public FTableRowBase
{
public:
	class FName                                   OwnerMountId;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredLevel;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AwardDropID;                                       // 0x0014(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AwardCount;                                        // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              AwardImage;                                        // 0x0020(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMountMaintenanceAwardConfig) == 0x000008, "Wrong alignment on FMountMaintenanceAwardConfig");
static_assert(sizeof(FMountMaintenanceAwardConfig) == 0x000048, "Wrong size on FMountMaintenanceAwardConfig");
static_assert(offsetof(FMountMaintenanceAwardConfig, OwnerMountId) == 0x000008, "Member 'FMountMaintenanceAwardConfig::OwnerMountId' has a wrong offset!");
static_assert(offsetof(FMountMaintenanceAwardConfig, RequiredLevel) == 0x000010, "Member 'FMountMaintenanceAwardConfig::RequiredLevel' has a wrong offset!");
static_assert(offsetof(FMountMaintenanceAwardConfig, AwardDropID) == 0x000014, "Member 'FMountMaintenanceAwardConfig::AwardDropID' has a wrong offset!");
static_assert(offsetof(FMountMaintenanceAwardConfig, AwardCount) == 0x00001C, "Member 'FMountMaintenanceAwardConfig::AwardCount' has a wrong offset!");
static_assert(offsetof(FMountMaintenanceAwardConfig, AwardImage) == 0x000020, "Member 'FMountMaintenanceAwardConfig::AwardImage' has a wrong offset!");

// ScriptStruct QRSL.StringList
// 0x0010 (0x0010 - 0x0000)
struct FStringList final
{
public:
	TArray<class FString>                         List;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStringList) == 0x000008, "Wrong alignment on FStringList");
static_assert(sizeof(FStringList) == 0x000010, "Wrong size on FStringList");
static_assert(offsetof(FStringList, List) == 0x000000, "Member 'FStringList::List' has a wrong offset!");

// ScriptStruct QRSL.DidiTaxiAppFuncData
// 0x00E8 (0x00F0 - 0x0008)
struct FDidiTaxiAppFuncData final : public FTableRowBase
{
public:
	class FText                                   FuncName;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   FuncDesc;                                          // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   FuncDesc1;                                         // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              FuncIcon;                                          // 0x0050(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      FuncMat;                                           // 0x0078(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              FuncBtnIcon;                                       // 0x00A0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      FuncBtnMat;                                        // 0x00C8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDidiTaxiAppFuncData) == 0x000008, "Wrong alignment on FDidiTaxiAppFuncData");
static_assert(sizeof(FDidiTaxiAppFuncData) == 0x0000F0, "Wrong size on FDidiTaxiAppFuncData");
static_assert(offsetof(FDidiTaxiAppFuncData, FuncName) == 0x000008, "Member 'FDidiTaxiAppFuncData::FuncName' has a wrong offset!");
static_assert(offsetof(FDidiTaxiAppFuncData, FuncDesc) == 0x000020, "Member 'FDidiTaxiAppFuncData::FuncDesc' has a wrong offset!");
static_assert(offsetof(FDidiTaxiAppFuncData, FuncDesc1) == 0x000038, "Member 'FDidiTaxiAppFuncData::FuncDesc1' has a wrong offset!");
static_assert(offsetof(FDidiTaxiAppFuncData, FuncIcon) == 0x000050, "Member 'FDidiTaxiAppFuncData::FuncIcon' has a wrong offset!");
static_assert(offsetof(FDidiTaxiAppFuncData, FuncMat) == 0x000078, "Member 'FDidiTaxiAppFuncData::FuncMat' has a wrong offset!");
static_assert(offsetof(FDidiTaxiAppFuncData, FuncBtnIcon) == 0x0000A0, "Member 'FDidiTaxiAppFuncData::FuncBtnIcon' has a wrong offset!");
static_assert(offsetof(FDidiTaxiAppFuncData, FuncBtnMat) == 0x0000C8, "Member 'FDidiTaxiAppFuncData::FuncBtnMat' has a wrong offset!");

// ScriptStruct QRSL.CrackToolItemsDiscount
// 0x0010 (0x0010 - 0x0000)
struct FCrackToolItemsDiscount final
{
public:
	class FName                                   AbilityId;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rate;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Discount;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrackToolItemsDiscount) == 0x000004, "Wrong alignment on FCrackToolItemsDiscount");
static_assert(sizeof(FCrackToolItemsDiscount) == 0x000010, "Wrong size on FCrackToolItemsDiscount");
static_assert(offsetof(FCrackToolItemsDiscount, AbilityId) == 0x000000, "Member 'FCrackToolItemsDiscount::AbilityId' has a wrong offset!");
static_assert(offsetof(FCrackToolItemsDiscount, Rate) == 0x000008, "Member 'FCrackToolItemsDiscount::Rate' has a wrong offset!");
static_assert(offsetof(FCrackToolItemsDiscount, Discount) == 0x00000C, "Member 'FCrackToolItemsDiscount::Discount' has a wrong offset!");

// ScriptStruct QRSL.HackerCrackToolData
// 0x0128 (0x0130 - 0x0008)
struct FHackerCrackToolData final : public FTableRowBase
{
public:
	class FText                                   ToolName;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   ToolDesc;                                          // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ToolIcon;                                          // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ToolDesc_Selected;                                 // 0x0060(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      ToolDesc_Locked;                                   // 0x0088(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ToolPreview;                                       // 0x00B0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Tool_Selected;                                     // 0x00D8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Tool_UnSelected;                                   // 0x0100(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanClose;                                         // 0x0128(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHackerCrackToolType                          ToolType;                                          // 0x0129(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DCE[0x6];                                     // 0x012A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHackerCrackToolData) == 0x000008, "Wrong alignment on FHackerCrackToolData");
static_assert(sizeof(FHackerCrackToolData) == 0x000130, "Wrong size on FHackerCrackToolData");
static_assert(offsetof(FHackerCrackToolData, ToolName) == 0x000008, "Member 'FHackerCrackToolData::ToolName' has a wrong offset!");
static_assert(offsetof(FHackerCrackToolData, ToolDesc) == 0x000020, "Member 'FHackerCrackToolData::ToolDesc' has a wrong offset!");
static_assert(offsetof(FHackerCrackToolData, ToolIcon) == 0x000038, "Member 'FHackerCrackToolData::ToolIcon' has a wrong offset!");
static_assert(offsetof(FHackerCrackToolData, ToolDesc_Selected) == 0x000060, "Member 'FHackerCrackToolData::ToolDesc_Selected' has a wrong offset!");
static_assert(offsetof(FHackerCrackToolData, ToolDesc_Locked) == 0x000088, "Member 'FHackerCrackToolData::ToolDesc_Locked' has a wrong offset!");
static_assert(offsetof(FHackerCrackToolData, ToolPreview) == 0x0000B0, "Member 'FHackerCrackToolData::ToolPreview' has a wrong offset!");
static_assert(offsetof(FHackerCrackToolData, Tool_Selected) == 0x0000D8, "Member 'FHackerCrackToolData::Tool_Selected' has a wrong offset!");
static_assert(offsetof(FHackerCrackToolData, Tool_UnSelected) == 0x000100, "Member 'FHackerCrackToolData::Tool_UnSelected' has a wrong offset!");
static_assert(offsetof(FHackerCrackToolData, bCanClose) == 0x000128, "Member 'FHackerCrackToolData::bCanClose' has a wrong offset!");
static_assert(offsetof(FHackerCrackToolData, ToolType) == 0x000129, "Member 'FHackerCrackToolData::ToolType' has a wrong offset!");

// ScriptStruct QRSL.QRSLHackerTerminalUserCardLevelConfig
// 0x0000 (0x0008 - 0x0008)
struct FQRSLHackerTerminalUserCardLevelConfig final : public FTableRowBase
{
};
static_assert(alignof(FQRSLHackerTerminalUserCardLevelConfig) == 0x000008, "Wrong alignment on FQRSLHackerTerminalUserCardLevelConfig");
static_assert(sizeof(FQRSLHackerTerminalUserCardLevelConfig) == 0x000008, "Wrong size on FQRSLHackerTerminalUserCardLevelConfig");

// ScriptStruct QRSL.8V8ConvertPVPScore
// 0x000C (0x000C - 0x0000)
struct FEightV8ConvertPVPScore final
{
public:
	int32                                         UpperLimit;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PVPStageScore;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PVPMatchScore;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEightV8ConvertPVPScore) == 0x000004, "Wrong alignment on FEightV8ConvertPVPScore");
static_assert(sizeof(FEightV8ConvertPVPScore) == 0x00000C, "Wrong size on FEightV8ConvertPVPScore");
static_assert(offsetof(FEightV8ConvertPVPScore, UpperLimit) == 0x000000, "Member 'FEightV8ConvertPVPScore::UpperLimit' has a wrong offset!");
static_assert(offsetof(FEightV8ConvertPVPScore, PVPStageScore) == 0x000004, "Member 'FEightV8ConvertPVPScore::PVPStageScore' has a wrong offset!");
static_assert(offsetof(FEightV8ConvertPVPScore, PVPMatchScore) == 0x000008, "Member 'FEightV8ConvertPVPScore::PVPMatchScore' has a wrong offset!");

// ScriptStruct QRSL.QRSLHackerTerminalUserCardConfig
// 0x0020 (0x0028 - 0x0008)
struct FQRSLHackerTerminalUserCardConfig final : public FTableRowBase
{
public:
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         MaxLevel;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DCF[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQRSLHackerTerminalUserCardConfig) == 0x000008, "Wrong alignment on FQRSLHackerTerminalUserCardConfig");
static_assert(sizeof(FQRSLHackerTerminalUserCardConfig) == 0x000028, "Wrong size on FQRSLHackerTerminalUserCardConfig");
static_assert(offsetof(FQRSLHackerTerminalUserCardConfig, DisplayName) == 0x000008, "Member 'FQRSLHackerTerminalUserCardConfig::DisplayName' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalUserCardConfig, MaxLevel) == 0x000020, "Member 'FQRSLHackerTerminalUserCardConfig::MaxLevel' has a wrong offset!");

// ScriptStruct QRSL.QRSLHackerTerminalDeviceVersionConfig
// 0x0030 (0x0038 - 0x0008)
struct FQRSLHackerTerminalDeviceVersionConfig final : public FTableRowBase
{
public:
	TArray<class FName>                           UnlimitedPowerTags;                                // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         PowerInNormalMode;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PowerInDozeMode;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppPowerRate;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalMemorySize;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHottaCostItem>                 CostItemArray;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLHackerTerminalDeviceVersionConfig) == 0x000008, "Wrong alignment on FQRSLHackerTerminalDeviceVersionConfig");
static_assert(sizeof(FQRSLHackerTerminalDeviceVersionConfig) == 0x000038, "Wrong size on FQRSLHackerTerminalDeviceVersionConfig");
static_assert(offsetof(FQRSLHackerTerminalDeviceVersionConfig, UnlimitedPowerTags) == 0x000008, "Member 'FQRSLHackerTerminalDeviceVersionConfig::UnlimitedPowerTags' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalDeviceVersionConfig, PowerInNormalMode) == 0x000018, "Member 'FQRSLHackerTerminalDeviceVersionConfig::PowerInNormalMode' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalDeviceVersionConfig, PowerInDozeMode) == 0x00001C, "Member 'FQRSLHackerTerminalDeviceVersionConfig::PowerInDozeMode' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalDeviceVersionConfig, AppPowerRate) == 0x000020, "Member 'FQRSLHackerTerminalDeviceVersionConfig::AppPowerRate' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalDeviceVersionConfig, TotalMemorySize) == 0x000024, "Member 'FQRSLHackerTerminalDeviceVersionConfig::TotalMemorySize' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalDeviceVersionConfig, CostItemArray) == 0x000028, "Member 'FQRSLHackerTerminalDeviceVersionConfig::CostItemArray' has a wrong offset!");

// ScriptStruct QRSL.QRSLHackerTerminalDeviceConfig
// 0x00C0 (0x00C8 - 0x0008)
struct FQRSLHackerTerminalDeviceConfig final : public FTableRowBase
{
public:
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         MaxVersionNumber;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DD0[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FQRSLHackerTerminalDeviceBatteryConfig> BatteryConfigMap;                                  // 0x0028(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FName, TSoftObjectPtr<class UMaterialInterface>> AppFunctionStateImageMap;                          // 0x0078(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLHackerTerminalDeviceConfig) == 0x000008, "Wrong alignment on FQRSLHackerTerminalDeviceConfig");
static_assert(sizeof(FQRSLHackerTerminalDeviceConfig) == 0x0000C8, "Wrong size on FQRSLHackerTerminalDeviceConfig");
static_assert(offsetof(FQRSLHackerTerminalDeviceConfig, DisplayName) == 0x000008, "Member 'FQRSLHackerTerminalDeviceConfig::DisplayName' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalDeviceConfig, MaxVersionNumber) == 0x000020, "Member 'FQRSLHackerTerminalDeviceConfig::MaxVersionNumber' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalDeviceConfig, BatteryConfigMap) == 0x000028, "Member 'FQRSLHackerTerminalDeviceConfig::BatteryConfigMap' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalDeviceConfig, AppFunctionStateImageMap) == 0x000078, "Member 'FQRSLHackerTerminalDeviceConfig::AppFunctionStateImageMap' has a wrong offset!");

// ScriptStruct QRSL.QRSLLivenessAwardConfig
// 0x00B0 (0x00B8 - 0x0008)
struct FQRSLLivenessAwardConfig final : public FTableRowBase
{
public:
	bool                                          bIsDailyAward;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DD1[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AwardDropID;                                       // 0x000C(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DD2[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              UnOpenBoxImage;                                    // 0x0018(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              OpenedBoxImage;                                    // 0x0040(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              UnOpenBackImage;                                   // 0x0068(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              OpenedBackImage;                                   // 0x0090(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLLivenessAwardConfig) == 0x000008, "Wrong alignment on FQRSLLivenessAwardConfig");
static_assert(sizeof(FQRSLLivenessAwardConfig) == 0x0000B8, "Wrong size on FQRSLLivenessAwardConfig");
static_assert(offsetof(FQRSLLivenessAwardConfig, bIsDailyAward) == 0x000008, "Member 'FQRSLLivenessAwardConfig::bIsDailyAward' has a wrong offset!");
static_assert(offsetof(FQRSLLivenessAwardConfig, AwardDropID) == 0x00000C, "Member 'FQRSLLivenessAwardConfig::AwardDropID' has a wrong offset!");
static_assert(offsetof(FQRSLLivenessAwardConfig, UnOpenBoxImage) == 0x000018, "Member 'FQRSLLivenessAwardConfig::UnOpenBoxImage' has a wrong offset!");
static_assert(offsetof(FQRSLLivenessAwardConfig, OpenedBoxImage) == 0x000040, "Member 'FQRSLLivenessAwardConfig::OpenedBoxImage' has a wrong offset!");
static_assert(offsetof(FQRSLLivenessAwardConfig, UnOpenBackImage) == 0x000068, "Member 'FQRSLLivenessAwardConfig::UnOpenBackImage' has a wrong offset!");
static_assert(offsetof(FQRSLLivenessAwardConfig, OpenedBackImage) == 0x000090, "Member 'FQRSLLivenessAwardConfig::OpenedBackImage' has a wrong offset!");

// ScriptStruct QRSL.QRSLPlayerDataStruct
// 0x0010 (0x00E8 - 0x00D8)
struct FQRSLPlayerDataStruct final : public FBasePlayerDataStruct
{
public:
	class FString                                 SaveInfoEx;                                        // 0x00D8(0x0010)(ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLPlayerDataStruct) == 0x000008, "Wrong alignment on FQRSLPlayerDataStruct");
static_assert(sizeof(FQRSLPlayerDataStruct) == 0x0000E8, "Wrong size on FQRSLPlayerDataStruct");
static_assert(offsetof(FQRSLPlayerDataStruct, SaveInfoEx) == 0x0000D8, "Member 'FQRSLPlayerDataStruct::SaveInfoEx' has a wrong offset!");

// ScriptStruct QRSL.HomeConstructionOperation
// 0x0080 (0x0080 - 0x0000)
struct FHomeConstructionOperation final
{
public:
	class AHottaPlayerCharacter*                  PlayerCharacter;                                   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EQRSLHomeConstructionOperationMode            OperationMode;                                     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1DD3[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHottaHomeConstructedActorData         PreviewActorData;                                  // 0x0010(0x0050)(NativeAccessSpecifierPrivate)
	class AHottaHomeConstructActor*               SrcActor;                                          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1DD4[0x18];                                    // 0x0068(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHomeConstructionOperation) == 0x000008, "Wrong alignment on FHomeConstructionOperation");
static_assert(sizeof(FHomeConstructionOperation) == 0x000080, "Wrong size on FHomeConstructionOperation");
static_assert(offsetof(FHomeConstructionOperation, PlayerCharacter) == 0x000000, "Member 'FHomeConstructionOperation::PlayerCharacter' has a wrong offset!");
static_assert(offsetof(FHomeConstructionOperation, OperationMode) == 0x000008, "Member 'FHomeConstructionOperation::OperationMode' has a wrong offset!");
static_assert(offsetof(FHomeConstructionOperation, PreviewActorData) == 0x000010, "Member 'FHomeConstructionOperation::PreviewActorData' has a wrong offset!");
static_assert(offsetof(FHomeConstructionOperation, SrcActor) == 0x000060, "Member 'FHomeConstructionOperation::SrcActor' has a wrong offset!");

// ScriptStruct QRSL.QRSLHackerInsuranceVipConfig
// 0x0088 (0x0090 - 0x0008)
struct FQRSLHackerInsuranceVipConfig final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture2D>              VipIcon;                                           // 0x0008(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHottaBuffLevelData>            BuffData;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         RepairDiscount;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DD5[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           Privileges;                                        // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FHottaCostItem                         CostItem;                                          // 0x0058(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DD6[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHottaAwardInfo>                VipUpgradeAward;                                   // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   UpgradeDescription;                                // 0x0078(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLHackerInsuranceVipConfig) == 0x000008, "Wrong alignment on FQRSLHackerInsuranceVipConfig");
static_assert(sizeof(FQRSLHackerInsuranceVipConfig) == 0x000090, "Wrong size on FQRSLHackerInsuranceVipConfig");
static_assert(offsetof(FQRSLHackerInsuranceVipConfig, VipIcon) == 0x000008, "Member 'FQRSLHackerInsuranceVipConfig::VipIcon' has a wrong offset!");
static_assert(offsetof(FQRSLHackerInsuranceVipConfig, BuffData) == 0x000030, "Member 'FQRSLHackerInsuranceVipConfig::BuffData' has a wrong offset!");
static_assert(offsetof(FQRSLHackerInsuranceVipConfig, RepairDiscount) == 0x000040, "Member 'FQRSLHackerInsuranceVipConfig::RepairDiscount' has a wrong offset!");
static_assert(offsetof(FQRSLHackerInsuranceVipConfig, Privileges) == 0x000048, "Member 'FQRSLHackerInsuranceVipConfig::Privileges' has a wrong offset!");
static_assert(offsetof(FQRSLHackerInsuranceVipConfig, CostItem) == 0x000058, "Member 'FQRSLHackerInsuranceVipConfig::CostItem' has a wrong offset!");
static_assert(offsetof(FQRSLHackerInsuranceVipConfig, VipUpgradeAward) == 0x000068, "Member 'FQRSLHackerInsuranceVipConfig::VipUpgradeAward' has a wrong offset!");
static_assert(offsetof(FQRSLHackerInsuranceVipConfig, UpgradeDescription) == 0x000078, "Member 'FQRSLHackerInsuranceVipConfig::UpgradeDescription' has a wrong offset!");

// ScriptStruct QRSL.SquatJumpThrowWave
// 0x0018 (0x0020 - 0x0008)
struct FSquatJumpThrowWave final : public FTableRowBase
{
public:
	int32                                         WaveIndex;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bFinalWave : 1;                                    // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1DD7[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ThrowNumber;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpawmInterval;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpawmInterval;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaveInterval;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSquatJumpThrowWave) == 0x000008, "Wrong alignment on FSquatJumpThrowWave");
static_assert(sizeof(FSquatJumpThrowWave) == 0x000020, "Wrong size on FSquatJumpThrowWave");
static_assert(offsetof(FSquatJumpThrowWave, WaveIndex) == 0x000008, "Member 'FSquatJumpThrowWave::WaveIndex' has a wrong offset!");
static_assert(offsetof(FSquatJumpThrowWave, ThrowNumber) == 0x000010, "Member 'FSquatJumpThrowWave::ThrowNumber' has a wrong offset!");
static_assert(offsetof(FSquatJumpThrowWave, MinSpawmInterval) == 0x000014, "Member 'FSquatJumpThrowWave::MinSpawmInterval' has a wrong offset!");
static_assert(offsetof(FSquatJumpThrowWave, MaxSpawmInterval) == 0x000018, "Member 'FSquatJumpThrowWave::MaxSpawmInterval' has a wrong offset!");
static_assert(offsetof(FSquatJumpThrowWave, WaveInterval) == 0x00001C, "Member 'FSquatJumpThrowWave::WaveInterval' has a wrong offset!");

// ScriptStruct QRSL.KeepForwardBlockMesh
// 0x0040 (0x0040 - 0x0000)
struct FKeepForwardBlockMesh final
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DD8[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeepForwardBlockMesh) == 0x000010, "Wrong alignment on FKeepForwardBlockMesh");
static_assert(sizeof(FKeepForwardBlockMesh) == 0x000040, "Wrong size on FKeepForwardBlockMesh");
static_assert(offsetof(FKeepForwardBlockMesh, StaticMesh) == 0x000000, "Member 'FKeepForwardBlockMesh::StaticMesh' has a wrong offset!");
static_assert(offsetof(FKeepForwardBlockMesh, Transform) == 0x000010, "Member 'FKeepForwardBlockMesh::Transform' has a wrong offset!");

// ScriptStruct QRSL.LeaseBicycleConfig
// 0x0038 (0x0040 - 0x0008)
struct FLeaseBicycleConfig final : public FTableRowBase
{
public:
	TSubclassOf<class AQRSLMountCharacter>        BicycleClass;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AQRSLBicycleActor>          BicycleWorldActorClass;                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeaseNeedItem;                                     // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DD9[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LeaseDeductionItemId;                              // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LeaseDeductionItemAmount;                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeaseNeedCurrency;                                 // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHottaCurrencyType                            LeaseDeductionCurrencyType;                        // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DDA[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LeaseDeductionCurrencyAmount;                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPassByAbility;                                    // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DDB[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AbilityId;                                         // 0x0034(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DDC[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLeaseBicycleConfig) == 0x000008, "Wrong alignment on FLeaseBicycleConfig");
static_assert(sizeof(FLeaseBicycleConfig) == 0x000040, "Wrong size on FLeaseBicycleConfig");
static_assert(offsetof(FLeaseBicycleConfig, BicycleClass) == 0x000008, "Member 'FLeaseBicycleConfig::BicycleClass' has a wrong offset!");
static_assert(offsetof(FLeaseBicycleConfig, BicycleWorldActorClass) == 0x000010, "Member 'FLeaseBicycleConfig::BicycleWorldActorClass' has a wrong offset!");
static_assert(offsetof(FLeaseBicycleConfig, LeaseNeedItem) == 0x000018, "Member 'FLeaseBicycleConfig::LeaseNeedItem' has a wrong offset!");
static_assert(offsetof(FLeaseBicycleConfig, LeaseDeductionItemId) == 0x00001C, "Member 'FLeaseBicycleConfig::LeaseDeductionItemId' has a wrong offset!");
static_assert(offsetof(FLeaseBicycleConfig, LeaseDeductionItemAmount) == 0x000024, "Member 'FLeaseBicycleConfig::LeaseDeductionItemAmount' has a wrong offset!");
static_assert(offsetof(FLeaseBicycleConfig, LeaseNeedCurrency) == 0x000028, "Member 'FLeaseBicycleConfig::LeaseNeedCurrency' has a wrong offset!");
static_assert(offsetof(FLeaseBicycleConfig, LeaseDeductionCurrencyType) == 0x000029, "Member 'FLeaseBicycleConfig::LeaseDeductionCurrencyType' has a wrong offset!");
static_assert(offsetof(FLeaseBicycleConfig, LeaseDeductionCurrencyAmount) == 0x00002C, "Member 'FLeaseBicycleConfig::LeaseDeductionCurrencyAmount' has a wrong offset!");
static_assert(offsetof(FLeaseBicycleConfig, bPassByAbility) == 0x000030, "Member 'FLeaseBicycleConfig::bPassByAbility' has a wrong offset!");
static_assert(offsetof(FLeaseBicycleConfig, AbilityId) == 0x000034, "Member 'FLeaseBicycleConfig::AbilityId' has a wrong offset!");

// ScriptStruct QRSL.InteractiveBehaviorActiveInfo
// 0x0028 (0x0028 - 0x0000)
struct FInteractiveBehaviorActiveInfo final
{
public:
	EInteractiveBodyType                          ActiveBodyType;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBodyTouchInteractiveFunctionType             FunctionType;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBodyTouchInteractiveMontageType              MontageType;                                       // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBodyTouchInteractiveEventType                FinishEventType;                                   // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActiveSocketName;                                  // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActiveRadius;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParticleAttachedSocketName;                        // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ParticleAttachedScale;                             // 0x0018(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachedParticleTriggerToHideType            ParticleTriggerToHideType;                         // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DDD[0x3];                                     // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInteractiveBehaviorActiveInfo) == 0x000004, "Wrong alignment on FInteractiveBehaviorActiveInfo");
static_assert(sizeof(FInteractiveBehaviorActiveInfo) == 0x000028, "Wrong size on FInteractiveBehaviorActiveInfo");
static_assert(offsetof(FInteractiveBehaviorActiveInfo, ActiveBodyType) == 0x000000, "Member 'FInteractiveBehaviorActiveInfo::ActiveBodyType' has a wrong offset!");
static_assert(offsetof(FInteractiveBehaviorActiveInfo, FunctionType) == 0x000001, "Member 'FInteractiveBehaviorActiveInfo::FunctionType' has a wrong offset!");
static_assert(offsetof(FInteractiveBehaviorActiveInfo, MontageType) == 0x000002, "Member 'FInteractiveBehaviorActiveInfo::MontageType' has a wrong offset!");
static_assert(offsetof(FInteractiveBehaviorActiveInfo, FinishEventType) == 0x000003, "Member 'FInteractiveBehaviorActiveInfo::FinishEventType' has a wrong offset!");
static_assert(offsetof(FInteractiveBehaviorActiveInfo, ActiveSocketName) == 0x000004, "Member 'FInteractiveBehaviorActiveInfo::ActiveSocketName' has a wrong offset!");
static_assert(offsetof(FInteractiveBehaviorActiveInfo, ActiveRadius) == 0x00000C, "Member 'FInteractiveBehaviorActiveInfo::ActiveRadius' has a wrong offset!");
static_assert(offsetof(FInteractiveBehaviorActiveInfo, ParticleAttachedSocketName) == 0x000010, "Member 'FInteractiveBehaviorActiveInfo::ParticleAttachedSocketName' has a wrong offset!");
static_assert(offsetof(FInteractiveBehaviorActiveInfo, ParticleAttachedScale) == 0x000018, "Member 'FInteractiveBehaviorActiveInfo::ParticleAttachedScale' has a wrong offset!");
static_assert(offsetof(FInteractiveBehaviorActiveInfo, ParticleTriggerToHideType) == 0x000024, "Member 'FInteractiveBehaviorActiveInfo::ParticleTriggerToHideType' has a wrong offset!");

// ScriptStruct QRSL.InteractiveBehaviorActiveRectangleInfo
// 0x0020 (0x0020 - 0x0000)
struct FInteractiveBehaviorActiveRectangleInfo final
{
public:
	EInteractiveBodyType                          ActiveBodyType;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBodyTouchInteractiveFunctionType             FunctionType;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBodyTouchInteractiveMontageType              MontageType;                                       // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBodyTouchInteractiveEventType                FinishEventType;                                   // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OperateComponentTag;                               // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActiveStartSocketName;                             // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActiveEndSocketName;                               // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActiveHalfHeight;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInteractiveBehaviorActiveRectangleInfo) == 0x000004, "Wrong alignment on FInteractiveBehaviorActiveRectangleInfo");
static_assert(sizeof(FInteractiveBehaviorActiveRectangleInfo) == 0x000020, "Wrong size on FInteractiveBehaviorActiveRectangleInfo");
static_assert(offsetof(FInteractiveBehaviorActiveRectangleInfo, ActiveBodyType) == 0x000000, "Member 'FInteractiveBehaviorActiveRectangleInfo::ActiveBodyType' has a wrong offset!");
static_assert(offsetof(FInteractiveBehaviorActiveRectangleInfo, FunctionType) == 0x000001, "Member 'FInteractiveBehaviorActiveRectangleInfo::FunctionType' has a wrong offset!");
static_assert(offsetof(FInteractiveBehaviorActiveRectangleInfo, MontageType) == 0x000002, "Member 'FInteractiveBehaviorActiveRectangleInfo::MontageType' has a wrong offset!");
static_assert(offsetof(FInteractiveBehaviorActiveRectangleInfo, FinishEventType) == 0x000003, "Member 'FInteractiveBehaviorActiveRectangleInfo::FinishEventType' has a wrong offset!");
static_assert(offsetof(FInteractiveBehaviorActiveRectangleInfo, OperateComponentTag) == 0x000004, "Member 'FInteractiveBehaviorActiveRectangleInfo::OperateComponentTag' has a wrong offset!");
static_assert(offsetof(FInteractiveBehaviorActiveRectangleInfo, ActiveStartSocketName) == 0x00000C, "Member 'FInteractiveBehaviorActiveRectangleInfo::ActiveStartSocketName' has a wrong offset!");
static_assert(offsetof(FInteractiveBehaviorActiveRectangleInfo, ActiveEndSocketName) == 0x000014, "Member 'FInteractiveBehaviorActiveRectangleInfo::ActiveEndSocketName' has a wrong offset!");
static_assert(offsetof(FInteractiveBehaviorActiveRectangleInfo, ActiveHalfHeight) == 0x00001C, "Member 'FInteractiveBehaviorActiveRectangleInfo::ActiveHalfHeight' has a wrong offset!");

// ScriptStruct QRSL.InteractiveBehaviorStockingsSaveInfo
// 0x0050 (0x0050 - 0x0000)
struct FInteractiveBehaviorStockingsSaveInfo final
{
public:
	TMap<float, class FName>                      SavePointDataMap;                                  // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInteractiveBehaviorStockingsSaveInfo) == 0x000008, "Wrong alignment on FInteractiveBehaviorStockingsSaveInfo");
static_assert(sizeof(FInteractiveBehaviorStockingsSaveInfo) == 0x000050, "Wrong size on FInteractiveBehaviorStockingsSaveInfo");
static_assert(offsetof(FInteractiveBehaviorStockingsSaveInfo, SavePointDataMap) == 0x000000, "Member 'FInteractiveBehaviorStockingsSaveInfo::SavePointDataMap' has a wrong offset!");

// ScriptStruct QRSL.LeisureRoomBodyTouchInteractiveMontages
// 0x0010 (0x0010 - 0x0000)
struct FLeisureRoomBodyTouchInteractiveMontages final
{
public:
	TArray<TSoftObjectPtr<class UAnimMontage>>    NpcMontage;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLeisureRoomBodyTouchInteractiveMontages) == 0x000008, "Wrong alignment on FLeisureRoomBodyTouchInteractiveMontages");
static_assert(sizeof(FLeisureRoomBodyTouchInteractiveMontages) == 0x000010, "Wrong size on FLeisureRoomBodyTouchInteractiveMontages");
static_assert(offsetof(FLeisureRoomBodyTouchInteractiveMontages, NpcMontage) == 0x000000, "Member 'FLeisureRoomBodyTouchInteractiveMontages::NpcMontage' has a wrong offset!");

// ScriptStruct QRSL.SockSlideValueAttachedSocketInfo
// 0x0018 (0x0018 - 0x0000)
struct FSockSlideValueAttachedSocketInfo final
{
public:
	float                                         SockSlideValue;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SockSlideParticleAttachedScale;                    // 0x0004(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachedParticleTriggerToHideType            SockSlideTriggerToHideType;                        // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DDE[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SockSlideCheckRadius;                              // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSockSlideValueAttachedSocketInfo) == 0x000004, "Wrong alignment on FSockSlideValueAttachedSocketInfo");
static_assert(sizeof(FSockSlideValueAttachedSocketInfo) == 0x000018, "Wrong size on FSockSlideValueAttachedSocketInfo");
static_assert(offsetof(FSockSlideValueAttachedSocketInfo, SockSlideValue) == 0x000000, "Member 'FSockSlideValueAttachedSocketInfo::SockSlideValue' has a wrong offset!");
static_assert(offsetof(FSockSlideValueAttachedSocketInfo, SockSlideParticleAttachedScale) == 0x000004, "Member 'FSockSlideValueAttachedSocketInfo::SockSlideParticleAttachedScale' has a wrong offset!");
static_assert(offsetof(FSockSlideValueAttachedSocketInfo, SockSlideTriggerToHideType) == 0x000010, "Member 'FSockSlideValueAttachedSocketInfo::SockSlideTriggerToHideType' has a wrong offset!");
static_assert(offsetof(FSockSlideValueAttachedSocketInfo, SockSlideCheckRadius) == 0x000014, "Member 'FSockSlideValueAttachedSocketInfo::SockSlideCheckRadius' has a wrong offset!");

// ScriptStruct QRSL.LeisureRoomNPCCharacterSettings
// 0x0330 (0x0338 - 0x0008)
struct FLeisureRoomNPCCharacterSettings final : public FTableRowBase
{
public:
	TArray<struct FInteractiveBehaviorActiveInfo> InteractiveBehaviorActiveInfos;                    // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FInteractiveBehaviorActiveRectangleInfo> FInteractiveBehaviorActiveRectangleInfos;          // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         StockingsInterpSpeed;                              // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StockingsEvenInterpSpeed;                          // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StockingsStartPointInterpSpeed;                    // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DDF[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EInteractiveBodyType, struct FInteractiveBehaviorStockingsSaveInfo> StockingsFinishSaveInfos;                          // 0x0038(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         StockingsFinishTime;                               // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE0[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, float>                      LegStockingsSlidingPointMap_L;                     // 0x0090(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      LegStockingsSlidingPointMap_R;                     // 0x00E0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         StockingSlidingMaxValueWithShoe;                   // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE1[0x4];                                     // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EInteractiveBodyType, struct FLeisureRoomBodyTouchInteractiveMontages> BodyTouceMontageMap;                               // 0x0138(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   LeftShoeMeshAttachSocketName;                      // 0x0188(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RightShoeMeshAttachSocketName;                     // 0x0190(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InteractedCursorPath;                              // 0x0198(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InteractedCursorPosition;                          // 0x01A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UParticleSystem>         ParticleAsset;                                     // 0x01A8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ParticleRotationOffset;                            // 0x01D0(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ActiveParticleIntervalTime;                        // 0x01DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   LeftDropShoe;                                      // 0x01E0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   RightDropShoe;                                     // 0x0208(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FakeLegMeshTag;                                    // 0x0230(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLeisureRoomOverrideMaterialInfo> BareleggedMaterialInfo;                            // 0x0238(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FName, struct FVector>             AttachedParticleScaleInfos;                        // 0x0248(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FName, struct FSockSlideValueAttachedSocketInfo> LeftSockSlideValueAttachedSocketInfos;             // 0x0298(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FName, struct FSockSlideValueAttachedSocketInfo> RightSockSlideValueAttachedSocketInfos;            // 0x02E8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLeisureRoomNPCCharacterSettings) == 0x000008, "Wrong alignment on FLeisureRoomNPCCharacterSettings");
static_assert(sizeof(FLeisureRoomNPCCharacterSettings) == 0x000338, "Wrong size on FLeisureRoomNPCCharacterSettings");
static_assert(offsetof(FLeisureRoomNPCCharacterSettings, InteractiveBehaviorActiveInfos) == 0x000008, "Member 'FLeisureRoomNPCCharacterSettings::InteractiveBehaviorActiveInfos' has a wrong offset!");
static_assert(offsetof(FLeisureRoomNPCCharacterSettings, FInteractiveBehaviorActiveRectangleInfos) == 0x000018, "Member 'FLeisureRoomNPCCharacterSettings::FInteractiveBehaviorActiveRectangleInfos' has a wrong offset!");
static_assert(offsetof(FLeisureRoomNPCCharacterSettings, StockingsInterpSpeed) == 0x000028, "Member 'FLeisureRoomNPCCharacterSettings::StockingsInterpSpeed' has a wrong offset!");
static_assert(offsetof(FLeisureRoomNPCCharacterSettings, StockingsEvenInterpSpeed) == 0x00002C, "Member 'FLeisureRoomNPCCharacterSettings::StockingsEvenInterpSpeed' has a wrong offset!");
static_assert(offsetof(FLeisureRoomNPCCharacterSettings, StockingsStartPointInterpSpeed) == 0x000030, "Member 'FLeisureRoomNPCCharacterSettings::StockingsStartPointInterpSpeed' has a wrong offset!");
static_assert(offsetof(FLeisureRoomNPCCharacterSettings, StockingsFinishSaveInfos) == 0x000038, "Member 'FLeisureRoomNPCCharacterSettings::StockingsFinishSaveInfos' has a wrong offset!");
static_assert(offsetof(FLeisureRoomNPCCharacterSettings, StockingsFinishTime) == 0x000088, "Member 'FLeisureRoomNPCCharacterSettings::StockingsFinishTime' has a wrong offset!");
static_assert(offsetof(FLeisureRoomNPCCharacterSettings, LegStockingsSlidingPointMap_L) == 0x000090, "Member 'FLeisureRoomNPCCharacterSettings::LegStockingsSlidingPointMap_L' has a wrong offset!");
static_assert(offsetof(FLeisureRoomNPCCharacterSettings, LegStockingsSlidingPointMap_R) == 0x0000E0, "Member 'FLeisureRoomNPCCharacterSettings::LegStockingsSlidingPointMap_R' has a wrong offset!");
static_assert(offsetof(FLeisureRoomNPCCharacterSettings, StockingSlidingMaxValueWithShoe) == 0x000130, "Member 'FLeisureRoomNPCCharacterSettings::StockingSlidingMaxValueWithShoe' has a wrong offset!");
static_assert(offsetof(FLeisureRoomNPCCharacterSettings, BodyTouceMontageMap) == 0x000138, "Member 'FLeisureRoomNPCCharacterSettings::BodyTouceMontageMap' has a wrong offset!");
static_assert(offsetof(FLeisureRoomNPCCharacterSettings, LeftShoeMeshAttachSocketName) == 0x000188, "Member 'FLeisureRoomNPCCharacterSettings::LeftShoeMeshAttachSocketName' has a wrong offset!");
static_assert(offsetof(FLeisureRoomNPCCharacterSettings, RightShoeMeshAttachSocketName) == 0x000190, "Member 'FLeisureRoomNPCCharacterSettings::RightShoeMeshAttachSocketName' has a wrong offset!");
static_assert(offsetof(FLeisureRoomNPCCharacterSettings, InteractedCursorPath) == 0x000198, "Member 'FLeisureRoomNPCCharacterSettings::InteractedCursorPath' has a wrong offset!");
static_assert(offsetof(FLeisureRoomNPCCharacterSettings, InteractedCursorPosition) == 0x0001A0, "Member 'FLeisureRoomNPCCharacterSettings::InteractedCursorPosition' has a wrong offset!");
static_assert(offsetof(FLeisureRoomNPCCharacterSettings, ParticleAsset) == 0x0001A8, "Member 'FLeisureRoomNPCCharacterSettings::ParticleAsset' has a wrong offset!");
static_assert(offsetof(FLeisureRoomNPCCharacterSettings, ParticleRotationOffset) == 0x0001D0, "Member 'FLeisureRoomNPCCharacterSettings::ParticleRotationOffset' has a wrong offset!");
static_assert(offsetof(FLeisureRoomNPCCharacterSettings, ActiveParticleIntervalTime) == 0x0001DC, "Member 'FLeisureRoomNPCCharacterSettings::ActiveParticleIntervalTime' has a wrong offset!");
static_assert(offsetof(FLeisureRoomNPCCharacterSettings, LeftDropShoe) == 0x0001E0, "Member 'FLeisureRoomNPCCharacterSettings::LeftDropShoe' has a wrong offset!");
static_assert(offsetof(FLeisureRoomNPCCharacterSettings, RightDropShoe) == 0x000208, "Member 'FLeisureRoomNPCCharacterSettings::RightDropShoe' has a wrong offset!");
static_assert(offsetof(FLeisureRoomNPCCharacterSettings, FakeLegMeshTag) == 0x000230, "Member 'FLeisureRoomNPCCharacterSettings::FakeLegMeshTag' has a wrong offset!");
static_assert(offsetof(FLeisureRoomNPCCharacterSettings, BareleggedMaterialInfo) == 0x000238, "Member 'FLeisureRoomNPCCharacterSettings::BareleggedMaterialInfo' has a wrong offset!");
static_assert(offsetof(FLeisureRoomNPCCharacterSettings, AttachedParticleScaleInfos) == 0x000248, "Member 'FLeisureRoomNPCCharacterSettings::AttachedParticleScaleInfos' has a wrong offset!");
static_assert(offsetof(FLeisureRoomNPCCharacterSettings, LeftSockSlideValueAttachedSocketInfos) == 0x000298, "Member 'FLeisureRoomNPCCharacterSettings::LeftSockSlideValueAttachedSocketInfos' has a wrong offset!");
static_assert(offsetof(FLeisureRoomNPCCharacterSettings, RightSockSlideValueAttachedSocketInfos) == 0x0002E8, "Member 'FLeisureRoomNPCCharacterSettings::RightSockSlideValueAttachedSocketInfos' has a wrong offset!");

// ScriptStruct QRSL.RecipeStarData
// 0x0008 (0x0008 - 0x0000)
struct FRecipeStarData final
{
public:
	int32                                         LevelRangeMin;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelRangeMax;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecipeStarData) == 0x000004, "Wrong alignment on FRecipeStarData");
static_assert(sizeof(FRecipeStarData) == 0x000008, "Wrong size on FRecipeStarData");
static_assert(offsetof(FRecipeStarData, LevelRangeMin) == 0x000000, "Member 'FRecipeStarData::LevelRangeMin' has a wrong offset!");
static_assert(offsetof(FRecipeStarData, LevelRangeMax) == 0x000004, "Member 'FRecipeStarData::LevelRangeMax' has a wrong offset!");

// ScriptStruct QRSL.CookedFoodData
// 0x0014 (0x0014 - 0x0000)
struct alignas(0x04) FCookedFoodData final
{
public:
	uint8                                         Pad_1DE2[0x14];                                    // 0x0000(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCookedFoodData) == 0x000004, "Wrong alignment on FCookedFoodData");
static_assert(sizeof(FCookedFoodData) == 0x000014, "Wrong size on FCookedFoodData");

// ScriptStruct QRSL.WormholeInsideEffectDataBase
// 0x0040 (0x0048 - 0x0008)
struct FWormholeInsideEffectDataBase : public FTableRowBase
{
public:
	class FText                                   Description;                                       // 0x0008(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              EffectIcon;                                        // 0x0020(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholeInsideEffectDataBase) == 0x000008, "Wrong alignment on FWormholeInsideEffectDataBase");
static_assert(sizeof(FWormholeInsideEffectDataBase) == 0x000048, "Wrong size on FWormholeInsideEffectDataBase");
static_assert(offsetof(FWormholeInsideEffectDataBase, Description) == 0x000008, "Member 'FWormholeInsideEffectDataBase::Description' has a wrong offset!");
static_assert(offsetof(FWormholeInsideEffectDataBase, EffectIcon) == 0x000020, "Member 'FWormholeInsideEffectDataBase::EffectIcon' has a wrong offset!");

// ScriptStruct QRSL.PersonalityUnlockConditionData
// 0x000C (0x000C - 0x0000)
struct FPersonalityUnlockConditionData final
{
public:
	int32                                         Score;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PersonalityID;                                     // 0x0004(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPersonalityUnlockConditionData) == 0x000004, "Wrong alignment on FPersonalityUnlockConditionData");
static_assert(sizeof(FPersonalityUnlockConditionData) == 0x00000C, "Wrong size on FPersonalityUnlockConditionData");
static_assert(offsetof(FPersonalityUnlockConditionData, Score) == 0x000000, "Member 'FPersonalityUnlockConditionData::Score' has a wrong offset!");
static_assert(offsetof(FPersonalityUnlockConditionData, PersonalityID) == 0x000004, "Member 'FPersonalityUnlockConditionData::PersonalityID' has a wrong offset!");

// ScriptStruct QRSL.PersonalityTypeData
// 0x00E8 (0x00F0 - 0x0008)
struct FPersonalityTypeData final : public FTableRowBase
{
public:
	struct FSlateColor                            Color;                                             // 0x0008(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FRotator                               MeshRotation;                                      // 0x0030(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE3[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   PersonalityTypeText;                               // 0x0040(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FPersonalityTitleConditionInfo> PersonalityTitleConditions;                        // 0x0058(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FPersonalityUnlockConditionData> UnlockPersonalityConditions;                       // 0x0068(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x0078(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              CheckIconTexture;                                  // 0x00A0(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              TagIconTexture;                                    // 0x00C8(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPersonalityTypeData) == 0x000008, "Wrong alignment on FPersonalityTypeData");
static_assert(sizeof(FPersonalityTypeData) == 0x0000F0, "Wrong size on FPersonalityTypeData");
static_assert(offsetof(FPersonalityTypeData, Color) == 0x000008, "Member 'FPersonalityTypeData::Color' has a wrong offset!");
static_assert(offsetof(FPersonalityTypeData, MeshRotation) == 0x000030, "Member 'FPersonalityTypeData::MeshRotation' has a wrong offset!");
static_assert(offsetof(FPersonalityTypeData, PersonalityTypeText) == 0x000040, "Member 'FPersonalityTypeData::PersonalityTypeText' has a wrong offset!");
static_assert(offsetof(FPersonalityTypeData, PersonalityTitleConditions) == 0x000058, "Member 'FPersonalityTypeData::PersonalityTitleConditions' has a wrong offset!");
static_assert(offsetof(FPersonalityTypeData, UnlockPersonalityConditions) == 0x000068, "Member 'FPersonalityTypeData::UnlockPersonalityConditions' has a wrong offset!");
static_assert(offsetof(FPersonalityTypeData, IconTexture) == 0x000078, "Member 'FPersonalityTypeData::IconTexture' has a wrong offset!");
static_assert(offsetof(FPersonalityTypeData, CheckIconTexture) == 0x0000A0, "Member 'FPersonalityTypeData::CheckIconTexture' has a wrong offset!");
static_assert(offsetof(FPersonalityTypeData, TagIconTexture) == 0x0000C8, "Member 'FPersonalityTypeData::TagIconTexture' has a wrong offset!");

// ScriptStruct QRSL.ForbiddenEnterSingleActionViewInfo
// 0x0020 (0x0020 - 0x0000)
struct FForbiddenEnterSingleActionViewInfo final
{
public:
	class FName                                   SingleActionID;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ForbiddenEnterViewDesc;                            // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FForbiddenEnterSingleActionViewInfo) == 0x000008, "Wrong alignment on FForbiddenEnterSingleActionViewInfo");
static_assert(sizeof(FForbiddenEnterSingleActionViewInfo) == 0x000020, "Wrong size on FForbiddenEnterSingleActionViewInfo");
static_assert(offsetof(FForbiddenEnterSingleActionViewInfo, SingleActionID) == 0x000000, "Member 'FForbiddenEnterSingleActionViewInfo::SingleActionID' has a wrong offset!");
static_assert(offsetof(FForbiddenEnterSingleActionViewInfo, ForbiddenEnterViewDesc) == 0x000008, "Member 'FForbiddenEnterSingleActionViewInfo::ForbiddenEnterViewDesc' has a wrong offset!");

// ScriptStruct QRSL.DoubleActionPlayerInfo
// 0x0038 (0x0038 - 0x0000)
struct FDoubleActionPlayerInfo final
{
public:
	class FName                                   DoubleActionID;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EnterPlayerLoc;                                    // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               EnterPlayerRot;                                    // 0x0014(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                QuitPlayerLoc;                                     // 0x0020(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               QuitPlayerRot;                                     // 0x002C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDoubleActionPlayerInfo) == 0x000004, "Wrong alignment on FDoubleActionPlayerInfo");
static_assert(sizeof(FDoubleActionPlayerInfo) == 0x000038, "Wrong size on FDoubleActionPlayerInfo");
static_assert(offsetof(FDoubleActionPlayerInfo, DoubleActionID) == 0x000000, "Member 'FDoubleActionPlayerInfo::DoubleActionID' has a wrong offset!");
static_assert(offsetof(FDoubleActionPlayerInfo, EnterPlayerLoc) == 0x000008, "Member 'FDoubleActionPlayerInfo::EnterPlayerLoc' has a wrong offset!");
static_assert(offsetof(FDoubleActionPlayerInfo, EnterPlayerRot) == 0x000014, "Member 'FDoubleActionPlayerInfo::EnterPlayerRot' has a wrong offset!");
static_assert(offsetof(FDoubleActionPlayerInfo, QuitPlayerLoc) == 0x000020, "Member 'FDoubleActionPlayerInfo::QuitPlayerLoc' has a wrong offset!");
static_assert(offsetof(FDoubleActionPlayerInfo, QuitPlayerRot) == 0x00002C, "Member 'FDoubleActionPlayerInfo::QuitPlayerRot' has a wrong offset!");

// ScriptStruct QRSL.8V8StationInfo
// 0x0028 (0x0028 - 0x0000)
struct FEightV8StationInfo final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	E8V8StationType                               Type;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	E8V8PlayerCamp                                HoldCamp;                                          // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE4[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         HoldTicks;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         AddTicks;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFrozen;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE5[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEightV8StationInfo) == 0x000008, "Wrong alignment on FEightV8StationInfo");
static_assert(sizeof(FEightV8StationInfo) == 0x000028, "Wrong size on FEightV8StationInfo");
static_assert(offsetof(FEightV8StationInfo, Tag) == 0x000000, "Member 'FEightV8StationInfo::Tag' has a wrong offset!");
static_assert(offsetof(FEightV8StationInfo, Type) == 0x000008, "Member 'FEightV8StationInfo::Type' has a wrong offset!");
static_assert(offsetof(FEightV8StationInfo, HoldCamp) == 0x000009, "Member 'FEightV8StationInfo::HoldCamp' has a wrong offset!");
static_assert(offsetof(FEightV8StationInfo, HoldTicks) == 0x000010, "Member 'FEightV8StationInfo::HoldTicks' has a wrong offset!");
static_assert(offsetof(FEightV8StationInfo, AddTicks) == 0x000018, "Member 'FEightV8StationInfo::AddTicks' has a wrong offset!");
static_assert(offsetof(FEightV8StationInfo, IsFrozen) == 0x000020, "Member 'FEightV8StationInfo::IsFrozen' has a wrong offset!");

// ScriptStruct QRSL.LeisureRoomShopExchangeConsumedDataInfo
// 0x0014 (0x0014 - 0x0000)
struct FLeisureRoomShopExchangeConsumedDataInfo final
{
public:
	ELeisureRoomShopExchangeConsumedType          ConsumedType;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE6[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ConsumedItemID;                                    // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHottaCurrencyType                            CurrencyType;                                      // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE7[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ConsumedQuantity;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLeisureRoomShopExchangeConsumedDataInfo) == 0x000004, "Wrong alignment on FLeisureRoomShopExchangeConsumedDataInfo");
static_assert(sizeof(FLeisureRoomShopExchangeConsumedDataInfo) == 0x000014, "Wrong size on FLeisureRoomShopExchangeConsumedDataInfo");
static_assert(offsetof(FLeisureRoomShopExchangeConsumedDataInfo, ConsumedType) == 0x000000, "Member 'FLeisureRoomShopExchangeConsumedDataInfo::ConsumedType' has a wrong offset!");
static_assert(offsetof(FLeisureRoomShopExchangeConsumedDataInfo, ConsumedItemID) == 0x000004, "Member 'FLeisureRoomShopExchangeConsumedDataInfo::ConsumedItemID' has a wrong offset!");
static_assert(offsetof(FLeisureRoomShopExchangeConsumedDataInfo, CurrencyType) == 0x00000C, "Member 'FLeisureRoomShopExchangeConsumedDataInfo::CurrencyType' has a wrong offset!");
static_assert(offsetof(FLeisureRoomShopExchangeConsumedDataInfo, ConsumedQuantity) == 0x000010, "Member 'FLeisureRoomShopExchangeConsumedDataInfo::ConsumedQuantity' has a wrong offset!");

// ScriptStruct QRSL.LeisureRoomShopMallDataInfo
// 0x0100 (0x0108 - 0x0008)
struct FLeisureRoomShopMallDataInfo final : public FTableRowBase
{
public:
	class FName                                   LeisureRoomID;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELeisureRoomDataType                          DataType;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE8[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              DataIcon;                                          // 0x0018(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              DataSelectedIcon;                                  // 0x0040(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              DataPreviewIcon;                                   // 0x0068(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DataName;                                          // 0x0090(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   DataDesc;                                          // 0x00A8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   ItemID;                                            // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WeaponUpgradeStarCondition;                        // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLeisureRoomShopExchangeConsumedDataInfo> ExchangeConsumedDataInfos;                         // 0x00D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   ReceivedDataDesc;                                  // 0x00E8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   OtherMallDataID;                                   // 0x0100(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLeisureRoomShopMallDataInfo) == 0x000008, "Wrong alignment on FLeisureRoomShopMallDataInfo");
static_assert(sizeof(FLeisureRoomShopMallDataInfo) == 0x000108, "Wrong size on FLeisureRoomShopMallDataInfo");
static_assert(offsetof(FLeisureRoomShopMallDataInfo, LeisureRoomID) == 0x000008, "Member 'FLeisureRoomShopMallDataInfo::LeisureRoomID' has a wrong offset!");
static_assert(offsetof(FLeisureRoomShopMallDataInfo, DataType) == 0x000010, "Member 'FLeisureRoomShopMallDataInfo::DataType' has a wrong offset!");
static_assert(offsetof(FLeisureRoomShopMallDataInfo, DataIcon) == 0x000018, "Member 'FLeisureRoomShopMallDataInfo::DataIcon' has a wrong offset!");
static_assert(offsetof(FLeisureRoomShopMallDataInfo, DataSelectedIcon) == 0x000040, "Member 'FLeisureRoomShopMallDataInfo::DataSelectedIcon' has a wrong offset!");
static_assert(offsetof(FLeisureRoomShopMallDataInfo, DataPreviewIcon) == 0x000068, "Member 'FLeisureRoomShopMallDataInfo::DataPreviewIcon' has a wrong offset!");
static_assert(offsetof(FLeisureRoomShopMallDataInfo, DataName) == 0x000090, "Member 'FLeisureRoomShopMallDataInfo::DataName' has a wrong offset!");
static_assert(offsetof(FLeisureRoomShopMallDataInfo, DataDesc) == 0x0000A8, "Member 'FLeisureRoomShopMallDataInfo::DataDesc' has a wrong offset!");
static_assert(offsetof(FLeisureRoomShopMallDataInfo, ItemID) == 0x0000C0, "Member 'FLeisureRoomShopMallDataInfo::ItemID' has a wrong offset!");
static_assert(offsetof(FLeisureRoomShopMallDataInfo, WeaponUpgradeStarCondition) == 0x0000C8, "Member 'FLeisureRoomShopMallDataInfo::WeaponUpgradeStarCondition' has a wrong offset!");
static_assert(offsetof(FLeisureRoomShopMallDataInfo, ExchangeConsumedDataInfos) == 0x0000D8, "Member 'FLeisureRoomShopMallDataInfo::ExchangeConsumedDataInfos' has a wrong offset!");
static_assert(offsetof(FLeisureRoomShopMallDataInfo, ReceivedDataDesc) == 0x0000E8, "Member 'FLeisureRoomShopMallDataInfo::ReceivedDataDesc' has a wrong offset!");
static_assert(offsetof(FLeisureRoomShopMallDataInfo, OtherMallDataID) == 0x000100, "Member 'FLeisureRoomShopMallDataInfo::OtherMallDataID' has a wrong offset!");

// ScriptStruct QRSL.SoloLeagueStageResetData
// 0x0020 (0x0028 - 0x0008)
struct FSoloLeagueStageResetData final : public FTableRowBase
{
public:
	struct FSoloLeagueStageInfo                   UpperStageInfo;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FSoloLeagueStageInfo                   ResetStageInfo;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSoloLeagueStageResetData) == 0x000008, "Wrong alignment on FSoloLeagueStageResetData");
static_assert(sizeof(FSoloLeagueStageResetData) == 0x000028, "Wrong size on FSoloLeagueStageResetData");
static_assert(offsetof(FSoloLeagueStageResetData, UpperStageInfo) == 0x000008, "Member 'FSoloLeagueStageResetData::UpperStageInfo' has a wrong offset!");
static_assert(offsetof(FSoloLeagueStageResetData, ResetStageInfo) == 0x000018, "Member 'FSoloLeagueStageResetData::ResetStageInfo' has a wrong offset!");

// ScriptStruct QRSL.LeisureRoomFurnitureDataInfo
// 0x0040 (0x00A8 - 0x0068)
struct FLeisureRoomFurnitureDataInfo final : public FLeisureRoomBaseDataInfo
{
public:
	TSoftClassPtr<class UClass>                   FurnitureActor;                                    // 0x0068(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FurnitureSpawnLoc;                                 // 0x0090(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               FurnitureSpawnRot;                                 // 0x009C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLeisureRoomFurnitureDataInfo) == 0x000008, "Wrong alignment on FLeisureRoomFurnitureDataInfo");
static_assert(sizeof(FLeisureRoomFurnitureDataInfo) == 0x0000A8, "Wrong size on FLeisureRoomFurnitureDataInfo");
static_assert(offsetof(FLeisureRoomFurnitureDataInfo, FurnitureActor) == 0x000068, "Member 'FLeisureRoomFurnitureDataInfo::FurnitureActor' has a wrong offset!");
static_assert(offsetof(FLeisureRoomFurnitureDataInfo, FurnitureSpawnLoc) == 0x000090, "Member 'FLeisureRoomFurnitureDataInfo::FurnitureSpawnLoc' has a wrong offset!");
static_assert(offsetof(FLeisureRoomFurnitureDataInfo, FurnitureSpawnRot) == 0x00009C, "Member 'FLeisureRoomFurnitureDataInfo::FurnitureSpawnRot' has a wrong offset!");

// ScriptStruct QRSL.LeisureRoomShoeDataInfo
// 0x0080 (0x00E8 - 0x0068)
struct FLeisureRoomShoeDataInfo final : public FLeisureRoomBaseDataInfo
{
public:
	TSoftObjectPtr<class USkeletalMesh>           OverrideLeftFootMesh;                              // 0x0068(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           OverrideRightFootMesh;                             // 0x0090(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       OverrideMaterialInstance;                          // 0x00B8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideMaterialSocketName;                        // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLeisureRoomShoeDataInfo) == 0x000008, "Wrong alignment on FLeisureRoomShoeDataInfo");
static_assert(sizeof(FLeisureRoomShoeDataInfo) == 0x0000E8, "Wrong size on FLeisureRoomShoeDataInfo");
static_assert(offsetof(FLeisureRoomShoeDataInfo, OverrideLeftFootMesh) == 0x000068, "Member 'FLeisureRoomShoeDataInfo::OverrideLeftFootMesh' has a wrong offset!");
static_assert(offsetof(FLeisureRoomShoeDataInfo, OverrideRightFootMesh) == 0x000090, "Member 'FLeisureRoomShoeDataInfo::OverrideRightFootMesh' has a wrong offset!");
static_assert(offsetof(FLeisureRoomShoeDataInfo, OverrideMaterialInstance) == 0x0000B8, "Member 'FLeisureRoomShoeDataInfo::OverrideMaterialInstance' has a wrong offset!");
static_assert(offsetof(FLeisureRoomShoeDataInfo, OverrideMaterialSocketName) == 0x0000E0, "Member 'FLeisureRoomShoeDataInfo::OverrideMaterialSocketName' has a wrong offset!");

// ScriptStruct QRSL.LeisureRoomConfigDataInfo
// 0x00B0 (0x00B8 - 0x0008)
struct FLeisureRoomConfigDataInfo final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   LeisueRoomName;                                    // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVector                                EnterRoomStandLoc;                                 // 0x0048(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EnterRoomStandRot;                                 // 0x0054(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LeaveRoomStandLoc;                                 // 0x0060(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LeaveRoomStandRot;                                 // 0x006C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLeisureRoomFurnitureDataInfo>  FurnitureDataInfos;                                // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FLeisureRoomActionDataInfo>     ActionDataInfos;                                   // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FLeisureRoomShoeDataInfo>       ShoeDataInfos;                                     // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FLeisureRoomOtherDataInfo>      OtherDataInfos;                                    // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLeisureRoomConfigDataInfo) == 0x000008, "Wrong alignment on FLeisureRoomConfigDataInfo");
static_assert(sizeof(FLeisureRoomConfigDataInfo) == 0x0000B8, "Wrong size on FLeisureRoomConfigDataInfo");
static_assert(offsetof(FLeisureRoomConfigDataInfo, Icon) == 0x000008, "Member 'FLeisureRoomConfigDataInfo::Icon' has a wrong offset!");
static_assert(offsetof(FLeisureRoomConfigDataInfo, LeisueRoomName) == 0x000030, "Member 'FLeisureRoomConfigDataInfo::LeisueRoomName' has a wrong offset!");
static_assert(offsetof(FLeisureRoomConfigDataInfo, EnterRoomStandLoc) == 0x000048, "Member 'FLeisureRoomConfigDataInfo::EnterRoomStandLoc' has a wrong offset!");
static_assert(offsetof(FLeisureRoomConfigDataInfo, EnterRoomStandRot) == 0x000054, "Member 'FLeisureRoomConfigDataInfo::EnterRoomStandRot' has a wrong offset!");
static_assert(offsetof(FLeisureRoomConfigDataInfo, LeaveRoomStandLoc) == 0x000060, "Member 'FLeisureRoomConfigDataInfo::LeaveRoomStandLoc' has a wrong offset!");
static_assert(offsetof(FLeisureRoomConfigDataInfo, LeaveRoomStandRot) == 0x00006C, "Member 'FLeisureRoomConfigDataInfo::LeaveRoomStandRot' has a wrong offset!");
static_assert(offsetof(FLeisureRoomConfigDataInfo, FurnitureDataInfos) == 0x000078, "Member 'FLeisureRoomConfigDataInfo::FurnitureDataInfos' has a wrong offset!");
static_assert(offsetof(FLeisureRoomConfigDataInfo, ActionDataInfos) == 0x000088, "Member 'FLeisureRoomConfigDataInfo::ActionDataInfos' has a wrong offset!");
static_assert(offsetof(FLeisureRoomConfigDataInfo, ShoeDataInfos) == 0x000098, "Member 'FLeisureRoomConfigDataInfo::ShoeDataInfos' has a wrong offset!");
static_assert(offsetof(FLeisureRoomConfigDataInfo, OtherDataInfos) == 0x0000A8, "Member 'FLeisureRoomConfigDataInfo::OtherDataInfos' has a wrong offset!");

// ScriptStruct QRSL.MountQualityConfig
// 0x0058 (0x0060 - 0x0008)
struct FMountQualityConfig final : public FTableRowBase
{
public:
	EItemQuality                                  QualityType;                                       // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE9[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              Image;                                             // 0x0010(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            Color;                                             // 0x0038(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMountQualityConfig) == 0x000008, "Wrong alignment on FMountQualityConfig");
static_assert(sizeof(FMountQualityConfig) == 0x000060, "Wrong size on FMountQualityConfig");
static_assert(offsetof(FMountQualityConfig, QualityType) == 0x000008, "Member 'FMountQualityConfig::QualityType' has a wrong offset!");
static_assert(offsetof(FMountQualityConfig, Image) == 0x000010, "Member 'FMountQualityConfig::Image' has a wrong offset!");
static_assert(offsetof(FMountQualityConfig, Color) == 0x000038, "Member 'FMountQualityConfig::Color' has a wrong offset!");

// ScriptStruct QRSL.PersonalityTitleData
// 0x0030 (0x0038 - 0x0008)
struct FPersonalityTitleData final : public FTableRowBase
{
public:
	class FText                                   PersonalityTitleName;                              // 0x0008(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   PersonalityTitleDescription;                       // 0x0020(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPersonalityTitleData) == 0x000008, "Wrong alignment on FPersonalityTitleData");
static_assert(sizeof(FPersonalityTitleData) == 0x000038, "Wrong size on FPersonalityTitleData");
static_assert(offsetof(FPersonalityTitleData, PersonalityTitleName) == 0x000008, "Member 'FPersonalityTitleData::PersonalityTitleName' has a wrong offset!");
static_assert(offsetof(FPersonalityTitleData, PersonalityTitleDescription) == 0x000020, "Member 'FPersonalityTitleData::PersonalityTitleDescription' has a wrong offset!");

// ScriptStruct QRSL.InteractivePoseInfo
// 0x0020 (0x0020 - 0x0000)
struct FInteractivePoseInfo final
{
public:
	class FName                                   InteractedActionID;                                // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PoseSpawnLoc;                                      // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               PoseSpawnRot;                                      // 0x0014(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInteractivePoseInfo) == 0x000004, "Wrong alignment on FInteractivePoseInfo");
static_assert(sizeof(FInteractivePoseInfo) == 0x000020, "Wrong size on FInteractivePoseInfo");
static_assert(offsetof(FInteractivePoseInfo, InteractedActionID) == 0x000000, "Member 'FInteractivePoseInfo::InteractedActionID' has a wrong offset!");
static_assert(offsetof(FInteractivePoseInfo, PoseSpawnLoc) == 0x000008, "Member 'FInteractivePoseInfo::PoseSpawnLoc' has a wrong offset!");
static_assert(offsetof(FInteractivePoseInfo, PoseSpawnRot) == 0x000014, "Member 'FInteractivePoseInfo::PoseSpawnRot' has a wrong offset!");

// ScriptStruct QRSL.InteractiveBodyTypeArray
// 0x0020 (0x0020 - 0x0000)
struct FInteractiveBodyTypeArray final
{
public:
	TArray<EInteractiveBodyType>                  AddBodyTypeArray;                                  // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<EInteractiveBodyType>                  RemoveBodyTypeArray;                               // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInteractiveBodyTypeArray) == 0x000008, "Wrong alignment on FInteractiveBodyTypeArray");
static_assert(sizeof(FInteractiveBodyTypeArray) == 0x000020, "Wrong size on FInteractiveBodyTypeArray");
static_assert(offsetof(FInteractiveBodyTypeArray, AddBodyTypeArray) == 0x000000, "Member 'FInteractiveBodyTypeArray::AddBodyTypeArray' has a wrong offset!");
static_assert(offsetof(FInteractiveBodyTypeArray, RemoveBodyTypeArray) == 0x000010, "Member 'FInteractiveBodyTypeArray::RemoveBodyTypeArray' has a wrong offset!");

// ScriptStruct QRSL.LeisureRoomBodyTouchInteractiveFunction
// 0x0078 (0x0078 - 0x0000)
struct FLeisureRoomBodyTouchInteractiveFunction final
{
public:
	class FName                                   InteractedActionID;                                // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EInteractiveBodyType>                  FixedBodyTypeLists;                                // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<EInteractiveBodyType>                  BodyTouchTypeLists;                                // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EInteractiveBodyType, struct FInteractiveBodyTypeArray> InteractiveFinishReplace;                          // 0x0028(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLeisureRoomBodyTouchInteractiveFunction) == 0x000008, "Wrong alignment on FLeisureRoomBodyTouchInteractiveFunction");
static_assert(sizeof(FLeisureRoomBodyTouchInteractiveFunction) == 0x000078, "Wrong size on FLeisureRoomBodyTouchInteractiveFunction");
static_assert(offsetof(FLeisureRoomBodyTouchInteractiveFunction, InteractedActionID) == 0x000000, "Member 'FLeisureRoomBodyTouchInteractiveFunction::InteractedActionID' has a wrong offset!");
static_assert(offsetof(FLeisureRoomBodyTouchInteractiveFunction, FixedBodyTypeLists) == 0x000008, "Member 'FLeisureRoomBodyTouchInteractiveFunction::FixedBodyTypeLists' has a wrong offset!");
static_assert(offsetof(FLeisureRoomBodyTouchInteractiveFunction, BodyTouchTypeLists) == 0x000018, "Member 'FLeisureRoomBodyTouchInteractiveFunction::BodyTouchTypeLists' has a wrong offset!");
static_assert(offsetof(FLeisureRoomBodyTouchInteractiveFunction, InteractiveFinishReplace) == 0x000028, "Member 'FLeisureRoomBodyTouchInteractiveFunction::InteractiveFinishReplace' has a wrong offset!");

// ScriptStruct QRSL.LeisureRoomBodyTouchInteractiveConfig
// 0x0010 (0x0010 - 0x0000)
struct FLeisureRoomBodyTouchInteractiveConfig final
{
public:
	TArray<struct FLeisureRoomBodyTouchInteractiveFunction> InteractiveFunction;                               // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLeisureRoomBodyTouchInteractiveConfig) == 0x000008, "Wrong alignment on FLeisureRoomBodyTouchInteractiveConfig");
static_assert(sizeof(FLeisureRoomBodyTouchInteractiveConfig) == 0x000010, "Wrong size on FLeisureRoomBodyTouchInteractiveConfig");
static_assert(offsetof(FLeisureRoomBodyTouchInteractiveConfig, InteractiveFunction) == 0x000000, "Member 'FLeisureRoomBodyTouchInteractiveConfig::InteractiveFunction' has a wrong offset!");

// ScriptStruct QRSL.OrienteeringPlayerResultData
// 0x0020 (0x0020 - 0x0000)
struct FOrienteeringPlayerResultData final
{
public:
	TWeakObjectPtr<class AQRSLPlayerCharacter>    Player;                                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         PlayerRoleID;                                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassCheckPointsCount;                              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GameTime;                                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DEA[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOrienteeringPlayerResultData) == 0x000008, "Wrong alignment on FOrienteeringPlayerResultData");
static_assert(sizeof(FOrienteeringPlayerResultData) == 0x000020, "Wrong size on FOrienteeringPlayerResultData");
static_assert(offsetof(FOrienteeringPlayerResultData, Player) == 0x000000, "Member 'FOrienteeringPlayerResultData::Player' has a wrong offset!");
static_assert(offsetof(FOrienteeringPlayerResultData, PlayerRoleID) == 0x000008, "Member 'FOrienteeringPlayerResultData::PlayerRoleID' has a wrong offset!");
static_assert(offsetof(FOrienteeringPlayerResultData, PassCheckPointsCount) == 0x000010, "Member 'FOrienteeringPlayerResultData::PassCheckPointsCount' has a wrong offset!");
static_assert(offsetof(FOrienteeringPlayerResultData, GameTime) == 0x000014, "Member 'FOrienteeringPlayerResultData::GameTime' has a wrong offset!");
static_assert(offsetof(FOrienteeringPlayerResultData, bSuccess) == 0x000018, "Member 'FOrienteeringPlayerResultData::bSuccess' has a wrong offset!");

// ScriptStruct QRSL.AllBossIcons
// 0x0010 (0x0010 - 0x0000)
struct FAllBossIcons final
{
public:
	TArray<class FName>                           BossIcons;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAllBossIcons) == 0x000008, "Wrong alignment on FAllBossIcons");
static_assert(sizeof(FAllBossIcons) == 0x000010, "Wrong size on FAllBossIcons");
static_assert(offsetof(FAllBossIcons, BossIcons) == 0x000000, "Member 'FAllBossIcons::BossIcons' has a wrong offset!");

// ScriptStruct QRSL.SystemTreasureMapQualityInfo
// 0x0020 (0x0028 - 0x0008)
struct FSystemTreasureMapQualityInfo final : public FTableRowBase
{
public:
	class FName                                   ItemID;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DigSuccessAwardsDropID;                            // 0x0014(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DigFailedAwardsDropID;                             // 0x001C(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DEB[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSystemTreasureMapQualityInfo) == 0x000008, "Wrong alignment on FSystemTreasureMapQualityInfo");
static_assert(sizeof(FSystemTreasureMapQualityInfo) == 0x000028, "Wrong size on FSystemTreasureMapQualityInfo");
static_assert(offsetof(FSystemTreasureMapQualityInfo, ItemID) == 0x000008, "Member 'FSystemTreasureMapQualityInfo::ItemID' has a wrong offset!");
static_assert(offsetof(FSystemTreasureMapQualityInfo, Weight) == 0x000010, "Member 'FSystemTreasureMapQualityInfo::Weight' has a wrong offset!");
static_assert(offsetof(FSystemTreasureMapQualityInfo, DigSuccessAwardsDropID) == 0x000014, "Member 'FSystemTreasureMapQualityInfo::DigSuccessAwardsDropID' has a wrong offset!");
static_assert(offsetof(FSystemTreasureMapQualityInfo, DigFailedAwardsDropID) == 0x00001C, "Member 'FSystemTreasureMapQualityInfo::DigFailedAwardsDropID' has a wrong offset!");

// ScriptStruct QRSL.CacheAttachedParticleSocketInfo
// 0x0010 (0x0010 - 0x0000)
struct FCacheAttachedParticleSocketInfo final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachedParticleTriggerToHideType            ParticleTriggerToHideType;                         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DEC[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SocketCheckRadius;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCacheAttachedParticleSocketInfo) == 0x000004, "Wrong alignment on FCacheAttachedParticleSocketInfo");
static_assert(sizeof(FCacheAttachedParticleSocketInfo) == 0x000010, "Wrong size on FCacheAttachedParticleSocketInfo");
static_assert(offsetof(FCacheAttachedParticleSocketInfo, SocketName) == 0x000000, "Member 'FCacheAttachedParticleSocketInfo::SocketName' has a wrong offset!");
static_assert(offsetof(FCacheAttachedParticleSocketInfo, ParticleTriggerToHideType) == 0x000008, "Member 'FCacheAttachedParticleSocketInfo::ParticleTriggerToHideType' has a wrong offset!");
static_assert(offsetof(FCacheAttachedParticleSocketInfo, SocketCheckRadius) == 0x00000C, "Member 'FCacheAttachedParticleSocketInfo::SocketCheckRadius' has a wrong offset!");

// ScriptStruct QRSL.PlayLevelSequenceInfo
// 0x00B0 (0x00B0 - 0x0000)
struct FPlayLevelSequenceInfo final
{
public:
	class FName                                   LeisureRoomID;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AQRSLDialogueNpcCharacter*              InteractedNPCCharacter;                            // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class AActor*>              InteractedActionCamera;                            // 0x0010(0x0050)(Edit, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TMap<class FName, class AActor*>              SingleActionViewActors;                            // 0x0060(0x0050)(Edit, DisableEditOnTemplate, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayLevelSequenceInfo) == 0x000008, "Wrong alignment on FPlayLevelSequenceInfo");
static_assert(sizeof(FPlayLevelSequenceInfo) == 0x0000B0, "Wrong size on FPlayLevelSequenceInfo");
static_assert(offsetof(FPlayLevelSequenceInfo, LeisureRoomID) == 0x000000, "Member 'FPlayLevelSequenceInfo::LeisureRoomID' has a wrong offset!");
static_assert(offsetof(FPlayLevelSequenceInfo, InteractedNPCCharacter) == 0x000008, "Member 'FPlayLevelSequenceInfo::InteractedNPCCharacter' has a wrong offset!");
static_assert(offsetof(FPlayLevelSequenceInfo, InteractedActionCamera) == 0x000010, "Member 'FPlayLevelSequenceInfo::InteractedActionCamera' has a wrong offset!");
static_assert(offsetof(FPlayLevelSequenceInfo, SingleActionViewActors) == 0x000060, "Member 'FPlayLevelSequenceInfo::SingleActionViewActors' has a wrong offset!");

// ScriptStruct QRSL.LuckTarrowUltimateBossWeight
// 0x0008 (0x0008 - 0x0000)
struct FLuckTarrowUltimateBossWeight final
{
public:
	bool                                          IsUltimateBoss;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DED[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Weight;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLuckTarrowUltimateBossWeight) == 0x000004, "Wrong alignment on FLuckTarrowUltimateBossWeight");
static_assert(sizeof(FLuckTarrowUltimateBossWeight) == 0x000008, "Wrong size on FLuckTarrowUltimateBossWeight");
static_assert(offsetof(FLuckTarrowUltimateBossWeight, IsUltimateBoss) == 0x000000, "Member 'FLuckTarrowUltimateBossWeight::IsUltimateBoss' has a wrong offset!");
static_assert(offsetof(FLuckTarrowUltimateBossWeight, Weight) == 0x000004, "Member 'FLuckTarrowUltimateBossWeight::Weight' has a wrong offset!");

// ScriptStruct QRSL.LuckTarrowPlayerInfo
// 0x0098 (0x0098 - 0x0000)
struct FLuckTarrowPlayerInfo final
{
public:
	int64                                         PlayerID;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AvatarID;                                          // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAvailableReward;                                  // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DEE[0x13];                                    // 0x0015(0x0013)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RewardsIDTay;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bFirstReward;                                      // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DEF[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SelectedBuffItemId;                                // 0x003C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReady;                                          // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DF0[0x53];                                    // 0x0045(0x0053)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLuckTarrowPlayerInfo) == 0x000008, "Wrong alignment on FLuckTarrowPlayerInfo");
static_assert(sizeof(FLuckTarrowPlayerInfo) == 0x000098, "Wrong size on FLuckTarrowPlayerInfo");
static_assert(offsetof(FLuckTarrowPlayerInfo, PlayerID) == 0x000000, "Member 'FLuckTarrowPlayerInfo::PlayerID' has a wrong offset!");
static_assert(offsetof(FLuckTarrowPlayerInfo, PlayerIndex) == 0x000008, "Member 'FLuckTarrowPlayerInfo::PlayerIndex' has a wrong offset!");
static_assert(offsetof(FLuckTarrowPlayerInfo, AvatarID) == 0x00000C, "Member 'FLuckTarrowPlayerInfo::AvatarID' has a wrong offset!");
static_assert(offsetof(FLuckTarrowPlayerInfo, bAvailableReward) == 0x000014, "Member 'FLuckTarrowPlayerInfo::bAvailableReward' has a wrong offset!");
static_assert(offsetof(FLuckTarrowPlayerInfo, RewardsIDTay) == 0x000028, "Member 'FLuckTarrowPlayerInfo::RewardsIDTay' has a wrong offset!");
static_assert(offsetof(FLuckTarrowPlayerInfo, bFirstReward) == 0x000038, "Member 'FLuckTarrowPlayerInfo::bFirstReward' has a wrong offset!");
static_assert(offsetof(FLuckTarrowPlayerInfo, SelectedBuffItemId) == 0x00003C, "Member 'FLuckTarrowPlayerInfo::SelectedBuffItemId' has a wrong offset!");
static_assert(offsetof(FLuckTarrowPlayerInfo, bIsReady) == 0x000044, "Member 'FLuckTarrowPlayerInfo::bIsReady' has a wrong offset!");

// ScriptStruct QRSL.ActivityRecoverConfig
// 0x0020 (0x0020 - 0x0000)
struct FActivityRecoverConfig final
{
public:
	struct FHottaCostItem                         CostItem;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DF1[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAwardInfo>                     AwardArray;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActivityRecoverConfig) == 0x000008, "Wrong alignment on FActivityRecoverConfig");
static_assert(sizeof(FActivityRecoverConfig) == 0x000020, "Wrong size on FActivityRecoverConfig");
static_assert(offsetof(FActivityRecoverConfig, CostItem) == 0x000000, "Member 'FActivityRecoverConfig::CostItem' has a wrong offset!");
static_assert(offsetof(FActivityRecoverConfig, AwardArray) == 0x000010, "Member 'FActivityRecoverConfig::AwardArray' has a wrong offset!");

// ScriptStruct QRSL.LuckTarrowCardPath
// 0x0020 (0x0020 - 0x0000)
struct FLuckTarrowCardPath final
{
public:
	TArray<struct FTransform>                     CardPath;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<float>                                 CardTime;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLuckTarrowCardPath) == 0x000008, "Wrong alignment on FLuckTarrowCardPath");
static_assert(sizeof(FLuckTarrowCardPath) == 0x000020, "Wrong size on FLuckTarrowCardPath");
static_assert(offsetof(FLuckTarrowCardPath, CardPath) == 0x000000, "Member 'FLuckTarrowCardPath::CardPath' has a wrong offset!");
static_assert(offsetof(FLuckTarrowCardPath, CardTime) == 0x000010, "Member 'FLuckTarrowCardPath::CardTime' has a wrong offset!");

// ScriptStruct QRSL.LuckTarrowWheelInfoData
// 0x0068 (0x0070 - 0x0008)
struct FLuckTarrowWheelInfoData final : public FTableRowBase
{
public:
	int32                                         WheelIndex;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HiddenBossMaxNum;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RepatriateMaxNum;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowFalseRepatriate;                              // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DF2[0xB];                                     // 0x0015(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftClassPtr<class UClass>>           BuffTay;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           TATABuffTay;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          LssueIncentives;                                   // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DF3[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DropID;                                            // 0x0044(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActiveMoneyDropID;                                 // 0x004C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DF4[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   WheelName;                                         // 0x0058(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLuckTarrowWheelInfoData) == 0x000008, "Wrong alignment on FLuckTarrowWheelInfoData");
static_assert(sizeof(FLuckTarrowWheelInfoData) == 0x000070, "Wrong size on FLuckTarrowWheelInfoData");
static_assert(offsetof(FLuckTarrowWheelInfoData, WheelIndex) == 0x000008, "Member 'FLuckTarrowWheelInfoData::WheelIndex' has a wrong offset!");
static_assert(offsetof(FLuckTarrowWheelInfoData, HiddenBossMaxNum) == 0x00000C, "Member 'FLuckTarrowWheelInfoData::HiddenBossMaxNum' has a wrong offset!");
static_assert(offsetof(FLuckTarrowWheelInfoData, RepatriateMaxNum) == 0x000010, "Member 'FLuckTarrowWheelInfoData::RepatriateMaxNum' has a wrong offset!");
static_assert(offsetof(FLuckTarrowWheelInfoData, bShowFalseRepatriate) == 0x000014, "Member 'FLuckTarrowWheelInfoData::bShowFalseRepatriate' has a wrong offset!");
static_assert(offsetof(FLuckTarrowWheelInfoData, BuffTay) == 0x000020, "Member 'FLuckTarrowWheelInfoData::BuffTay' has a wrong offset!");
static_assert(offsetof(FLuckTarrowWheelInfoData, TATABuffTay) == 0x000030, "Member 'FLuckTarrowWheelInfoData::TATABuffTay' has a wrong offset!");
static_assert(offsetof(FLuckTarrowWheelInfoData, LssueIncentives) == 0x000040, "Member 'FLuckTarrowWheelInfoData::LssueIncentives' has a wrong offset!");
static_assert(offsetof(FLuckTarrowWheelInfoData, DropID) == 0x000044, "Member 'FLuckTarrowWheelInfoData::DropID' has a wrong offset!");
static_assert(offsetof(FLuckTarrowWheelInfoData, ActiveMoneyDropID) == 0x00004C, "Member 'FLuckTarrowWheelInfoData::ActiveMoneyDropID' has a wrong offset!");
static_assert(offsetof(FLuckTarrowWheelInfoData, WheelName) == 0x000058, "Member 'FLuckTarrowWheelInfoData::WheelName' has a wrong offset!");

// ScriptStruct QRSL.LuckTarrowChallengeInfoData
// 0x0150 (0x0150 - 0x0000)
struct FLuckTarrowChallengeInfoData final
{
public:
	ELuckTarrowCommonChallengeType                CommonChallengeType;                               // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DF5[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChallengeTime;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StickItOutTime;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DF6[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        ChestPositionTay;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   CheswtActor;                                       // 0x0020(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ProtectionActor;                                   // 0x0048(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ProtectionActorVector;                             // 0x0070(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   TaTaBuff;                                          // 0x00A0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   TaTaBloodBarBuff;                                  // 0x00C8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TaTaBuffTime;                                      // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DF7[0x4];                                     // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimMontage>            CelebrateAnim;                                     // 0x00F8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            VanishAnim;                                        // 0x0120(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProtectionActorTime;                               // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DF8[0x4];                                     // 0x014C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLuckTarrowChallengeInfoData) == 0x000010, "Wrong alignment on FLuckTarrowChallengeInfoData");
static_assert(sizeof(FLuckTarrowChallengeInfoData) == 0x000150, "Wrong size on FLuckTarrowChallengeInfoData");
static_assert(offsetof(FLuckTarrowChallengeInfoData, CommonChallengeType) == 0x000000, "Member 'FLuckTarrowChallengeInfoData::CommonChallengeType' has a wrong offset!");
static_assert(offsetof(FLuckTarrowChallengeInfoData, ChallengeTime) == 0x000004, "Member 'FLuckTarrowChallengeInfoData::ChallengeTime' has a wrong offset!");
static_assert(offsetof(FLuckTarrowChallengeInfoData, StickItOutTime) == 0x000008, "Member 'FLuckTarrowChallengeInfoData::StickItOutTime' has a wrong offset!");
static_assert(offsetof(FLuckTarrowChallengeInfoData, ChestPositionTay) == 0x000010, "Member 'FLuckTarrowChallengeInfoData::ChestPositionTay' has a wrong offset!");
static_assert(offsetof(FLuckTarrowChallengeInfoData, CheswtActor) == 0x000020, "Member 'FLuckTarrowChallengeInfoData::CheswtActor' has a wrong offset!");
static_assert(offsetof(FLuckTarrowChallengeInfoData, ProtectionActor) == 0x000048, "Member 'FLuckTarrowChallengeInfoData::ProtectionActor' has a wrong offset!");
static_assert(offsetof(FLuckTarrowChallengeInfoData, ProtectionActorVector) == 0x000070, "Member 'FLuckTarrowChallengeInfoData::ProtectionActorVector' has a wrong offset!");
static_assert(offsetof(FLuckTarrowChallengeInfoData, TaTaBuff) == 0x0000A0, "Member 'FLuckTarrowChallengeInfoData::TaTaBuff' has a wrong offset!");
static_assert(offsetof(FLuckTarrowChallengeInfoData, TaTaBloodBarBuff) == 0x0000C8, "Member 'FLuckTarrowChallengeInfoData::TaTaBloodBarBuff' has a wrong offset!");
static_assert(offsetof(FLuckTarrowChallengeInfoData, TaTaBuffTime) == 0x0000F0, "Member 'FLuckTarrowChallengeInfoData::TaTaBuffTime' has a wrong offset!");
static_assert(offsetof(FLuckTarrowChallengeInfoData, CelebrateAnim) == 0x0000F8, "Member 'FLuckTarrowChallengeInfoData::CelebrateAnim' has a wrong offset!");
static_assert(offsetof(FLuckTarrowChallengeInfoData, VanishAnim) == 0x000120, "Member 'FLuckTarrowChallengeInfoData::VanishAnim' has a wrong offset!");
static_assert(offsetof(FLuckTarrowChallengeInfoData, ProtectionActorTime) == 0x000148, "Member 'FLuckTarrowChallengeInfoData::ProtectionActorTime' has a wrong offset!");

// ScriptStruct QRSL.LuckTarrowCardInfoData
// 0x0108 (0x0110 - 0x0008)
struct FLuckTarrowCardInfoData final : public FTableRowBase
{
public:
	int32                                         CardIndex;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DF9[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CardName;                                          // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   CustomsClearanceCondition;                         // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   LevelPeculiarity;                                  // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       bgimage;                                           // 0x0058(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   TArrowActor;                                       // 0x0080(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   CardDescription;                                   // 0x00A8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	ELuckTarrowCardType                           CardType;                                          // 0x00C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DFA[0x7];                                     // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLuckTarrowChallengeInfoData>   ChallengeInfoDataTay;                              // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DFB[0x8];                                     // 0x00D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         TagTay;                                            // 0x00E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         BossBuffExtractionQuantity;                        // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerBuffExtractionQuantity;                      // 0x00F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WheelIndex;                                        // 0x00FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DropID;                                            // 0x0100(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActiveMoneyDropID;                                 // 0x0108(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLuckTarrowCardInfoData) == 0x000008, "Wrong alignment on FLuckTarrowCardInfoData");
static_assert(sizeof(FLuckTarrowCardInfoData) == 0x000110, "Wrong size on FLuckTarrowCardInfoData");
static_assert(offsetof(FLuckTarrowCardInfoData, CardIndex) == 0x000008, "Member 'FLuckTarrowCardInfoData::CardIndex' has a wrong offset!");
static_assert(offsetof(FLuckTarrowCardInfoData, CardName) == 0x000010, "Member 'FLuckTarrowCardInfoData::CardName' has a wrong offset!");
static_assert(offsetof(FLuckTarrowCardInfoData, CustomsClearanceCondition) == 0x000028, "Member 'FLuckTarrowCardInfoData::CustomsClearanceCondition' has a wrong offset!");
static_assert(offsetof(FLuckTarrowCardInfoData, LevelPeculiarity) == 0x000040, "Member 'FLuckTarrowCardInfoData::LevelPeculiarity' has a wrong offset!");
static_assert(offsetof(FLuckTarrowCardInfoData, bgimage) == 0x000058, "Member 'FLuckTarrowCardInfoData::bgimage' has a wrong offset!");
static_assert(offsetof(FLuckTarrowCardInfoData, TArrowActor) == 0x000080, "Member 'FLuckTarrowCardInfoData::TArrowActor' has a wrong offset!");
static_assert(offsetof(FLuckTarrowCardInfoData, CardDescription) == 0x0000A8, "Member 'FLuckTarrowCardInfoData::CardDescription' has a wrong offset!");
static_assert(offsetof(FLuckTarrowCardInfoData, CardType) == 0x0000C0, "Member 'FLuckTarrowCardInfoData::CardType' has a wrong offset!");
static_assert(offsetof(FLuckTarrowCardInfoData, ChallengeInfoDataTay) == 0x0000C8, "Member 'FLuckTarrowCardInfoData::ChallengeInfoDataTay' has a wrong offset!");
static_assert(offsetof(FLuckTarrowCardInfoData, TagTay) == 0x0000E0, "Member 'FLuckTarrowCardInfoData::TagTay' has a wrong offset!");
static_assert(offsetof(FLuckTarrowCardInfoData, BossBuffExtractionQuantity) == 0x0000F0, "Member 'FLuckTarrowCardInfoData::BossBuffExtractionQuantity' has a wrong offset!");
static_assert(offsetof(FLuckTarrowCardInfoData, PlayerBuffExtractionQuantity) == 0x0000F4, "Member 'FLuckTarrowCardInfoData::PlayerBuffExtractionQuantity' has a wrong offset!");
static_assert(offsetof(FLuckTarrowCardInfoData, Weight) == 0x0000F8, "Member 'FLuckTarrowCardInfoData::Weight' has a wrong offset!");
static_assert(offsetof(FLuckTarrowCardInfoData, WheelIndex) == 0x0000FC, "Member 'FLuckTarrowCardInfoData::WheelIndex' has a wrong offset!");
static_assert(offsetof(FLuckTarrowCardInfoData, DropID) == 0x000100, "Member 'FLuckTarrowCardInfoData::DropID' has a wrong offset!");
static_assert(offsetof(FLuckTarrowCardInfoData, ActiveMoneyDropID) == 0x000108, "Member 'FLuckTarrowCardInfoData::ActiveMoneyDropID' has a wrong offset!");

// ScriptStruct QRSL.LuckTarrowGameInfo
// 0x0158 (0x0158 - 0x0000)
struct FLuckTarrowGameInfo final
{
public:
	int32                                         WheelIndex;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELuckTarrowPhaseType                          LuckTarrowPhaseType;                               // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DFC[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLuckTarrowWheelInfoData>       WheelInfoTay;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FLuckTarrowCardInfoData>        CardInfoTay;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FLuckTarrowCardInfoData                EffectiveCard;                                     // 0x0028(0x0110)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           BossBuffNameTay;                                   // 0x0138(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           PlayerBuffNameTay;                                 // 0x0148(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLuckTarrowGameInfo) == 0x000008, "Wrong alignment on FLuckTarrowGameInfo");
static_assert(sizeof(FLuckTarrowGameInfo) == 0x000158, "Wrong size on FLuckTarrowGameInfo");
static_assert(offsetof(FLuckTarrowGameInfo, WheelIndex) == 0x000000, "Member 'FLuckTarrowGameInfo::WheelIndex' has a wrong offset!");
static_assert(offsetof(FLuckTarrowGameInfo, LuckTarrowPhaseType) == 0x000004, "Member 'FLuckTarrowGameInfo::LuckTarrowPhaseType' has a wrong offset!");
static_assert(offsetof(FLuckTarrowGameInfo, WheelInfoTay) == 0x000008, "Member 'FLuckTarrowGameInfo::WheelInfoTay' has a wrong offset!");
static_assert(offsetof(FLuckTarrowGameInfo, CardInfoTay) == 0x000018, "Member 'FLuckTarrowGameInfo::CardInfoTay' has a wrong offset!");
static_assert(offsetof(FLuckTarrowGameInfo, EffectiveCard) == 0x000028, "Member 'FLuckTarrowGameInfo::EffectiveCard' has a wrong offset!");
static_assert(offsetof(FLuckTarrowGameInfo, BossBuffNameTay) == 0x000138, "Member 'FLuckTarrowGameInfo::BossBuffNameTay' has a wrong offset!");
static_assert(offsetof(FLuckTarrowGameInfo, PlayerBuffNameTay) == 0x000148, "Member 'FLuckTarrowGameInfo::PlayerBuffNameTay' has a wrong offset!");

// ScriptStruct QRSL.8V8GatherFactor
// 0x000C (0x000C - 0x0000)
struct FEightV8GatherFactor final
{
public:
	float                                         Factor;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinVal;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxVal;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEightV8GatherFactor) == 0x000004, "Wrong alignment on FEightV8GatherFactor");
static_assert(sizeof(FEightV8GatherFactor) == 0x00000C, "Wrong size on FEightV8GatherFactor");
static_assert(offsetof(FEightV8GatherFactor, Factor) == 0x000000, "Member 'FEightV8GatherFactor::Factor' has a wrong offset!");
static_assert(offsetof(FEightV8GatherFactor, MinVal) == 0x000004, "Member 'FEightV8GatherFactor::MinVal' has a wrong offset!");
static_assert(offsetof(FEightV8GatherFactor, MaxVal) == 0x000008, "Member 'FEightV8GatherFactor::MaxVal' has a wrong offset!");

// ScriptStruct QRSL.MountWindVaneSkinPoolConfig
// 0x0010 (0x0018 - 0x0008)
struct FMountWindVaneSkinPoolConfig final : public FTableRowBase
{
public:
	TArray<class FName>                           SkinIdArray;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMountWindVaneSkinPoolConfig) == 0x000008, "Wrong alignment on FMountWindVaneSkinPoolConfig");
static_assert(sizeof(FMountWindVaneSkinPoolConfig) == 0x000018, "Wrong size on FMountWindVaneSkinPoolConfig");
static_assert(offsetof(FMountWindVaneSkinPoolConfig, SkinIdArray) == 0x000008, "Member 'FMountWindVaneSkinPoolConfig::SkinIdArray' has a wrong offset!");

// ScriptStruct QRSL.LuckTarrowTicketsInfo
// 0x0030 (0x0030 - 0x0000)
struct FLuckTarrowTicketsInfo final
{
public:
	class FName                                   TicketID;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   BuffItemName;                                      // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FText>                           TicketBuffDes;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLuckTarrowTicketsInfo) == 0x000008, "Wrong alignment on FLuckTarrowTicketsInfo");
static_assert(sizeof(FLuckTarrowTicketsInfo) == 0x000030, "Wrong size on FLuckTarrowTicketsInfo");
static_assert(offsetof(FLuckTarrowTicketsInfo, TicketID) == 0x000000, "Member 'FLuckTarrowTicketsInfo::TicketID' has a wrong offset!");
static_assert(offsetof(FLuckTarrowTicketsInfo, BuffItemName) == 0x000008, "Member 'FLuckTarrowTicketsInfo::BuffItemName' has a wrong offset!");
static_assert(offsetof(FLuckTarrowTicketsInfo, TicketBuffDes) == 0x000020, "Member 'FLuckTarrowTicketsInfo::TicketBuffDes' has a wrong offset!");

// ScriptStruct QRSL.LuckTarrowBuffInfo
// 0x0080 (0x0080 - 0x0000)
struct FLuckTarrowBuffInfo final
{
public:
	int32                                         BuffNum;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BuffName;                                          // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DFD[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   BuffClass;                                         // 0x0010(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              BuffImage;                                         // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   BuffDesc;                                          // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bIsPlayerBuff;                                     // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsWeightBuff;                                     // 0x0079(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DFE[0x2];                                     // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BuffExtraWeight;                                   // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLuckTarrowBuffInfo) == 0x000008, "Wrong alignment on FLuckTarrowBuffInfo");
static_assert(sizeof(FLuckTarrowBuffInfo) == 0x000080, "Wrong size on FLuckTarrowBuffInfo");
static_assert(offsetof(FLuckTarrowBuffInfo, BuffNum) == 0x000000, "Member 'FLuckTarrowBuffInfo::BuffNum' has a wrong offset!");
static_assert(offsetof(FLuckTarrowBuffInfo, BuffName) == 0x000004, "Member 'FLuckTarrowBuffInfo::BuffName' has a wrong offset!");
static_assert(offsetof(FLuckTarrowBuffInfo, BuffClass) == 0x000010, "Member 'FLuckTarrowBuffInfo::BuffClass' has a wrong offset!");
static_assert(offsetof(FLuckTarrowBuffInfo, BuffImage) == 0x000038, "Member 'FLuckTarrowBuffInfo::BuffImage' has a wrong offset!");
static_assert(offsetof(FLuckTarrowBuffInfo, BuffDesc) == 0x000060, "Member 'FLuckTarrowBuffInfo::BuffDesc' has a wrong offset!");
static_assert(offsetof(FLuckTarrowBuffInfo, bIsPlayerBuff) == 0x000078, "Member 'FLuckTarrowBuffInfo::bIsPlayerBuff' has a wrong offset!");
static_assert(offsetof(FLuckTarrowBuffInfo, bIsWeightBuff) == 0x000079, "Member 'FLuckTarrowBuffInfo::bIsWeightBuff' has a wrong offset!");
static_assert(offsetof(FLuckTarrowBuffInfo, BuffExtraWeight) == 0x00007C, "Member 'FLuckTarrowBuffInfo::BuffExtraWeight' has a wrong offset!");

// ScriptStruct QRSL.LuckTarrowBuffItemInfoData
// 0x0050 (0x0058 - 0x0008)
struct FLuckTarrowBuffItemInfoData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture2D>              BuffItemImage;                                     // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   BuffItemName;                                      // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FLuckTarrowBuffInfo>            BuffUIInfoTay;                                     // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLuckTarrowBuffItemInfoData) == 0x000008, "Wrong alignment on FLuckTarrowBuffItemInfoData");
static_assert(sizeof(FLuckTarrowBuffItemInfoData) == 0x000058, "Wrong size on FLuckTarrowBuffItemInfoData");
static_assert(offsetof(FLuckTarrowBuffItemInfoData, BuffItemImage) == 0x000008, "Member 'FLuckTarrowBuffItemInfoData::BuffItemImage' has a wrong offset!");
static_assert(offsetof(FLuckTarrowBuffItemInfoData, BuffItemName) == 0x000030, "Member 'FLuckTarrowBuffItemInfoData::BuffItemName' has a wrong offset!");
static_assert(offsetof(FLuckTarrowBuffItemInfoData, BuffUIInfoTay) == 0x000048, "Member 'FLuckTarrowBuffItemInfoData::BuffUIInfoTay' has a wrong offset!");

// ScriptStruct QRSL.TeaseReaction
// 0x0018 (0x0018 - 0x0000)
struct FTeaseReaction final
{
public:
	class FName                                   ParentBoneName;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           TeaseAnim;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           LongPressTeaseAnim;                                // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTeaseReaction) == 0x000008, "Wrong alignment on FTeaseReaction");
static_assert(sizeof(FTeaseReaction) == 0x000018, "Wrong size on FTeaseReaction");
static_assert(offsetof(FTeaseReaction, ParentBoneName) == 0x000000, "Member 'FTeaseReaction::ParentBoneName' has a wrong offset!");
static_assert(offsetof(FTeaseReaction, TeaseAnim) == 0x000008, "Member 'FTeaseReaction::TeaseAnim' has a wrong offset!");
static_assert(offsetof(FTeaseReaction, LongPressTeaseAnim) == 0x000010, "Member 'FTeaseReaction::LongPressTeaseAnim' has a wrong offset!");

// ScriptStruct QRSL.DarkAreaLightInfo
// 0x0030 (0x0030 - 0x0000)
struct FDarkAreaLightInfo final
{
public:
	TArray<TSubclassOf<class UGameplayEffect>>    LightGE;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         LightGECd;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightExpend;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightRadius;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightColor;                                        // 0x001C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DFF[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDarkAreaLightInfo) == 0x000008, "Wrong alignment on FDarkAreaLightInfo");
static_assert(sizeof(FDarkAreaLightInfo) == 0x000030, "Wrong size on FDarkAreaLightInfo");
static_assert(offsetof(FDarkAreaLightInfo, LightGE) == 0x000000, "Member 'FDarkAreaLightInfo::LightGE' has a wrong offset!");
static_assert(offsetof(FDarkAreaLightInfo, LightGECd) == 0x000010, "Member 'FDarkAreaLightInfo::LightGECd' has a wrong offset!");
static_assert(offsetof(FDarkAreaLightInfo, LightExpend) == 0x000014, "Member 'FDarkAreaLightInfo::LightExpend' has a wrong offset!");
static_assert(offsetof(FDarkAreaLightInfo, LightRadius) == 0x000018, "Member 'FDarkAreaLightInfo::LightRadius' has a wrong offset!");
static_assert(offsetof(FDarkAreaLightInfo, LightColor) == 0x00001C, "Member 'FDarkAreaLightInfo::LightColor' has a wrong offset!");

// ScriptStruct QRSL.Storyline
// 0x0030 (0x0030 - 0x0000)
struct FStoryline final
{
public:
	class FText                                   RoleName;                                          // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   TextStory;                                         // 0x0018(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoryline) == 0x000008, "Wrong alignment on FStoryline");
static_assert(sizeof(FStoryline) == 0x000030, "Wrong size on FStoryline");
static_assert(offsetof(FStoryline, RoleName) == 0x000000, "Member 'FStoryline::RoleName' has a wrong offset!");
static_assert(offsetof(FStoryline, TextStory) == 0x000018, "Member 'FStoryline::TextStory' has a wrong offset!");

// ScriptStruct QRSL.DialogueCameraSettings
// 0x0010 (0x0180 - 0x0170)
struct FDialogueCameraSettings final : public FCameraSettings
{
public:
	float                                         EveryFrameYaw;                                     // 0x0170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EveryFrameTargetArmLength;                         // 0x0174(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinModifyArnLengthAngle;                           // 0x0178(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeakingTargetScreenBias;                          // 0x017C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogueCameraSettings) == 0x000004, "Wrong alignment on FDialogueCameraSettings");
static_assert(sizeof(FDialogueCameraSettings) == 0x000180, "Wrong size on FDialogueCameraSettings");
static_assert(offsetof(FDialogueCameraSettings, EveryFrameYaw) == 0x000170, "Member 'FDialogueCameraSettings::EveryFrameYaw' has a wrong offset!");
static_assert(offsetof(FDialogueCameraSettings, EveryFrameTargetArmLength) == 0x000174, "Member 'FDialogueCameraSettings::EveryFrameTargetArmLength' has a wrong offset!");
static_assert(offsetof(FDialogueCameraSettings, MinModifyArnLengthAngle) == 0x000178, "Member 'FDialogueCameraSettings::MinModifyArnLengthAngle' has a wrong offset!");
static_assert(offsetof(FDialogueCameraSettings, SpeakingTargetScreenBias) == 0x00017C, "Member 'FDialogueCameraSettings::SpeakingTargetScreenBias' has a wrong offset!");

// ScriptStruct QRSL.MountLevelConfig
// 0x0118 (0x0120 - 0x0008)
struct FMountLevelConfig final : public FTableRowBase
{
public:
	int32                                         RequiredExp;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ModifyId;                                          // 0x000C(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RefreshBigMaintenanceTaskIndex;                    // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      MaintenanceTaskPackMap;                            // 0x0018(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      BigMaintenanceTaskPackMap;                         // 0x0068(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FInt32Range                            MaintenanceTaskCountRange;                         // 0x00B8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt32Range                            BigMaintenanceTaskCountRange;                      // 0x00C8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   CurUnLockDec;                                      // 0x00D8(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   NextUnlockDec;                                     // 0x00F0(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   NextRewardDec;                                     // 0x0108(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMountLevelConfig) == 0x000008, "Wrong alignment on FMountLevelConfig");
static_assert(sizeof(FMountLevelConfig) == 0x000120, "Wrong size on FMountLevelConfig");
static_assert(offsetof(FMountLevelConfig, RequiredExp) == 0x000008, "Member 'FMountLevelConfig::RequiredExp' has a wrong offset!");
static_assert(offsetof(FMountLevelConfig, ModifyId) == 0x00000C, "Member 'FMountLevelConfig::ModifyId' has a wrong offset!");
static_assert(offsetof(FMountLevelConfig, RefreshBigMaintenanceTaskIndex) == 0x000014, "Member 'FMountLevelConfig::RefreshBigMaintenanceTaskIndex' has a wrong offset!");
static_assert(offsetof(FMountLevelConfig, MaintenanceTaskPackMap) == 0x000018, "Member 'FMountLevelConfig::MaintenanceTaskPackMap' has a wrong offset!");
static_assert(offsetof(FMountLevelConfig, BigMaintenanceTaskPackMap) == 0x000068, "Member 'FMountLevelConfig::BigMaintenanceTaskPackMap' has a wrong offset!");
static_assert(offsetof(FMountLevelConfig, MaintenanceTaskCountRange) == 0x0000B8, "Member 'FMountLevelConfig::MaintenanceTaskCountRange' has a wrong offset!");
static_assert(offsetof(FMountLevelConfig, BigMaintenanceTaskCountRange) == 0x0000C8, "Member 'FMountLevelConfig::BigMaintenanceTaskCountRange' has a wrong offset!");
static_assert(offsetof(FMountLevelConfig, CurUnLockDec) == 0x0000D8, "Member 'FMountLevelConfig::CurUnLockDec' has a wrong offset!");
static_assert(offsetof(FMountLevelConfig, NextUnlockDec) == 0x0000F0, "Member 'FMountLevelConfig::NextUnlockDec' has a wrong offset!");
static_assert(offsetof(FMountLevelConfig, NextRewardDec) == 0x000108, "Member 'FMountLevelConfig::NextRewardDec' has a wrong offset!");

// ScriptStruct QRSL.BreakFateCameraSettings
// 0x0024 (0x0194 - 0x0170)
struct FBreakFateCameraSettings final : public FCameraSettings
{
public:
	struct FRotator                               BreakFateInitRotator;                              // 0x0170(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraInterpolationSetting            FightArmLength;                                    // 0x017C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TargetOffsetLength;                                // 0x018C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetOffsetAngle;                                 // 0x0190(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBreakFateCameraSettings) == 0x000004, "Wrong alignment on FBreakFateCameraSettings");
static_assert(sizeof(FBreakFateCameraSettings) == 0x000194, "Wrong size on FBreakFateCameraSettings");
static_assert(offsetof(FBreakFateCameraSettings, BreakFateInitRotator) == 0x000170, "Member 'FBreakFateCameraSettings::BreakFateInitRotator' has a wrong offset!");
static_assert(offsetof(FBreakFateCameraSettings, FightArmLength) == 0x00017C, "Member 'FBreakFateCameraSettings::FightArmLength' has a wrong offset!");
static_assert(offsetof(FBreakFateCameraSettings, TargetOffsetLength) == 0x00018C, "Member 'FBreakFateCameraSettings::TargetOffsetLength' has a wrong offset!");
static_assert(offsetof(FBreakFateCameraSettings, TargetOffsetAngle) == 0x000190, "Member 'FBreakFateCameraSettings::TargetOffsetAngle' has a wrong offset!");

// ScriptStruct QRSL.FollowPlayerCameraSettings
// 0x0000 (0x0170 - 0x0170)
struct FFollowPlayerCameraSettings final : public FCameraSettings
{
};
static_assert(alignof(FFollowPlayerCameraSettings) == 0x000004, "Wrong alignment on FFollowPlayerCameraSettings");
static_assert(sizeof(FFollowPlayerCameraSettings) == 0x000170, "Wrong size on FFollowPlayerCameraSettings");

// ScriptStruct QRSL.MountDisplaySlotUnlockConfig
// 0x0008 (0x0010 - 0x0008)
struct FMountDisplaySlotUnlockConfig final : public FTableRowBase
{
public:
	int32                                         RequiredTotalLevel;                                // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnlockSlotCount;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMountDisplaySlotUnlockConfig) == 0x000008, "Wrong alignment on FMountDisplaySlotUnlockConfig");
static_assert(sizeof(FMountDisplaySlotUnlockConfig) == 0x000010, "Wrong size on FMountDisplaySlotUnlockConfig");
static_assert(offsetof(FMountDisplaySlotUnlockConfig, RequiredTotalLevel) == 0x000008, "Member 'FMountDisplaySlotUnlockConfig::RequiredTotalLevel' has a wrong offset!");
static_assert(offsetof(FMountDisplaySlotUnlockConfig, UnlockSlotCount) == 0x00000C, "Member 'FMountDisplaySlotUnlockConfig::UnlockSlotCount' has a wrong offset!");

// ScriptStruct QRSL.LockNpcCameraSettings
// 0x0004 (0x0174 - 0x0170)
struct FLockNpcCameraSettings final : public FCameraSettings
{
public:
	float                                         ReturnPitchSpeed;                                  // 0x0170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLockNpcCameraSettings) == 0x000004, "Wrong alignment on FLockNpcCameraSettings");
static_assert(sizeof(FLockNpcCameraSettings) == 0x000174, "Wrong size on FLockNpcCameraSettings");
static_assert(offsetof(FLockNpcCameraSettings, ReturnPitchSpeed) == 0x000170, "Member 'FLockNpcCameraSettings::ReturnPitchSpeed' has a wrong offset!");

// ScriptStruct QRSL.ServerStateInfo
// 0x0010 (0x0010 - 0x0000)
struct FServerStateInfo final
{
public:
	float                                         ServerPlayerPercent;                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E00[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ServerStateTexture;                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerStateInfo) == 0x000008, "Wrong alignment on FServerStateInfo");
static_assert(sizeof(FServerStateInfo) == 0x000010, "Wrong size on FServerStateInfo");
static_assert(offsetof(FServerStateInfo, ServerPlayerPercent) == 0x000000, "Member 'FServerStateInfo::ServerPlayerPercent' has a wrong offset!");
static_assert(offsetof(FServerStateInfo, ServerStateTexture) == 0x000008, "Member 'FServerStateInfo::ServerStateTexture' has a wrong offset!");

// ScriptStruct QRSL.BossCameraSettings
// 0x0004 (0x0174 - 0x0170)
struct FBossCameraSettings final : public FCameraSettings
{
public:
	float                                         AdjustYawMaxDistance;                              // 0x0170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBossCameraSettings) == 0x000004, "Wrong alignment on FBossCameraSettings");
static_assert(sizeof(FBossCameraSettings) == 0x000174, "Wrong size on FBossCameraSettings");
static_assert(offsetof(FBossCameraSettings, AdjustYawMaxDistance) == 0x000170, "Member 'FBossCameraSettings::AdjustYawMaxDistance' has a wrong offset!");

// ScriptStruct QRSL.FightCameraSettings
// 0x00D8 (0x0248 - 0x0170)
struct FFightCameraSettings final : public FCameraSettings
{
public:
	float                                         UnderWaterTargetArmLength;                         // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FightingBadAmendTargetDistance;                    // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CheckDistanceByTargetNum;                          // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CheckDistanceRadius;                               // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CheckTargetNum;                                    // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FightingBadDistance;                               // 0x0184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FightingBadYawDiff;                                // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FightingAbilityYaw;                                // 0x018C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FightingBadPitchMin;                               // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FightingBadPitchMax;                               // 0x0194(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FightingAbilityPitch;                              // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwimmingFightingBadPitchMin;                       // 0x019C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwimmingFightingBadPitchMax;                       // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwimmingFightingAbilityPitch;                      // 0x01A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FightingGiantRange;                                // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FightingGiantHeight;                               // 0x01AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FightingGiantMaxHeightDiff;                        // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FightingGiantHeightRate;                           // 0x01B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FightingGiantMaxDistance;                          // 0x01B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BiasPercent;                                       // 0x01BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetToEdgeYawBias;                               // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetToUpEdgePitchBias;                           // 0x01C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetToDownEdgePitchBias;                         // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerControlInterveneTime;                        // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetMaxDistanceYawSpeed;                         // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PT2CamMaxYawDiff;                                  // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxOffsetZ;                                        // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAddArmLength;                                   // 0x01DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrameRelativeZ;                                    // 0x01E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetSpeed;                                       // 0x01E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrameArmLen;                                       // 0x01E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArmLenSpeed;                                       // 0x01EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustIgnoreBias;                                  // 0x01F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtraYawRadius;                                    // 0x01F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TestLastDistance;                                  // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseFirstProgramme;                                 // 0x01FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E01[0x3];                                     // 0x01FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FirstBeginSpeed;                                   // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FirstEndSpeed;                                     // 0x0204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FirstTransitionTime;                               // 0x0208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSecondProgramme;                                // 0x020C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E02[0x3];                                     // 0x020D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SecondBeginSpeed;                                  // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondEndSpeed;                                    // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondTransitionTime;                              // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseThirdProgramme;                                 // 0x021C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E03[0x3];                                     // 0x021D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThirdSpeed;                                        // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TestModifyYawSpeedMinDistance;                     // 0x0224(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TestMaxYawSpeed;                                   // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TestNeedModifyMaxYaw;                              // 0x022C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TestMinYawSpeed;                                   // 0x0230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TestNeedModifyMinYaw;                              // 0x0234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TestEveryRadisuReduceSpeed;                        // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ALineTolerate;                                     // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ALineChangeYaw;                                    // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraCollisionChangeYaw;                          // 0x0244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFightCameraSettings) == 0x000004, "Wrong alignment on FFightCameraSettings");
static_assert(sizeof(FFightCameraSettings) == 0x000248, "Wrong size on FFightCameraSettings");
static_assert(offsetof(FFightCameraSettings, UnderWaterTargetArmLength) == 0x000170, "Member 'FFightCameraSettings::UnderWaterTargetArmLength' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, FightingBadAmendTargetDistance) == 0x000174, "Member 'FFightCameraSettings::FightingBadAmendTargetDistance' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, CheckDistanceByTargetNum) == 0x000178, "Member 'FFightCameraSettings::CheckDistanceByTargetNum' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, CheckDistanceRadius) == 0x00017C, "Member 'FFightCameraSettings::CheckDistanceRadius' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, CheckTargetNum) == 0x000180, "Member 'FFightCameraSettings::CheckTargetNum' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, FightingBadDistance) == 0x000184, "Member 'FFightCameraSettings::FightingBadDistance' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, FightingBadYawDiff) == 0x000188, "Member 'FFightCameraSettings::FightingBadYawDiff' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, FightingAbilityYaw) == 0x00018C, "Member 'FFightCameraSettings::FightingAbilityYaw' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, FightingBadPitchMin) == 0x000190, "Member 'FFightCameraSettings::FightingBadPitchMin' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, FightingBadPitchMax) == 0x000194, "Member 'FFightCameraSettings::FightingBadPitchMax' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, FightingAbilityPitch) == 0x000198, "Member 'FFightCameraSettings::FightingAbilityPitch' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, SwimmingFightingBadPitchMin) == 0x00019C, "Member 'FFightCameraSettings::SwimmingFightingBadPitchMin' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, SwimmingFightingBadPitchMax) == 0x0001A0, "Member 'FFightCameraSettings::SwimmingFightingBadPitchMax' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, SwimmingFightingAbilityPitch) == 0x0001A4, "Member 'FFightCameraSettings::SwimmingFightingAbilityPitch' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, FightingGiantRange) == 0x0001A8, "Member 'FFightCameraSettings::FightingGiantRange' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, FightingGiantHeight) == 0x0001AC, "Member 'FFightCameraSettings::FightingGiantHeight' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, FightingGiantMaxHeightDiff) == 0x0001B0, "Member 'FFightCameraSettings::FightingGiantMaxHeightDiff' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, FightingGiantHeightRate) == 0x0001B4, "Member 'FFightCameraSettings::FightingGiantHeightRate' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, FightingGiantMaxDistance) == 0x0001B8, "Member 'FFightCameraSettings::FightingGiantMaxDistance' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, BiasPercent) == 0x0001BC, "Member 'FFightCameraSettings::BiasPercent' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, TargetToEdgeYawBias) == 0x0001C0, "Member 'FFightCameraSettings::TargetToEdgeYawBias' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, TargetToUpEdgePitchBias) == 0x0001C4, "Member 'FFightCameraSettings::TargetToUpEdgePitchBias' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, TargetToDownEdgePitchBias) == 0x0001C8, "Member 'FFightCameraSettings::TargetToDownEdgePitchBias' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, PlayerControlInterveneTime) == 0x0001CC, "Member 'FFightCameraSettings::PlayerControlInterveneTime' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, TargetMaxDistanceYawSpeed) == 0x0001D0, "Member 'FFightCameraSettings::TargetMaxDistanceYawSpeed' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, PT2CamMaxYawDiff) == 0x0001D4, "Member 'FFightCameraSettings::PT2CamMaxYawDiff' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, MaxOffsetZ) == 0x0001D8, "Member 'FFightCameraSettings::MaxOffsetZ' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, MaxAddArmLength) == 0x0001DC, "Member 'FFightCameraSettings::MaxAddArmLength' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, FrameRelativeZ) == 0x0001E0, "Member 'FFightCameraSettings::FrameRelativeZ' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, OffsetSpeed) == 0x0001E4, "Member 'FFightCameraSettings::OffsetSpeed' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, FrameArmLen) == 0x0001E8, "Member 'FFightCameraSettings::FrameArmLen' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, ArmLenSpeed) == 0x0001EC, "Member 'FFightCameraSettings::ArmLenSpeed' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, AdjustIgnoreBias) == 0x0001F0, "Member 'FFightCameraSettings::AdjustIgnoreBias' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, ExtraYawRadius) == 0x0001F4, "Member 'FFightCameraSettings::ExtraYawRadius' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, TestLastDistance) == 0x0001F8, "Member 'FFightCameraSettings::TestLastDistance' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, UseFirstProgramme) == 0x0001FC, "Member 'FFightCameraSettings::UseFirstProgramme' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, FirstBeginSpeed) == 0x000200, "Member 'FFightCameraSettings::FirstBeginSpeed' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, FirstEndSpeed) == 0x000204, "Member 'FFightCameraSettings::FirstEndSpeed' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, FirstTransitionTime) == 0x000208, "Member 'FFightCameraSettings::FirstTransitionTime' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, UseSecondProgramme) == 0x00020C, "Member 'FFightCameraSettings::UseSecondProgramme' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, SecondBeginSpeed) == 0x000210, "Member 'FFightCameraSettings::SecondBeginSpeed' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, SecondEndSpeed) == 0x000214, "Member 'FFightCameraSettings::SecondEndSpeed' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, SecondTransitionTime) == 0x000218, "Member 'FFightCameraSettings::SecondTransitionTime' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, UseThirdProgramme) == 0x00021C, "Member 'FFightCameraSettings::UseThirdProgramme' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, ThirdSpeed) == 0x000220, "Member 'FFightCameraSettings::ThirdSpeed' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, TestModifyYawSpeedMinDistance) == 0x000224, "Member 'FFightCameraSettings::TestModifyYawSpeedMinDistance' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, TestMaxYawSpeed) == 0x000228, "Member 'FFightCameraSettings::TestMaxYawSpeed' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, TestNeedModifyMaxYaw) == 0x00022C, "Member 'FFightCameraSettings::TestNeedModifyMaxYaw' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, TestMinYawSpeed) == 0x000230, "Member 'FFightCameraSettings::TestMinYawSpeed' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, TestNeedModifyMinYaw) == 0x000234, "Member 'FFightCameraSettings::TestNeedModifyMinYaw' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, TestEveryRadisuReduceSpeed) == 0x000238, "Member 'FFightCameraSettings::TestEveryRadisuReduceSpeed' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, ALineTolerate) == 0x00023C, "Member 'FFightCameraSettings::ALineTolerate' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, ALineChangeYaw) == 0x000240, "Member 'FFightCameraSettings::ALineChangeYaw' has a wrong offset!");
static_assert(offsetof(FFightCameraSettings, CameraCollisionChangeYaw) == 0x000244, "Member 'FFightCameraSettings::CameraCollisionChangeYaw' has a wrong offset!");

// ScriptStruct QRSL.ClimbCameraSettings
// 0x0030 (0x01A0 - 0x0170)
struct FClimbCameraSettings final : public FCameraSettings
{
public:
	struct FCameraInterpolationSetting            ClimbInitYawAngle;                                 // 0x0170(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraInterpolationSetting            ClimbInitPitchAngle;                               // 0x0180(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraInterpolationSetting            ClimbCompletedPitchAngle;                          // 0x0190(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClimbCameraSettings) == 0x000004, "Wrong alignment on FClimbCameraSettings");
static_assert(sizeof(FClimbCameraSettings) == 0x0001A0, "Wrong size on FClimbCameraSettings");
static_assert(offsetof(FClimbCameraSettings, ClimbInitYawAngle) == 0x000170, "Member 'FClimbCameraSettings::ClimbInitYawAngle' has a wrong offset!");
static_assert(offsetof(FClimbCameraSettings, ClimbInitPitchAngle) == 0x000180, "Member 'FClimbCameraSettings::ClimbInitPitchAngle' has a wrong offset!");
static_assert(offsetof(FClimbCameraSettings, ClimbCompletedPitchAngle) == 0x000190, "Member 'FClimbCameraSettings::ClimbCompletedPitchAngle' has a wrong offset!");

// ScriptStruct QRSL.WormholePlayerPickBuffPoolData
// 0x003C (0x003C - 0x0000)
struct FWormholePlayerPickBuffPoolData final
{
public:
	class FName                                   BuffID;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenerateAmount;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateInfo                              GenerateBeginTime;                                 // 0x000C(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDateInfo                              GenerateEndTime;                                   // 0x0024(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholePlayerPickBuffPoolData) == 0x000004, "Wrong alignment on FWormholePlayerPickBuffPoolData");
static_assert(sizeof(FWormholePlayerPickBuffPoolData) == 0x00003C, "Wrong size on FWormholePlayerPickBuffPoolData");
static_assert(offsetof(FWormholePlayerPickBuffPoolData, BuffID) == 0x000000, "Member 'FWormholePlayerPickBuffPoolData::BuffID' has a wrong offset!");
static_assert(offsetof(FWormholePlayerPickBuffPoolData, GenerateAmount) == 0x000008, "Member 'FWormholePlayerPickBuffPoolData::GenerateAmount' has a wrong offset!");
static_assert(offsetof(FWormholePlayerPickBuffPoolData, GenerateBeginTime) == 0x00000C, "Member 'FWormholePlayerPickBuffPoolData::GenerateBeginTime' has a wrong offset!");
static_assert(offsetof(FWormholePlayerPickBuffPoolData, GenerateEndTime) == 0x000024, "Member 'FWormholePlayerPickBuffPoolData::GenerateEndTime' has a wrong offset!");

// ScriptStruct QRSL.WormholeSpawnItemData
// 0x0038 (0x0040 - 0x0008)
struct FWormholeSpawnItemData final : public FTableRowBase
{
public:
	int32                                         FallItemDataID;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWormholeFallItemType                         FallItemType;                                      // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E04[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ItemName;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   VisualTemplate;                                    // 0x0018(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholeSpawnItemData) == 0x000008, "Wrong alignment on FWormholeSpawnItemData");
static_assert(sizeof(FWormholeSpawnItemData) == 0x000040, "Wrong size on FWormholeSpawnItemData");
static_assert(offsetof(FWormholeSpawnItemData, FallItemDataID) == 0x000008, "Member 'FWormholeSpawnItemData::FallItemDataID' has a wrong offset!");
static_assert(offsetof(FWormholeSpawnItemData, FallItemType) == 0x00000C, "Member 'FWormholeSpawnItemData::FallItemType' has a wrong offset!");
static_assert(offsetof(FWormholeSpawnItemData, ItemName) == 0x000010, "Member 'FWormholeSpawnItemData::ItemName' has a wrong offset!");
static_assert(offsetof(FWormholeSpawnItemData, VisualTemplate) == 0x000018, "Member 'FWormholeSpawnItemData::VisualTemplate' has a wrong offset!");

// ScriptStruct QRSL.WormholeLayerInfoData
// 0x0090 (0x0098 - 0x0008)
struct FWormholeLayerInfoData final : public FTableRowBase
{
public:
	int32                                         Layer;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E05[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   LayerText;                                         // 0x0010(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         UnlockLevel;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelPoints;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShowDifficulties;                                  // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E06[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              BackImage;                                         // 0x0038(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FWormholePlayerPickBuffPoolData> PlayerPickBuffsPool;                               // 0x0060(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FWormholeMonsterAdditionBuffPoolData> MonsterBuffsPool;                                  // 0x0070(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         RecommendAbiScore;                                 // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E07[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWormholeSpawnItemData>         FallItem;                                          // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholeLayerInfoData) == 0x000008, "Wrong alignment on FWormholeLayerInfoData");
static_assert(sizeof(FWormholeLayerInfoData) == 0x000098, "Wrong size on FWormholeLayerInfoData");
static_assert(offsetof(FWormholeLayerInfoData, Layer) == 0x000008, "Member 'FWormholeLayerInfoData::Layer' has a wrong offset!");
static_assert(offsetof(FWormholeLayerInfoData, LayerText) == 0x000010, "Member 'FWormholeLayerInfoData::LayerText' has a wrong offset!");
static_assert(offsetof(FWormholeLayerInfoData, UnlockLevel) == 0x000028, "Member 'FWormholeLayerInfoData::UnlockLevel' has a wrong offset!");
static_assert(offsetof(FWormholeLayerInfoData, LevelPoints) == 0x00002C, "Member 'FWormholeLayerInfoData::LevelPoints' has a wrong offset!");
static_assert(offsetof(FWormholeLayerInfoData, ShowDifficulties) == 0x000030, "Member 'FWormholeLayerInfoData::ShowDifficulties' has a wrong offset!");
static_assert(offsetof(FWormholeLayerInfoData, BackImage) == 0x000038, "Member 'FWormholeLayerInfoData::BackImage' has a wrong offset!");
static_assert(offsetof(FWormholeLayerInfoData, PlayerPickBuffsPool) == 0x000060, "Member 'FWormholeLayerInfoData::PlayerPickBuffsPool' has a wrong offset!");
static_assert(offsetof(FWormholeLayerInfoData, MonsterBuffsPool) == 0x000070, "Member 'FWormholeLayerInfoData::MonsterBuffsPool' has a wrong offset!");
static_assert(offsetof(FWormholeLayerInfoData, RecommendAbiScore) == 0x000080, "Member 'FWormholeLayerInfoData::RecommendAbiScore' has a wrong offset!");
static_assert(offsetof(FWormholeLayerInfoData, FallItem) == 0x000088, "Member 'FWormholeLayerInfoData::FallItem' has a wrong offset!");

// ScriptStruct QRSL.QRSLPreheatItem
// 0x000C (0x000C - 0x0000)
struct FQRSLPreheatItem final
{
public:
	class FName                                   ItemID;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLPreheatItem) == 0x000004, "Wrong alignment on FQRSLPreheatItem");
static_assert(sizeof(FQRSLPreheatItem) == 0x00000C, "Wrong size on FQRSLPreheatItem");
static_assert(offsetof(FQRSLPreheatItem, ItemID) == 0x000000, "Member 'FQRSLPreheatItem::ItemID' has a wrong offset!");
static_assert(offsetof(FQRSLPreheatItem, Amount) == 0x000008, "Member 'FQRSLPreheatItem::Amount' has a wrong offset!");

// ScriptStruct QRSL.QRSLPreheatDonateConfig
// 0x0068 (0x0070 - 0x0008)
struct FQRSLPreheatDonateConfig final : public FTableRowBase
{
public:
	class FText                                   DonateName;                                        // 0x0008(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconImage;                                         // 0x0020(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FQRSLPreheatItem>               NeedItems;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         DonateScore;                                       // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DropGroupID;                                       // 0x005C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERanklistType                                 RankType;                                          // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E08[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TitleItemID;                                       // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLPreheatDonateConfig) == 0x000008, "Wrong alignment on FQRSLPreheatDonateConfig");
static_assert(sizeof(FQRSLPreheatDonateConfig) == 0x000070, "Wrong size on FQRSLPreheatDonateConfig");
static_assert(offsetof(FQRSLPreheatDonateConfig, DonateName) == 0x000008, "Member 'FQRSLPreheatDonateConfig::DonateName' has a wrong offset!");
static_assert(offsetof(FQRSLPreheatDonateConfig, IconImage) == 0x000020, "Member 'FQRSLPreheatDonateConfig::IconImage' has a wrong offset!");
static_assert(offsetof(FQRSLPreheatDonateConfig, NeedItems) == 0x000048, "Member 'FQRSLPreheatDonateConfig::NeedItems' has a wrong offset!");
static_assert(offsetof(FQRSLPreheatDonateConfig, DonateScore) == 0x000058, "Member 'FQRSLPreheatDonateConfig::DonateScore' has a wrong offset!");
static_assert(offsetof(FQRSLPreheatDonateConfig, DropGroupID) == 0x00005C, "Member 'FQRSLPreheatDonateConfig::DropGroupID' has a wrong offset!");
static_assert(offsetof(FQRSLPreheatDonateConfig, RankType) == 0x000064, "Member 'FQRSLPreheatDonateConfig::RankType' has a wrong offset!");
static_assert(offsetof(FQRSLPreheatDonateConfig, TitleItemID) == 0x000068, "Member 'FQRSLPreheatDonateConfig::TitleItemID' has a wrong offset!");

// ScriptStruct QRSL.ArtifactShowTypeData
// 0x0068 (0x0068 - 0x0000)
struct FArtifactShowTypeData final
{
public:
	class FText                                   ShowText;                                          // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	TSet<EItemRarity>                             ShowRarities;                                      // 0x0018(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArtifactShowTypeData) == 0x000008, "Wrong alignment on FArtifactShowTypeData");
static_assert(sizeof(FArtifactShowTypeData) == 0x000068, "Wrong size on FArtifactShowTypeData");
static_assert(offsetof(FArtifactShowTypeData, ShowText) == 0x000000, "Member 'FArtifactShowTypeData::ShowText' has a wrong offset!");
static_assert(offsetof(FArtifactShowTypeData, ShowRarities) == 0x000018, "Member 'FArtifactShowTypeData::ShowRarities' has a wrong offset!");

// ScriptStruct QRSL.QRSLPreheatTaskConfig
// 0x0088 (0x0090 - 0x0008)
struct FQRSLPreheatTaskConfig final : public FTableRowBase
{
public:
	class FText                                   TaskName;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconImage;                                         // 0x0020(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TaskDesc;                                          // 0x0048(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FQRSLPreheatItem>               NeedItems;                                         // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         TaskScore;                                         // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DropGroupID;                                       // 0x0074(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E09[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PuzzleArray;                                       // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLPreheatTaskConfig) == 0x000008, "Wrong alignment on FQRSLPreheatTaskConfig");
static_assert(sizeof(FQRSLPreheatTaskConfig) == 0x000090, "Wrong size on FQRSLPreheatTaskConfig");
static_assert(offsetof(FQRSLPreheatTaskConfig, TaskName) == 0x000008, "Member 'FQRSLPreheatTaskConfig::TaskName' has a wrong offset!");
static_assert(offsetof(FQRSLPreheatTaskConfig, IconImage) == 0x000020, "Member 'FQRSLPreheatTaskConfig::IconImage' has a wrong offset!");
static_assert(offsetof(FQRSLPreheatTaskConfig, TaskDesc) == 0x000048, "Member 'FQRSLPreheatTaskConfig::TaskDesc' has a wrong offset!");
static_assert(offsetof(FQRSLPreheatTaskConfig, NeedItems) == 0x000060, "Member 'FQRSLPreheatTaskConfig::NeedItems' has a wrong offset!");
static_assert(offsetof(FQRSLPreheatTaskConfig, TaskScore) == 0x000070, "Member 'FQRSLPreheatTaskConfig::TaskScore' has a wrong offset!");
static_assert(offsetof(FQRSLPreheatTaskConfig, DropGroupID) == 0x000074, "Member 'FQRSLPreheatTaskConfig::DropGroupID' has a wrong offset!");
static_assert(offsetof(FQRSLPreheatTaskConfig, PuzzleArray) == 0x000080, "Member 'FQRSLPreheatTaskConfig::PuzzleArray' has a wrong offset!");

// ScriptStruct QRSL.QRSLPuzzleData
// 0x000C (0x000C - 0x0000)
struct FQRSLPuzzleData final
{
public:
	class FName                                   PuzzleID;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLPuzzleData) == 0x000004, "Wrong alignment on FQRSLPuzzleData");
static_assert(sizeof(FQRSLPuzzleData) == 0x00000C, "Wrong size on FQRSLPuzzleData");
static_assert(offsetof(FQRSLPuzzleData, PuzzleID) == 0x000000, "Member 'FQRSLPuzzleData::PuzzleID' has a wrong offset!");
static_assert(offsetof(FQRSLPuzzleData, Index) == 0x000008, "Member 'FQRSLPuzzleData::Index' has a wrong offset!");

// ScriptStruct QRSL.WormholeRuneGradeData
// 0x0018 (0x0020 - 0x0008)
struct FWormholeRuneGradeData final : public FTableRowBase
{
public:
	class FString                                 RuneType;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RuneGrade;                                         // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E0A[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWormholeRuneGradeData) == 0x000008, "Wrong alignment on FWormholeRuneGradeData");
static_assert(sizeof(FWormholeRuneGradeData) == 0x000020, "Wrong size on FWormholeRuneGradeData");
static_assert(offsetof(FWormholeRuneGradeData, RuneType) == 0x000008, "Member 'FWormholeRuneGradeData::RuneType' has a wrong offset!");
static_assert(offsetof(FWormholeRuneGradeData, RuneGrade) == 0x000018, "Member 'FWormholeRuneGradeData::RuneGrade' has a wrong offset!");

// ScriptStruct QRSL.QRSLPreheatDonateScoreAward
// 0x0080 (0x0080 - 0x0000)
struct FQRSLPreheatDonateScoreAward final
{
public:
	int32                                         Score;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E0B[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftClassPtr<class UClass>>           DonateBuff;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<ELevelSceneType>                       SceneTypeArray;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Image;                                             // 0x0028(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   SceneName;                                         // 0x0050(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         LifeTime;                                          // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E0C[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ExtraPrefix;                                       // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLPreheatDonateScoreAward) == 0x000008, "Wrong alignment on FQRSLPreheatDonateScoreAward");
static_assert(sizeof(FQRSLPreheatDonateScoreAward) == 0x000080, "Wrong size on FQRSLPreheatDonateScoreAward");
static_assert(offsetof(FQRSLPreheatDonateScoreAward, Score) == 0x000000, "Member 'FQRSLPreheatDonateScoreAward::Score' has a wrong offset!");
static_assert(offsetof(FQRSLPreheatDonateScoreAward, DonateBuff) == 0x000008, "Member 'FQRSLPreheatDonateScoreAward::DonateBuff' has a wrong offset!");
static_assert(offsetof(FQRSLPreheatDonateScoreAward, SceneTypeArray) == 0x000018, "Member 'FQRSLPreheatDonateScoreAward::SceneTypeArray' has a wrong offset!");
static_assert(offsetof(FQRSLPreheatDonateScoreAward, Image) == 0x000028, "Member 'FQRSLPreheatDonateScoreAward::Image' has a wrong offset!");
static_assert(offsetof(FQRSLPreheatDonateScoreAward, SceneName) == 0x000050, "Member 'FQRSLPreheatDonateScoreAward::SceneName' has a wrong offset!");
static_assert(offsetof(FQRSLPreheatDonateScoreAward, LifeTime) == 0x000068, "Member 'FQRSLPreheatDonateScoreAward::LifeTime' has a wrong offset!");
static_assert(offsetof(FQRSLPreheatDonateScoreAward, ExtraPrefix) == 0x000070, "Member 'FQRSLPreheatDonateScoreAward::ExtraPrefix' has a wrong offset!");

// ScriptStruct QRSL.QuestPOIConfig
// 0x000C (0x000C - 0x0000)
struct FQuestPOIConfig final
{
public:
	EQRSLQuestType                                QuestType;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQRSLQuestStatus                              QuestStatus;                                       // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E0D[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   POIId;                                             // 0x0004(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestPOIConfig) == 0x000004, "Wrong alignment on FQuestPOIConfig");
static_assert(sizeof(FQuestPOIConfig) == 0x00000C, "Wrong size on FQuestPOIConfig");
static_assert(offsetof(FQuestPOIConfig, QuestType) == 0x000000, "Member 'FQuestPOIConfig::QuestType' has a wrong offset!");
static_assert(offsetof(FQuestPOIConfig, QuestStatus) == 0x000001, "Member 'FQuestPOIConfig::QuestStatus' has a wrong offset!");
static_assert(offsetof(FQuestPOIConfig, POIId) == 0x000004, "Member 'FQuestPOIConfig::POIId' has a wrong offset!");

// ScriptStruct QRSL.QuestMarkUV
// 0x0010 (0x0010 - 0x0000)
struct FQuestMarkUV final
{
public:
	int32                                         U;                                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UL;                                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         V;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VL;                                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestMarkUV) == 0x000004, "Wrong alignment on FQuestMarkUV");
static_assert(sizeof(FQuestMarkUV) == 0x000010, "Wrong size on FQuestMarkUV");
static_assert(offsetof(FQuestMarkUV, U) == 0x000000, "Member 'FQuestMarkUV::U' has a wrong offset!");
static_assert(offsetof(FQuestMarkUV, UL) == 0x000004, "Member 'FQuestMarkUV::UL' has a wrong offset!");
static_assert(offsetof(FQuestMarkUV, V) == 0x000008, "Member 'FQuestMarkUV::V' has a wrong offset!");
static_assert(offsetof(FQuestMarkUV, VL) == 0x00000C, "Member 'FQuestMarkUV::VL' has a wrong offset!");

// ScriptStruct QRSL.WormholeMonstersRandomPoolInfo
// 0x000C (0x000C - 0x0000)
struct FWormholeMonstersRandomPoolInfo final
{
public:
	class FName                                   MonsterPoolID;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Probability;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholeMonstersRandomPoolInfo) == 0x000004, "Wrong alignment on FWormholeMonstersRandomPoolInfo");
static_assert(sizeof(FWormholeMonstersRandomPoolInfo) == 0x00000C, "Wrong size on FWormholeMonstersRandomPoolInfo");
static_assert(offsetof(FWormholeMonstersRandomPoolInfo, MonsterPoolID) == 0x000000, "Member 'FWormholeMonstersRandomPoolInfo::MonsterPoolID' has a wrong offset!");
static_assert(offsetof(FWormholeMonstersRandomPoolInfo, Probability) == 0x000008, "Member 'FWormholeMonstersRandomPoolInfo::Probability' has a wrong offset!");

// ScriptStruct QRSL.WormholeMonstersRandomPoolData
// 0x0068 (0x0070 - 0x0008)
struct FWormholeMonstersRandomPoolData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture2D>              MonsterIcon;                                       // 0x0008(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   MonsterName;                                       // 0x0030(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   MonsterDescription;                                // 0x0048(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FWormholeMonstersRandomPoolInfo> Monsters;                                          // 0x0060(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholeMonstersRandomPoolData) == 0x000008, "Wrong alignment on FWormholeMonstersRandomPoolData");
static_assert(sizeof(FWormholeMonstersRandomPoolData) == 0x000070, "Wrong size on FWormholeMonstersRandomPoolData");
static_assert(offsetof(FWormholeMonstersRandomPoolData, MonsterIcon) == 0x000008, "Member 'FWormholeMonstersRandomPoolData::MonsterIcon' has a wrong offset!");
static_assert(offsetof(FWormholeMonstersRandomPoolData, MonsterName) == 0x000030, "Member 'FWormholeMonstersRandomPoolData::MonsterName' has a wrong offset!");
static_assert(offsetof(FWormholeMonstersRandomPoolData, MonsterDescription) == 0x000048, "Member 'FWormholeMonstersRandomPoolData::MonsterDescription' has a wrong offset!");
static_assert(offsetof(FWormholeMonstersRandomPoolData, Monsters) == 0x000060, "Member 'FWormholeMonstersRandomPoolData::Monsters' has a wrong offset!");

// ScriptStruct QRSL.QuireQuickFlashingFruitData
// 0x0048 (0x0050 - 0x0008)
struct FQuireQuickFlashingFruitData final : public FTableRowBase
{
public:
	int32                                         FruitIndex;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuireQuickFlashingFruitType                  FruitType;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E0E[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FruitSpawnTime;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FruitWaitTime;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GrapesPositionNum;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrapesBlowUpTime;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FruitGrapesLocationZ;                              // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E0F[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   FruitActor;                                        // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuireQuickFlashingFruitData) == 0x000008, "Wrong alignment on FQuireQuickFlashingFruitData");
static_assert(sizeof(FQuireQuickFlashingFruitData) == 0x000050, "Wrong size on FQuireQuickFlashingFruitData");
static_assert(offsetof(FQuireQuickFlashingFruitData, FruitIndex) == 0x000008, "Member 'FQuireQuickFlashingFruitData::FruitIndex' has a wrong offset!");
static_assert(offsetof(FQuireQuickFlashingFruitData, FruitType) == 0x00000C, "Member 'FQuireQuickFlashingFruitData::FruitType' has a wrong offset!");
static_assert(offsetof(FQuireQuickFlashingFruitData, FruitSpawnTime) == 0x000010, "Member 'FQuireQuickFlashingFruitData::FruitSpawnTime' has a wrong offset!");
static_assert(offsetof(FQuireQuickFlashingFruitData, FruitWaitTime) == 0x000014, "Member 'FQuireQuickFlashingFruitData::FruitWaitTime' has a wrong offset!");
static_assert(offsetof(FQuireQuickFlashingFruitData, GrapesPositionNum) == 0x000018, "Member 'FQuireQuickFlashingFruitData::GrapesPositionNum' has a wrong offset!");
static_assert(offsetof(FQuireQuickFlashingFruitData, GrapesBlowUpTime) == 0x00001C, "Member 'FQuireQuickFlashingFruitData::GrapesBlowUpTime' has a wrong offset!");
static_assert(offsetof(FQuireQuickFlashingFruitData, FruitGrapesLocationZ) == 0x000020, "Member 'FQuireQuickFlashingFruitData::FruitGrapesLocationZ' has a wrong offset!");
static_assert(offsetof(FQuireQuickFlashingFruitData, FruitActor) == 0x000028, "Member 'FQuireQuickFlashingFruitData::FruitActor' has a wrong offset!");

// ScriptStruct QRSL.CookingIngredientData
// 0x0070 (0x0070 - 0x0000)
struct FCookingIngredientData final
{
public:
	TSet<EIngredientType>                         CookingType;                                       // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           DesignedItemsID;                                   // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bIsCore;                                           // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E10[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinNeedIngredientAmount;                           // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PrefectIngredientAmount;                           // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMysterious;                                     // 0x006C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E11[0x3];                                     // 0x006D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCookingIngredientData) == 0x000008, "Wrong alignment on FCookingIngredientData");
static_assert(sizeof(FCookingIngredientData) == 0x000070, "Wrong size on FCookingIngredientData");
static_assert(offsetof(FCookingIngredientData, CookingType) == 0x000000, "Member 'FCookingIngredientData::CookingType' has a wrong offset!");
static_assert(offsetof(FCookingIngredientData, DesignedItemsID) == 0x000050, "Member 'FCookingIngredientData::DesignedItemsID' has a wrong offset!");
static_assert(offsetof(FCookingIngredientData, bIsCore) == 0x000060, "Member 'FCookingIngredientData::bIsCore' has a wrong offset!");
static_assert(offsetof(FCookingIngredientData, MinNeedIngredientAmount) == 0x000064, "Member 'FCookingIngredientData::MinNeedIngredientAmount' has a wrong offset!");
static_assert(offsetof(FCookingIngredientData, PrefectIngredientAmount) == 0x000068, "Member 'FCookingIngredientData::PrefectIngredientAmount' has a wrong offset!");
static_assert(offsetof(FCookingIngredientData, bIsMysterious) == 0x00006C, "Member 'FCookingIngredientData::bIsMysterious' has a wrong offset!");

// ScriptStruct QRSL.CookingRecipesData
// 0x0060 (0x0068 - 0x0008)
struct FCookingRecipesData final : public FTableRowBase
{
public:
	EKitchenUtensils                              KitchenUtensilType;                                // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERecipeAttrType                               RecipeAttrType;                                    // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E12[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCookingIngredientData>         Ingredients;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   IngredientsText;                                   // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   ShowQuestID;                                       // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ShowQuestObjectID;                                 // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FoodItemID;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FirstCookingAddExp;                                // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedPlayerLevel;                                   // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddToDish;                                        // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERecipeType                                   RecipeType;                                        // 0x0059(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E13[0x2];                                     // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MysteriousRecipeItemID;                            // 0x005C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E14[0x4];                                     // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCookingRecipesData) == 0x000008, "Wrong alignment on FCookingRecipesData");
static_assert(sizeof(FCookingRecipesData) == 0x000068, "Wrong size on FCookingRecipesData");
static_assert(offsetof(FCookingRecipesData, KitchenUtensilType) == 0x000008, "Member 'FCookingRecipesData::KitchenUtensilType' has a wrong offset!");
static_assert(offsetof(FCookingRecipesData, RecipeAttrType) == 0x000009, "Member 'FCookingRecipesData::RecipeAttrType' has a wrong offset!");
static_assert(offsetof(FCookingRecipesData, Ingredients) == 0x000010, "Member 'FCookingRecipesData::Ingredients' has a wrong offset!");
static_assert(offsetof(FCookingRecipesData, IngredientsText) == 0x000020, "Member 'FCookingRecipesData::IngredientsText' has a wrong offset!");
static_assert(offsetof(FCookingRecipesData, ShowQuestID) == 0x000038, "Member 'FCookingRecipesData::ShowQuestID' has a wrong offset!");
static_assert(offsetof(FCookingRecipesData, ShowQuestObjectID) == 0x000040, "Member 'FCookingRecipesData::ShowQuestObjectID' has a wrong offset!");
static_assert(offsetof(FCookingRecipesData, FoodItemID) == 0x000048, "Member 'FCookingRecipesData::FoodItemID' has a wrong offset!");
static_assert(offsetof(FCookingRecipesData, FirstCookingAddExp) == 0x000050, "Member 'FCookingRecipesData::FirstCookingAddExp' has a wrong offset!");
static_assert(offsetof(FCookingRecipesData, NeedPlayerLevel) == 0x000054, "Member 'FCookingRecipesData::NeedPlayerLevel' has a wrong offset!");
static_assert(offsetof(FCookingRecipesData, bAddToDish) == 0x000058, "Member 'FCookingRecipesData::bAddToDish' has a wrong offset!");
static_assert(offsetof(FCookingRecipesData, RecipeType) == 0x000059, "Member 'FCookingRecipesData::RecipeType' has a wrong offset!");
static_assert(offsetof(FCookingRecipesData, MysteriousRecipeItemID) == 0x00005C, "Member 'FCookingRecipesData::MysteriousRecipeItemID' has a wrong offset!");

// ScriptStruct QRSL.QuireQuickFlashingPosition
// 0x0010 (0x0010 - 0x0000)
struct FQuireQuickFlashingPosition final
{
public:
	TArray<struct FVector>                        OrgansVector;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuireQuickFlashingPosition) == 0x000008, "Wrong alignment on FQuireQuickFlashingPosition");
static_assert(sizeof(FQuireQuickFlashingPosition) == 0x000010, "Wrong size on FQuireQuickFlashingPosition");
static_assert(offsetof(FQuireQuickFlashingPosition, OrgansVector) == 0x000000, "Member 'FQuireQuickFlashingPosition::OrgansVector' has a wrong offset!");

// ScriptStruct QRSL.QuireQuickFlashingWheelData
// 0x0088 (0x0090 - 0x0008)
struct FQuireQuickFlashingWheelData final : public FTableRowBase
{
public:
	int32                                         WheelIndex;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OrgansNumber;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OrgansTypeNumber;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WheelMark;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShieldsNum;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E15[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        ProhibitVector;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         LimitingDistance;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E16[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        StandbyVector;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bNeedFruitSole;                                    // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuireQuickFlashingFruitType                  FruitType;                                         // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedAdditionalFruit;                              // 0x004A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuireQuickFlashingFruitType                  AdditionalFruitType;                               // 0x004B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E17[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        AdditionalFruitVector;                             // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         FruitNPCAnimTime;                                  // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedNPCMove;                                      // 0x0064(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E18[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NPCMoveVector;                                     // 0x0068(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OrgansIntervalTime;                                // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FQuireQuickFlashingPosition>    OrgansVectorTay;                                   // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bNeedChangePosition;                               // 0x0088(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E19[0x7];                                     // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuireQuickFlashingWheelData) == 0x000008, "Wrong alignment on FQuireQuickFlashingWheelData");
static_assert(sizeof(FQuireQuickFlashingWheelData) == 0x000090, "Wrong size on FQuireQuickFlashingWheelData");
static_assert(offsetof(FQuireQuickFlashingWheelData, WheelIndex) == 0x000008, "Member 'FQuireQuickFlashingWheelData::WheelIndex' has a wrong offset!");
static_assert(offsetof(FQuireQuickFlashingWheelData, OrgansNumber) == 0x00000C, "Member 'FQuireQuickFlashingWheelData::OrgansNumber' has a wrong offset!");
static_assert(offsetof(FQuireQuickFlashingWheelData, OrgansTypeNumber) == 0x000010, "Member 'FQuireQuickFlashingWheelData::OrgansTypeNumber' has a wrong offset!");
static_assert(offsetof(FQuireQuickFlashingWheelData, WheelMark) == 0x000014, "Member 'FQuireQuickFlashingWheelData::WheelMark' has a wrong offset!");
static_assert(offsetof(FQuireQuickFlashingWheelData, ShieldsNum) == 0x000018, "Member 'FQuireQuickFlashingWheelData::ShieldsNum' has a wrong offset!");
static_assert(offsetof(FQuireQuickFlashingWheelData, ProhibitVector) == 0x000020, "Member 'FQuireQuickFlashingWheelData::ProhibitVector' has a wrong offset!");
static_assert(offsetof(FQuireQuickFlashingWheelData, LimitingDistance) == 0x000030, "Member 'FQuireQuickFlashingWheelData::LimitingDistance' has a wrong offset!");
static_assert(offsetof(FQuireQuickFlashingWheelData, StandbyVector) == 0x000038, "Member 'FQuireQuickFlashingWheelData::StandbyVector' has a wrong offset!");
static_assert(offsetof(FQuireQuickFlashingWheelData, bNeedFruitSole) == 0x000048, "Member 'FQuireQuickFlashingWheelData::bNeedFruitSole' has a wrong offset!");
static_assert(offsetof(FQuireQuickFlashingWheelData, FruitType) == 0x000049, "Member 'FQuireQuickFlashingWheelData::FruitType' has a wrong offset!");
static_assert(offsetof(FQuireQuickFlashingWheelData, bNeedAdditionalFruit) == 0x00004A, "Member 'FQuireQuickFlashingWheelData::bNeedAdditionalFruit' has a wrong offset!");
static_assert(offsetof(FQuireQuickFlashingWheelData, AdditionalFruitType) == 0x00004B, "Member 'FQuireQuickFlashingWheelData::AdditionalFruitType' has a wrong offset!");
static_assert(offsetof(FQuireQuickFlashingWheelData, AdditionalFruitVector) == 0x000050, "Member 'FQuireQuickFlashingWheelData::AdditionalFruitVector' has a wrong offset!");
static_assert(offsetof(FQuireQuickFlashingWheelData, FruitNPCAnimTime) == 0x000060, "Member 'FQuireQuickFlashingWheelData::FruitNPCAnimTime' has a wrong offset!");
static_assert(offsetof(FQuireQuickFlashingWheelData, bNeedNPCMove) == 0x000064, "Member 'FQuireQuickFlashingWheelData::bNeedNPCMove' has a wrong offset!");
static_assert(offsetof(FQuireQuickFlashingWheelData, NPCMoveVector) == 0x000068, "Member 'FQuireQuickFlashingWheelData::NPCMoveVector' has a wrong offset!");
static_assert(offsetof(FQuireQuickFlashingWheelData, OrgansIntervalTime) == 0x000074, "Member 'FQuireQuickFlashingWheelData::OrgansIntervalTime' has a wrong offset!");
static_assert(offsetof(FQuireQuickFlashingWheelData, OrgansVectorTay) == 0x000078, "Member 'FQuireQuickFlashingWheelData::OrgansVectorTay' has a wrong offset!");
static_assert(offsetof(FQuireQuickFlashingWheelData, bNeedChangePosition) == 0x000088, "Member 'FQuireQuickFlashingWheelData::bNeedChangePosition' has a wrong offset!");

// ScriptStruct QRSL.QuireQuickFlashingPlayerInfo
// 0x0028 (0x0028 - 0x0000)
struct FQuireQuickFlashingPlayerInfo final
{
public:
	int64                                         PlayerID;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMark;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bObsolete;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1A[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHottaDropItemInfo>             DropItemInfoTay;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bInvincible;                                       // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1B[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuireQuickFlashingPlayerInfo) == 0x000008, "Wrong alignment on FQuireQuickFlashingPlayerInfo");
static_assert(sizeof(FQuireQuickFlashingPlayerInfo) == 0x000028, "Wrong size on FQuireQuickFlashingPlayerInfo");
static_assert(offsetof(FQuireQuickFlashingPlayerInfo, PlayerID) == 0x000000, "Member 'FQuireQuickFlashingPlayerInfo::PlayerID' has a wrong offset!");
static_assert(offsetof(FQuireQuickFlashingPlayerInfo, PlayerMark) == 0x000008, "Member 'FQuireQuickFlashingPlayerInfo::PlayerMark' has a wrong offset!");
static_assert(offsetof(FQuireQuickFlashingPlayerInfo, bObsolete) == 0x00000C, "Member 'FQuireQuickFlashingPlayerInfo::bObsolete' has a wrong offset!");
static_assert(offsetof(FQuireQuickFlashingPlayerInfo, DropItemInfoTay) == 0x000010, "Member 'FQuireQuickFlashingPlayerInfo::DropItemInfoTay' has a wrong offset!");
static_assert(offsetof(FQuireQuickFlashingPlayerInfo, bInvincible) == 0x000020, "Member 'FQuireQuickFlashingPlayerInfo::bInvincible' has a wrong offset!");

// ScriptStruct QRSL.ArtifactIllustrationAttribute
// 0x0010 (0x0018 - 0x0008)
struct FArtifactIllustrationAttribute final : public FTableRowBase
{
public:
	int32                                         TotalCardLevel;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributesID;                                      // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1C[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FArtifactIllustrationAttribute) == 0x000008, "Wrong alignment on FArtifactIllustrationAttribute");
static_assert(sizeof(FArtifactIllustrationAttribute) == 0x000018, "Wrong size on FArtifactIllustrationAttribute");
static_assert(offsetof(FArtifactIllustrationAttribute, TotalCardLevel) == 0x000008, "Member 'FArtifactIllustrationAttribute::TotalCardLevel' has a wrong offset!");
static_assert(offsetof(FArtifactIllustrationAttribute, AttributesID) == 0x00000C, "Member 'FArtifactIllustrationAttribute::AttributesID' has a wrong offset!");

// ScriptStruct QRSL.RouteMove
// 0x0018 (0x0018 - 0x0000)
struct FRouteMove final
{
public:
	float                                         MoveTime;                                          // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveToTime;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StayTime;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRouteMove) == 0x000004, "Wrong alignment on FRouteMove");
static_assert(sizeof(FRouteMove) == 0x000018, "Wrong size on FRouteMove");
static_assert(offsetof(FRouteMove, MoveTime) == 0x000000, "Member 'FRouteMove::MoveTime' has a wrong offset!");
static_assert(offsetof(FRouteMove, Location) == 0x000004, "Member 'FRouteMove::Location' has a wrong offset!");
static_assert(offsetof(FRouteMove, MoveToTime) == 0x000010, "Member 'FRouteMove::MoveToTime' has a wrong offset!");
static_assert(offsetof(FRouteMove, StayTime) == 0x000014, "Member 'FRouteMove::StayTime' has a wrong offset!");

// ScriptStruct QRSL.QRSLSculptureInfo
// 0x0110 (0x0118 - 0x0008)
struct FQRSLSculptureInfo final : public FTableRowBase
{
public:
	class FName                                   SculptureID;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   SculptureName;                                     // 0x0010(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bIsDefaultSculpt;                                  // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DefaultGet;                                        // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bDynamic : 1;                                      // 0x002A(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1E1D[0x1];                                     // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SculptScale;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             SculptMesh;                                        // 0x0030(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           SculptureSkeletalMesh;                             // 0x0058(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequenceBase>       SculptureSkeletalMeshIdle;                         // 0x0080(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ScluptIcon;                                        // 0x00A8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ScluptPicture;                                     // 0x00D0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DisplayDropID;                                     // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MailId;                                            // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SculptNeedItem;                                    // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SculptNeedCount;                                   // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DurationTime;                                      // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLSculptureInfo) == 0x000008, "Wrong alignment on FQRSLSculptureInfo");
static_assert(sizeof(FQRSLSculptureInfo) == 0x000118, "Wrong size on FQRSLSculptureInfo");
static_assert(offsetof(FQRSLSculptureInfo, SculptureID) == 0x000008, "Member 'FQRSLSculptureInfo::SculptureID' has a wrong offset!");
static_assert(offsetof(FQRSLSculptureInfo, SculptureName) == 0x000010, "Member 'FQRSLSculptureInfo::SculptureName' has a wrong offset!");
static_assert(offsetof(FQRSLSculptureInfo, bIsDefaultSculpt) == 0x000028, "Member 'FQRSLSculptureInfo::bIsDefaultSculpt' has a wrong offset!");
static_assert(offsetof(FQRSLSculptureInfo, DefaultGet) == 0x000029, "Member 'FQRSLSculptureInfo::DefaultGet' has a wrong offset!");
static_assert(offsetof(FQRSLSculptureInfo, SculptScale) == 0x00002C, "Member 'FQRSLSculptureInfo::SculptScale' has a wrong offset!");
static_assert(offsetof(FQRSLSculptureInfo, SculptMesh) == 0x000030, "Member 'FQRSLSculptureInfo::SculptMesh' has a wrong offset!");
static_assert(offsetof(FQRSLSculptureInfo, SculptureSkeletalMesh) == 0x000058, "Member 'FQRSLSculptureInfo::SculptureSkeletalMesh' has a wrong offset!");
static_assert(offsetof(FQRSLSculptureInfo, SculptureSkeletalMeshIdle) == 0x000080, "Member 'FQRSLSculptureInfo::SculptureSkeletalMeshIdle' has a wrong offset!");
static_assert(offsetof(FQRSLSculptureInfo, ScluptIcon) == 0x0000A8, "Member 'FQRSLSculptureInfo::ScluptIcon' has a wrong offset!");
static_assert(offsetof(FQRSLSculptureInfo, ScluptPicture) == 0x0000D0, "Member 'FQRSLSculptureInfo::ScluptPicture' has a wrong offset!");
static_assert(offsetof(FQRSLSculptureInfo, DisplayDropID) == 0x0000F8, "Member 'FQRSLSculptureInfo::DisplayDropID' has a wrong offset!");
static_assert(offsetof(FQRSLSculptureInfo, MailId) == 0x000100, "Member 'FQRSLSculptureInfo::MailId' has a wrong offset!");
static_assert(offsetof(FQRSLSculptureInfo, SculptNeedItem) == 0x000108, "Member 'FQRSLSculptureInfo::SculptNeedItem' has a wrong offset!");
static_assert(offsetof(FQRSLSculptureInfo, SculptNeedCount) == 0x000110, "Member 'FQRSLSculptureInfo::SculptNeedCount' has a wrong offset!");
static_assert(offsetof(FQRSLSculptureInfo, DurationTime) == 0x000114, "Member 'FQRSLSculptureInfo::DurationTime' has a wrong offset!");

// ScriptStruct QRSL.QRSLSculpInfoRecord
// 0x0018 (0x0018 - 0x0000)
struct FQRSLSculpInfoRecord final
{
public:
	int32                                         SculptId;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SculptModelID;                                     // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1E[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         SculptEndTime;                                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLSculpInfoRecord) == 0x000008, "Wrong alignment on FQRSLSculpInfoRecord");
static_assert(sizeof(FQRSLSculpInfoRecord) == 0x000018, "Wrong size on FQRSLSculpInfoRecord");
static_assert(offsetof(FQRSLSculpInfoRecord, SculptId) == 0x000000, "Member 'FQRSLSculpInfoRecord::SculptId' has a wrong offset!");
static_assert(offsetof(FQRSLSculpInfoRecord, SculptModelID) == 0x000004, "Member 'FQRSLSculpInfoRecord::SculptModelID' has a wrong offset!");
static_assert(offsetof(FQRSLSculpInfoRecord, SculptEndTime) == 0x000010, "Member 'FQRSLSculpInfoRecord::SculptEndTime' has a wrong offset!");

// ScriptStruct QRSL.QuestTriggerSpawnEntry
// 0x0020 (0x0020 - 0x0000)
struct FQuestTriggerSpawnEntry final
{
public:
	class FName                                   QuestID_Spawn;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ObjectiveID_Spawn;                                 // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QuestID_Destroy;                                   // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ObjectiveID_Destroy;                               // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestTriggerSpawnEntry) == 0x000004, "Wrong alignment on FQuestTriggerSpawnEntry");
static_assert(sizeof(FQuestTriggerSpawnEntry) == 0x000020, "Wrong size on FQuestTriggerSpawnEntry");
static_assert(offsetof(FQuestTriggerSpawnEntry, QuestID_Spawn) == 0x000000, "Member 'FQuestTriggerSpawnEntry::QuestID_Spawn' has a wrong offset!");
static_assert(offsetof(FQuestTriggerSpawnEntry, ObjectiveID_Spawn) == 0x000008, "Member 'FQuestTriggerSpawnEntry::ObjectiveID_Spawn' has a wrong offset!");
static_assert(offsetof(FQuestTriggerSpawnEntry, QuestID_Destroy) == 0x000010, "Member 'FQuestTriggerSpawnEntry::QuestID_Destroy' has a wrong offset!");
static_assert(offsetof(FQuestTriggerSpawnEntry, ObjectiveID_Destroy) == 0x000018, "Member 'FQuestTriggerSpawnEntry::ObjectiveID_Destroy' has a wrong offset!");

// ScriptStruct QRSL.AreaGridImgNode
// 0x0050 (0x0050 - 0x0000)
struct FAreaGridImgNode final
{
public:
	TMap<EGuildMazeAreaType, TSoftObjectPtr<class UTexture2D>> AreaImgMap;                                        // 0x0000(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAreaGridImgNode) == 0x000008, "Wrong alignment on FAreaGridImgNode");
static_assert(sizeof(FAreaGridImgNode) == 0x000050, "Wrong size on FAreaGridImgNode");
static_assert(offsetof(FAreaGridImgNode, AreaImgMap) == 0x000000, "Member 'FAreaGridImgNode::AreaImgMap' has a wrong offset!");

// ScriptStruct QRSL.HottaStampImitationData
// 0x0058 (0x0058 - 0x0000)
struct FHottaStampImitationData final
{
public:
	class FName                                   ImitationID;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Painting;                                          // 0x0008(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              GrayPainting;                                      // 0x0030(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHottaStampImitationData) == 0x000008, "Wrong alignment on FHottaStampImitationData");
static_assert(sizeof(FHottaStampImitationData) == 0x000058, "Wrong size on FHottaStampImitationData");
static_assert(offsetof(FHottaStampImitationData, ImitationID) == 0x000000, "Member 'FHottaStampImitationData::ImitationID' has a wrong offset!");
static_assert(offsetof(FHottaStampImitationData, Painting) == 0x000008, "Member 'FHottaStampImitationData::Painting' has a wrong offset!");
static_assert(offsetof(FHottaStampImitationData, GrayPainting) == 0x000030, "Member 'FHottaStampImitationData::GrayPainting' has a wrong offset!");

// ScriptStruct QRSL.WormholeGenerateEdgeData
// 0x0008 (0x0008 - 0x0000)
struct FWormholeGenerateEdgeData final
{
public:
	int32                                         EdgeIndex;                                         // 0x0000(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFixedEdge;                                       // 0x0004(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1F[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWormholeGenerateEdgeData) == 0x000004, "Wrong alignment on FWormholeGenerateEdgeData");
static_assert(sizeof(FWormholeGenerateEdgeData) == 0x000008, "Wrong size on FWormholeGenerateEdgeData");
static_assert(offsetof(FWormholeGenerateEdgeData, EdgeIndex) == 0x000000, "Member 'FWormholeGenerateEdgeData::EdgeIndex' has a wrong offset!");
static_assert(offsetof(FWormholeGenerateEdgeData, IsFixedEdge) == 0x000004, "Member 'FWormholeGenerateEdgeData::IsFixedEdge' has a wrong offset!");

// ScriptStruct QRSL.WormholeLoadData
// 0x0048 (0x0048 - 0x0000)
struct FWormholeLoadData final
{
public:
	int32                                         Index;                                             // 0x0000(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Layer;                                             // 0x0004(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsStartGrid;                                       // 0x0020(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEndGrid;                                         // 0x0021(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E20[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   NeedLoadWormholeMapID;                             // 0x0024(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RotateCount;                                       // 0x002C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFixed;                                           // 0x0030(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E21[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWormholeGenerateEdgeData>      ValidEdges;                                        // 0x0038(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholeLoadData) == 0x000008, "Wrong alignment on FWormholeLoadData");
static_assert(sizeof(FWormholeLoadData) == 0x000048, "Wrong size on FWormholeLoadData");
static_assert(offsetof(FWormholeLoadData, Index) == 0x000000, "Member 'FWormholeLoadData::Index' has a wrong offset!");
static_assert(offsetof(FWormholeLoadData, Layer) == 0x000004, "Member 'FWormholeLoadData::Layer' has a wrong offset!");
static_assert(offsetof(FWormholeLoadData, Location) == 0x000008, "Member 'FWormholeLoadData::Location' has a wrong offset!");
static_assert(offsetof(FWormholeLoadData, Rotation) == 0x000014, "Member 'FWormholeLoadData::Rotation' has a wrong offset!");
static_assert(offsetof(FWormholeLoadData, IsStartGrid) == 0x000020, "Member 'FWormholeLoadData::IsStartGrid' has a wrong offset!");
static_assert(offsetof(FWormholeLoadData, IsEndGrid) == 0x000021, "Member 'FWormholeLoadData::IsEndGrid' has a wrong offset!");
static_assert(offsetof(FWormholeLoadData, NeedLoadWormholeMapID) == 0x000024, "Member 'FWormholeLoadData::NeedLoadWormholeMapID' has a wrong offset!");
static_assert(offsetof(FWormholeLoadData, RotateCount) == 0x00002C, "Member 'FWormholeLoadData::RotateCount' has a wrong offset!");
static_assert(offsetof(FWormholeLoadData, IsFixed) == 0x000030, "Member 'FWormholeLoadData::IsFixed' has a wrong offset!");
static_assert(offsetof(FWormholeLoadData, ValidEdges) == 0x000038, "Member 'FWormholeLoadData::ValidEdges' has a wrong offset!");

// ScriptStruct QRSL.QRSLHackerTerminalMarketConfig
// 0x0068 (0x0070 - 0x0008)
struct FQRSLHackerTerminalMarketConfig : public FTableRowBase
{
public:
	int32                                         Index;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E22[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0010(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0028(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0050(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bIsCanBuy;                                         // 0x0068(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E23[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Price;                                             // 0x006C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLHackerTerminalMarketConfig) == 0x000008, "Wrong alignment on FQRSLHackerTerminalMarketConfig");
static_assert(sizeof(FQRSLHackerTerminalMarketConfig) == 0x000070, "Wrong size on FQRSLHackerTerminalMarketConfig");
static_assert(offsetof(FQRSLHackerTerminalMarketConfig, Index) == 0x000008, "Member 'FQRSLHackerTerminalMarketConfig::Index' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalMarketConfig, Name) == 0x000010, "Member 'FQRSLHackerTerminalMarketConfig::Name' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalMarketConfig, Icon) == 0x000028, "Member 'FQRSLHackerTerminalMarketConfig::Icon' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalMarketConfig, Description) == 0x000050, "Member 'FQRSLHackerTerminalMarketConfig::Description' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalMarketConfig, bIsCanBuy) == 0x000068, "Member 'FQRSLHackerTerminalMarketConfig::bIsCanBuy' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalMarketConfig, Price) == 0x00006C, "Member 'FQRSLHackerTerminalMarketConfig::Price' has a wrong offset!");

// ScriptStruct QRSL.QRSLHackerTerminalStickersConfig
// 0x0028 (0x0098 - 0x0070)
struct FQRSLHackerTerminalStickersConfig final : public FQRSLHackerTerminalMarketConfig
{
public:
	TSoftObjectPtr<class UMaterialInstance>       Material;                                          // 0x0070(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLHackerTerminalStickersConfig) == 0x000008, "Wrong alignment on FQRSLHackerTerminalStickersConfig");
static_assert(sizeof(FQRSLHackerTerminalStickersConfig) == 0x000098, "Wrong size on FQRSLHackerTerminalStickersConfig");
static_assert(offsetof(FQRSLHackerTerminalStickersConfig, Material) == 0x000070, "Member 'FQRSLHackerTerminalStickersConfig::Material' has a wrong offset!");

// ScriptStruct QRSL.QRSLHackerTerminalBodyModelConfig
// 0x0050 (0x00C0 - 0x0070)
struct FQRSLHackerTerminalBodyModelConfig final : public FQRSLHackerTerminalMarketConfig
{
public:
	TSoftObjectPtr<class USkeletalMesh>           SkeletalMesh;                                      // 0x0070(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             StaticMesh;                                        // 0x0098(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLHackerTerminalBodyModelConfig) == 0x000008, "Wrong alignment on FQRSLHackerTerminalBodyModelConfig");
static_assert(sizeof(FQRSLHackerTerminalBodyModelConfig) == 0x0000C0, "Wrong size on FQRSLHackerTerminalBodyModelConfig");
static_assert(offsetof(FQRSLHackerTerminalBodyModelConfig, SkeletalMesh) == 0x000070, "Member 'FQRSLHackerTerminalBodyModelConfig::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalBodyModelConfig, StaticMesh) == 0x000098, "Member 'FQRSLHackerTerminalBodyModelConfig::StaticMesh' has a wrong offset!");

// ScriptStruct QRSL.UIArtifactAdvanceStarsPageInfo
// 0x000C (0x000C - 0x0000)
struct FUIArtifactAdvanceStarsPageInfo final
{
public:
	int32                                         StarsCount;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CircleEffectRotation;                              // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CircleEffectMaxValue;                              // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIArtifactAdvanceStarsPageInfo) == 0x000004, "Wrong alignment on FUIArtifactAdvanceStarsPageInfo");
static_assert(sizeof(FUIArtifactAdvanceStarsPageInfo) == 0x00000C, "Wrong size on FUIArtifactAdvanceStarsPageInfo");
static_assert(offsetof(FUIArtifactAdvanceStarsPageInfo, StarsCount) == 0x000000, "Member 'FUIArtifactAdvanceStarsPageInfo::StarsCount' has a wrong offset!");
static_assert(offsetof(FUIArtifactAdvanceStarsPageInfo, CircleEffectRotation) == 0x000004, "Member 'FUIArtifactAdvanceStarsPageInfo::CircleEffectRotation' has a wrong offset!");
static_assert(offsetof(FUIArtifactAdvanceStarsPageInfo, CircleEffectMaxValue) == 0x000008, "Member 'FUIArtifactAdvanceStarsPageInfo::CircleEffectMaxValue' has a wrong offset!");

// ScriptStruct QRSL.QRSLHackerTerminalThemeConfig
// 0x00F0 (0x0160 - 0x0070)
struct FQRSLHackerTerminalThemeConfig final : public FQRSLHackerTerminalMarketConfig
{
public:
	struct FSlateColor                            TextBlockColor;                                    // 0x0070(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UParticleSystem>         ParticleSystem;                                    // 0x0098(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 MainFormBackgroundObject;                          // 0x00C0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      Image83Material;                                   // 0x00E8(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      MemoryProgressImageMaterial;                       // 0x0110(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      PreviewActorBackgroundMaterial;                    // 0x0138(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLHackerTerminalThemeConfig) == 0x000008, "Wrong alignment on FQRSLHackerTerminalThemeConfig");
static_assert(sizeof(FQRSLHackerTerminalThemeConfig) == 0x000160, "Wrong size on FQRSLHackerTerminalThemeConfig");
static_assert(offsetof(FQRSLHackerTerminalThemeConfig, TextBlockColor) == 0x000070, "Member 'FQRSLHackerTerminalThemeConfig::TextBlockColor' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalThemeConfig, ParticleSystem) == 0x000098, "Member 'FQRSLHackerTerminalThemeConfig::ParticleSystem' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalThemeConfig, MainFormBackgroundObject) == 0x0000C0, "Member 'FQRSLHackerTerminalThemeConfig::MainFormBackgroundObject' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalThemeConfig, Image83Material) == 0x0000E8, "Member 'FQRSLHackerTerminalThemeConfig::Image83Material' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalThemeConfig, MemoryProgressImageMaterial) == 0x000110, "Member 'FQRSLHackerTerminalThemeConfig::MemoryProgressImageMaterial' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalThemeConfig, PreviewActorBackgroundMaterial) == 0x000138, "Member 'FQRSLHackerTerminalThemeConfig::PreviewActorBackgroundMaterial' has a wrong offset!");

// ScriptStruct QRSL.WeaponSlotInfo
// 0x000C (0x000C - 0x0000)
struct FWeaponSlotInfo final
{
public:
	class FName                                   SlotWidgetName;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsMainWeapon : 1;                                 // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1E24[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponSlotInfo) == 0x000004, "Wrong alignment on FWeaponSlotInfo");
static_assert(sizeof(FWeaponSlotInfo) == 0x00000C, "Wrong size on FWeaponSlotInfo");
static_assert(offsetof(FWeaponSlotInfo, SlotWidgetName) == 0x000000, "Member 'FWeaponSlotInfo::SlotWidgetName' has a wrong offset!");

// ScriptStruct QRSL.QRSLHackerTerminalMontageConfig
// 0x0038 (0x0038 - 0x0000)
struct FQRSLHackerTerminalMontageConfig final
{
public:
	class FName                                   AttachSocketName;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MontageId;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            ActorMontage;                                      // 0x0010(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLHackerTerminalMontageConfig) == 0x000008, "Wrong alignment on FQRSLHackerTerminalMontageConfig");
static_assert(sizeof(FQRSLHackerTerminalMontageConfig) == 0x000038, "Wrong size on FQRSLHackerTerminalMontageConfig");
static_assert(offsetof(FQRSLHackerTerminalMontageConfig, AttachSocketName) == 0x000000, "Member 'FQRSLHackerTerminalMontageConfig::AttachSocketName' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalMontageConfig, MontageId) == 0x000008, "Member 'FQRSLHackerTerminalMontageConfig::MontageId' has a wrong offset!");
static_assert(offsetof(FQRSLHackerTerminalMontageConfig, ActorMontage) == 0x000010, "Member 'FQRSLHackerTerminalMontageConfig::ActorMontage' has a wrong offset!");

// ScriptStruct QRSL.TreasureHuntPointNode
// 0x0010 (0x0010 - 0x0000)
struct FTreasureHuntPointNode final
{
public:
	int32                                         Index;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0004(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTreasureHuntPointNode) == 0x000004, "Wrong alignment on FTreasureHuntPointNode");
static_assert(sizeof(FTreasureHuntPointNode) == 0x000010, "Wrong size on FTreasureHuntPointNode");
static_assert(offsetof(FTreasureHuntPointNode, Index) == 0x000000, "Member 'FTreasureHuntPointNode::Index' has a wrong offset!");
static_assert(offsetof(FTreasureHuntPointNode, Location) == 0x000004, "Member 'FTreasureHuntPointNode::Location' has a wrong offset!");

// ScriptStruct QRSL.TruckRobberyTruckSkillInfo
// 0x0078 (0x0078 - 0x0000)
struct FTruckRobberyTruckSkillInfo final
{
public:
	TSoftObjectPtr<class UTexture2D>              CDImg;                                             // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              CDImgEnd;                                          // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SelectImg;                                         // 0x0050(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTruckRobberyTruckSkillInfo) == 0x000008, "Wrong alignment on FTruckRobberyTruckSkillInfo");
static_assert(sizeof(FTruckRobberyTruckSkillInfo) == 0x000078, "Wrong size on FTruckRobberyTruckSkillInfo");
static_assert(offsetof(FTruckRobberyTruckSkillInfo, CDImg) == 0x000000, "Member 'FTruckRobberyTruckSkillInfo::CDImg' has a wrong offset!");
static_assert(offsetof(FTruckRobberyTruckSkillInfo, CDImgEnd) == 0x000028, "Member 'FTruckRobberyTruckSkillInfo::CDImgEnd' has a wrong offset!");
static_assert(offsetof(FTruckRobberyTruckSkillInfo, SelectImg) == 0x000050, "Member 'FTruckRobberyTruckSkillInfo::SelectImg' has a wrong offset!");

// ScriptStruct QRSL.WormholeGradeInfoData
// 0x0018 (0x0020 - 0x0008)
struct FWormholeGradeInfoData final : public FTableRowBase
{
public:
	class FText                                   GradeText;                                         // 0x0008(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholeGradeInfoData) == 0x000008, "Wrong alignment on FWormholeGradeInfoData");
static_assert(sizeof(FWormholeGradeInfoData) == 0x000020, "Wrong size on FWormholeGradeInfoData");
static_assert(offsetof(FWormholeGradeInfoData, GradeText) == 0x000008, "Member 'FWormholeGradeInfoData::GradeText' has a wrong offset!");

// ScriptStruct QRSL.TruckRobberyPointInfo
// 0x0058 (0x0060 - 0x0008)
struct FTruckRobberyPointInfo final : public FTableRowBase
{
public:
	int32                                         PointIndex;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E25[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTruckRobberyGiftWeight>        GiftPool;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         PointCD;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E26[0xC];                                     // 0x0024(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PointTransform;                                    // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTruckRobberyPointInfo) == 0x000010, "Wrong alignment on FTruckRobberyPointInfo");
static_assert(sizeof(FTruckRobberyPointInfo) == 0x000060, "Wrong size on FTruckRobberyPointInfo");
static_assert(offsetof(FTruckRobberyPointInfo, PointIndex) == 0x000008, "Member 'FTruckRobberyPointInfo::PointIndex' has a wrong offset!");
static_assert(offsetof(FTruckRobberyPointInfo, GiftPool) == 0x000010, "Member 'FTruckRobberyPointInfo::GiftPool' has a wrong offset!");
static_assert(offsetof(FTruckRobberyPointInfo, PointCD) == 0x000020, "Member 'FTruckRobberyPointInfo::PointCD' has a wrong offset!");
static_assert(offsetof(FTruckRobberyPointInfo, PointTransform) == 0x000030, "Member 'FTruckRobberyPointInfo::PointTransform' has a wrong offset!");

// ScriptStruct QRSL.TruckRobberyGiftInfo
// 0x0040 (0x0048 - 0x0008)
struct FTruckRobberyGiftInfo final : public FTableRowBase
{
public:
	class FString                                 GiftID;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftCredit;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E27[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   GiftActor;                                         // 0x0020(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTruckRobberyGiftInfo) == 0x000008, "Wrong alignment on FTruckRobberyGiftInfo");
static_assert(sizeof(FTruckRobberyGiftInfo) == 0x000048, "Wrong size on FTruckRobberyGiftInfo");
static_assert(offsetof(FTruckRobberyGiftInfo, GiftID) == 0x000008, "Member 'FTruckRobberyGiftInfo::GiftID' has a wrong offset!");
static_assert(offsetof(FTruckRobberyGiftInfo, GiftCredit) == 0x000018, "Member 'FTruckRobberyGiftInfo::GiftCredit' has a wrong offset!");
static_assert(offsetof(FTruckRobberyGiftInfo, GiftActor) == 0x000020, "Member 'FTruckRobberyGiftInfo::GiftActor' has a wrong offset!");

// ScriptStruct QRSL.IngredientData
// 0x0010 (0x0018 - 0x0008)
struct FIngredientData final : public FTableRowBase
{
public:
	EIngredientType                               IngredientType;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E28[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IngredientLevel;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CookExp;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E29[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FIngredientData) == 0x000008, "Wrong alignment on FIngredientData");
static_assert(sizeof(FIngredientData) == 0x000018, "Wrong size on FIngredientData");
static_assert(offsetof(FIngredientData, IngredientType) == 0x000008, "Member 'FIngredientData::IngredientType' has a wrong offset!");
static_assert(offsetof(FIngredientData, IngredientLevel) == 0x00000C, "Member 'FIngredientData::IngredientLevel' has a wrong offset!");
static_assert(offsetof(FIngredientData, CookExp) == 0x000010, "Member 'FIngredientData::CookExp' has a wrong offset!");

// ScriptStruct QRSL.TruckRobberyTeamInfo
// 0x0030 (0x0030 - 0x0000)
struct FTruckRobberyTeamInfo final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E2A[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TeamID;                                            // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int64>                                 TeamPlayerIDTay;                                   // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         TeamScore;                                         // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E2B[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTruckRobberyTeamInfo) == 0x000008, "Wrong alignment on FTruckRobberyTeamInfo");
static_assert(sizeof(FTruckRobberyTeamInfo) == 0x000030, "Wrong size on FTruckRobberyTeamInfo");
static_assert(offsetof(FTruckRobberyTeamInfo, TeamIndex) == 0x000000, "Member 'FTruckRobberyTeamInfo::TeamIndex' has a wrong offset!");
static_assert(offsetof(FTruckRobberyTeamInfo, TeamID) == 0x000008, "Member 'FTruckRobberyTeamInfo::TeamID' has a wrong offset!");
static_assert(offsetof(FTruckRobberyTeamInfo, TeamPlayerIDTay) == 0x000018, "Member 'FTruckRobberyTeamInfo::TeamPlayerIDTay' has a wrong offset!");
static_assert(offsetof(FTruckRobberyTeamInfo, TeamScore) == 0x000028, "Member 'FTruckRobberyTeamInfo::TeamScore' has a wrong offset!");

// ScriptStruct QRSL.WormholeGridSurroundingsData
// 0x000C (0x000C - 0x0000)
struct FWormholeGridSurroundingsData final
{
public:
	int32                                         SurroundingEdgeIndex;                              // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SurroundingLevelIndex;                             // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SurroundingLevelEdgeIndex;                         // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholeGridSurroundingsData) == 0x000004, "Wrong alignment on FWormholeGridSurroundingsData");
static_assert(sizeof(FWormholeGridSurroundingsData) == 0x00000C, "Wrong size on FWormholeGridSurroundingsData");
static_assert(offsetof(FWormholeGridSurroundingsData, SurroundingEdgeIndex) == 0x000000, "Member 'FWormholeGridSurroundingsData::SurroundingEdgeIndex' has a wrong offset!");
static_assert(offsetof(FWormholeGridSurroundingsData, SurroundingLevelIndex) == 0x000004, "Member 'FWormholeGridSurroundingsData::SurroundingLevelIndex' has a wrong offset!");
static_assert(offsetof(FWormholeGridSurroundingsData, SurroundingLevelEdgeIndex) == 0x000008, "Member 'FWormholeGridSurroundingsData::SurroundingLevelEdgeIndex' has a wrong offset!");

// ScriptStruct QRSL.WormholeGridLevelInfo
// 0x0140 (0x0140 - 0x0000)
struct FWormholeGridLevelInfo final
{
public:
	int32                                         Index;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E2C[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Maps;                                              // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E2D[0x8];                                     // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WormholeTransform;                                 // 0x0020(0x0030)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Layer;                                             // 0x0050(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E2E[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWormholeGridSurroundingsData>  SurroundingLevels;                                 // 0x0058(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FWormholeGridSurroundingsData>  ExtendSurroundingLevels;                           // 0x0068(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSet<class FName>                             IgnoreEdgeMaps;                                    // 0x0078(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          IsStart;                                           // 0x00C8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnd;                                             // 0x00C9(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E2F[0x2];                                     // 0x00CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EdgeCount;                                         // 0x00CC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EdgeRailCount;                                     // 0x00D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GridSize;                                          // 0x00D4(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFixed;                                           // 0x00E0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E30[0x3];                                     // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FirstEdgeAngel;                                    // 0x00E4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfEdgeLength;                                    // 0x00E8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E31[0x4];                                     // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FWormholeGridEdgeInfo>     EdgesInfo;                                         // 0x00F0(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholeGridLevelInfo) == 0x000010, "Wrong alignment on FWormholeGridLevelInfo");
static_assert(sizeof(FWormholeGridLevelInfo) == 0x000140, "Wrong size on FWormholeGridLevelInfo");
static_assert(offsetof(FWormholeGridLevelInfo, Index) == 0x000000, "Member 'FWormholeGridLevelInfo::Index' has a wrong offset!");
static_assert(offsetof(FWormholeGridLevelInfo, Maps) == 0x000008, "Member 'FWormholeGridLevelInfo::Maps' has a wrong offset!");
static_assert(offsetof(FWormholeGridLevelInfo, WormholeTransform) == 0x000020, "Member 'FWormholeGridLevelInfo::WormholeTransform' has a wrong offset!");
static_assert(offsetof(FWormholeGridLevelInfo, Layer) == 0x000050, "Member 'FWormholeGridLevelInfo::Layer' has a wrong offset!");
static_assert(offsetof(FWormholeGridLevelInfo, SurroundingLevels) == 0x000058, "Member 'FWormholeGridLevelInfo::SurroundingLevels' has a wrong offset!");
static_assert(offsetof(FWormholeGridLevelInfo, ExtendSurroundingLevels) == 0x000068, "Member 'FWormholeGridLevelInfo::ExtendSurroundingLevels' has a wrong offset!");
static_assert(offsetof(FWormholeGridLevelInfo, IgnoreEdgeMaps) == 0x000078, "Member 'FWormholeGridLevelInfo::IgnoreEdgeMaps' has a wrong offset!");
static_assert(offsetof(FWormholeGridLevelInfo, IsStart) == 0x0000C8, "Member 'FWormholeGridLevelInfo::IsStart' has a wrong offset!");
static_assert(offsetof(FWormholeGridLevelInfo, IsEnd) == 0x0000C9, "Member 'FWormholeGridLevelInfo::IsEnd' has a wrong offset!");
static_assert(offsetof(FWormholeGridLevelInfo, EdgeCount) == 0x0000CC, "Member 'FWormholeGridLevelInfo::EdgeCount' has a wrong offset!");
static_assert(offsetof(FWormholeGridLevelInfo, EdgeRailCount) == 0x0000D0, "Member 'FWormholeGridLevelInfo::EdgeRailCount' has a wrong offset!");
static_assert(offsetof(FWormholeGridLevelInfo, GridSize) == 0x0000D4, "Member 'FWormholeGridLevelInfo::GridSize' has a wrong offset!");
static_assert(offsetof(FWormholeGridLevelInfo, IsFixed) == 0x0000E0, "Member 'FWormholeGridLevelInfo::IsFixed' has a wrong offset!");
static_assert(offsetof(FWormholeGridLevelInfo, FirstEdgeAngel) == 0x0000E4, "Member 'FWormholeGridLevelInfo::FirstEdgeAngel' has a wrong offset!");
static_assert(offsetof(FWormholeGridLevelInfo, HalfEdgeLength) == 0x0000E8, "Member 'FWormholeGridLevelInfo::HalfEdgeLength' has a wrong offset!");
static_assert(offsetof(FWormholeGridLevelInfo, EdgesInfo) == 0x0000F0, "Member 'FWormholeGridLevelInfo::EdgesInfo' has a wrong offset!");

// ScriptStruct QRSL.TruckRobberyPlayerSpeedInfo
// 0x0008 (0x0008 - 0x0000)
struct FTruckRobberyPlayerSpeedInfo final
{
public:
	int32                                         GiftNum;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTruckRobberyPlayerSpeedInfo) == 0x000004, "Wrong alignment on FTruckRobberyPlayerSpeedInfo");
static_assert(sizeof(FTruckRobberyPlayerSpeedInfo) == 0x000008, "Wrong size on FTruckRobberyPlayerSpeedInfo");
static_assert(offsetof(FTruckRobberyPlayerSpeedInfo, GiftNum) == 0x000000, "Member 'FTruckRobberyPlayerSpeedInfo::GiftNum' has a wrong offset!");
static_assert(offsetof(FTruckRobberyPlayerSpeedInfo, Speed) == 0x000004, "Member 'FTruckRobberyPlayerSpeedInfo::Speed' has a wrong offset!");

// ScriptStruct QRSL.TruckRobberyPlayerTruckInfo
// 0x0008 (0x0008 - 0x0000)
struct FTruckRobberyPlayerTruckInfo final
{
public:
	ETruckRobberyTruckType                        TruckType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETruckRobberyTruckDirectionType               DirectionType;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E32[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HowLongHasItBeen;                                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTruckRobberyPlayerTruckInfo) == 0x000004, "Wrong alignment on FTruckRobberyPlayerTruckInfo");
static_assert(sizeof(FTruckRobberyPlayerTruckInfo) == 0x000008, "Wrong size on FTruckRobberyPlayerTruckInfo");
static_assert(offsetof(FTruckRobberyPlayerTruckInfo, TruckType) == 0x000000, "Member 'FTruckRobberyPlayerTruckInfo::TruckType' has a wrong offset!");
static_assert(offsetof(FTruckRobberyPlayerTruckInfo, DirectionType) == 0x000001, "Member 'FTruckRobberyPlayerTruckInfo::DirectionType' has a wrong offset!");
static_assert(offsetof(FTruckRobberyPlayerTruckInfo, HowLongHasItBeen) == 0x000004, "Member 'FTruckRobberyPlayerTruckInfo::HowLongHasItBeen' has a wrong offset!");

// ScriptStruct QRSL.ActivityClone_TruckRobberyPlayerInfo
// 0x0050 (0x0050 - 0x0000)
struct FActivityClone_TruckRobberyPlayerInfo final
{
public:
	int64                                         PlayerID;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AvatarID;                                          // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AvatarFrameID;                                     // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamIndex;                                         // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftNum;                                           // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 GiftMarkTay;                                       // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	ETruckRobberyPlayerType                       PlayerType;                                        // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E33[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTruckRobberyPlayerTruckInfo           PlayerTruckInfo;                                   // 0x0044(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TruckRobberyCD;                                    // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActivityClone_TruckRobberyPlayerInfo) == 0x000008, "Wrong alignment on FActivityClone_TruckRobberyPlayerInfo");
static_assert(sizeof(FActivityClone_TruckRobberyPlayerInfo) == 0x000050, "Wrong size on FActivityClone_TruckRobberyPlayerInfo");
static_assert(offsetof(FActivityClone_TruckRobberyPlayerInfo, PlayerID) == 0x000000, "Member 'FActivityClone_TruckRobberyPlayerInfo::PlayerID' has a wrong offset!");
static_assert(offsetof(FActivityClone_TruckRobberyPlayerInfo, AvatarID) == 0x000008, "Member 'FActivityClone_TruckRobberyPlayerInfo::AvatarID' has a wrong offset!");
static_assert(offsetof(FActivityClone_TruckRobberyPlayerInfo, AvatarFrameID) == 0x000010, "Member 'FActivityClone_TruckRobberyPlayerInfo::AvatarFrameID' has a wrong offset!");
static_assert(offsetof(FActivityClone_TruckRobberyPlayerInfo, PlayerName) == 0x000018, "Member 'FActivityClone_TruckRobberyPlayerInfo::PlayerName' has a wrong offset!");
static_assert(offsetof(FActivityClone_TruckRobberyPlayerInfo, TeamIndex) == 0x000028, "Member 'FActivityClone_TruckRobberyPlayerInfo::TeamIndex' has a wrong offset!");
static_assert(offsetof(FActivityClone_TruckRobberyPlayerInfo, GiftNum) == 0x00002C, "Member 'FActivityClone_TruckRobberyPlayerInfo::GiftNum' has a wrong offset!");
static_assert(offsetof(FActivityClone_TruckRobberyPlayerInfo, GiftMarkTay) == 0x000030, "Member 'FActivityClone_TruckRobberyPlayerInfo::GiftMarkTay' has a wrong offset!");
static_assert(offsetof(FActivityClone_TruckRobberyPlayerInfo, PlayerType) == 0x000040, "Member 'FActivityClone_TruckRobberyPlayerInfo::PlayerType' has a wrong offset!");
static_assert(offsetof(FActivityClone_TruckRobberyPlayerInfo, PlayerTruckInfo) == 0x000044, "Member 'FActivityClone_TruckRobberyPlayerInfo::PlayerTruckInfo' has a wrong offset!");
static_assert(offsetof(FActivityClone_TruckRobberyPlayerInfo, TruckRobberyCD) == 0x00004C, "Member 'FActivityClone_TruckRobberyPlayerInfo::TruckRobberyCD' has a wrong offset!");

// ScriptStruct QRSL.IntroduceData
// 0x0010 (0x0018 - 0x0008)
struct FIntroduceData final : public FTableRowBase
{
public:
	TArray<struct FIntroduceInfo>                 Descriptions;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIntroduceData) == 0x000008, "Wrong alignment on FIntroduceData");
static_assert(sizeof(FIntroduceData) == 0x000018, "Wrong size on FIntroduceData");
static_assert(offsetof(FIntroduceData, Descriptions) == 0x000008, "Member 'FIntroduceData::Descriptions' has a wrong offset!");

// ScriptStruct QRSL.TruckRobberyTruckSpawnTransform
// 0x0060 (0x0060 - 0x0000)
struct FTruckRobberyTruckSpawnTransform final
{
public:
	struct FTransform                             LeftTransform;                                     // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             RightTransform;                                    // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTruckRobberyTruckSpawnTransform) == 0x000010, "Wrong alignment on FTruckRobberyTruckSpawnTransform");
static_assert(sizeof(FTruckRobberyTruckSpawnTransform) == 0x000060, "Wrong size on FTruckRobberyTruckSpawnTransform");
static_assert(offsetof(FTruckRobberyTruckSpawnTransform, LeftTransform) == 0x000000, "Member 'FTruckRobberyTruckSpawnTransform::LeftTransform' has a wrong offset!");
static_assert(offsetof(FTruckRobberyTruckSpawnTransform, RightTransform) == 0x000030, "Member 'FTruckRobberyTruckSpawnTransform::RightTransform' has a wrong offset!");

// ScriptStruct QRSL.TruckRobberyTruckInfo
// 0x0040 (0x0040 - 0x0000)
struct FTruckRobberyTruckInfo final
{
public:
	ETruckRobberyTruckType                        TruckType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E34[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   TruckActor;                                        // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TruckCD;                                           // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TruckSpeed;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TruckSkillSpeed;                                   // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TruckBumpMark;                                     // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTruckRobberyTruckInfo) == 0x000008, "Wrong alignment on FTruckRobberyTruckInfo");
static_assert(sizeof(FTruckRobberyTruckInfo) == 0x000040, "Wrong size on FTruckRobberyTruckInfo");
static_assert(offsetof(FTruckRobberyTruckInfo, TruckType) == 0x000000, "Member 'FTruckRobberyTruckInfo::TruckType' has a wrong offset!");
static_assert(offsetof(FTruckRobberyTruckInfo, TruckActor) == 0x000008, "Member 'FTruckRobberyTruckInfo::TruckActor' has a wrong offset!");
static_assert(offsetof(FTruckRobberyTruckInfo, TruckCD) == 0x000030, "Member 'FTruckRobberyTruckInfo::TruckCD' has a wrong offset!");
static_assert(offsetof(FTruckRobberyTruckInfo, TruckSpeed) == 0x000034, "Member 'FTruckRobberyTruckInfo::TruckSpeed' has a wrong offset!");
static_assert(offsetof(FTruckRobberyTruckInfo, TruckSkillSpeed) == 0x000038, "Member 'FTruckRobberyTruckInfo::TruckSkillSpeed' has a wrong offset!");
static_assert(offsetof(FTruckRobberyTruckInfo, TruckBumpMark) == 0x00003C, "Member 'FTruckRobberyTruckInfo::TruckBumpMark' has a wrong offset!");

// ScriptStruct QRSL.WorldBossInfoRow
// 0x00D8 (0x00E0 - 0x0008)
struct FWorldBossInfoRow final : public FTableRowBase
{
public:
	class FName                                   BossID;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   NameTxt;                                           // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   DescTxt;                                           // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              BigImage;                                          // 0x0040(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SmallImage;                                        // 0x0068(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconImage;                                         // 0x0090(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   AreaTxt;                                           // 0x00B8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FString                                 StandLayer;                                        // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorldBossInfoRow) == 0x000008, "Wrong alignment on FWorldBossInfoRow");
static_assert(sizeof(FWorldBossInfoRow) == 0x0000E0, "Wrong size on FWorldBossInfoRow");
static_assert(offsetof(FWorldBossInfoRow, BossID) == 0x000008, "Member 'FWorldBossInfoRow::BossID' has a wrong offset!");
static_assert(offsetof(FWorldBossInfoRow, NameTxt) == 0x000010, "Member 'FWorldBossInfoRow::NameTxt' has a wrong offset!");
static_assert(offsetof(FWorldBossInfoRow, DescTxt) == 0x000028, "Member 'FWorldBossInfoRow::DescTxt' has a wrong offset!");
static_assert(offsetof(FWorldBossInfoRow, BigImage) == 0x000040, "Member 'FWorldBossInfoRow::BigImage' has a wrong offset!");
static_assert(offsetof(FWorldBossInfoRow, SmallImage) == 0x000068, "Member 'FWorldBossInfoRow::SmallImage' has a wrong offset!");
static_assert(offsetof(FWorldBossInfoRow, IconImage) == 0x000090, "Member 'FWorldBossInfoRow::IconImage' has a wrong offset!");
static_assert(offsetof(FWorldBossInfoRow, AreaTxt) == 0x0000B8, "Member 'FWorldBossInfoRow::AreaTxt' has a wrong offset!");
static_assert(offsetof(FWorldBossInfoRow, StandLayer) == 0x0000D0, "Member 'FWorldBossInfoRow::StandLayer' has a wrong offset!");

// ScriptStruct QRSL.LiveHouseConfig
// 0x0030 (0x0030 - 0x0000)
struct FLiveHouseConfig final
{
public:
	class FName                                   OnlineAwardActivityID;                             // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameActivityCfgKey                    OnlineAwardActivityCfgKey;                         // 0x0008(0x0018)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnlineAwardReceiveMaxNum;                          // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OnlineAwardRedPointID;                             // 0x0024(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E35[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLiveHouseConfig) == 0x000008, "Wrong alignment on FLiveHouseConfig");
static_assert(sizeof(FLiveHouseConfig) == 0x000030, "Wrong size on FLiveHouseConfig");
static_assert(offsetof(FLiveHouseConfig, OnlineAwardActivityID) == 0x000000, "Member 'FLiveHouseConfig::OnlineAwardActivityID' has a wrong offset!");
static_assert(offsetof(FLiveHouseConfig, OnlineAwardActivityCfgKey) == 0x000008, "Member 'FLiveHouseConfig::OnlineAwardActivityCfgKey' has a wrong offset!");
static_assert(offsetof(FLiveHouseConfig, OnlineAwardReceiveMaxNum) == 0x000020, "Member 'FLiveHouseConfig::OnlineAwardReceiveMaxNum' has a wrong offset!");
static_assert(offsetof(FLiveHouseConfig, OnlineAwardRedPointID) == 0x000024, "Member 'FLiveHouseConfig::OnlineAwardRedPointID' has a wrong offset!");

// ScriptStruct QRSL.PersonalityTagInfo
// 0x000C (0x000C - 0x0000)
struct FPersonalityTagInfo final
{
public:
	class FName                                   PersonalityTagID;                                  // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0008(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPersonalityTagInfo) == 0x000004, "Wrong alignment on FPersonalityTagInfo");
static_assert(sizeof(FPersonalityTagInfo) == 0x00000C, "Wrong size on FPersonalityTagInfo");
static_assert(offsetof(FPersonalityTagInfo, PersonalityTagID) == 0x000000, "Member 'FPersonalityTagInfo::PersonalityTagID' has a wrong offset!");
static_assert(offsetof(FPersonalityTagInfo, Score) == 0x000008, "Member 'FPersonalityTagInfo::Score' has a wrong offset!");

// ScriptStruct QRSL.LoadingConfig
// 0x0068 (0x0068 - 0x0000)
struct FLoadingConfig final
{
public:
	ELoadingShowMode                              ShowMode;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E36[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TextConent;                                        // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FLinearColor                           TextColor;                                         // 0x0020(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BgColor;                                           // 0x0030(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 SpecifiedBackgroundImage;                          // 0x0040(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLoadingConfig) == 0x000008, "Wrong alignment on FLoadingConfig");
static_assert(sizeof(FLoadingConfig) == 0x000068, "Wrong size on FLoadingConfig");
static_assert(offsetof(FLoadingConfig, ShowMode) == 0x000000, "Member 'FLoadingConfig::ShowMode' has a wrong offset!");
static_assert(offsetof(FLoadingConfig, TextConent) == 0x000008, "Member 'FLoadingConfig::TextConent' has a wrong offset!");
static_assert(offsetof(FLoadingConfig, TextColor) == 0x000020, "Member 'FLoadingConfig::TextColor' has a wrong offset!");
static_assert(offsetof(FLoadingConfig, BgColor) == 0x000030, "Member 'FLoadingConfig::BgColor' has a wrong offset!");
static_assert(offsetof(FLoadingConfig, SpecifiedBackgroundImage) == 0x000040, "Member 'FLoadingConfig::SpecifiedBackgroundImage' has a wrong offset!");

// ScriptStruct QRSL.HottaStampContractDate
// 0x0048 (0x0050 - 0x0008)
struct FHottaStampContractDate final : public FTableRowBase
{
public:
	struct FDateInfo                              StampSignBeginTime;                                // 0x0008(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDateInfo                              StampSignEndTime;                                  // 0x0020(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReportDay;                                         // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DissolveProtectTime;                               // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 MonthArray;                                        // 0x0040(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHottaStampContractDate) == 0x000008, "Wrong alignment on FHottaStampContractDate");
static_assert(sizeof(FHottaStampContractDate) == 0x000050, "Wrong size on FHottaStampContractDate");
static_assert(offsetof(FHottaStampContractDate, StampSignBeginTime) == 0x000008, "Member 'FHottaStampContractDate::StampSignBeginTime' has a wrong offset!");
static_assert(offsetof(FHottaStampContractDate, StampSignEndTime) == 0x000020, "Member 'FHottaStampContractDate::StampSignEndTime' has a wrong offset!");
static_assert(offsetof(FHottaStampContractDate, ReportDay) == 0x000038, "Member 'FHottaStampContractDate::ReportDay' has a wrong offset!");
static_assert(offsetof(FHottaStampContractDate, DissolveProtectTime) == 0x00003C, "Member 'FHottaStampContractDate::DissolveProtectTime' has a wrong offset!");
static_assert(offsetof(FHottaStampContractDate, MonthArray) == 0x000040, "Member 'FHottaStampContractDate::MonthArray' has a wrong offset!");

// ScriptStruct QRSL.RoundFeature
// 0x0030 (0x0030 - 0x0000)
struct FRoundFeature final
{
public:
	class FText                                   FeatureTitle;                                      // 0x0000(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   FeatureContext;                                    // 0x0018(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRoundFeature) == 0x000008, "Wrong alignment on FRoundFeature");
static_assert(sizeof(FRoundFeature) == 0x000030, "Wrong size on FRoundFeature");
static_assert(offsetof(FRoundFeature, FeatureTitle) == 0x000000, "Member 'FRoundFeature::FeatureTitle' has a wrong offset!");
static_assert(offsetof(FRoundFeature, FeatureContext) == 0x000018, "Member 'FRoundFeature::FeatureContext' has a wrong offset!");

// ScriptStruct QRSL.EndlessNewLandRoundInfo
// 0x00B8 (0x00B8 - 0x0000)
struct FEndlessNewLandRoundInfo final
{
public:
	int32                                         RoundIndex;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E37[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           MonsterWavePool;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           SubSceneID;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           PlayerStrengthBuff;                                // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	class FName                                   RoundRewardID;                                     // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRoundFeature>                  PlayerFeatures;                                    // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVector                                BornLocation;                                      // 0x0050(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               BornRotation;                                      // 0x005C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            RoundCondition;                                    // 0x0068(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndlessNewLandRoundInfo) == 0x000008, "Wrong alignment on FEndlessNewLandRoundInfo");
static_assert(sizeof(FEndlessNewLandRoundInfo) == 0x0000B8, "Wrong size on FEndlessNewLandRoundInfo");
static_assert(offsetof(FEndlessNewLandRoundInfo, RoundIndex) == 0x000000, "Member 'FEndlessNewLandRoundInfo::RoundIndex' has a wrong offset!");
static_assert(offsetof(FEndlessNewLandRoundInfo, MonsterWavePool) == 0x000008, "Member 'FEndlessNewLandRoundInfo::MonsterWavePool' has a wrong offset!");
static_assert(offsetof(FEndlessNewLandRoundInfo, SubSceneID) == 0x000018, "Member 'FEndlessNewLandRoundInfo::SubSceneID' has a wrong offset!");
static_assert(offsetof(FEndlessNewLandRoundInfo, PlayerStrengthBuff) == 0x000028, "Member 'FEndlessNewLandRoundInfo::PlayerStrengthBuff' has a wrong offset!");
static_assert(offsetof(FEndlessNewLandRoundInfo, RoundRewardID) == 0x000038, "Member 'FEndlessNewLandRoundInfo::RoundRewardID' has a wrong offset!");
static_assert(offsetof(FEndlessNewLandRoundInfo, PlayerFeatures) == 0x000040, "Member 'FEndlessNewLandRoundInfo::PlayerFeatures' has a wrong offset!");
static_assert(offsetof(FEndlessNewLandRoundInfo, BornLocation) == 0x000050, "Member 'FEndlessNewLandRoundInfo::BornLocation' has a wrong offset!");
static_assert(offsetof(FEndlessNewLandRoundInfo, BornRotation) == 0x00005C, "Member 'FEndlessNewLandRoundInfo::BornRotation' has a wrong offset!");
static_assert(offsetof(FEndlessNewLandRoundInfo, RoundCondition) == 0x000068, "Member 'FEndlessNewLandRoundInfo::RoundCondition' has a wrong offset!");

// ScriptStruct QRSL.EndlessNewLandLevelDate
// 0x0078 (0x0080 - 0x0008)
struct FEndlessNewLandLevelDate final : public FTableRowBase
{
public:
	class FName                                   LevelName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   LevelNameShow;                                     // 0x0010(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              LevelImage;                                        // 0x0028(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedEndlessIdolumScore;                            // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndlessNewLandLevelType                      LevelType;                                         // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E38[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEndlessNewLandRoundInfo>       AllRoundInfos;                                     // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         PrepareSeconds;                                    // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChallengeSeconds;                                  // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaveInterval;                                      // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KickOutPlayerSeconds;                              // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnlockSuperRound;                                  // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E39[0x4];                                     // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndlessNewLandLevelDate) == 0x000008, "Wrong alignment on FEndlessNewLandLevelDate");
static_assert(sizeof(FEndlessNewLandLevelDate) == 0x000080, "Wrong size on FEndlessNewLandLevelDate");
static_assert(offsetof(FEndlessNewLandLevelDate, LevelName) == 0x000008, "Member 'FEndlessNewLandLevelDate::LevelName' has a wrong offset!");
static_assert(offsetof(FEndlessNewLandLevelDate, LevelNameShow) == 0x000010, "Member 'FEndlessNewLandLevelDate::LevelNameShow' has a wrong offset!");
static_assert(offsetof(FEndlessNewLandLevelDate, LevelImage) == 0x000028, "Member 'FEndlessNewLandLevelDate::LevelImage' has a wrong offset!");
static_assert(offsetof(FEndlessNewLandLevelDate, NeedEndlessIdolumScore) == 0x000050, "Member 'FEndlessNewLandLevelDate::NeedEndlessIdolumScore' has a wrong offset!");
static_assert(offsetof(FEndlessNewLandLevelDate, LevelType) == 0x000054, "Member 'FEndlessNewLandLevelDate::LevelType' has a wrong offset!");
static_assert(offsetof(FEndlessNewLandLevelDate, AllRoundInfos) == 0x000058, "Member 'FEndlessNewLandLevelDate::AllRoundInfos' has a wrong offset!");
static_assert(offsetof(FEndlessNewLandLevelDate, PrepareSeconds) == 0x000068, "Member 'FEndlessNewLandLevelDate::PrepareSeconds' has a wrong offset!");
static_assert(offsetof(FEndlessNewLandLevelDate, ChallengeSeconds) == 0x00006C, "Member 'FEndlessNewLandLevelDate::ChallengeSeconds' has a wrong offset!");
static_assert(offsetof(FEndlessNewLandLevelDate, WaveInterval) == 0x000070, "Member 'FEndlessNewLandLevelDate::WaveInterval' has a wrong offset!");
static_assert(offsetof(FEndlessNewLandLevelDate, KickOutPlayerSeconds) == 0x000074, "Member 'FEndlessNewLandLevelDate::KickOutPlayerSeconds' has a wrong offset!");
static_assert(offsetof(FEndlessNewLandLevelDate, UnlockSuperRound) == 0x000078, "Member 'FEndlessNewLandLevelDate::UnlockSuperRound' has a wrong offset!");

// ScriptStruct QRSL.DialogInfo
// 0x0040 (0x0040 - 0x0000)
struct FDialogInfo final
{
public:
	class FName                                   DialogId;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            Color;                                             // 0x0008(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          First;                                             // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClearQueue;                                        // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E3A[0x6];                                     // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDialogInfo) == 0x000008, "Wrong alignment on FDialogInfo");
static_assert(sizeof(FDialogInfo) == 0x000040, "Wrong size on FDialogInfo");
static_assert(offsetof(FDialogInfo, DialogId) == 0x000000, "Member 'FDialogInfo::DialogId' has a wrong offset!");
static_assert(offsetof(FDialogInfo, Color) == 0x000008, "Member 'FDialogInfo::Color' has a wrong offset!");
static_assert(offsetof(FDialogInfo, Duration) == 0x000030, "Member 'FDialogInfo::Duration' has a wrong offset!");
static_assert(offsetof(FDialogInfo, Delay) == 0x000034, "Member 'FDialogInfo::Delay' has a wrong offset!");
static_assert(offsetof(FDialogInfo, First) == 0x000038, "Member 'FDialogInfo::First' has a wrong offset!");
static_assert(offsetof(FDialogInfo, ClearQueue) == 0x000039, "Member 'FDialogInfo::ClearQueue' has a wrong offset!");

// ScriptStruct QRSL.EndlessIdolumAwardNode
// 0x0028 (0x0028 - 0x0000)
struct FEndlessIdolumAwardNode final
{
public:
	struct FDateInfo                              EndTime;                                           // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FIntNameNode>                   AwardList;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndlessIdolumAwardNode) == 0x000008, "Wrong alignment on FEndlessIdolumAwardNode");
static_assert(sizeof(FEndlessIdolumAwardNode) == 0x000028, "Wrong size on FEndlessIdolumAwardNode");
static_assert(offsetof(FEndlessIdolumAwardNode, EndTime) == 0x000000, "Member 'FEndlessIdolumAwardNode::EndTime' has a wrong offset!");
static_assert(offsetof(FEndlessIdolumAwardNode, AwardList) == 0x000018, "Member 'FEndlessIdolumAwardNode::AwardList' has a wrong offset!");

// ScriptStruct QRSL.EndlessIdolumLevelRow
// 0x0128 (0x0130 - 0x0008)
struct FEndlessIdolumLevelRow final : public FTableRowBase
{
public:
	EEndlessIdolumType                            LevelType;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E3B[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEndlessIdolumAwardNode>        RewardList;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   LevelName;                                         // 0x0020(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              LevelIcon;                                         // 0x0038(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0060(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   GoalText;                                          // 0x0078(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FLevelFeature>                  FeatureText;                                       // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<int32, struct FMonsterFeature>           MonsterFeatureText;                                // 0x00A0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FBuffCfg>                       PlayerBuffList;                                    // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FBuffCfg>                       HelpPlayerBuffList;                                // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           WaveMonsterPool;                                   // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMonsterJobScore>               WaveMonsterScore;                                  // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndlessIdolumLevelRow) == 0x000008, "Wrong alignment on FEndlessIdolumLevelRow");
static_assert(sizeof(FEndlessIdolumLevelRow) == 0x000130, "Wrong size on FEndlessIdolumLevelRow");
static_assert(offsetof(FEndlessIdolumLevelRow, LevelType) == 0x000008, "Member 'FEndlessIdolumLevelRow::LevelType' has a wrong offset!");
static_assert(offsetof(FEndlessIdolumLevelRow, RewardList) == 0x000010, "Member 'FEndlessIdolumLevelRow::RewardList' has a wrong offset!");
static_assert(offsetof(FEndlessIdolumLevelRow, LevelName) == 0x000020, "Member 'FEndlessIdolumLevelRow::LevelName' has a wrong offset!");
static_assert(offsetof(FEndlessIdolumLevelRow, LevelIcon) == 0x000038, "Member 'FEndlessIdolumLevelRow::LevelIcon' has a wrong offset!");
static_assert(offsetof(FEndlessIdolumLevelRow, Description) == 0x000060, "Member 'FEndlessIdolumLevelRow::Description' has a wrong offset!");
static_assert(offsetof(FEndlessIdolumLevelRow, GoalText) == 0x000078, "Member 'FEndlessIdolumLevelRow::GoalText' has a wrong offset!");
static_assert(offsetof(FEndlessIdolumLevelRow, FeatureText) == 0x000090, "Member 'FEndlessIdolumLevelRow::FeatureText' has a wrong offset!");
static_assert(offsetof(FEndlessIdolumLevelRow, MonsterFeatureText) == 0x0000A0, "Member 'FEndlessIdolumLevelRow::MonsterFeatureText' has a wrong offset!");
static_assert(offsetof(FEndlessIdolumLevelRow, PlayerBuffList) == 0x0000F0, "Member 'FEndlessIdolumLevelRow::PlayerBuffList' has a wrong offset!");
static_assert(offsetof(FEndlessIdolumLevelRow, HelpPlayerBuffList) == 0x000100, "Member 'FEndlessIdolumLevelRow::HelpPlayerBuffList' has a wrong offset!");
static_assert(offsetof(FEndlessIdolumLevelRow, WaveMonsterPool) == 0x000110, "Member 'FEndlessIdolumLevelRow::WaveMonsterPool' has a wrong offset!");
static_assert(offsetof(FEndlessIdolumLevelRow, WaveMonsterScore) == 0x000120, "Member 'FEndlessIdolumLevelRow::WaveMonsterScore' has a wrong offset!");

// ScriptStruct QRSL.CookingFoodCategoryData
// 0x0040 (0x0048 - 0x0008)
struct FCookingFoodCategoryData final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0020(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCookingFoodCategoryData) == 0x000008, "Wrong alignment on FCookingFoodCategoryData");
static_assert(sizeof(FCookingFoodCategoryData) == 0x000048, "Wrong size on FCookingFoodCategoryData");
static_assert(offsetof(FCookingFoodCategoryData, Name) == 0x000008, "Member 'FCookingFoodCategoryData::Name' has a wrong offset!");
static_assert(offsetof(FCookingFoodCategoryData, Icon) == 0x000020, "Member 'FCookingFoodCategoryData::Icon' has a wrong offset!");

// ScriptStruct QRSL.MapRegionIdxPointCfg
// 0x0010 (0x0018 - 0x0008)
struct FMapRegionIdxPointCfg final : public FTableRowBase
{
public:
	class FName                                   PointID;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LevelID;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMapRegionIdxPointCfg) == 0x000008, "Wrong alignment on FMapRegionIdxPointCfg");
static_assert(sizeof(FMapRegionIdxPointCfg) == 0x000018, "Wrong size on FMapRegionIdxPointCfg");
static_assert(offsetof(FMapRegionIdxPointCfg, PointID) == 0x000008, "Member 'FMapRegionIdxPointCfg::PointID' has a wrong offset!");
static_assert(offsetof(FMapRegionIdxPointCfg, LevelID) == 0x000010, "Member 'FMapRegionIdxPointCfg::LevelID' has a wrong offset!");

// ScriptStruct QRSL.WormholeSavedBattleData
// 0x0030 (0x0030 - 0x0000)
struct FWormholeSavedBattleData final
{
public:
	TArray<struct FAwardInfo>                     PickedWeapons;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	TArray<struct FAwardInfo>                     PickedArtifacts;                                   // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	class FString                                 PickedImitationBuff;                               // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholeSavedBattleData) == 0x000008, "Wrong alignment on FWormholeSavedBattleData");
static_assert(sizeof(FWormholeSavedBattleData) == 0x000030, "Wrong size on FWormholeSavedBattleData");
static_assert(offsetof(FWormholeSavedBattleData, PickedWeapons) == 0x000000, "Member 'FWormholeSavedBattleData::PickedWeapons' has a wrong offset!");
static_assert(offsetof(FWormholeSavedBattleData, PickedArtifacts) == 0x000010, "Member 'FWormholeSavedBattleData::PickedArtifacts' has a wrong offset!");
static_assert(offsetof(FWormholeSavedBattleData, PickedImitationBuff) == 0x000020, "Member 'FWormholeSavedBattleData::PickedImitationBuff' has a wrong offset!");

// ScriptStruct QRSL.MapRegionIdxPoint
// 0x000C (0x000C - 0x0000)
struct FMapRegionIdxPoint final
{
public:
	int32                                         RegionIdx;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PointID;                                           // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMapRegionIdxPoint) == 0x000004, "Wrong alignment on FMapRegionIdxPoint");
static_assert(sizeof(FMapRegionIdxPoint) == 0x00000C, "Wrong size on FMapRegionIdxPoint");
static_assert(offsetof(FMapRegionIdxPoint, RegionIdx) == 0x000000, "Member 'FMapRegionIdxPoint::RegionIdx' has a wrong offset!");
static_assert(offsetof(FMapRegionIdxPoint, PointID) == 0x000004, "Member 'FMapRegionIdxPoint::PointID' has a wrong offset!");

// ScriptStruct QRSL.RandomBuffPoolCfg
// 0x0030 (0x0038 - 0x0008)
struct FRandomBuffPoolCfg final : public FTableRowBase
{
public:
	int32                                         DestType;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBuffAddType                                  TargetType;                                        // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E3C[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   BuffBP;                                            // 0x0010(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRandomBuffPoolCfg) == 0x000008, "Wrong alignment on FRandomBuffPoolCfg");
static_assert(sizeof(FRandomBuffPoolCfg) == 0x000038, "Wrong size on FRandomBuffPoolCfg");
static_assert(offsetof(FRandomBuffPoolCfg, DestType) == 0x000008, "Member 'FRandomBuffPoolCfg::DestType' has a wrong offset!");
static_assert(offsetof(FRandomBuffPoolCfg, TargetType) == 0x00000C, "Member 'FRandomBuffPoolCfg::TargetType' has a wrong offset!");
static_assert(offsetof(FRandomBuffPoolCfg, BuffBP) == 0x000010, "Member 'FRandomBuffPoolCfg::BuffBP' has a wrong offset!");

// ScriptStruct QRSL.BossCustommadeBattleRes
// 0x000C (0x000C - 0x0000)
struct FBossCustommadeBattleRes final
{
public:
	class FName                                   BossID;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattleRank;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBossCustommadeBattleRes) == 0x000004, "Wrong alignment on FBossCustommadeBattleRes");
static_assert(sizeof(FBossCustommadeBattleRes) == 0x00000C, "Wrong size on FBossCustommadeBattleRes");
static_assert(offsetof(FBossCustommadeBattleRes, BossID) == 0x000000, "Member 'FBossCustommadeBattleRes::BossID' has a wrong offset!");
static_assert(offsetof(FBossCustommadeBattleRes, BattleRank) == 0x000008, "Member 'FBossCustommadeBattleRes::BattleRank' has a wrong offset!");

// ScriptStruct QRSL.TreasureMapQualityData
// 0x0100 (0x0108 - 0x0008)
struct FTreasureMapQualityData final : public FTableRowBase
{
public:
	class FName                                   BurySuccessAwardsDropID;                           // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DigSuccessAwardsDropID;                            // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BuryFailedAwardsDropID;                            // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DigFailedAwardsDropID;                             // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FriendAwardsDropID;                                // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   BurySuccessTipsText;                               // 0x0030(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChestItemID;                                       // 0x004C(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BuryTreasureAwardDropID;                           // 0x0054(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerLevelLow;                                    // 0x005C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerLevelHigh;                                   // 0x0060(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DigAwardItemID;                                    // 0x0064(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapPointItemID;                                    // 0x006C(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E3D[0x4];                                     // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           FragmentItemID;                                    // 0x0078(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ChestIcon;                                         // 0x0088(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UParticleSystem>         ChestEffect;                                       // 0x00B0(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ChestEffectImage;                                  // 0x00D8(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TreasureMapOverdueTime;                            // 0x0100(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E3E[0x4];                                     // 0x0104(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTreasureMapQualityData) == 0x000008, "Wrong alignment on FTreasureMapQualityData");
static_assert(sizeof(FTreasureMapQualityData) == 0x000108, "Wrong size on FTreasureMapQualityData");
static_assert(offsetof(FTreasureMapQualityData, BurySuccessAwardsDropID) == 0x000008, "Member 'FTreasureMapQualityData::BurySuccessAwardsDropID' has a wrong offset!");
static_assert(offsetof(FTreasureMapQualityData, DigSuccessAwardsDropID) == 0x000010, "Member 'FTreasureMapQualityData::DigSuccessAwardsDropID' has a wrong offset!");
static_assert(offsetof(FTreasureMapQualityData, BuryFailedAwardsDropID) == 0x000018, "Member 'FTreasureMapQualityData::BuryFailedAwardsDropID' has a wrong offset!");
static_assert(offsetof(FTreasureMapQualityData, DigFailedAwardsDropID) == 0x000020, "Member 'FTreasureMapQualityData::DigFailedAwardsDropID' has a wrong offset!");
static_assert(offsetof(FTreasureMapQualityData, FriendAwardsDropID) == 0x000028, "Member 'FTreasureMapQualityData::FriendAwardsDropID' has a wrong offset!");
static_assert(offsetof(FTreasureMapQualityData, BurySuccessTipsText) == 0x000030, "Member 'FTreasureMapQualityData::BurySuccessTipsText' has a wrong offset!");
static_assert(offsetof(FTreasureMapQualityData, Weight) == 0x000048, "Member 'FTreasureMapQualityData::Weight' has a wrong offset!");
static_assert(offsetof(FTreasureMapQualityData, ChestItemID) == 0x00004C, "Member 'FTreasureMapQualityData::ChestItemID' has a wrong offset!");
static_assert(offsetof(FTreasureMapQualityData, BuryTreasureAwardDropID) == 0x000054, "Member 'FTreasureMapQualityData::BuryTreasureAwardDropID' has a wrong offset!");
static_assert(offsetof(FTreasureMapQualityData, ServerLevelLow) == 0x00005C, "Member 'FTreasureMapQualityData::ServerLevelLow' has a wrong offset!");
static_assert(offsetof(FTreasureMapQualityData, ServerLevelHigh) == 0x000060, "Member 'FTreasureMapQualityData::ServerLevelHigh' has a wrong offset!");
static_assert(offsetof(FTreasureMapQualityData, DigAwardItemID) == 0x000064, "Member 'FTreasureMapQualityData::DigAwardItemID' has a wrong offset!");
static_assert(offsetof(FTreasureMapQualityData, MapPointItemID) == 0x00006C, "Member 'FTreasureMapQualityData::MapPointItemID' has a wrong offset!");
static_assert(offsetof(FTreasureMapQualityData, FragmentItemID) == 0x000078, "Member 'FTreasureMapQualityData::FragmentItemID' has a wrong offset!");
static_assert(offsetof(FTreasureMapQualityData, ChestIcon) == 0x000088, "Member 'FTreasureMapQualityData::ChestIcon' has a wrong offset!");
static_assert(offsetof(FTreasureMapQualityData, ChestEffect) == 0x0000B0, "Member 'FTreasureMapQualityData::ChestEffect' has a wrong offset!");
static_assert(offsetof(FTreasureMapQualityData, ChestEffectImage) == 0x0000D8, "Member 'FTreasureMapQualityData::ChestEffectImage' has a wrong offset!");
static_assert(offsetof(FTreasureMapQualityData, TreasureMapOverdueTime) == 0x000100, "Member 'FTreasureMapQualityData::TreasureMapOverdueTime' has a wrong offset!");

// ScriptStruct QRSL.BossCustommadeEnhanceProp
// 0x0038 (0x0038 - 0x0000)
struct FBossCustommadeEnhanceProp final
{
public:
	class FName                                   PropID;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitVal;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ValueMaxCol;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   ValueCTable;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostMaxCol;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E3F[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCurveTableRowHandle                   CostCTable;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBossCustommadeEnhanceProp) == 0x000008, "Wrong alignment on FBossCustommadeEnhanceProp");
static_assert(sizeof(FBossCustommadeEnhanceProp) == 0x000038, "Wrong size on FBossCustommadeEnhanceProp");
static_assert(offsetof(FBossCustommadeEnhanceProp, PropID) == 0x000000, "Member 'FBossCustommadeEnhanceProp::PropID' has a wrong offset!");
static_assert(offsetof(FBossCustommadeEnhanceProp, InitVal) == 0x000008, "Member 'FBossCustommadeEnhanceProp::InitVal' has a wrong offset!");
static_assert(offsetof(FBossCustommadeEnhanceProp, ValueMaxCol) == 0x00000C, "Member 'FBossCustommadeEnhanceProp::ValueMaxCol' has a wrong offset!");
static_assert(offsetof(FBossCustommadeEnhanceProp, ValueCTable) == 0x000010, "Member 'FBossCustommadeEnhanceProp::ValueCTable' has a wrong offset!");
static_assert(offsetof(FBossCustommadeEnhanceProp, CostMaxCol) == 0x000020, "Member 'FBossCustommadeEnhanceProp::CostMaxCol' has a wrong offset!");
static_assert(offsetof(FBossCustommadeEnhanceProp, CostCTable) == 0x000028, "Member 'FBossCustommadeEnhanceProp::CostCTable' has a wrong offset!");

// ScriptStruct QRSL.BossCustommadeConfig
// 0x0178 (0x0180 - 0x0008)
struct FBossCustommadeConfig final : public FTableRowBase
{
public:
	class FText                                   BossName;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   SystemDesc;                                        // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              MiniIcon;                                          // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              BigIcon;                                           // 0x0060(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E40[0x8];                                     // 0x0088(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ViewTransform;                                     // 0x0090(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequence>           IdleAnimiation;                                    // 0x00C0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            EnterMontage;                                      // 0x00E8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MontageSecs;                                       // 0x0110(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E41[0x4];                                     // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           SkillIDs;                                          // 0x0118(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         UnlockScore;                                       // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E42[0x4];                                     // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBossCustommadeEnhanceProp>     PropList;                                          // 0x0130(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FLvlUnlockBuffPool>             BuffPool;                                          // 0x0140(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SpawnLevel;                                        // 0x0150(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E43[0x4];                                     // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   BossBP;                                            // 0x0158(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBossCustommadeConfig) == 0x000010, "Wrong alignment on FBossCustommadeConfig");
static_assert(sizeof(FBossCustommadeConfig) == 0x000180, "Wrong size on FBossCustommadeConfig");
static_assert(offsetof(FBossCustommadeConfig, BossName) == 0x000008, "Member 'FBossCustommadeConfig::BossName' has a wrong offset!");
static_assert(offsetof(FBossCustommadeConfig, SystemDesc) == 0x000020, "Member 'FBossCustommadeConfig::SystemDesc' has a wrong offset!");
static_assert(offsetof(FBossCustommadeConfig, MiniIcon) == 0x000038, "Member 'FBossCustommadeConfig::MiniIcon' has a wrong offset!");
static_assert(offsetof(FBossCustommadeConfig, BigIcon) == 0x000060, "Member 'FBossCustommadeConfig::BigIcon' has a wrong offset!");
static_assert(offsetof(FBossCustommadeConfig, ViewTransform) == 0x000090, "Member 'FBossCustommadeConfig::ViewTransform' has a wrong offset!");
static_assert(offsetof(FBossCustommadeConfig, IdleAnimiation) == 0x0000C0, "Member 'FBossCustommadeConfig::IdleAnimiation' has a wrong offset!");
static_assert(offsetof(FBossCustommadeConfig, EnterMontage) == 0x0000E8, "Member 'FBossCustommadeConfig::EnterMontage' has a wrong offset!");
static_assert(offsetof(FBossCustommadeConfig, MontageSecs) == 0x000110, "Member 'FBossCustommadeConfig::MontageSecs' has a wrong offset!");
static_assert(offsetof(FBossCustommadeConfig, SkillIDs) == 0x000118, "Member 'FBossCustommadeConfig::SkillIDs' has a wrong offset!");
static_assert(offsetof(FBossCustommadeConfig, UnlockScore) == 0x000128, "Member 'FBossCustommadeConfig::UnlockScore' has a wrong offset!");
static_assert(offsetof(FBossCustommadeConfig, PropList) == 0x000130, "Member 'FBossCustommadeConfig::PropList' has a wrong offset!");
static_assert(offsetof(FBossCustommadeConfig, BuffPool) == 0x000140, "Member 'FBossCustommadeConfig::BuffPool' has a wrong offset!");
static_assert(offsetof(FBossCustommadeConfig, SpawnLevel) == 0x000150, "Member 'FBossCustommadeConfig::SpawnLevel' has a wrong offset!");
static_assert(offsetof(FBossCustommadeConfig, BossBP) == 0x000158, "Member 'FBossCustommadeConfig::BossBP' has a wrong offset!");

// ScriptStruct QRSL.EnhancePropNode
// 0x000C (0x000C - 0x0000)
struct FEnhancePropNode final
{
public:
	float                                         MinVal;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxVal;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostVal;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEnhancePropNode) == 0x000004, "Wrong alignment on FEnhancePropNode");
static_assert(sizeof(FEnhancePropNode) == 0x00000C, "Wrong size on FEnhancePropNode");
static_assert(offsetof(FEnhancePropNode, MinVal) == 0x000000, "Member 'FEnhancePropNode::MinVal' has a wrong offset!");
static_assert(offsetof(FEnhancePropNode, MaxVal) == 0x000004, "Member 'FEnhancePropNode::MaxVal' has a wrong offset!");
static_assert(offsetof(FEnhancePropNode, CostVal) == 0x000008, "Member 'FEnhancePropNode::CostVal' has a wrong offset!");

// ScriptStruct QRSL.WormholeLevelLayers
// 0x0020 (0x0020 - 0x0000)
struct FWormholeLevelLayers final
{
public:
	int32                                         GenerateCount;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E44[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 LayerLevels;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FColor                                 LayerColor;                                        // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E45[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWormholeLevelLayers) == 0x000008, "Wrong alignment on FWormholeLevelLayers");
static_assert(sizeof(FWormholeLevelLayers) == 0x000020, "Wrong size on FWormholeLevelLayers");
static_assert(offsetof(FWormholeLevelLayers, GenerateCount) == 0x000000, "Member 'FWormholeLevelLayers::GenerateCount' has a wrong offset!");
static_assert(offsetof(FWormholeLevelLayers, LayerLevels) == 0x000008, "Member 'FWormholeLevelLayers::LayerLevels' has a wrong offset!");
static_assert(offsetof(FWormholeLevelLayers, LayerColor) == 0x000018, "Member 'FWormholeLevelLayers::LayerColor' has a wrong offset!");

// ScriptStruct QRSL.WormholeLevelData
// 0x0050 (0x0058 - 0x0008)
struct FWormholeLevelData final : public FTableRowBase
{
public:
	TArray<struct FWormholeGridLevelInfo>         GridLevels;                                        // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FWormholeLevelLayers>           LayerLevels;                                       // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           EndMaps;                                           // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           EnclosureMaps;                                     // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           FixedEnclosureMaps;                                // 0x0048(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholeLevelData) == 0x000008, "Wrong alignment on FWormholeLevelData");
static_assert(sizeof(FWormholeLevelData) == 0x000058, "Wrong size on FWormholeLevelData");
static_assert(offsetof(FWormholeLevelData, GridLevels) == 0x000008, "Member 'FWormholeLevelData::GridLevels' has a wrong offset!");
static_assert(offsetof(FWormholeLevelData, LayerLevels) == 0x000018, "Member 'FWormholeLevelData::LayerLevels' has a wrong offset!");
static_assert(offsetof(FWormholeLevelData, EndMaps) == 0x000028, "Member 'FWormholeLevelData::EndMaps' has a wrong offset!");
static_assert(offsetof(FWormholeLevelData, EnclosureMaps) == 0x000038, "Member 'FWormholeLevelData::EnclosureMaps' has a wrong offset!");
static_assert(offsetof(FWormholeLevelData, FixedEnclosureMaps) == 0x000048, "Member 'FWormholeLevelData::FixedEnclosureMaps' has a wrong offset!");

// ScriptStruct QRSL.EntertainMentCityConfig
// 0x00B8 (0x00C0 - 0x0008)
struct FEntertainMentCityConfig final : public FTableRowBase
{
public:
	class FName                                   EntertainMentMap;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreRatio;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCoinGet;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              BgImg;                                             // 0x0018(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   EntertainMentDesc;                                 // 0x0040(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         PlayCost;                                          // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayTime;                                          // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RewardItemID;                                      // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DropID;                                            // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SceneFormClass;                                    // 0x0070(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   PassFormClass;                                     // 0x0098(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEntertainMentCityConfig) == 0x000008, "Wrong alignment on FEntertainMentCityConfig");
static_assert(sizeof(FEntertainMentCityConfig) == 0x0000C0, "Wrong size on FEntertainMentCityConfig");
static_assert(offsetof(FEntertainMentCityConfig, EntertainMentMap) == 0x000008, "Member 'FEntertainMentCityConfig::EntertainMentMap' has a wrong offset!");
static_assert(offsetof(FEntertainMentCityConfig, ScoreRatio) == 0x000010, "Member 'FEntertainMentCityConfig::ScoreRatio' has a wrong offset!");
static_assert(offsetof(FEntertainMentCityConfig, MaxCoinGet) == 0x000014, "Member 'FEntertainMentCityConfig::MaxCoinGet' has a wrong offset!");
static_assert(offsetof(FEntertainMentCityConfig, BgImg) == 0x000018, "Member 'FEntertainMentCityConfig::BgImg' has a wrong offset!");
static_assert(offsetof(FEntertainMentCityConfig, EntertainMentDesc) == 0x000040, "Member 'FEntertainMentCityConfig::EntertainMentDesc' has a wrong offset!");
static_assert(offsetof(FEntertainMentCityConfig, PlayCost) == 0x000058, "Member 'FEntertainMentCityConfig::PlayCost' has a wrong offset!");
static_assert(offsetof(FEntertainMentCityConfig, PlayTime) == 0x00005C, "Member 'FEntertainMentCityConfig::PlayTime' has a wrong offset!");
static_assert(offsetof(FEntertainMentCityConfig, RewardItemID) == 0x000060, "Member 'FEntertainMentCityConfig::RewardItemID' has a wrong offset!");
static_assert(offsetof(FEntertainMentCityConfig, DropID) == 0x000068, "Member 'FEntertainMentCityConfig::DropID' has a wrong offset!");
static_assert(offsetof(FEntertainMentCityConfig, SceneFormClass) == 0x000070, "Member 'FEntertainMentCityConfig::SceneFormClass' has a wrong offset!");
static_assert(offsetof(FEntertainMentCityConfig, PassFormClass) == 0x000098, "Member 'FEntertainMentCityConfig::PassFormClass' has a wrong offset!");

// ScriptStruct QRSL.WaveMonsterFeature
// 0x0020 (0x0020 - 0x0000)
struct FWaveMonsterFeature final
{
public:
	TArray<class FText>                           MonsterName;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           MonsterBuffList;                                   // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWaveMonsterFeature) == 0x000008, "Wrong alignment on FWaveMonsterFeature");
static_assert(sizeof(FWaveMonsterFeature) == 0x000020, "Wrong size on FWaveMonsterFeature");
static_assert(offsetof(FWaveMonsterFeature, MonsterName) == 0x000000, "Member 'FWaveMonsterFeature::MonsterName' has a wrong offset!");
static_assert(offsetof(FWaveMonsterFeature, MonsterBuffList) == 0x000010, "Member 'FWaveMonsterFeature::MonsterBuffList' has a wrong offset!");

// ScriptStruct QRSL.8V8RoleJobNode
// 0x0010 (0x0010 - 0x0000)
struct FEightV8RoleJobNode final
{
public:
	int64                                         RoleId;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   JobId;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEightV8RoleJobNode) == 0x000008, "Wrong alignment on FEightV8RoleJobNode");
static_assert(sizeof(FEightV8RoleJobNode) == 0x000010, "Wrong size on FEightV8RoleJobNode");
static_assert(offsetof(FEightV8RoleJobNode, RoleId) == 0x000000, "Member 'FEightV8RoleJobNode::RoleId' has a wrong offset!");
static_assert(offsetof(FEightV8RoleJobNode, JobId) == 0x000008, "Member 'FEightV8RoleJobNode::JobId' has a wrong offset!");

// ScriptStruct QRSL.8V8ContributeInfo
// 0x0018 (0x0018 - 0x0000)
struct FEightV8ContributeInfo final
{
public:
	int32                                         HoldNum;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HoldBigNum;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PickNum;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PickVal;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GatherNum;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GatherVal;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEightV8ContributeInfo) == 0x000004, "Wrong alignment on FEightV8ContributeInfo");
static_assert(sizeof(FEightV8ContributeInfo) == 0x000018, "Wrong size on FEightV8ContributeInfo");
static_assert(offsetof(FEightV8ContributeInfo, HoldNum) == 0x000000, "Member 'FEightV8ContributeInfo::HoldNum' has a wrong offset!");
static_assert(offsetof(FEightV8ContributeInfo, HoldBigNum) == 0x000004, "Member 'FEightV8ContributeInfo::HoldBigNum' has a wrong offset!");
static_assert(offsetof(FEightV8ContributeInfo, PickNum) == 0x000008, "Member 'FEightV8ContributeInfo::PickNum' has a wrong offset!");
static_assert(offsetof(FEightV8ContributeInfo, PickVal) == 0x00000C, "Member 'FEightV8ContributeInfo::PickVal' has a wrong offset!");
static_assert(offsetof(FEightV8ContributeInfo, GatherNum) == 0x000010, "Member 'FEightV8ContributeInfo::GatherNum' has a wrong offset!");
static_assert(offsetof(FEightV8ContributeInfo, GatherVal) == 0x000014, "Member 'FEightV8ContributeInfo::GatherVal' has a wrong offset!");

// ScriptStruct QRSL.8V8SettleResultNode
// 0x0010 (0x0010 - 0x0000)
struct FEightV8SettleResultNode final
{
public:
	int32                                         BaseNum;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Factor;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DropID;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEightV8SettleResultNode) == 0x000004, "Wrong alignment on FEightV8SettleResultNode");
static_assert(sizeof(FEightV8SettleResultNode) == 0x000010, "Wrong size on FEightV8SettleResultNode");
static_assert(offsetof(FEightV8SettleResultNode, BaseNum) == 0x000000, "Member 'FEightV8SettleResultNode::BaseNum' has a wrong offset!");
static_assert(offsetof(FEightV8SettleResultNode, Factor) == 0x000004, "Member 'FEightV8SettleResultNode::Factor' has a wrong offset!");
static_assert(offsetof(FEightV8SettleResultNode, DropID) == 0x000008, "Member 'FEightV8SettleResultNode::DropID' has a wrong offset!");

// ScriptStruct QRSL.8V8StationEnergyTimer
// 0x0008 (0x0008 - 0x0000)
struct FEightV8StationEnergyTimer final
{
public:
	int32                                         Interval;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Increase;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEightV8StationEnergyTimer) == 0x000004, "Wrong alignment on FEightV8StationEnergyTimer");
static_assert(sizeof(FEightV8StationEnergyTimer) == 0x000008, "Wrong size on FEightV8StationEnergyTimer");
static_assert(offsetof(FEightV8StationEnergyTimer, Interval) == 0x000000, "Member 'FEightV8StationEnergyTimer::Interval' has a wrong offset!");
static_assert(offsetof(FEightV8StationEnergyTimer, Increase) == 0x000004, "Member 'FEightV8StationEnergyTimer::Increase' has a wrong offset!");

// ScriptStruct QRSL.8V8CampInfo
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FEightV8CampInfo final
{
public:
	E8V8PlayerCamp                                Camp;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E46[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Energy;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Station;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BigStation;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Goods;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E47[0x14];                                    // 0x0014(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEightV8CampInfo) == 0x000008, "Wrong alignment on FEightV8CampInfo");
static_assert(sizeof(FEightV8CampInfo) == 0x000028, "Wrong size on FEightV8CampInfo");
static_assert(offsetof(FEightV8CampInfo, Camp) == 0x000000, "Member 'FEightV8CampInfo::Camp' has a wrong offset!");
static_assert(offsetof(FEightV8CampInfo, Energy) == 0x000004, "Member 'FEightV8CampInfo::Energy' has a wrong offset!");
static_assert(offsetof(FEightV8CampInfo, Station) == 0x000008, "Member 'FEightV8CampInfo::Station' has a wrong offset!");
static_assert(offsetof(FEightV8CampInfo, BigStation) == 0x00000C, "Member 'FEightV8CampInfo::BigStation' has a wrong offset!");
static_assert(offsetof(FEightV8CampInfo, Goods) == 0x000010, "Member 'FEightV8CampInfo::Goods' has a wrong offset!");

// ScriptStruct QRSL.StorylineArray
// 0x0010 (0x0010 - 0x0000)
struct FStorylineArray final
{
public:
	TArray<struct FStoryline>                     StorylineArray;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStorylineArray) == 0x000008, "Wrong alignment on FStorylineArray");
static_assert(sizeof(FStorylineArray) == 0x000010, "Wrong size on FStorylineArray");
static_assert(offsetof(FStorylineArray, StorylineArray) == 0x000000, "Member 'FStorylineArray::StorylineArray' has a wrong offset!");

// ScriptStruct QRSL.SoloLeagueMatchScoreConfig
// 0x0038 (0x0038 - 0x0000)
struct FSoloLeagueMatchScoreConfig final
{
public:
	int32                                         BaseScore;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PerfectExtraScore;                                 // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeriesScore;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeriesScoreLimit;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExceedNormThreshold;                               // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExceedNormExtraScore;                              // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnderNormThreshold;                                // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnderNormExtraScore;                               // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExceedRivalThreshold;                              // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExceedRivalExtraScore;                             // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnderRivalThreshold;                               // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnderRivalExtraScore;                              // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinScoreLimit;                                     // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxScoreLimit;                                     // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSoloLeagueMatchScoreConfig) == 0x000004, "Wrong alignment on FSoloLeagueMatchScoreConfig");
static_assert(sizeof(FSoloLeagueMatchScoreConfig) == 0x000038, "Wrong size on FSoloLeagueMatchScoreConfig");
static_assert(offsetof(FSoloLeagueMatchScoreConfig, BaseScore) == 0x000000, "Member 'FSoloLeagueMatchScoreConfig::BaseScore' has a wrong offset!");
static_assert(offsetof(FSoloLeagueMatchScoreConfig, PerfectExtraScore) == 0x000004, "Member 'FSoloLeagueMatchScoreConfig::PerfectExtraScore' has a wrong offset!");
static_assert(offsetof(FSoloLeagueMatchScoreConfig, SeriesScore) == 0x000008, "Member 'FSoloLeagueMatchScoreConfig::SeriesScore' has a wrong offset!");
static_assert(offsetof(FSoloLeagueMatchScoreConfig, SeriesScoreLimit) == 0x00000C, "Member 'FSoloLeagueMatchScoreConfig::SeriesScoreLimit' has a wrong offset!");
static_assert(offsetof(FSoloLeagueMatchScoreConfig, ExceedNormThreshold) == 0x000010, "Member 'FSoloLeagueMatchScoreConfig::ExceedNormThreshold' has a wrong offset!");
static_assert(offsetof(FSoloLeagueMatchScoreConfig, ExceedNormExtraScore) == 0x000014, "Member 'FSoloLeagueMatchScoreConfig::ExceedNormExtraScore' has a wrong offset!");
static_assert(offsetof(FSoloLeagueMatchScoreConfig, UnderNormThreshold) == 0x000018, "Member 'FSoloLeagueMatchScoreConfig::UnderNormThreshold' has a wrong offset!");
static_assert(offsetof(FSoloLeagueMatchScoreConfig, UnderNormExtraScore) == 0x00001C, "Member 'FSoloLeagueMatchScoreConfig::UnderNormExtraScore' has a wrong offset!");
static_assert(offsetof(FSoloLeagueMatchScoreConfig, ExceedRivalThreshold) == 0x000020, "Member 'FSoloLeagueMatchScoreConfig::ExceedRivalThreshold' has a wrong offset!");
static_assert(offsetof(FSoloLeagueMatchScoreConfig, ExceedRivalExtraScore) == 0x000024, "Member 'FSoloLeagueMatchScoreConfig::ExceedRivalExtraScore' has a wrong offset!");
static_assert(offsetof(FSoloLeagueMatchScoreConfig, UnderRivalThreshold) == 0x000028, "Member 'FSoloLeagueMatchScoreConfig::UnderRivalThreshold' has a wrong offset!");
static_assert(offsetof(FSoloLeagueMatchScoreConfig, UnderRivalExtraScore) == 0x00002C, "Member 'FSoloLeagueMatchScoreConfig::UnderRivalExtraScore' has a wrong offset!");
static_assert(offsetof(FSoloLeagueMatchScoreConfig, MinScoreLimit) == 0x000030, "Member 'FSoloLeagueMatchScoreConfig::MinScoreLimit' has a wrong offset!");
static_assert(offsetof(FSoloLeagueMatchScoreConfig, MaxScoreLimit) == 0x000034, "Member 'FSoloLeagueMatchScoreConfig::MaxScoreLimit' has a wrong offset!");

// ScriptStruct QRSL.PersonalityAddScoreData
// 0x0008 (0x0008 - 0x0000)
struct FPersonalityAddScoreData final
{
public:
	EPersonalityType                              PersonalityType;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E48[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AddScore;                                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPersonalityAddScoreData) == 0x000004, "Wrong alignment on FPersonalityAddScoreData");
static_assert(sizeof(FPersonalityAddScoreData) == 0x000008, "Wrong size on FPersonalityAddScoreData");
static_assert(offsetof(FPersonalityAddScoreData, PersonalityType) == 0x000000, "Member 'FPersonalityAddScoreData::PersonalityType' has a wrong offset!");
static_assert(offsetof(FPersonalityAddScoreData, AddScore) == 0x000004, "Member 'FPersonalityAddScoreData::AddScore' has a wrong offset!");

// ScriptStruct QRSL.ActivityEntranceConfig
// 0x0318 (0x0320 - 0x0008)
struct FActivityEntranceConfig final : public FTableRowBase
{
public:
	EGameActivityType                             GameActivityType;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAwardBinding;                                   // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSupportMatch;                                   // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsExpLimit;                                       // 0x000B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UnlockCondition;                                   // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMutexActivity;                                  // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E49[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ELevelSceneType>                       ProhibitJoinScene;                                 // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bIsNotifyState;                                    // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOnlyPublic;                                     // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4A[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TimeText;                                          // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   TimeTextNotToday;                                  // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FActivityTimeConfig>            TimeConfig;                                        // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FActivityEventConfig>           EventConfig;                                       // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         ActivityCount;                                     // 0x0080(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCountLimit;                                     // 0x0084(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxHelpNewBieCountLimit;                           // 0x0088(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActivityCountInitType                        ActivityCountInitType;                             // 0x008C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4B[0x3];                                     // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FActivityCountConfig>           CountConfig;                                       // 0x0090(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<int32, struct FCurrencyData>             BuyCountInfo;                                      // 0x00A0(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FSubActivityConfig>             SubActivityConfig;                                 // 0x00F0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bCanOnlyParticipate;                               // 0x0100(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4C[0x3];                                     // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ParticipateCostStamina;                            // 0x0104(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LivenessUpperLimit;                                // 0x0108(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParticipateLiveness;                               // 0x010C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLimitTime;                                      // 0x0110(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4D[0x7];                                     // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   MainType;                                          // 0x0118(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   SubType;                                           // 0x0130(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   ActivityName;                                      // 0x0148(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ActivityIcon;                                      // 0x0160(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ActivityMiniIcon;                                  // 0x0188(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ImageSpecialDesc;                                  // 0x01B0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ActivityDesc;                                      // 0x01D8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   PreviewDropID;                                     // 0x01F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ActivityPopulation;                                // 0x01F8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         OrderPriority;                                     // 0x0210(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRecommend;                                      // 0x0214(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4E[0x3];                                     // 0x0215(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   PushTimeDesc;                                      // 0x0218(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   PushCycleDesc;                                     // 0x0230(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FActivityEventConfig>           PushTimeConfig;                                    // 0x0248(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   PushMsgTitle;                                      // 0x0258(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   PushMsgBody;                                       // 0x0270(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   PushMsgAction;                                     // 0x0288(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bIsAutoNavigate;                                   // 0x02A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4F[0x7];                                     // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GotoFormPath;                                      // 0x02A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DestinationLevel;                                  // 0x02B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DestinationLocation;                               // 0x02C8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E50[0x4];                                     // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   DestinationInteractNPC;                            // 0x02D8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NPCInteractIndex;                                  // 0x0300(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGotoGuildScene;                                   // 0x0304(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedTravelGuildScene;                             // 0x0305(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMsgCollectType                               MsgType;                                           // 0x0306(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E51[0x1];                                     // 0x0307(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ExtraDec;                                          // 0x0308(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActivityEntranceConfig) == 0x000008, "Wrong alignment on FActivityEntranceConfig");
static_assert(sizeof(FActivityEntranceConfig) == 0x000320, "Wrong size on FActivityEntranceConfig");
static_assert(offsetof(FActivityEntranceConfig, GameActivityType) == 0x000008, "Member 'FActivityEntranceConfig::GameActivityType' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, bIsAwardBinding) == 0x000009, "Member 'FActivityEntranceConfig::bIsAwardBinding' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, bIsSupportMatch) == 0x00000A, "Member 'FActivityEntranceConfig::bIsSupportMatch' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, bIsExpLimit) == 0x00000B, "Member 'FActivityEntranceConfig::bIsExpLimit' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, UnlockCondition) == 0x00000C, "Member 'FActivityEntranceConfig::UnlockCondition' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, bIsMutexActivity) == 0x000014, "Member 'FActivityEntranceConfig::bIsMutexActivity' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, ProhibitJoinScene) == 0x000018, "Member 'FActivityEntranceConfig::ProhibitJoinScene' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, bIsNotifyState) == 0x000028, "Member 'FActivityEntranceConfig::bIsNotifyState' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, bIsOnlyPublic) == 0x000029, "Member 'FActivityEntranceConfig::bIsOnlyPublic' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, TimeText) == 0x000030, "Member 'FActivityEntranceConfig::TimeText' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, TimeTextNotToday) == 0x000048, "Member 'FActivityEntranceConfig::TimeTextNotToday' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, TimeConfig) == 0x000060, "Member 'FActivityEntranceConfig::TimeConfig' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, EventConfig) == 0x000070, "Member 'FActivityEntranceConfig::EventConfig' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, ActivityCount) == 0x000080, "Member 'FActivityEntranceConfig::ActivityCount' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, MaxCountLimit) == 0x000084, "Member 'FActivityEntranceConfig::MaxCountLimit' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, MaxHelpNewBieCountLimit) == 0x000088, "Member 'FActivityEntranceConfig::MaxHelpNewBieCountLimit' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, ActivityCountInitType) == 0x00008C, "Member 'FActivityEntranceConfig::ActivityCountInitType' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, CountConfig) == 0x000090, "Member 'FActivityEntranceConfig::CountConfig' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, BuyCountInfo) == 0x0000A0, "Member 'FActivityEntranceConfig::BuyCountInfo' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, SubActivityConfig) == 0x0000F0, "Member 'FActivityEntranceConfig::SubActivityConfig' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, bCanOnlyParticipate) == 0x000100, "Member 'FActivityEntranceConfig::bCanOnlyParticipate' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, ParticipateCostStamina) == 0x000104, "Member 'FActivityEntranceConfig::ParticipateCostStamina' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, LivenessUpperLimit) == 0x000108, "Member 'FActivityEntranceConfig::LivenessUpperLimit' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, ParticipateLiveness) == 0x00010C, "Member 'FActivityEntranceConfig::ParticipateLiveness' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, bIsLimitTime) == 0x000110, "Member 'FActivityEntranceConfig::bIsLimitTime' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, MainType) == 0x000118, "Member 'FActivityEntranceConfig::MainType' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, SubType) == 0x000130, "Member 'FActivityEntranceConfig::SubType' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, ActivityName) == 0x000148, "Member 'FActivityEntranceConfig::ActivityName' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, ActivityIcon) == 0x000160, "Member 'FActivityEntranceConfig::ActivityIcon' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, ActivityMiniIcon) == 0x000188, "Member 'FActivityEntranceConfig::ActivityMiniIcon' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, ImageSpecialDesc) == 0x0001B0, "Member 'FActivityEntranceConfig::ImageSpecialDesc' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, ActivityDesc) == 0x0001D8, "Member 'FActivityEntranceConfig::ActivityDesc' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, PreviewDropID) == 0x0001F0, "Member 'FActivityEntranceConfig::PreviewDropID' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, ActivityPopulation) == 0x0001F8, "Member 'FActivityEntranceConfig::ActivityPopulation' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, OrderPriority) == 0x000210, "Member 'FActivityEntranceConfig::OrderPriority' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, bIsRecommend) == 0x000214, "Member 'FActivityEntranceConfig::bIsRecommend' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, PushTimeDesc) == 0x000218, "Member 'FActivityEntranceConfig::PushTimeDesc' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, PushCycleDesc) == 0x000230, "Member 'FActivityEntranceConfig::PushCycleDesc' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, PushTimeConfig) == 0x000248, "Member 'FActivityEntranceConfig::PushTimeConfig' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, PushMsgTitle) == 0x000258, "Member 'FActivityEntranceConfig::PushMsgTitle' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, PushMsgBody) == 0x000270, "Member 'FActivityEntranceConfig::PushMsgBody' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, PushMsgAction) == 0x000288, "Member 'FActivityEntranceConfig::PushMsgAction' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, bIsAutoNavigate) == 0x0002A0, "Member 'FActivityEntranceConfig::bIsAutoNavigate' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, GotoFormPath) == 0x0002A8, "Member 'FActivityEntranceConfig::GotoFormPath' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, DestinationLevel) == 0x0002B8, "Member 'FActivityEntranceConfig::DestinationLevel' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, DestinationLocation) == 0x0002C8, "Member 'FActivityEntranceConfig::DestinationLocation' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, DestinationInteractNPC) == 0x0002D8, "Member 'FActivityEntranceConfig::DestinationInteractNPC' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, NPCInteractIndex) == 0x000300, "Member 'FActivityEntranceConfig::NPCInteractIndex' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, bGotoGuildScene) == 0x000304, "Member 'FActivityEntranceConfig::bGotoGuildScene' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, bNeedTravelGuildScene) == 0x000305, "Member 'FActivityEntranceConfig::bNeedTravelGuildScene' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, MsgType) == 0x000306, "Member 'FActivityEntranceConfig::MsgType' has a wrong offset!");
static_assert(offsetof(FActivityEntranceConfig, ExtraDec) == 0x000308, "Member 'FActivityEntranceConfig::ExtraDec' has a wrong offset!");

// ScriptStruct QRSL.WeeklyActivityQuestConfig
// 0x0060 (0x0068 - 0x0008)
struct FWeeklyActivityQuestConfig final : public FTableRowBase
{
public:
	class FName                                   QuestID;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActivityQuestType                            ActivityQuestType;                                 // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E52[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   UnlockID;                                          // 0x0014(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E53[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PathFindID;                                        // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PreQuestID;                                        // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GotoAcitivityID;                                   // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActivityQuestSourceType                      QuestSourceType;                                   // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E54[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   NotifyMessage;                                     // 0x0048(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EGameFunctionType                             JumpSwitchType;                                    // 0x0060(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E55[0x7];                                     // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeeklyActivityQuestConfig) == 0x000008, "Wrong alignment on FWeeklyActivityQuestConfig");
static_assert(sizeof(FWeeklyActivityQuestConfig) == 0x000068, "Wrong size on FWeeklyActivityQuestConfig");
static_assert(offsetof(FWeeklyActivityQuestConfig, QuestID) == 0x000008, "Member 'FWeeklyActivityQuestConfig::QuestID' has a wrong offset!");
static_assert(offsetof(FWeeklyActivityQuestConfig, ActivityQuestType) == 0x000010, "Member 'FWeeklyActivityQuestConfig::ActivityQuestType' has a wrong offset!");
static_assert(offsetof(FWeeklyActivityQuestConfig, UnlockID) == 0x000014, "Member 'FWeeklyActivityQuestConfig::UnlockID' has a wrong offset!");
static_assert(offsetof(FWeeklyActivityQuestConfig, PathFindID) == 0x000020, "Member 'FWeeklyActivityQuestConfig::PathFindID' has a wrong offset!");
static_assert(offsetof(FWeeklyActivityQuestConfig, PreQuestID) == 0x000030, "Member 'FWeeklyActivityQuestConfig::PreQuestID' has a wrong offset!");
static_assert(offsetof(FWeeklyActivityQuestConfig, GotoAcitivityID) == 0x000038, "Member 'FWeeklyActivityQuestConfig::GotoAcitivityID' has a wrong offset!");
static_assert(offsetof(FWeeklyActivityQuestConfig, QuestSourceType) == 0x000040, "Member 'FWeeklyActivityQuestConfig::QuestSourceType' has a wrong offset!");
static_assert(offsetof(FWeeklyActivityQuestConfig, NotifyMessage) == 0x000048, "Member 'FWeeklyActivityQuestConfig::NotifyMessage' has a wrong offset!");
static_assert(offsetof(FWeeklyActivityQuestConfig, JumpSwitchType) == 0x000060, "Member 'FWeeklyActivityQuestConfig::JumpSwitchType' has a wrong offset!");

// ScriptStruct QRSL.ActivityScheduleInfo
// 0x0018 (0x0018 - 0x0000)
struct FActivityScheduleInfo final
{
public:
	int64                                         BeginTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ActivityId;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActivityScheduleInfo) == 0x000008, "Wrong alignment on FActivityScheduleInfo");
static_assert(sizeof(FActivityScheduleInfo) == 0x000018, "Wrong size on FActivityScheduleInfo");
static_assert(offsetof(FActivityScheduleInfo, BeginTime) == 0x000000, "Member 'FActivityScheduleInfo::BeginTime' has a wrong offset!");
static_assert(offsetof(FActivityScheduleInfo, ActivityId) == 0x000008, "Member 'FActivityScheduleInfo::ActivityId' has a wrong offset!");

// ScriptStruct QRSL.SystemTreasureMapLocationInfo
// 0x0088 (0x0090 - 0x0008)
struct FSystemTreasureMapLocationInfo final : public FTableRowBase
{
public:
	uint8                                         Pad_1E56[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TreasureChestTransform;                            // 0x0010(0x0030)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 TreasureChestMap;                                  // 0x0040(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TreasureMapLevelName;                              // 0x0050(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   RegionName;                                        // 0x0060(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0078(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Qualities;                                         // 0x007C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LimitLevel;                                        // 0x0080(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E57[0xC];                                     // 0x0084(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSystemTreasureMapLocationInfo) == 0x000010, "Wrong alignment on FSystemTreasureMapLocationInfo");
static_assert(sizeof(FSystemTreasureMapLocationInfo) == 0x000090, "Wrong size on FSystemTreasureMapLocationInfo");
static_assert(offsetof(FSystemTreasureMapLocationInfo, TreasureChestTransform) == 0x000010, "Member 'FSystemTreasureMapLocationInfo::TreasureChestTransform' has a wrong offset!");
static_assert(offsetof(FSystemTreasureMapLocationInfo, TreasureChestMap) == 0x000040, "Member 'FSystemTreasureMapLocationInfo::TreasureChestMap' has a wrong offset!");
static_assert(offsetof(FSystemTreasureMapLocationInfo, TreasureMapLevelName) == 0x000050, "Member 'FSystemTreasureMapLocationInfo::TreasureMapLevelName' has a wrong offset!");
static_assert(offsetof(FSystemTreasureMapLocationInfo, RegionName) == 0x000060, "Member 'FSystemTreasureMapLocationInfo::RegionName' has a wrong offset!");
static_assert(offsetof(FSystemTreasureMapLocationInfo, Weight) == 0x000078, "Member 'FSystemTreasureMapLocationInfo::Weight' has a wrong offset!");
static_assert(offsetof(FSystemTreasureMapLocationInfo, Qualities) == 0x00007C, "Member 'FSystemTreasureMapLocationInfo::Qualities' has a wrong offset!");
static_assert(offsetof(FSystemTreasureMapLocationInfo, LimitLevel) == 0x000080, "Member 'FSystemTreasureMapLocationInfo::LimitLevel' has a wrong offset!");

// ScriptStruct QRSL.TreasureMapAssignPlayerInfo
// 0x0030 (0x0030 - 0x0000)
struct FTreasureMapAssignPlayerInfo final
{
public:
	struct FUniqueNetIdRepl                       PlayerUID;                                         // 0x0000(0x0028)(SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFriend;                                          // 0x0028(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E58[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTreasureMapAssignPlayerInfo) == 0x000008, "Wrong alignment on FTreasureMapAssignPlayerInfo");
static_assert(sizeof(FTreasureMapAssignPlayerInfo) == 0x000030, "Wrong size on FTreasureMapAssignPlayerInfo");
static_assert(offsetof(FTreasureMapAssignPlayerInfo, PlayerUID) == 0x000000, "Member 'FTreasureMapAssignPlayerInfo::PlayerUID' has a wrong offset!");
static_assert(offsetof(FTreasureMapAssignPlayerInfo, IsFriend) == 0x000028, "Member 'FTreasureMapAssignPlayerInfo::IsFriend' has a wrong offset!");

// ScriptStruct QRSL.MountPopularityAwardConfig
// 0x0010 (0x0018 - 0x0008)
struct FMountPopularityAwardConfig final : public FTableRowBase
{
public:
	int32                                         PopularityValue;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AwardDropID;                                       // 0x000C(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E59[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMountPopularityAwardConfig) == 0x000008, "Wrong alignment on FMountPopularityAwardConfig");
static_assert(sizeof(FMountPopularityAwardConfig) == 0x000018, "Wrong size on FMountPopularityAwardConfig");
static_assert(offsetof(FMountPopularityAwardConfig, PopularityValue) == 0x000008, "Member 'FMountPopularityAwardConfig::PopularityValue' has a wrong offset!");
static_assert(offsetof(FMountPopularityAwardConfig, AwardDropID) == 0x00000C, "Member 'FMountPopularityAwardConfig::AwardDropID' has a wrong offset!");

// ScriptStruct QRSL.MountWindVaneColorPoolConfig
// 0x0010 (0x0018 - 0x0008)
struct FMountWindVaneColorPoolConfig final : public FTableRowBase
{
public:
	TArray<class FName>                           CommonColorIdArray;                                // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMountWindVaneColorPoolConfig) == 0x000008, "Wrong alignment on FMountWindVaneColorPoolConfig");
static_assert(sizeof(FMountWindVaneColorPoolConfig) == 0x000018, "Wrong size on FMountWindVaneColorPoolConfig");
static_assert(offsetof(FMountWindVaneColorPoolConfig, CommonColorIdArray) == 0x000008, "Member 'FMountWindVaneColorPoolConfig::CommonColorIdArray' has a wrong offset!");

// ScriptStruct QRSL.MountWindVaneConfig
// 0x0028 (0x0030 - 0x0008)
struct FMountWindVaneConfig final : public FTableRowBase
{
public:
	struct FInt32Range                            ServerLevelRange;                                  // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMountNode_IdNum                       SkinPoolPair;                                      // 0x0018(0x000C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FMountNode_IdNum                       ColorPoolPair;                                     // 0x0024(0x000C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMountWindVaneConfig) == 0x000008, "Wrong alignment on FMountWindVaneConfig");
static_assert(sizeof(FMountWindVaneConfig) == 0x000030, "Wrong size on FMountWindVaneConfig");
static_assert(offsetof(FMountWindVaneConfig, ServerLevelRange) == 0x000008, "Member 'FMountWindVaneConfig::ServerLevelRange' has a wrong offset!");
static_assert(offsetof(FMountWindVaneConfig, SkinPoolPair) == 0x000018, "Member 'FMountWindVaneConfig::SkinPoolPair' has a wrong offset!");
static_assert(offsetof(FMountWindVaneConfig, ColorPoolPair) == 0x000024, "Member 'FMountWindVaneConfig::ColorPoolPair' has a wrong offset!");

// ScriptStruct QRSL.MountColorConfig
// 0x0120 (0x0128 - 0x0008)
struct FMountColorConfig final : public FTableRowBase
{
public:
	class FName                                   CommonColorId;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OwnerMountSkinId;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0018(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              BigImage;                                          // 0x0030(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0058(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconInUse;                                         // 0x0080(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           MaterialSlotNames;                                 // 0x00A8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x00B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            Color;                                             // 0x00C0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x00E8(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         AutoUnlockWhenMountLevel;                          // 0x0100(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E5A[0x4];                                     // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   UnlockDescription;                                 // 0x0108(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bUnavailable;                                      // 0x0120(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E5B[0x7];                                     // 0x0121(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMountColorConfig) == 0x000008, "Wrong alignment on FMountColorConfig");
static_assert(sizeof(FMountColorConfig) == 0x000128, "Wrong size on FMountColorConfig");
static_assert(offsetof(FMountColorConfig, CommonColorId) == 0x000008, "Member 'FMountColorConfig::CommonColorId' has a wrong offset!");
static_assert(offsetof(FMountColorConfig, OwnerMountSkinId) == 0x000010, "Member 'FMountColorConfig::OwnerMountSkinId' has a wrong offset!");
static_assert(offsetof(FMountColorConfig, Name) == 0x000018, "Member 'FMountColorConfig::Name' has a wrong offset!");
static_assert(offsetof(FMountColorConfig, BigImage) == 0x000030, "Member 'FMountColorConfig::BigImage' has a wrong offset!");
static_assert(offsetof(FMountColorConfig, Icon) == 0x000058, "Member 'FMountColorConfig::Icon' has a wrong offset!");
static_assert(offsetof(FMountColorConfig, IconInUse) == 0x000080, "Member 'FMountColorConfig::IconInUse' has a wrong offset!");
static_assert(offsetof(FMountColorConfig, MaterialSlotNames) == 0x0000A8, "Member 'FMountColorConfig::MaterialSlotNames' has a wrong offset!");
static_assert(offsetof(FMountColorConfig, ParameterName) == 0x0000B8, "Member 'FMountColorConfig::ParameterName' has a wrong offset!");
static_assert(offsetof(FMountColorConfig, Color) == 0x0000C0, "Member 'FMountColorConfig::Color' has a wrong offset!");
static_assert(offsetof(FMountColorConfig, Description) == 0x0000E8, "Member 'FMountColorConfig::Description' has a wrong offset!");
static_assert(offsetof(FMountColorConfig, AutoUnlockWhenMountLevel) == 0x000100, "Member 'FMountColorConfig::AutoUnlockWhenMountLevel' has a wrong offset!");
static_assert(offsetof(FMountColorConfig, UnlockDescription) == 0x000108, "Member 'FMountColorConfig::UnlockDescription' has a wrong offset!");
static_assert(offsetof(FMountColorConfig, bUnavailable) == 0x000120, "Member 'FMountColorConfig::bUnavailable' has a wrong offset!");

// ScriptStruct QRSL.MountFettersConfig
// 0x0030 (0x0038 - 0x0008)
struct FMountFettersConfig final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         RequiredAchieveCount;                              // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredAchieveStrengthenLevel;                    // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredTotalStrengthenLevel;                      // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ModifyId;                                          // 0x002C(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E5C[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMountFettersConfig) == 0x000008, "Wrong alignment on FMountFettersConfig");
static_assert(sizeof(FMountFettersConfig) == 0x000038, "Wrong size on FMountFettersConfig");
static_assert(offsetof(FMountFettersConfig, Name) == 0x000008, "Member 'FMountFettersConfig::Name' has a wrong offset!");
static_assert(offsetof(FMountFettersConfig, RequiredAchieveCount) == 0x000020, "Member 'FMountFettersConfig::RequiredAchieveCount' has a wrong offset!");
static_assert(offsetof(FMountFettersConfig, RequiredAchieveStrengthenLevel) == 0x000024, "Member 'FMountFettersConfig::RequiredAchieveStrengthenLevel' has a wrong offset!");
static_assert(offsetof(FMountFettersConfig, RequiredTotalStrengthenLevel) == 0x000028, "Member 'FMountFettersConfig::RequiredTotalStrengthenLevel' has a wrong offset!");
static_assert(offsetof(FMountFettersConfig, ModifyId) == 0x00002C, "Member 'FMountFettersConfig::ModifyId' has a wrong offset!");

// ScriptStruct QRSL.MountStrengthenConfig
// 0x0020 (0x0028 - 0x0008)
struct FMountStrengthenConfig final : public FTableRowBase
{
public:
	int32                                         RequiredMinLevel;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E5D[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHottaCostItem>                 CostItemArray;                                     // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   ModifyId;                                          // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMountStrengthenConfig) == 0x000008, "Wrong alignment on FMountStrengthenConfig");
static_assert(sizeof(FMountStrengthenConfig) == 0x000028, "Wrong size on FMountStrengthenConfig");
static_assert(offsetof(FMountStrengthenConfig, RequiredMinLevel) == 0x000008, "Member 'FMountStrengthenConfig::RequiredMinLevel' has a wrong offset!");
static_assert(offsetof(FMountStrengthenConfig, CostItemArray) == 0x000010, "Member 'FMountStrengthenConfig::CostItemArray' has a wrong offset!");
static_assert(offsetof(FMountStrengthenConfig, ModifyId) == 0x000020, "Member 'FMountStrengthenConfig::ModifyId' has a wrong offset!");

// ScriptStruct QRSL.MountExpConfig
// 0x0030 (0x0038 - 0x0008)
struct FMountExpConfig final : public FTableRowBase
{
public:
	TArray<class FString>                         NormalRandomPack;                                  // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FString>                         ExellentRandomPack;                                // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FString>                         RareRandomPack;                                    // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMountExpConfig) == 0x000008, "Wrong alignment on FMountExpConfig");
static_assert(sizeof(FMountExpConfig) == 0x000038, "Wrong size on FMountExpConfig");
static_assert(offsetof(FMountExpConfig, NormalRandomPack) == 0x000008, "Member 'FMountExpConfig::NormalRandomPack' has a wrong offset!");
static_assert(offsetof(FMountExpConfig, ExellentRandomPack) == 0x000018, "Member 'FMountExpConfig::ExellentRandomPack' has a wrong offset!");
static_assert(offsetof(FMountExpConfig, RareRandomPack) == 0x000028, "Member 'FMountExpConfig::RareRandomPack' has a wrong offset!");

// ScriptStruct QRSL.MountConfig
// 0x0220 (0x0228 - 0x0008)
struct FMountConfig final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              NameImage;                                         // 0x0020(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0048(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemQuality                                  QualityType;                                       // 0x0070(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E5E[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              ShowImage;                                         // 0x0078(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ShowDescription;                                   // 0x00A0(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         AutoUnlockWhenCharacterLevel;                      // 0x00B8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowNeedUnLock;                                   // 0x00BC(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E5F[0x3];                                     // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EHottaOverSeaRegionType, bool>           OverSeaShowNeedUnLock;                             // 0x00C0(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FHottaCostItem>                 NeedItemArray;                                     // 0x0110(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           SkinCardItemArray;                                 // 0x0120(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EHottaOverSeaRegionType, struct FMountSkinCardItemData> OverSeaSkinCardItemArray;                          // 0x0130(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   UnlockDescription;                                 // 0x0180(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EHottaOverSeaRegionType, class FText>    OverSeaUnlockDescription;                          // 0x0198(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         FixedPopularityValue;                              // 0x01E8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PopularityValueEveryLevel;                         // 0x01EC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PopularityValueEverySkin;                          // 0x01F0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LevelPackID;                                       // 0x01F4(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RefreshMaintenanceTaskCDTimerId;                   // 0x01FC(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLevel;                                          // 0x0204(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StrengthenPackId;                                  // 0x0208(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxStrengthenLevel;                                // 0x0210(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DefaultSkinId;                                     // 0x0214(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExhibitBySwitch;                                  // 0x021C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameFunctionType                             SwitchType;                                        // 0x021D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMountType                                    MountType;                                         // 0x021E(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMountUseType                                 UseType;                                           // 0x021F(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableMaintain;                                  // 0x0220(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableChangeAppearence;                          // 0x0221(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E60[0x6];                                     // 0x0222(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMountConfig) == 0x000008, "Wrong alignment on FMountConfig");
static_assert(sizeof(FMountConfig) == 0x000228, "Wrong size on FMountConfig");
static_assert(offsetof(FMountConfig, Name) == 0x000008, "Member 'FMountConfig::Name' has a wrong offset!");
static_assert(offsetof(FMountConfig, NameImage) == 0x000020, "Member 'FMountConfig::NameImage' has a wrong offset!");
static_assert(offsetof(FMountConfig, Icon) == 0x000048, "Member 'FMountConfig::Icon' has a wrong offset!");
static_assert(offsetof(FMountConfig, QualityType) == 0x000070, "Member 'FMountConfig::QualityType' has a wrong offset!");
static_assert(offsetof(FMountConfig, ShowImage) == 0x000078, "Member 'FMountConfig::ShowImage' has a wrong offset!");
static_assert(offsetof(FMountConfig, ShowDescription) == 0x0000A0, "Member 'FMountConfig::ShowDescription' has a wrong offset!");
static_assert(offsetof(FMountConfig, AutoUnlockWhenCharacterLevel) == 0x0000B8, "Member 'FMountConfig::AutoUnlockWhenCharacterLevel' has a wrong offset!");
static_assert(offsetof(FMountConfig, bShowNeedUnLock) == 0x0000BC, "Member 'FMountConfig::bShowNeedUnLock' has a wrong offset!");
static_assert(offsetof(FMountConfig, OverSeaShowNeedUnLock) == 0x0000C0, "Member 'FMountConfig::OverSeaShowNeedUnLock' has a wrong offset!");
static_assert(offsetof(FMountConfig, NeedItemArray) == 0x000110, "Member 'FMountConfig::NeedItemArray' has a wrong offset!");
static_assert(offsetof(FMountConfig, SkinCardItemArray) == 0x000120, "Member 'FMountConfig::SkinCardItemArray' has a wrong offset!");
static_assert(offsetof(FMountConfig, OverSeaSkinCardItemArray) == 0x000130, "Member 'FMountConfig::OverSeaSkinCardItemArray' has a wrong offset!");
static_assert(offsetof(FMountConfig, UnlockDescription) == 0x000180, "Member 'FMountConfig::UnlockDescription' has a wrong offset!");
static_assert(offsetof(FMountConfig, OverSeaUnlockDescription) == 0x000198, "Member 'FMountConfig::OverSeaUnlockDescription' has a wrong offset!");
static_assert(offsetof(FMountConfig, FixedPopularityValue) == 0x0001E8, "Member 'FMountConfig::FixedPopularityValue' has a wrong offset!");
static_assert(offsetof(FMountConfig, PopularityValueEveryLevel) == 0x0001EC, "Member 'FMountConfig::PopularityValueEveryLevel' has a wrong offset!");
static_assert(offsetof(FMountConfig, PopularityValueEverySkin) == 0x0001F0, "Member 'FMountConfig::PopularityValueEverySkin' has a wrong offset!");
static_assert(offsetof(FMountConfig, LevelPackID) == 0x0001F4, "Member 'FMountConfig::LevelPackID' has a wrong offset!");
static_assert(offsetof(FMountConfig, RefreshMaintenanceTaskCDTimerId) == 0x0001FC, "Member 'FMountConfig::RefreshMaintenanceTaskCDTimerId' has a wrong offset!");
static_assert(offsetof(FMountConfig, MaxLevel) == 0x000204, "Member 'FMountConfig::MaxLevel' has a wrong offset!");
static_assert(offsetof(FMountConfig, StrengthenPackId) == 0x000208, "Member 'FMountConfig::StrengthenPackId' has a wrong offset!");
static_assert(offsetof(FMountConfig, MaxStrengthenLevel) == 0x000210, "Member 'FMountConfig::MaxStrengthenLevel' has a wrong offset!");
static_assert(offsetof(FMountConfig, DefaultSkinId) == 0x000214, "Member 'FMountConfig::DefaultSkinId' has a wrong offset!");
static_assert(offsetof(FMountConfig, bExhibitBySwitch) == 0x00021C, "Member 'FMountConfig::bExhibitBySwitch' has a wrong offset!");
static_assert(offsetof(FMountConfig, SwitchType) == 0x00021D, "Member 'FMountConfig::SwitchType' has a wrong offset!");
static_assert(offsetof(FMountConfig, MountType) == 0x00021E, "Member 'FMountConfig::MountType' has a wrong offset!");
static_assert(offsetof(FMountConfig, UseType) == 0x00021F, "Member 'FMountConfig::UseType' has a wrong offset!");
static_assert(offsetof(FMountConfig, bDisableMaintain) == 0x000220, "Member 'FMountConfig::bDisableMaintain' has a wrong offset!");
static_assert(offsetof(FMountConfig, bDisableChangeAppearence) == 0x000221, "Member 'FMountConfig::bDisableChangeAppearence' has a wrong offset!");

// ScriptStruct QRSL.MountMaintenanceTaskConfig
// 0x0010 (0x0018 - 0x0008)
struct FMountMaintenanceTaskConfig final : public FTableRowBase
{
public:
	class FName                                   ItemID;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddExp;                                            // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMountMaintenanceTaskConfig) == 0x000008, "Wrong alignment on FMountMaintenanceTaskConfig");
static_assert(sizeof(FMountMaintenanceTaskConfig) == 0x000018, "Wrong size on FMountMaintenanceTaskConfig");
static_assert(offsetof(FMountMaintenanceTaskConfig, ItemID) == 0x000008, "Member 'FMountMaintenanceTaskConfig::ItemID' has a wrong offset!");
static_assert(offsetof(FMountMaintenanceTaskConfig, ItemCount) == 0x000010, "Member 'FMountMaintenanceTaskConfig::ItemCount' has a wrong offset!");
static_assert(offsetof(FMountMaintenanceTaskConfig, AddExp) == 0x000014, "Member 'FMountMaintenanceTaskConfig::AddExp' has a wrong offset!");

// ScriptStruct QRSL.OrienteeringRandomTrackData
// 0x0018 (0x0020 - 0x0008)
struct FOrienteeringRandomTrackData final : public FTableRowBase
{
public:
	class FName                                   TrackID;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID;                                            // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemAmount;                                        // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOrienteeringRandomTrackData) == 0x000008, "Wrong alignment on FOrienteeringRandomTrackData");
static_assert(sizeof(FOrienteeringRandomTrackData) == 0x000020, "Wrong size on FOrienteeringRandomTrackData");
static_assert(offsetof(FOrienteeringRandomTrackData, TrackID) == 0x000008, "Member 'FOrienteeringRandomTrackData::TrackID' has a wrong offset!");
static_assert(offsetof(FOrienteeringRandomTrackData, ItemID) == 0x000010, "Member 'FOrienteeringRandomTrackData::ItemID' has a wrong offset!");
static_assert(offsetof(FOrienteeringRandomTrackData, ItemAmount) == 0x000018, "Member 'FOrienteeringRandomTrackData::ItemAmount' has a wrong offset!");
static_assert(offsetof(FOrienteeringRandomTrackData, Count) == 0x00001C, "Member 'FOrienteeringRandomTrackData::Count' has a wrong offset!");

// ScriptStruct QRSL.OrienteeringTestMapsData
// 0x0070 (0x0070 - 0x0000)
struct FOrienteeringTestMapsData final
{
public:
	class FString                                 MapName;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             TransferLoc;                                       // 0x0010(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             CancelTransferLoc;                                 // 0x0040(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOrienteeringTestMapsData) == 0x000010, "Wrong alignment on FOrienteeringTestMapsData");
static_assert(sizeof(FOrienteeringTestMapsData) == 0x000070, "Wrong size on FOrienteeringTestMapsData");
static_assert(offsetof(FOrienteeringTestMapsData, MapName) == 0x000000, "Member 'FOrienteeringTestMapsData::MapName' has a wrong offset!");
static_assert(offsetof(FOrienteeringTestMapsData, TransferLoc) == 0x000010, "Member 'FOrienteeringTestMapsData::TransferLoc' has a wrong offset!");
static_assert(offsetof(FOrienteeringTestMapsData, CancelTransferLoc) == 0x000040, "Member 'FOrienteeringTestMapsData::CancelTransferLoc' has a wrong offset!");

// ScriptStruct QRSL.ThemeActivityCookingData
// 0x0028 (0x0030 - 0x0008)
struct FThemeActivityCookingData final : public FTableRowBase
{
public:
	class FName                                   FoodItemID;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InRecipeID;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedNum;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E61[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAwardInfo>                     Awards;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FThemeActivityCookingData) == 0x000008, "Wrong alignment on FThemeActivityCookingData");
static_assert(sizeof(FThemeActivityCookingData) == 0x000030, "Wrong size on FThemeActivityCookingData");
static_assert(offsetof(FThemeActivityCookingData, FoodItemID) == 0x000008, "Member 'FThemeActivityCookingData::FoodItemID' has a wrong offset!");
static_assert(offsetof(FThemeActivityCookingData, InRecipeID) == 0x000010, "Member 'FThemeActivityCookingData::InRecipeID' has a wrong offset!");
static_assert(offsetof(FThemeActivityCookingData, NeedNum) == 0x000018, "Member 'FThemeActivityCookingData::NeedNum' has a wrong offset!");
static_assert(offsetof(FThemeActivityCookingData, Awards) == 0x000020, "Member 'FThemeActivityCookingData::Awards' has a wrong offset!");

// ScriptStruct QRSL.DishActiveStar
// 0x0008 (0x0008 - 0x0000)
struct FDishActiveStar final
{
public:
	int32                                         Star;                                              // 0x0000(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x0004(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E62[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDishActiveStar) == 0x000004, "Wrong alignment on FDishActiveStar");
static_assert(sizeof(FDishActiveStar) == 0x000008, "Wrong size on FDishActiveStar");
static_assert(offsetof(FDishActiveStar, Star) == 0x000000, "Member 'FDishActiveStar::Star' has a wrong offset!");
static_assert(offsetof(FDishActiveStar, bActive) == 0x000004, "Member 'FDishActiveStar::bActive' has a wrong offset!");

// ScriptStruct QRSL.CookingSlot
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FCookingSlot final
{
public:
	uint8                                         Pad_1E63[0x10];                                    // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCookingSlot) == 0x000004, "Wrong alignment on FCookingSlot");
static_assert(sizeof(FCookingSlot) == 0x000010, "Wrong size on FCookingSlot");

// ScriptStruct QRSL.BlackIngredientData
// 0x0014 (0x0014 - 0x0000)
struct FBlackIngredientData final
{
public:
	float                                         DecreaseProbability;                               // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecreaseBuffTimeScale;                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IncreaseBuffTimeScale;                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToolChangeScaleMin;                                // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToolChangeScaleMax;                                // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlackIngredientData) == 0x000004, "Wrong alignment on FBlackIngredientData");
static_assert(sizeof(FBlackIngredientData) == 0x000014, "Wrong size on FBlackIngredientData");
static_assert(offsetof(FBlackIngredientData, DecreaseProbability) == 0x000000, "Member 'FBlackIngredientData::DecreaseProbability' has a wrong offset!");
static_assert(offsetof(FBlackIngredientData, DecreaseBuffTimeScale) == 0x000004, "Member 'FBlackIngredientData::DecreaseBuffTimeScale' has a wrong offset!");
static_assert(offsetof(FBlackIngredientData, IncreaseBuffTimeScale) == 0x000008, "Member 'FBlackIngredientData::IncreaseBuffTimeScale' has a wrong offset!");
static_assert(offsetof(FBlackIngredientData, ToolChangeScaleMin) == 0x00000C, "Member 'FBlackIngredientData::ToolChangeScaleMin' has a wrong offset!");
static_assert(offsetof(FBlackIngredientData, ToolChangeScaleMax) == 0x000010, "Member 'FBlackIngredientData::ToolChangeScaleMax' has a wrong offset!");

// ScriptStruct QRSL.WormholePlayerPickBuffSeedData
// 0x0010 (0x0018 - 0x0008)
struct FWormholePlayerPickBuffSeedData final : public FTableRowBase
{
public:
	class FName                                   RuneID;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E64[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWormholePlayerPickBuffSeedData) == 0x000008, "Wrong alignment on FWormholePlayerPickBuffSeedData");
static_assert(sizeof(FWormholePlayerPickBuffSeedData) == 0x000018, "Wrong size on FWormholePlayerPickBuffSeedData");
static_assert(offsetof(FWormholePlayerPickBuffSeedData, RuneID) == 0x000008, "Member 'FWormholePlayerPickBuffSeedData::RuneID' has a wrong offset!");
static_assert(offsetof(FWormholePlayerPickBuffSeedData, Weight) == 0x000010, "Member 'FWormholePlayerPickBuffSeedData::Weight' has a wrong offset!");

// ScriptStruct QRSL.WormholeMonstersPoolMonsterData
// 0x0030 (0x0030 - 0x0000)
struct FWormholeMonstersPoolMonsterData final
{
public:
	TSoftClassPtr<class UClass>                   MonsterClass;                                      // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenerationAmount;                                  // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholeMonstersPoolMonsterData) == 0x000008, "Wrong alignment on FWormholeMonstersPoolMonsterData");
static_assert(sizeof(FWormholeMonstersPoolMonsterData) == 0x000030, "Wrong size on FWormholeMonstersPoolMonsterData");
static_assert(offsetof(FWormholeMonstersPoolMonsterData, MonsterClass) == 0x000000, "Member 'FWormholeMonstersPoolMonsterData::MonsterClass' has a wrong offset!");
static_assert(offsetof(FWormholeMonstersPoolMonsterData, GenerationAmount) == 0x000028, "Member 'FWormholeMonstersPoolMonsterData::GenerationAmount' has a wrong offset!");
static_assert(offsetof(FWormholeMonstersPoolMonsterData, Weight) == 0x00002C, "Member 'FWormholeMonstersPoolMonsterData::Weight' has a wrong offset!");

// ScriptStruct QRSL.WormholeMonstersPoolSeedData
// 0x0010 (0x0018 - 0x0008)
struct FWormholeMonstersPoolSeedData final : public FTableRowBase
{
public:
	class FName                                   MonsterId;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MonstersAmount;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E65[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWormholeMonstersPoolSeedData) == 0x000008, "Wrong alignment on FWormholeMonstersPoolSeedData");
static_assert(sizeof(FWormholeMonstersPoolSeedData) == 0x000018, "Wrong size on FWormholeMonstersPoolSeedData");
static_assert(offsetof(FWormholeMonstersPoolSeedData, MonsterId) == 0x000008, "Member 'FWormholeMonstersPoolSeedData::MonsterId' has a wrong offset!");
static_assert(offsetof(FWormholeMonstersPoolSeedData, MonstersAmount) == 0x000010, "Member 'FWormholeMonstersPoolSeedData::MonstersAmount' has a wrong offset!");

// ScriptStruct QRSL.WormholeMonsterAdditionBuffSeedData
// 0x0068 (0x0070 - 0x0008)
struct FWormholeMonsterAdditionBuffSeedData final : public FTableRowBase
{
public:
	struct FItemBuffData                          BuffData;                                          // 0x0008(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EWeaponElementType                            WeaknessElement;                                   // 0x0068(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E66[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Weight;                                            // 0x006C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholeMonsterAdditionBuffSeedData) == 0x000008, "Wrong alignment on FWormholeMonsterAdditionBuffSeedData");
static_assert(sizeof(FWormholeMonsterAdditionBuffSeedData) == 0x000070, "Wrong size on FWormholeMonsterAdditionBuffSeedData");
static_assert(offsetof(FWormholeMonsterAdditionBuffSeedData, BuffData) == 0x000008, "Member 'FWormholeMonsterAdditionBuffSeedData::BuffData' has a wrong offset!");
static_assert(offsetof(FWormholeMonsterAdditionBuffSeedData, WeaknessElement) == 0x000068, "Member 'FWormholeMonsterAdditionBuffSeedData::WeaknessElement' has a wrong offset!");
static_assert(offsetof(FWormholeMonsterAdditionBuffSeedData, Weight) == 0x00006C, "Member 'FWormholeMonsterAdditionBuffSeedData::Weight' has a wrong offset!");

// ScriptStruct QRSL.WormholeAwardFragmentWeightData
// 0x000C (0x000C - 0x0000)
struct FWormholeAwardFragmentWeightData final
{
public:
	class FName                                   FragmentID;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholeAwardFragmentWeightData) == 0x000004, "Wrong alignment on FWormholeAwardFragmentWeightData");
static_assert(sizeof(FWormholeAwardFragmentWeightData) == 0x00000C, "Wrong size on FWormholeAwardFragmentWeightData");
static_assert(offsetof(FWormholeAwardFragmentWeightData, FragmentID) == 0x000000, "Member 'FWormholeAwardFragmentWeightData::FragmentID' has a wrong offset!");
static_assert(offsetof(FWormholeAwardFragmentWeightData, Weight) == 0x000008, "Member 'FWormholeAwardFragmentWeightData::Weight' has a wrong offset!");

// ScriptStruct QRSL.WormholeInsideEffectBuffData
// 0x0010 (0x0058 - 0x0048)
struct FWormholeInsideEffectBuffData final : public FWormholeInsideEffectDataBase
{
public:
	TArray<struct FItemBuffData>                  AddedBuffs;                                        // 0x0048(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholeInsideEffectBuffData) == 0x000008, "Wrong alignment on FWormholeInsideEffectBuffData");
static_assert(sizeof(FWormholeInsideEffectBuffData) == 0x000058, "Wrong size on FWormholeInsideEffectBuffData");
static_assert(offsetof(FWormholeInsideEffectBuffData, AddedBuffs) == 0x000048, "Member 'FWormholeInsideEffectBuffData::AddedBuffs' has a wrong offset!");

// ScriptStruct QRSL.DescriptionData
// 0x0068 (0x0070 - 0x0008)
struct FDescriptionData final : public FTableRowBase
{
public:
	class FText                                   Description;                                       // 0x0008(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EHottaOverSeaRegionType, class FText>    Description_Versions;                              // 0x0020(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDescriptionData) == 0x000008, "Wrong alignment on FDescriptionData");
static_assert(sizeof(FDescriptionData) == 0x000070, "Wrong size on FDescriptionData");
static_assert(offsetof(FDescriptionData, Description) == 0x000008, "Member 'FDescriptionData::Description' has a wrong offset!");
static_assert(offsetof(FDescriptionData, Description_Versions) == 0x000020, "Member 'FDescriptionData::Description_Versions' has a wrong offset!");

// ScriptStruct QRSL.ServerStateData
// 0x0040 (0x0048 - 0x0008)
struct FServerStateData final : public FTableRowBase
{
public:
	struct FFloatRange                            PercentRange;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EServerStateType                              ServerStatus;                                      // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E67[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              StateIcon;                                         // 0x0020(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerStateData) == 0x000008, "Wrong alignment on FServerStateData");
static_assert(sizeof(FServerStateData) == 0x000048, "Wrong size on FServerStateData");
static_assert(offsetof(FServerStateData, PercentRange) == 0x000008, "Member 'FServerStateData::PercentRange' has a wrong offset!");
static_assert(offsetof(FServerStateData, ServerStatus) == 0x000018, "Member 'FServerStateData::ServerStatus' has a wrong offset!");
static_assert(offsetof(FServerStateData, StateIcon) == 0x000020, "Member 'FServerStateData::StateIcon' has a wrong offset!");

// ScriptStruct QRSL.TurntableData
// 0x0010 (0x0010 - 0x0000)
struct FTurntableData final
{
public:
	int32                                         FragmentInquireAmount;                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LotteryModule;                                     // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsWeapon;                                          // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E68[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTurntableData) == 0x000004, "Wrong alignment on FTurntableData");
static_assert(sizeof(FTurntableData) == 0x000010, "Wrong size on FTurntableData");
static_assert(offsetof(FTurntableData, FragmentInquireAmount) == 0x000000, "Member 'FTurntableData::FragmentInquireAmount' has a wrong offset!");
static_assert(offsetof(FTurntableData, LotteryModule) == 0x000004, "Member 'FTurntableData::LotteryModule' has a wrong offset!");
static_assert(offsetof(FTurntableData, IsWeapon) == 0x00000C, "Member 'FTurntableData::IsWeapon' has a wrong offset!");

// ScriptStruct QRSL.AttributeChangeInfo
// 0x0028 (0x0028 - 0x0000)
struct FAttributeChangeInfo final
{
public:
	class FName                                   AttributeName;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeValue;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bInOut : 1;                                        // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1E69[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UQRSLUI_AttributeChangeSlot> UITips;                                            // 0x0014(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E6A[0xC];                                     // 0x001C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAttributeChangeInfo) == 0x000004, "Wrong alignment on FAttributeChangeInfo");
static_assert(sizeof(FAttributeChangeInfo) == 0x000028, "Wrong size on FAttributeChangeInfo");
static_assert(offsetof(FAttributeChangeInfo, AttributeName) == 0x000000, "Member 'FAttributeChangeInfo::AttributeName' has a wrong offset!");
static_assert(offsetof(FAttributeChangeInfo, ChangeValue) == 0x000008, "Member 'FAttributeChangeInfo::ChangeValue' has a wrong offset!");
static_assert(offsetof(FAttributeChangeInfo, Duration) == 0x00000C, "Member 'FAttributeChangeInfo::Duration' has a wrong offset!");
static_assert(offsetof(FAttributeChangeInfo, UITips) == 0x000014, "Member 'FAttributeChangeInfo::UITips' has a wrong offset!");

// ScriptStruct QRSL.InventoryInfo
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FInventoryInfo final
{
public:
	uint8                                         Pad_1E6B[0x50];                                    // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInventoryInfo) == 0x000008, "Wrong alignment on FInventoryInfo");
static_assert(sizeof(FInventoryInfo) == 0x000050, "Wrong size on FInventoryInfo");

// ScriptStruct QRSL.BossChannelingProgressParticle
// 0x0018 (0x0018 - 0x0000)
struct FBossChannelingProgressParticle final
{
public:
	float                                         ChannelingProgress;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E6C[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIParticleAsset*                       ParticleAsset;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AkSound;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBossChannelingProgressParticle) == 0x000008, "Wrong alignment on FBossChannelingProgressParticle");
static_assert(sizeof(FBossChannelingProgressParticle) == 0x000018, "Wrong size on FBossChannelingProgressParticle");
static_assert(offsetof(FBossChannelingProgressParticle, ChannelingProgress) == 0x000000, "Member 'FBossChannelingProgressParticle::ChannelingProgress' has a wrong offset!");
static_assert(offsetof(FBossChannelingProgressParticle, ParticleAsset) == 0x000008, "Member 'FBossChannelingProgressParticle::ParticleAsset' has a wrong offset!");
static_assert(offsetof(FBossChannelingProgressParticle, AkSound) == 0x000010, "Member 'FBossChannelingProgressParticle::AkSound' has a wrong offset!");

// ScriptStruct QRSL.HottaBulletScreenHotWord
// 0x0030 (0x0030 - 0x0000)
struct FHottaBulletScreenHotWord final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Sentence;                                          // 0x0018(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHottaBulletScreenHotWord) == 0x000008, "Wrong alignment on FHottaBulletScreenHotWord");
static_assert(sizeof(FHottaBulletScreenHotWord) == 0x000030, "Wrong size on FHottaBulletScreenHotWord");
static_assert(offsetof(FHottaBulletScreenHotWord, Title) == 0x000000, "Member 'FHottaBulletScreenHotWord::Title' has a wrong offset!");
static_assert(offsetof(FHottaBulletScreenHotWord, Sentence) == 0x000018, "Member 'FHottaBulletScreenHotWord::Sentence' has a wrong offset!");

// ScriptStruct QRSL.HottaBulletScreenBarrage
// 0x0020 (0x0020 - 0x0000)
struct FHottaBulletScreenBarrage final
{
public:
	class FText                                   Comment;                                           // 0x0000(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E6D[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHottaBulletScreenBarrage) == 0x000008, "Wrong alignment on FHottaBulletScreenBarrage");
static_assert(sizeof(FHottaBulletScreenBarrage) == 0x000020, "Wrong size on FHottaBulletScreenBarrage");
static_assert(offsetof(FHottaBulletScreenBarrage, Comment) == 0x000000, "Member 'FHottaBulletScreenBarrage::Comment' has a wrong offset!");
static_assert(offsetof(FHottaBulletScreenBarrage, Time) == 0x000018, "Member 'FHottaBulletScreenBarrage::Time' has a wrong offset!");

// ScriptStruct QRSL.HottaBulletScreenRow
// 0x0020 (0x0028 - 0x0008)
struct FHottaBulletScreenRow final : public FTableRowBase
{
public:
	TArray<struct FHottaBulletScreenHotWord>      HotWords;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FHottaBulletScreenBarrage>      Comments;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHottaBulletScreenRow) == 0x000008, "Wrong alignment on FHottaBulletScreenRow");
static_assert(sizeof(FHottaBulletScreenRow) == 0x000028, "Wrong size on FHottaBulletScreenRow");
static_assert(offsetof(FHottaBulletScreenRow, HotWords) == 0x000008, "Member 'FHottaBulletScreenRow::HotWords' has a wrong offset!");
static_assert(offsetof(FHottaBulletScreenRow, Comments) == 0x000018, "Member 'FHottaBulletScreenRow::Comments' has a wrong offset!");

// ScriptStruct QRSL.FruitEffectInfo
// 0x0028 (0x0028 - 0x0000)
struct FFruitEffectInfo final
{
public:
	float                                         DelayTime;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationOffset;                                    // 0x0004(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E6E[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               FruitParticle;                                     // 0x0020(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFruitEffectInfo) == 0x000008, "Wrong alignment on FFruitEffectInfo");
static_assert(sizeof(FFruitEffectInfo) == 0x000028, "Wrong size on FFruitEffectInfo");
static_assert(offsetof(FFruitEffectInfo, DelayTime) == 0x000000, "Member 'FFruitEffectInfo::DelayTime' has a wrong offset!");
static_assert(offsetof(FFruitEffectInfo, LocationOffset) == 0x000004, "Member 'FFruitEffectInfo::LocationOffset' has a wrong offset!");
static_assert(offsetof(FFruitEffectInfo, Scale) == 0x000010, "Member 'FFruitEffectInfo::Scale' has a wrong offset!");
static_assert(offsetof(FFruitEffectInfo, FruitParticle) == 0x000020, "Member 'FFruitEffectInfo::FruitParticle' has a wrong offset!");

// ScriptStruct QRSL.CooperationPlayStatusWidget
// 0x0018 (0x0018 - 0x0000)
struct FCooperationPlayStatusWidget final
{
public:
	class UImage*                                 StatusImage;                                       // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIParticle*                            StatusParticle;                                    // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E6F[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCooperationPlayStatusWidget) == 0x000008, "Wrong alignment on FCooperationPlayStatusWidget");
static_assert(sizeof(FCooperationPlayStatusWidget) == 0x000018, "Wrong size on FCooperationPlayStatusWidget");
static_assert(offsetof(FCooperationPlayStatusWidget, StatusImage) == 0x000000, "Member 'FCooperationPlayStatusWidget::StatusImage' has a wrong offset!");
static_assert(offsetof(FCooperationPlayStatusWidget, StatusParticle) == 0x000008, "Member 'FCooperationPlayStatusWidget::StatusParticle' has a wrong offset!");
static_assert(offsetof(FCooperationPlayStatusWidget, bSuccess) == 0x000010, "Member 'FCooperationPlayStatusWidget::bSuccess' has a wrong offset!");

// ScriptStruct QRSL.DiamondDetectionQuestObjective
// 0x0010 (0x0010 - 0x0000)
struct FDiamondDetectionQuestObjective final
{
public:
	class FName                                   Quest;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ObjectiveID;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDiamondDetectionQuestObjective) == 0x000004, "Wrong alignment on FDiamondDetectionQuestObjective");
static_assert(sizeof(FDiamondDetectionQuestObjective) == 0x000010, "Wrong size on FDiamondDetectionQuestObjective");
static_assert(offsetof(FDiamondDetectionQuestObjective, Quest) == 0x000000, "Member 'FDiamondDetectionQuestObjective::Quest' has a wrong offset!");
static_assert(offsetof(FDiamondDetectionQuestObjective, ObjectiveID) == 0x000008, "Member 'FDiamondDetectionQuestObjective::ObjectiveID' has a wrong offset!");

// ScriptStruct QRSL.CloneWidgetInfo
// 0x0028 (0x0028 - 0x0000)
struct FCloneWidgetInfo final
{
public:
	class FName                                   CloneButton;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CloneImage;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DescriptionButton;                                 // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CloneNameText;                                     // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CompletedImage;                                    // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloneWidgetInfo) == 0x000004, "Wrong alignment on FCloneWidgetInfo");
static_assert(sizeof(FCloneWidgetInfo) == 0x000028, "Wrong size on FCloneWidgetInfo");
static_assert(offsetof(FCloneWidgetInfo, CloneButton) == 0x000000, "Member 'FCloneWidgetInfo::CloneButton' has a wrong offset!");
static_assert(offsetof(FCloneWidgetInfo, CloneImage) == 0x000008, "Member 'FCloneWidgetInfo::CloneImage' has a wrong offset!");
static_assert(offsetof(FCloneWidgetInfo, DescriptionButton) == 0x000010, "Member 'FCloneWidgetInfo::DescriptionButton' has a wrong offset!");
static_assert(offsetof(FCloneWidgetInfo, CloneNameText) == 0x000018, "Member 'FCloneWidgetInfo::CloneNameText' has a wrong offset!");
static_assert(offsetof(FCloneWidgetInfo, CompletedImage) == 0x000020, "Member 'FCloneWidgetInfo::CompletedImage' has a wrong offset!");

// ScriptStruct QRSL.SpeakIcon
// 0x00A0 (0x00A0 - 0x0000)
struct FSpeakIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              Icons[0x4];                                        // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpeakIcon) == 0x000008, "Wrong alignment on FSpeakIcon");
static_assert(sizeof(FSpeakIcon) == 0x0000A0, "Wrong size on FSpeakIcon");
static_assert(offsetof(FSpeakIcon, Icons) == 0x000000, "Member 'FSpeakIcon::Icons' has a wrong offset!");

// ScriptStruct QRSL.GuildMazeBagItemOrder
// 0x000C (0x000C - 0x0000)
struct FGuildMazeBagItemOrder final
{
public:
	class FName                                   ItemID;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Order;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuildMazeBagItemOrder) == 0x000004, "Wrong alignment on FGuildMazeBagItemOrder");
static_assert(sizeof(FGuildMazeBagItemOrder) == 0x00000C, "Wrong size on FGuildMazeBagItemOrder");
static_assert(offsetof(FGuildMazeBagItemOrder, ItemID) == 0x000000, "Member 'FGuildMazeBagItemOrder::ItemID' has a wrong offset!");
static_assert(offsetof(FGuildMazeBagItemOrder, Order) == 0x000008, "Member 'FGuildMazeBagItemOrder::Order' has a wrong offset!");

// ScriptStruct QRSL.TypeMonsterCardArray
// 0x0018 (0x0018 - 0x0000)
struct FTypeMonsterCardArray final
{
public:
	bool                                          bSorted;                                           // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E70[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHottaTamingMonsterCardData>    TamingMonsterArray;                                // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTypeMonsterCardArray) == 0x000008, "Wrong alignment on FTypeMonsterCardArray");
static_assert(sizeof(FTypeMonsterCardArray) == 0x000018, "Wrong size on FTypeMonsterCardArray");
static_assert(offsetof(FTypeMonsterCardArray, bSorted) == 0x000000, "Member 'FTypeMonsterCardArray::bSorted' has a wrong offset!");
static_assert(offsetof(FTypeMonsterCardArray, TamingMonsterArray) == 0x000008, "Member 'FTypeMonsterCardArray::TamingMonsterArray' has a wrong offset!");

// ScriptStruct QRSL.LotteryChooseData
// 0x0028 (0x0028 - 0x0000)
struct FLotteryChooseData final
{
public:
	TSoftObjectPtr<class UTexture2D>              ShowImg;                                           // 0x0000(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLotteryChooseData) == 0x000008, "Wrong alignment on FLotteryChooseData");
static_assert(sizeof(FLotteryChooseData) == 0x000028, "Wrong size on FLotteryChooseData");
static_assert(offsetof(FLotteryChooseData, ShowImg) == 0x000000, "Member 'FLotteryChooseData::ShowImg' has a wrong offset!");

// ScriptStruct QRSL.LotteryTypeInfo
// 0x0038 (0x0038 - 0x0000)
struct FLotteryTypeInfo final
{
public:
	class FName                                   LotteryID;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   LotteryWidget;                                     // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowEntranceInLotteryChoose;                      // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E71[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLotteryTypeInfo) == 0x000008, "Wrong alignment on FLotteryTypeInfo");
static_assert(sizeof(FLotteryTypeInfo) == 0x000038, "Wrong size on FLotteryTypeInfo");
static_assert(offsetof(FLotteryTypeInfo, LotteryID) == 0x000000, "Member 'FLotteryTypeInfo::LotteryID' has a wrong offset!");
static_assert(offsetof(FLotteryTypeInfo, LotteryWidget) == 0x000008, "Member 'FLotteryTypeInfo::LotteryWidget' has a wrong offset!");
static_assert(offsetof(FLotteryTypeInfo, bShowEntranceInLotteryChoose) == 0x000030, "Member 'FLotteryTypeInfo::bShowEntranceInLotteryChoose' has a wrong offset!");

// ScriptStruct QRSL.CurrencyWidgetNode
// 0x0020 (0x0020 - 0x0000)
struct FCurrencyWidgetNode final
{
public:
	class FName                                   ItemID;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHottaCurrencyType                            CurrencyType;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E72[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ShopName;                                          // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BlockID;                                           // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedPlus;                                          // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E73[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCurrencyWidgetNode) == 0x000004, "Wrong alignment on FCurrencyWidgetNode");
static_assert(sizeof(FCurrencyWidgetNode) == 0x000020, "Wrong size on FCurrencyWidgetNode");
static_assert(offsetof(FCurrencyWidgetNode, ItemID) == 0x000000, "Member 'FCurrencyWidgetNode::ItemID' has a wrong offset!");
static_assert(offsetof(FCurrencyWidgetNode, CurrencyType) == 0x000008, "Member 'FCurrencyWidgetNode::CurrencyType' has a wrong offset!");
static_assert(offsetof(FCurrencyWidgetNode, ShopName) == 0x00000C, "Member 'FCurrencyWidgetNode::ShopName' has a wrong offset!");
static_assert(offsetof(FCurrencyWidgetNode, BlockID) == 0x000014, "Member 'FCurrencyWidgetNode::BlockID' has a wrong offset!");
static_assert(offsetof(FCurrencyWidgetNode, NeedPlus) == 0x00001C, "Member 'FCurrencyWidgetNode::NeedPlus' has a wrong offset!");

// ScriptStruct QRSL.LuckyboxOpenInfo
// 0x0010 (0x0010 - 0x0000)
struct FLuckyboxOpenInfo final
{
public:
	TArray<class FText>                           OpenInfos;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLuckyboxOpenInfo) == 0x000008, "Wrong alignment on FLuckyboxOpenInfo");
static_assert(sizeof(FLuckyboxOpenInfo) == 0x000010, "Wrong size on FLuckyboxOpenInfo");
static_assert(offsetof(FLuckyboxOpenInfo, OpenInfos) == 0x000000, "Member 'FLuckyboxOpenInfo::OpenInfos' has a wrong offset!");

// ScriptStruct QRSL.SaleoffRetNode
// 0x0028 (0x0028 - 0x0000)
struct FSaleoffRetNode final
{
public:
	struct FVector2D                              SelfPosition;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Context;                                           // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   ContextWidgetName;                                 // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSaleoffRetNode) == 0x000008, "Wrong alignment on FSaleoffRetNode");
static_assert(sizeof(FSaleoffRetNode) == 0x000028, "Wrong size on FSaleoffRetNode");
static_assert(offsetof(FSaleoffRetNode, SelfPosition) == 0x000000, "Member 'FSaleoffRetNode::SelfPosition' has a wrong offset!");
static_assert(offsetof(FSaleoffRetNode, Context) == 0x000008, "Member 'FSaleoffRetNode::Context' has a wrong offset!");
static_assert(offsetof(FSaleoffRetNode, ContextWidgetName) == 0x000020, "Member 'FSaleoffRetNode::ContextWidgetName' has a wrong offset!");

// ScriptStruct QRSL.PredictInfo
// 0x0010 (0x0010 - 0x0000)
struct FPredictInfo final
{
public:
	TArray<class FText>                           PredictInfos;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPredictInfo) == 0x000008, "Wrong alignment on FPredictInfo");
static_assert(sizeof(FPredictInfo) == 0x000010, "Wrong size on FPredictInfo");
static_assert(offsetof(FPredictInfo, PredictInfos) == 0x000000, "Member 'FPredictInfo::PredictInfos' has a wrong offset!");

// ScriptStruct QRSL.LuckySaleOffInfo
// 0x0030 (0x0030 - 0x0000)
struct FLuckySaleOffInfo final
{
public:
	class FText                                   SaleoffTitle;                                      // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   SaleoffDesc;                                       // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLuckySaleOffInfo) == 0x000008, "Wrong alignment on FLuckySaleOffInfo");
static_assert(sizeof(FLuckySaleOffInfo) == 0x000030, "Wrong size on FLuckySaleOffInfo");
static_assert(offsetof(FLuckySaleOffInfo, SaleoffTitle) == 0x000000, "Member 'FLuckySaleOffInfo::SaleoffTitle' has a wrong offset!");
static_assert(offsetof(FLuckySaleOffInfo, SaleoffDesc) == 0x000018, "Member 'FLuckySaleOffInfo::SaleoffDesc' has a wrong offset!");

// ScriptStruct QRSL.SaleoffLeftTimeData
// 0x0018 (0x0018 - 0x0000)
struct FSaleoffLeftTimeData final
{
public:
	class FName                                   TextWidgetName;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CanvasWidgetName;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SaleoffWidgetName;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSaleoffLeftTimeData) == 0x000004, "Wrong alignment on FSaleoffLeftTimeData");
static_assert(sizeof(FSaleoffLeftTimeData) == 0x000018, "Wrong size on FSaleoffLeftTimeData");
static_assert(offsetof(FSaleoffLeftTimeData, TextWidgetName) == 0x000000, "Member 'FSaleoffLeftTimeData::TextWidgetName' has a wrong offset!");
static_assert(offsetof(FSaleoffLeftTimeData, CanvasWidgetName) == 0x000008, "Member 'FSaleoffLeftTimeData::CanvasWidgetName' has a wrong offset!");
static_assert(offsetof(FSaleoffLeftTimeData, SaleoffWidgetName) == 0x000010, "Member 'FSaleoffLeftTimeData::SaleoffWidgetName' has a wrong offset!");

// ScriptStruct QRSL.ActivityNameComp
// 0x0018 (0x0018 - 0x0000)
struct FActivityNameComp final
{
public:
	class FName                                   TextBlockName;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UnlockID;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             TextBlockPtr;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActivityNameComp) == 0x000008, "Wrong alignment on FActivityNameComp");
static_assert(sizeof(FActivityNameComp) == 0x000018, "Wrong size on FActivityNameComp");
static_assert(offsetof(FActivityNameComp, TextBlockName) == 0x000000, "Member 'FActivityNameComp::TextBlockName' has a wrong offset!");
static_assert(offsetof(FActivityNameComp, UnlockID) == 0x000008, "Member 'FActivityNameComp::UnlockID' has a wrong offset!");
static_assert(offsetof(FActivityNameComp, TextBlockPtr) == 0x000010, "Member 'FActivityNameComp::TextBlockPtr' has a wrong offset!");

// ScriptStruct QRSL.MakeupIcon
// 0x0038 (0x0038 - 0x0000)
struct FMakeupIcon final
{
public:
	float                                         IconSize;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E74[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   SoftClass;                                         // 0x0008(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsColorIcon : 1;                                  // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1E75[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMakeupIcon) == 0x000008, "Wrong alignment on FMakeupIcon");
static_assert(sizeof(FMakeupIcon) == 0x000038, "Wrong size on FMakeupIcon");
static_assert(offsetof(FMakeupIcon, IconSize) == 0x000000, "Member 'FMakeupIcon::IconSize' has a wrong offset!");
static_assert(offsetof(FMakeupIcon, SoftClass) == 0x000008, "Member 'FMakeupIcon::SoftClass' has a wrong offset!");

// ScriptStruct QRSL.FaceShapePartInfo
// 0x0110 (0x0110 - 0x0000)
struct FFaceShapePartInfo final
{
public:
	struct FSlateBrush                            CheckedBrush;                                      // 0x0000(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            UnCheckedBrush;                                    // 0x0088(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFaceShapePartInfo) == 0x000008, "Wrong alignment on FFaceShapePartInfo");
static_assert(sizeof(FFaceShapePartInfo) == 0x000110, "Wrong size on FFaceShapePartInfo");
static_assert(offsetof(FFaceShapePartInfo, CheckedBrush) == 0x000000, "Member 'FFaceShapePartInfo::CheckedBrush' has a wrong offset!");
static_assert(offsetof(FFaceShapePartInfo, UnCheckedBrush) == 0x000088, "Member 'FFaceShapePartInfo::UnCheckedBrush' has a wrong offset!");

// ScriptStruct QRSL.MakeupBase
// 0x0038 (0x0038 - 0x0000)
struct FMakeupBase final
{
public:
	TSoftClassPtr<class UClass>                   MakeupBaseClass;                                   // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bShowTipInfo : 1;                                  // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1E76[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              TipPanelPosition;                                  // 0x002C(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E77[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMakeupBase) == 0x000008, "Wrong alignment on FMakeupBase");
static_assert(sizeof(FMakeupBase) == 0x000038, "Wrong size on FMakeupBase");
static_assert(offsetof(FMakeupBase, MakeupBaseClass) == 0x000000, "Member 'FMakeupBase::MakeupBaseClass' has a wrong offset!");
static_assert(offsetof(FMakeupBase, TipPanelPosition) == 0x00002C, "Member 'FMakeupBase::TipPanelPosition' has a wrong offset!");

// ScriptStruct QRSL.MenuLevelObjectData
// 0x0010 (0x0010 - 0x0000)
struct FMenuLevelObjectData final
{
public:
	TArray<class UQRSLUI_MenuItem*>               MenuItemWidgets;                                   // 0x0000(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMenuLevelObjectData) == 0x000008, "Wrong alignment on FMenuLevelObjectData");
static_assert(sizeof(FMenuLevelObjectData) == 0x000010, "Wrong size on FMenuLevelObjectData");
static_assert(offsetof(FMenuLevelObjectData, MenuItemWidgets) == 0x000000, "Member 'FMenuLevelObjectData::MenuItemWidgets' has a wrong offset!");

// ScriptStruct QRSL.UIMessageData
// 0x0020 (0x0020 - 0x0000)
struct FUIMessageData final
{
public:
	class FText                                   MessageText;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EUIMessageEffectType                          EffectType;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E78[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUIMessageData) == 0x000008, "Wrong alignment on FUIMessageData");
static_assert(sizeof(FUIMessageData) == 0x000020, "Wrong size on FUIMessageData");
static_assert(offsetof(FUIMessageData, MessageText) == 0x000000, "Member 'FUIMessageData::MessageText' has a wrong offset!");
static_assert(offsetof(FUIMessageData, EffectType) == 0x000018, "Member 'FUIMessageData::EffectType' has a wrong offset!");

// ScriptStruct QRSL.SystemMessage
// 0x0010 (0x0010 - 0x0000)
struct FSystemMessage final
{
public:
	class UQRSLUI_MessageItem*                    ItemWidget;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedSeconds;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E79[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSystemMessage) == 0x000008, "Wrong alignment on FSystemMessage");
static_assert(sizeof(FSystemMessage) == 0x000010, "Wrong size on FSystemMessage");
static_assert(offsetof(FSystemMessage, ItemWidget) == 0x000000, "Member 'FSystemMessage::ItemWidget' has a wrong offset!");
static_assert(offsetof(FSystemMessage, ElapsedSeconds) == 0x000008, "Member 'FSystemMessage::ElapsedSeconds' has a wrong offset!");

// ScriptStruct QRSL.MiniGameCategoryInfo
// 0x0038 (0x0038 - 0x0000)
struct FMiniGameCategoryInfo final
{
public:
	class FName                                   GameType;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReqShowSign;                                    // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReqShowFinishSign;                              // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E7A[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              IntroducePhoto;                                    // 0x0010(0x0028)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMiniGameCategoryInfo) == 0x000008, "Wrong alignment on FMiniGameCategoryInfo");
static_assert(sizeof(FMiniGameCategoryInfo) == 0x000038, "Wrong size on FMiniGameCategoryInfo");
static_assert(offsetof(FMiniGameCategoryInfo, GameType) == 0x000000, "Member 'FMiniGameCategoryInfo::GameType' has a wrong offset!");
static_assert(offsetof(FMiniGameCategoryInfo, bIsReqShowSign) == 0x000008, "Member 'FMiniGameCategoryInfo::bIsReqShowSign' has a wrong offset!");
static_assert(offsetof(FMiniGameCategoryInfo, bIsReqShowFinishSign) == 0x000009, "Member 'FMiniGameCategoryInfo::bIsReqShowFinishSign' has a wrong offset!");
static_assert(offsetof(FMiniGameCategoryInfo, IntroducePhoto) == 0x000010, "Member 'FMiniGameCategoryInfo::IntroducePhoto' has a wrong offset!");

// ScriptStruct QRSL.MiniGameTodayInfo
// 0x0058 (0x0058 - 0x0000)
struct FMiniGameTodayInfo final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlayed;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E7B[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IntroducePhoto;                                    // 0x0028(0x0028)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E7C[0x8];                                     // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMiniGameTodayInfo) == 0x000008, "Wrong alignment on FMiniGameTodayInfo");
static_assert(sizeof(FMiniGameTodayInfo) == 0x000058, "Wrong size on FMiniGameTodayInfo");
static_assert(offsetof(FMiniGameTodayInfo, ID) == 0x000000, "Member 'FMiniGameTodayInfo::ID' has a wrong offset!");
static_assert(offsetof(FMiniGameTodayInfo, bIsPlayed) == 0x000008, "Member 'FMiniGameTodayInfo::bIsPlayed' has a wrong offset!");
static_assert(offsetof(FMiniGameTodayInfo, Name) == 0x000010, "Member 'FMiniGameTodayInfo::Name' has a wrong offset!");
static_assert(offsetof(FMiniGameTodayInfo, IntroducePhoto) == 0x000028, "Member 'FMiniGameTodayInfo::IntroducePhoto' has a wrong offset!");

// ScriptStruct QRSL.MonsterQTEParam
// 0x002C (0x002C - 0x0000)
struct FMonsterQTEParam final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterQTEMode                               ResponseMode;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E7D[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ResponseParentName;                                // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResponseBtnName;                                   // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProtectTime;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MultiClickMinInterval;                             // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MultiClickMaxInterval;                             // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MultiClickSuccessCount;                            // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMonsterQTEParam) == 0x000004, "Wrong alignment on FMonsterQTEParam");
static_assert(sizeof(FMonsterQTEParam) == 0x00002C, "Wrong size on FMonsterQTEParam");
static_assert(offsetof(FMonsterQTEParam, ActionName) == 0x000000, "Member 'FMonsterQTEParam::ActionName' has a wrong offset!");
static_assert(offsetof(FMonsterQTEParam, ResponseMode) == 0x000008, "Member 'FMonsterQTEParam::ResponseMode' has a wrong offset!");
static_assert(offsetof(FMonsterQTEParam, ResponseParentName) == 0x00000C, "Member 'FMonsterQTEParam::ResponseParentName' has a wrong offset!");
static_assert(offsetof(FMonsterQTEParam, ResponseBtnName) == 0x000014, "Member 'FMonsterQTEParam::ResponseBtnName' has a wrong offset!");
static_assert(offsetof(FMonsterQTEParam, ProtectTime) == 0x00001C, "Member 'FMonsterQTEParam::ProtectTime' has a wrong offset!");
static_assert(offsetof(FMonsterQTEParam, MultiClickMinInterval) == 0x000020, "Member 'FMonsterQTEParam::MultiClickMinInterval' has a wrong offset!");
static_assert(offsetof(FMonsterQTEParam, MultiClickMaxInterval) == 0x000024, "Member 'FMonsterQTEParam::MultiClickMaxInterval' has a wrong offset!");
static_assert(offsetof(FMonsterQTEParam, MultiClickSuccessCount) == 0x000028, "Member 'FMonsterQTEParam::MultiClickSuccessCount' has a wrong offset!");

// ScriptStruct QRSL.NetErrorCategoryInfo
// 0x0010 (0x0010 - 0x0000)
struct FNetErrorCategoryInfo final
{
public:
	TArray<struct FInt32Range>                    ErrCodeRange;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetErrorCategoryInfo) == 0x000008, "Wrong alignment on FNetErrorCategoryInfo");
static_assert(sizeof(FNetErrorCategoryInfo) == 0x000010, "Wrong size on FNetErrorCategoryInfo");
static_assert(offsetof(FNetErrorCategoryInfo, ErrCodeRange) == 0x000000, "Member 'FNetErrorCategoryInfo::ErrCodeRange' has a wrong offset!");

// ScriptStruct QRSL.NewWeaponTypeTipData
// 0x0098 (0x00A0 - 0x0008)
struct FNewWeaponTypeTipData final : public FTableRowBase
{
public:
	class FName                                   WeaponID;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeaponType                                   WeaponType;                                        // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E7E[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   MatchWeapon;                                       // 0x0018(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   WeaponCombo;                                       // 0x0030(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Trait;                                             // 0x0048(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ItemIcon;                                          // 0x0060(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ItemTypeName;                                      // 0x0088(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNewWeaponTypeTipData) == 0x000008, "Wrong alignment on FNewWeaponTypeTipData");
static_assert(sizeof(FNewWeaponTypeTipData) == 0x0000A0, "Wrong size on FNewWeaponTypeTipData");
static_assert(offsetof(FNewWeaponTypeTipData, WeaponID) == 0x000008, "Member 'FNewWeaponTypeTipData::WeaponID' has a wrong offset!");
static_assert(offsetof(FNewWeaponTypeTipData, WeaponType) == 0x000010, "Member 'FNewWeaponTypeTipData::WeaponType' has a wrong offset!");
static_assert(offsetof(FNewWeaponTypeTipData, MatchWeapon) == 0x000018, "Member 'FNewWeaponTypeTipData::MatchWeapon' has a wrong offset!");
static_assert(offsetof(FNewWeaponTypeTipData, WeaponCombo) == 0x000030, "Member 'FNewWeaponTypeTipData::WeaponCombo' has a wrong offset!");
static_assert(offsetof(FNewWeaponTypeTipData, Trait) == 0x000048, "Member 'FNewWeaponTypeTipData::Trait' has a wrong offset!");
static_assert(offsetof(FNewWeaponTypeTipData, ItemIcon) == 0x000060, "Member 'FNewWeaponTypeTipData::ItemIcon' has a wrong offset!");
static_assert(offsetof(FNewWeaponTypeTipData, ItemTypeName) == 0x000088, "Member 'FNewWeaponTypeTipData::ItemTypeName' has a wrong offset!");

// ScriptStruct QRSL.PersonalityScoreScaleData
// 0x0008 (0x0008 - 0x0000)
struct FPersonalityScoreScaleData final
{
public:
	int32                                         Score;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPersonalityScoreScaleData) == 0x000004, "Wrong alignment on FPersonalityScoreScaleData");
static_assert(sizeof(FPersonalityScoreScaleData) == 0x000008, "Wrong size on FPersonalityScoreScaleData");
static_assert(offsetof(FPersonalityScoreScaleData, Score) == 0x000000, "Member 'FPersonalityScoreScaleData::Score' has a wrong offset!");
static_assert(offsetof(FPersonalityScoreScaleData, Scale) == 0x000004, "Member 'FPersonalityScoreScaleData::Scale' has a wrong offset!");

// ScriptStruct QRSL.PersonalityScoreSlotAnimData
// 0x0020 (0x0020 - 0x0000)
struct FPersonalityScoreSlotAnimData final
{
public:
	class FString                                 WidgetName;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AnimName;                                          // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPersonalityScoreSlotAnimData) == 0x000008, "Wrong alignment on FPersonalityScoreSlotAnimData");
static_assert(sizeof(FPersonalityScoreSlotAnimData) == 0x000020, "Wrong size on FPersonalityScoreSlotAnimData");
static_assert(offsetof(FPersonalityScoreSlotAnimData, WidgetName) == 0x000000, "Member 'FPersonalityScoreSlotAnimData::WidgetName' has a wrong offset!");
static_assert(offsetof(FPersonalityScoreSlotAnimData, AnimName) == 0x000010, "Member 'FPersonalityScoreSlotAnimData::AnimName' has a wrong offset!");

// ScriptStruct QRSL.PlayerBaseInfo
// 0x0110 (0x0110 - 0x0000)
struct FPlayerBaseInfo final
{
public:
	struct FUniqueNetIdRepl                       UniqueId;                                          // 0x0000(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoleName;                                          // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RoleLevel;                                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E7F[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AvatarID;                                          // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarFrameID;                                     // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TeamID;                                            // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuildUniqueId                         GuildUID;                                          // 0x0070(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 GuildName;                                         // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuildPost                                    GuildPost;                                         // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAcceptFriendInvite;                               // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideBattleScore;                                  // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E80[0x5];                                     // 0x008B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RoleNameReportID;                                  // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuildNameReportID;                                 // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RoleTotalRecharge;                                 // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HistoryMaxGS;                                      // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E81[0x58];                                    // 0x00B8(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerBaseInfo) == 0x000008, "Wrong alignment on FPlayerBaseInfo");
static_assert(sizeof(FPlayerBaseInfo) == 0x000110, "Wrong size on FPlayerBaseInfo");
static_assert(offsetof(FPlayerBaseInfo, UniqueId) == 0x000000, "Member 'FPlayerBaseInfo::UniqueId' has a wrong offset!");
static_assert(offsetof(FPlayerBaseInfo, RoleName) == 0x000028, "Member 'FPlayerBaseInfo::RoleName' has a wrong offset!");
static_assert(offsetof(FPlayerBaseInfo, RoleLevel) == 0x000038, "Member 'FPlayerBaseInfo::RoleLevel' has a wrong offset!");
static_assert(offsetof(FPlayerBaseInfo, AvatarID) == 0x000040, "Member 'FPlayerBaseInfo::AvatarID' has a wrong offset!");
static_assert(offsetof(FPlayerBaseInfo, AvatarFrameID) == 0x000050, "Member 'FPlayerBaseInfo::AvatarFrameID' has a wrong offset!");
static_assert(offsetof(FPlayerBaseInfo, TeamID) == 0x000060, "Member 'FPlayerBaseInfo::TeamID' has a wrong offset!");
static_assert(offsetof(FPlayerBaseInfo, GuildUID) == 0x000070, "Member 'FPlayerBaseInfo::GuildUID' has a wrong offset!");
static_assert(offsetof(FPlayerBaseInfo, GuildName) == 0x000078, "Member 'FPlayerBaseInfo::GuildName' has a wrong offset!");
static_assert(offsetof(FPlayerBaseInfo, GuildPost) == 0x000088, "Member 'FPlayerBaseInfo::GuildPost' has a wrong offset!");
static_assert(offsetof(FPlayerBaseInfo, bAcceptFriendInvite) == 0x000089, "Member 'FPlayerBaseInfo::bAcceptFriendInvite' has a wrong offset!");
static_assert(offsetof(FPlayerBaseInfo, bHideBattleScore) == 0x00008A, "Member 'FPlayerBaseInfo::bHideBattleScore' has a wrong offset!");
static_assert(offsetof(FPlayerBaseInfo, RoleNameReportID) == 0x000090, "Member 'FPlayerBaseInfo::RoleNameReportID' has a wrong offset!");
static_assert(offsetof(FPlayerBaseInfo, GuildNameReportID) == 0x0000A0, "Member 'FPlayerBaseInfo::GuildNameReportID' has a wrong offset!");
static_assert(offsetof(FPlayerBaseInfo, RoleTotalRecharge) == 0x0000B0, "Member 'FPlayerBaseInfo::RoleTotalRecharge' has a wrong offset!");
static_assert(offsetof(FPlayerBaseInfo, HistoryMaxGS) == 0x0000B4, "Member 'FPlayerBaseInfo::HistoryMaxGS' has a wrong offset!");

// ScriptStruct QRSL.PublicBetaActivityInfo
// 0x0048 (0x0050 - 0x0008)
struct FPublicBetaActivityInfo final : public FTableRowBase
{
public:
	int32                                         Status;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E82[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ActivityId;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActivityName;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PrizeNameInfo;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPublicBetaGiftInfo>            GiftInfo;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPublicBetaActivityInfo) == 0x000008, "Wrong alignment on FPublicBetaActivityInfo");
static_assert(sizeof(FPublicBetaActivityInfo) == 0x000050, "Wrong size on FPublicBetaActivityInfo");
static_assert(offsetof(FPublicBetaActivityInfo, Status) == 0x000008, "Member 'FPublicBetaActivityInfo::Status' has a wrong offset!");
static_assert(offsetof(FPublicBetaActivityInfo, ActivityId) == 0x000010, "Member 'FPublicBetaActivityInfo::ActivityId' has a wrong offset!");
static_assert(offsetof(FPublicBetaActivityInfo, ActivityName) == 0x000020, "Member 'FPublicBetaActivityInfo::ActivityName' has a wrong offset!");
static_assert(offsetof(FPublicBetaActivityInfo, PrizeNameInfo) == 0x000030, "Member 'FPublicBetaActivityInfo::PrizeNameInfo' has a wrong offset!");
static_assert(offsetof(FPublicBetaActivityInfo, GiftInfo) == 0x000040, "Member 'FPublicBetaActivityInfo::GiftInfo' has a wrong offset!");

// ScriptStruct QRSL.QueryPubDataFormCell
// 0x0008 (0x0008 - 0x0000)
struct FQueryPubDataFormCell final
{
public:
	class UTextBlock*                             Content;                                           // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQueryPubDataFormCell) == 0x000008, "Wrong alignment on FQueryPubDataFormCell");
static_assert(sizeof(FQueryPubDataFormCell) == 0x000008, "Wrong size on FQueryPubDataFormCell");
static_assert(offsetof(FQueryPubDataFormCell, Content) == 0x000000, "Member 'FQueryPubDataFormCell::Content' has a wrong offset!");

// ScriptStruct QRSL.QueryPubDataFormColData
// 0x0010 (0x0010 - 0x0000)
struct FQueryPubDataFormColData final
{
public:
	TArray<struct FQueryPubDataFormCell>          Rows;                                              // 0x0000(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQueryPubDataFormColData) == 0x000008, "Wrong alignment on FQueryPubDataFormColData");
static_assert(sizeof(FQueryPubDataFormColData) == 0x000010, "Wrong size on FQueryPubDataFormColData");
static_assert(offsetof(FQueryPubDataFormColData, Rows) == 0x000000, "Member 'FQueryPubDataFormColData::Rows' has a wrong offset!");

// ScriptStruct QRSL.ComboTriggerSectionDataList
// 0x0018 (0x0018 - 0x0000)
struct FComboTriggerSectionDataList final
{
public:
	class FName                                   SetpPanelName;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FComboTriggerSectionData>       SetpList;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComboTriggerSectionDataList) == 0x000008, "Wrong alignment on FComboTriggerSectionDataList");
static_assert(sizeof(FComboTriggerSectionDataList) == 0x000018, "Wrong size on FComboTriggerSectionDataList");
static_assert(offsetof(FComboTriggerSectionDataList, SetpPanelName) == 0x000000, "Member 'FComboTriggerSectionDataList::SetpPanelName' has a wrong offset!");
static_assert(offsetof(FComboTriggerSectionDataList, SetpList) == 0x000008, "Member 'FComboTriggerSectionDataList::SetpList' has a wrong offset!");

// ScriptStruct QRSL.QuestMessageStruct
// 0x0038 (0x0038 - 0x0000)
struct FQuestMessageStruct final
{
public:
	class FText                                   QuestName;                                         // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	class FText                                   QuestState;                                        // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	EQuestMesssageType                            QuestMessageType;                                  // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E83[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuestMessageStruct) == 0x000008, "Wrong alignment on FQuestMessageStruct");
static_assert(sizeof(FQuestMessageStruct) == 0x000038, "Wrong size on FQuestMessageStruct");
static_assert(offsetof(FQuestMessageStruct, QuestName) == 0x000000, "Member 'FQuestMessageStruct::QuestName' has a wrong offset!");
static_assert(offsetof(FQuestMessageStruct, QuestState) == 0x000018, "Member 'FQuestMessageStruct::QuestState' has a wrong offset!");
static_assert(offsetof(FQuestMessageStruct, QuestMessageType) == 0x000030, "Member 'FQuestMessageStruct::QuestMessageType' has a wrong offset!");

// ScriptStruct QRSL.QuestData
// 0x0030 (0x0030 - 0x0000)
struct FQuestData final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QuestID;                                           // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E84[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   QuestName;                                         // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EQRSLQuestStatus                              QuestStatus;                                       // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E85[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuestData) == 0x000008, "Wrong alignment on FQuestData");
static_assert(sizeof(FQuestData) == 0x000030, "Wrong size on FQuestData");
static_assert(offsetof(FQuestData, TeamIndex) == 0x000000, "Member 'FQuestData::TeamIndex' has a wrong offset!");
static_assert(offsetof(FQuestData, QuestID) == 0x000004, "Member 'FQuestData::QuestID' has a wrong offset!");
static_assert(offsetof(FQuestData, QuestName) == 0x000010, "Member 'FQuestData::QuestName' has a wrong offset!");
static_assert(offsetof(FQuestData, QuestStatus) == 0x000028, "Member 'FQuestData::QuestStatus' has a wrong offset!");

// ScriptStruct QRSL.QuestListData
// 0x0030 (0x0030 - 0x0000)
struct FQuestListData final
{
public:
	class FName                                   TeamID;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TeamName;                                          // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FQuestData>                     QuestList;                                         // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestListData) == 0x000008, "Wrong alignment on FQuestListData");
static_assert(sizeof(FQuestListData) == 0x000030, "Wrong size on FQuestListData");
static_assert(offsetof(FQuestListData, TeamID) == 0x000000, "Member 'FQuestListData::TeamID' has a wrong offset!");
static_assert(offsetof(FQuestListData, TeamName) == 0x000008, "Member 'FQuestListData::TeamName' has a wrong offset!");
static_assert(offsetof(FQuestListData, QuestList) == 0x000020, "Member 'FQuestListData::QuestList' has a wrong offset!");

// ScriptStruct QRSL.RankColTextColor
// 0x00F0 (0x00F0 - 0x0000)
struct FRankColTextColor final
{
public:
	struct FSlateColor                            TextRankIdx;                                       // 0x0000(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateColor                            TextRank_1;                                        // 0x0028(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateColor                            TextRankCol1;                                      // 0x0050(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateColor                            TextRankCol2;                                      // 0x0078(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateColor                            TextRankCol3;                                      // 0x00A0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateColor                            TextRankCol4;                                      // 0x00C8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankColTextColor) == 0x000008, "Wrong alignment on FRankColTextColor");
static_assert(sizeof(FRankColTextColor) == 0x0000F0, "Wrong size on FRankColTextColor");
static_assert(offsetof(FRankColTextColor, TextRankIdx) == 0x000000, "Member 'FRankColTextColor::TextRankIdx' has a wrong offset!");
static_assert(offsetof(FRankColTextColor, TextRank_1) == 0x000028, "Member 'FRankColTextColor::TextRank_1' has a wrong offset!");
static_assert(offsetof(FRankColTextColor, TextRankCol1) == 0x000050, "Member 'FRankColTextColor::TextRankCol1' has a wrong offset!");
static_assert(offsetof(FRankColTextColor, TextRankCol2) == 0x000078, "Member 'FRankColTextColor::TextRankCol2' has a wrong offset!");
static_assert(offsetof(FRankColTextColor, TextRankCol3) == 0x0000A0, "Member 'FRankColTextColor::TextRankCol3' has a wrong offset!");
static_assert(offsetof(FRankColTextColor, TextRankCol4) == 0x0000C8, "Member 'FRankColTextColor::TextRankCol4' has a wrong offset!");

// ScriptStruct QRSL.RankRowTitleText
// 0x0090 (0x0090 - 0x0000)
struct FRankRowTitleText final
{
public:
	class FText                                   RowTitleCol1;                                      // 0x0000(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   RowTitleCol1_1;                                    // 0x0018(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   RowTitleCol2;                                      // 0x0030(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   RowTitleCol2_1;                                    // 0x0048(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   RowTitleCol3;                                      // 0x0060(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   RowTitleCol3_1;                                    // 0x0078(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankRowTitleText) == 0x000008, "Wrong alignment on FRankRowTitleText");
static_assert(sizeof(FRankRowTitleText) == 0x000090, "Wrong size on FRankRowTitleText");
static_assert(offsetof(FRankRowTitleText, RowTitleCol1) == 0x000000, "Member 'FRankRowTitleText::RowTitleCol1' has a wrong offset!");
static_assert(offsetof(FRankRowTitleText, RowTitleCol1_1) == 0x000018, "Member 'FRankRowTitleText::RowTitleCol1_1' has a wrong offset!");
static_assert(offsetof(FRankRowTitleText, RowTitleCol2) == 0x000030, "Member 'FRankRowTitleText::RowTitleCol2' has a wrong offset!");
static_assert(offsetof(FRankRowTitleText, RowTitleCol2_1) == 0x000048, "Member 'FRankRowTitleText::RowTitleCol2_1' has a wrong offset!");
static_assert(offsetof(FRankRowTitleText, RowTitleCol3) == 0x000060, "Member 'FRankRowTitleText::RowTitleCol3' has a wrong offset!");
static_assert(offsetof(FRankRowTitleText, RowTitleCol3_1) == 0x000078, "Member 'FRankRowTitleText::RowTitleCol3_1' has a wrong offset!");

// ScriptStruct QRSL.RecipeStarBatchData
// 0x0018 (0x0018 - 0x0000)
struct FRecipeStarBatchData final
{
public:
	class FText                                   LevelRangeText;                                    // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecipeStarBatchData) == 0x000008, "Wrong alignment on FRecipeStarBatchData");
static_assert(sizeof(FRecipeStarBatchData) == 0x000018, "Wrong size on FRecipeStarBatchData");
static_assert(offsetof(FRecipeStarBatchData, LevelRangeText) == 0x000000, "Member 'FRecipeStarBatchData::LevelRangeText' has a wrong offset!");

// ScriptStruct QRSL.WeaponElementTypeModifyInfo
// 0x0040 (0x0040 - 0x0000)
struct FWeaponElementTypeModifyInfo final
{
public:
	class FText                                   TypeText;                                          // 0x0000(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateColor                            TypeColor;                                         // 0x0018(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponElementTypeModifyInfo) == 0x000008, "Wrong alignment on FWeaponElementTypeModifyInfo");
static_assert(sizeof(FWeaponElementTypeModifyInfo) == 0x000040, "Wrong size on FWeaponElementTypeModifyInfo");
static_assert(offsetof(FWeaponElementTypeModifyInfo, TypeText) == 0x000000, "Member 'FWeaponElementTypeModifyInfo::TypeText' has a wrong offset!");
static_assert(offsetof(FWeaponElementTypeModifyInfo, TypeColor) == 0x000018, "Member 'FWeaponElementTypeModifyInfo::TypeColor' has a wrong offset!");

// ScriptStruct QRSL.RoleAttributeColorInfo
// 0x0038 (0x0038 - 0x0000)
struct FRoleAttributeColorInfo final
{
public:
	TArray<class FName>                           RelateAttributeNames;                              // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateColor                            AttributeColor;                                    // 0x0010(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRoleAttributeColorInfo) == 0x000008, "Wrong alignment on FRoleAttributeColorInfo");
static_assert(sizeof(FRoleAttributeColorInfo) == 0x000038, "Wrong size on FRoleAttributeColorInfo");
static_assert(offsetof(FRoleAttributeColorInfo, RelateAttributeNames) == 0x000000, "Member 'FRoleAttributeColorInfo::RelateAttributeNames' has a wrong offset!");
static_assert(offsetof(FRoleAttributeColorInfo, AttributeColor) == 0x000010, "Member 'FRoleAttributeColorInfo::AttributeColor' has a wrong offset!");

// ScriptStruct QRSL.ActorTipsInfo
// 0x0020 (0x0020 - 0x0000)
struct FActorTipsInfo final
{
public:
	TWeakObjectPtr<class AActor>                  Owner;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UCanvasPanelSlot>        MyPanelSlot;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItmeId;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UQRSLUI_ItemHeadbar*                    UIItemHeader;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActorTipsInfo) == 0x000008, "Wrong alignment on FActorTipsInfo");
static_assert(sizeof(FActorTipsInfo) == 0x000020, "Wrong size on FActorTipsInfo");
static_assert(offsetof(FActorTipsInfo, Owner) == 0x000000, "Member 'FActorTipsInfo::Owner' has a wrong offset!");
static_assert(offsetof(FActorTipsInfo, MyPanelSlot) == 0x000008, "Member 'FActorTipsInfo::MyPanelSlot' has a wrong offset!");
static_assert(offsetof(FActorTipsInfo, ItmeId) == 0x000010, "Member 'FActorTipsInfo::ItmeId' has a wrong offset!");
static_assert(offsetof(FActorTipsInfo, UIItemHeader) == 0x000018, "Member 'FActorTipsInfo::UIItemHeader' has a wrong offset!");

// ScriptStruct QRSL.MenuSlot
// 0x0010 (0x0010 - 0x0000)
struct FMenuSlot final
{
public:
	class FName                                   ButtonName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ShowWidgetName;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMenuSlot) == 0x000004, "Wrong alignment on FMenuSlot");
static_assert(sizeof(FMenuSlot) == 0x000010, "Wrong size on FMenuSlot");
static_assert(offsetof(FMenuSlot, ButtonName) == 0x000000, "Member 'FMenuSlot::ButtonName' has a wrong offset!");
static_assert(offsetof(FMenuSlot, ShowWidgetName) == 0x000008, "Member 'FMenuSlot::ShowWidgetName' has a wrong offset!");

// ScriptStruct QRSL.ShopRecommendStyle
// 0x0080 (0x0080 - 0x0000)
struct FShopRecommendStyle final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   BannerClass;                                       // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   TabClass;                                          // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActiveStartTime;                                   // 0x0058(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActiveEndedTime;                                   // 0x0068(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E86[0x8];                                     // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FShopRecommendStyle) == 0x000008, "Wrong alignment on FShopRecommendStyle");
static_assert(sizeof(FShopRecommendStyle) == 0x000080, "Wrong size on FShopRecommendStyle");
static_assert(offsetof(FShopRecommendStyle, Name) == 0x000000, "Member 'FShopRecommendStyle::Name' has a wrong offset!");
static_assert(offsetof(FShopRecommendStyle, BannerClass) == 0x000008, "Member 'FShopRecommendStyle::BannerClass' has a wrong offset!");
static_assert(offsetof(FShopRecommendStyle, TabClass) == 0x000030, "Member 'FShopRecommendStyle::TabClass' has a wrong offset!");
static_assert(offsetof(FShopRecommendStyle, ActiveStartTime) == 0x000058, "Member 'FShopRecommendStyle::ActiveStartTime' has a wrong offset!");
static_assert(offsetof(FShopRecommendStyle, ActiveEndedTime) == 0x000068, "Member 'FShopRecommendStyle::ActiveEndedTime' has a wrong offset!");

// ScriptStruct QRSL.OperatorEffectInfo
// 0x0030 (0x0030 - 0x0000)
struct FOperatorEffectInfo final
{
public:
	class UObject*                                ResourceObject;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            TextColor;                                         // 0x0008(0x0028)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOperatorEffectInfo) == 0x000008, "Wrong alignment on FOperatorEffectInfo");
static_assert(sizeof(FOperatorEffectInfo) == 0x000030, "Wrong size on FOperatorEffectInfo");
static_assert(offsetof(FOperatorEffectInfo, ResourceObject) == 0x000000, "Member 'FOperatorEffectInfo::ResourceObject' has a wrong offset!");
static_assert(offsetof(FOperatorEffectInfo, TextColor) == 0x000008, "Member 'FOperatorEffectInfo::TextColor' has a wrong offset!");

// ScriptStruct QRSL.MessageInfo
// 0x0020 (0x0020 - 0x0000)
struct FMessageInfo final
{
public:
	EEquipSlotEvolutionOperatorType               OperatorType;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E87[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TextInfo;                                          // 0x0008(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FMessageInfo) == 0x000008, "Wrong alignment on FMessageInfo");
static_assert(sizeof(FMessageInfo) == 0x000020, "Wrong size on FMessageInfo");
static_assert(offsetof(FMessageInfo, OperatorType) == 0x000000, "Member 'FMessageInfo::OperatorType' has a wrong offset!");
static_assert(offsetof(FMessageInfo, TextInfo) == 0x000008, "Member 'FMessageInfo::TextInfo' has a wrong offset!");

// ScriptStruct QRSL.SkillPermanentEffect
// 0x0110 (0x0110 - 0x0000)
struct FSkillPermanentEffect final
{
public:
	TMap<float, TSoftObjectPtr<class UUIParticleAsset>> PercentParticles;                                  // 0x0000(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x0050(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      EffectMaterial;                                    // 0x0078(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProgressValueParameterName;                        // 0x00A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TransitionValueParameterName;                      // 0x00A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      EffectMaterialEx;                                  // 0x00B0(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProgressValueParameterNameEx;                      // 0x00D8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TransitionValueParameterNameEx;                    // 0x00E0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            TextColor;                                         // 0x00E8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillPermanentEffect) == 0x000008, "Wrong alignment on FSkillPermanentEffect");
static_assert(sizeof(FSkillPermanentEffect) == 0x000110, "Wrong size on FSkillPermanentEffect");
static_assert(offsetof(FSkillPermanentEffect, PercentParticles) == 0x000000, "Member 'FSkillPermanentEffect::PercentParticles' has a wrong offset!");
static_assert(offsetof(FSkillPermanentEffect, IconTexture) == 0x000050, "Member 'FSkillPermanentEffect::IconTexture' has a wrong offset!");
static_assert(offsetof(FSkillPermanentEffect, EffectMaterial) == 0x000078, "Member 'FSkillPermanentEffect::EffectMaterial' has a wrong offset!");
static_assert(offsetof(FSkillPermanentEffect, ProgressValueParameterName) == 0x0000A0, "Member 'FSkillPermanentEffect::ProgressValueParameterName' has a wrong offset!");
static_assert(offsetof(FSkillPermanentEffect, TransitionValueParameterName) == 0x0000A8, "Member 'FSkillPermanentEffect::TransitionValueParameterName' has a wrong offset!");
static_assert(offsetof(FSkillPermanentEffect, EffectMaterialEx) == 0x0000B0, "Member 'FSkillPermanentEffect::EffectMaterialEx' has a wrong offset!");
static_assert(offsetof(FSkillPermanentEffect, ProgressValueParameterNameEx) == 0x0000D8, "Member 'FSkillPermanentEffect::ProgressValueParameterNameEx' has a wrong offset!");
static_assert(offsetof(FSkillPermanentEffect, TransitionValueParameterNameEx) == 0x0000E0, "Member 'FSkillPermanentEffect::TransitionValueParameterNameEx' has a wrong offset!");
static_assert(offsetof(FSkillPermanentEffect, TextColor) == 0x0000E8, "Member 'FSkillPermanentEffect::TextColor' has a wrong offset!");

// ScriptStruct QRSL.SLRankData
// 0x0060 (0x0060 - 0x0000)
struct FSLRankData final
{
public:
	int32                                         Rank;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E88[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RoleName;                                          // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarID;                                          // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarFrameID;                                     // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoloLeagueStageInfo                   StageInfo;                                         // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         WinRate;                                           // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E89[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 JsonUniqueId;                                      // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSLRankData) == 0x000008, "Wrong alignment on FSLRankData");
static_assert(sizeof(FSLRankData) == 0x000060, "Wrong size on FSLRankData");
static_assert(offsetof(FSLRankData, Rank) == 0x000000, "Member 'FSLRankData::Rank' has a wrong offset!");
static_assert(offsetof(FSLRankData, RoleName) == 0x000008, "Member 'FSLRankData::RoleName' has a wrong offset!");
static_assert(offsetof(FSLRankData, AvatarID) == 0x000018, "Member 'FSLRankData::AvatarID' has a wrong offset!");
static_assert(offsetof(FSLRankData, AvatarFrameID) == 0x000028, "Member 'FSLRankData::AvatarFrameID' has a wrong offset!");
static_assert(offsetof(FSLRankData, StageInfo) == 0x000038, "Member 'FSLRankData::StageInfo' has a wrong offset!");
static_assert(offsetof(FSLRankData, WinRate) == 0x000048, "Member 'FSLRankData::WinRate' has a wrong offset!");
static_assert(offsetof(FSLRankData, JsonUniqueId) == 0x000050, "Member 'FSLRankData::JsonUniqueId' has a wrong offset!");

// ScriptStruct QRSL.TeamCloneData
// 0x0018 (0x0018 - 0x0000)
struct FTeamCloneData final
{
public:
	class FName                                   CloneName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             BackPhoto;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             LockPhoto;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTeamCloneData) == 0x000008, "Wrong alignment on FTeamCloneData");
static_assert(sizeof(FTeamCloneData) == 0x000018, "Wrong size on FTeamCloneData");
static_assert(offsetof(FTeamCloneData, CloneName) == 0x000000, "Member 'FTeamCloneData::CloneName' has a wrong offset!");
static_assert(offsetof(FTeamCloneData, BackPhoto) == 0x000008, "Member 'FTeamCloneData::BackPhoto' has a wrong offset!");
static_assert(offsetof(FTeamCloneData, LockPhoto) == 0x000010, "Member 'FTeamCloneData::LockPhoto' has a wrong offset!");

// ScriptStruct QRSL.TowerExplorePopupInfo
// 0x0014 (0x0014 - 0x0000)
struct FTowerExplorePopupInfo final
{
public:
	class FName                                   TowerID;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TowerDiff;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurValue;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddedValue;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTowerExplorePopupInfo) == 0x000004, "Wrong alignment on FTowerExplorePopupInfo");
static_assert(sizeof(FTowerExplorePopupInfo) == 0x000014, "Wrong size on FTowerExplorePopupInfo");
static_assert(offsetof(FTowerExplorePopupInfo, TowerID) == 0x000000, "Member 'FTowerExplorePopupInfo::TowerID' has a wrong offset!");
static_assert(offsetof(FTowerExplorePopupInfo, TowerDiff) == 0x000008, "Member 'FTowerExplorePopupInfo::TowerDiff' has a wrong offset!");
static_assert(offsetof(FTowerExplorePopupInfo, CurValue) == 0x00000C, "Member 'FTowerExplorePopupInfo::CurValue' has a wrong offset!");
static_assert(offsetof(FTowerExplorePopupInfo, AddedValue) == 0x000010, "Member 'FTowerExplorePopupInfo::AddedValue' has a wrong offset!");

// ScriptStruct QRSL.TreasureMapMainBubbleText
// 0x0010 (0x0010 - 0x0000)
struct FTreasureMapMainBubbleText final
{
public:
	TArray<class FText>                           Texts;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTreasureMapMainBubbleText) == 0x000008, "Wrong alignment on FTreasureMapMainBubbleText");
static_assert(sizeof(FTreasureMapMainBubbleText) == 0x000010, "Wrong size on FTreasureMapMainBubbleText");
static_assert(offsetof(FTreasureMapMainBubbleText, Texts) == 0x000000, "Member 'FTreasureMapMainBubbleText::Texts' has a wrong offset!");

// ScriptStruct QRSL.QuestState
// 0x0050 (0x0050 - 0x0000)
struct FQuestState final
{
public:
	TSoftObjectPtr<class UTexture2D>              AccpetedImg;                                       // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              UnAccpetImg;                                       // 0x0028(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestState) == 0x000008, "Wrong alignment on FQuestState");
static_assert(sizeof(FQuestState) == 0x000050, "Wrong size on FQuestState");
static_assert(offsetof(FQuestState, AccpetedImg) == 0x000000, "Member 'FQuestState::AccpetedImg' has a wrong offset!");
static_assert(offsetof(FQuestState, UnAccpetImg) == 0x000028, "Member 'FQuestState::UnAccpetImg' has a wrong offset!");

// ScriptStruct QRSL.AnimationData
// 0x0020 (0x0020 - 0x0000)
struct FAnimationData final
{
public:
	class FName                                   AnimationInName;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AnimationOutName;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AnimationInWidget;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AnimationOutWidget;                                // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimationData) == 0x000004, "Wrong alignment on FAnimationData");
static_assert(sizeof(FAnimationData) == 0x000020, "Wrong size on FAnimationData");
static_assert(offsetof(FAnimationData, AnimationInName) == 0x000000, "Member 'FAnimationData::AnimationInName' has a wrong offset!");
static_assert(offsetof(FAnimationData, AnimationOutName) == 0x000008, "Member 'FAnimationData::AnimationOutName' has a wrong offset!");
static_assert(offsetof(FAnimationData, AnimationInWidget) == 0x000010, "Member 'FAnimationData::AnimationInWidget' has a wrong offset!");
static_assert(offsetof(FAnimationData, AnimationOutWidget) == 0x000018, "Member 'FAnimationData::AnimationOutWidget' has a wrong offset!");

// ScriptStruct QRSL.WeaponStarImitation
// 0x0038 (0x0038 - 0x0000)
struct FWeaponStarImitation final
{
public:
	int32                                         StarLevel;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E8A[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   UnlockDesc;                                        // 0x0008(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   LockedDesc;                                        // 0x0020(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponStarImitation) == 0x000008, "Wrong alignment on FWeaponStarImitation");
static_assert(sizeof(FWeaponStarImitation) == 0x000038, "Wrong size on FWeaponStarImitation");
static_assert(offsetof(FWeaponStarImitation, StarLevel) == 0x000000, "Member 'FWeaponStarImitation::StarLevel' has a wrong offset!");
static_assert(offsetof(FWeaponStarImitation, UnlockDesc) == 0x000008, "Member 'FWeaponStarImitation::UnlockDesc' has a wrong offset!");
static_assert(offsetof(FWeaponStarImitation, LockedDesc) == 0x000020, "Member 'FWeaponStarImitation::LockedDesc' has a wrong offset!");

// ScriptStruct QRSL.WeaponPropRarityIcon
// 0x0030 (0x0030 - 0x0000)
struct FWeaponPropRarityIcon final
{
public:
	float                                         MinValue;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0008(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponPropRarityIcon) == 0x000008, "Wrong alignment on FWeaponPropRarityIcon");
static_assert(sizeof(FWeaponPropRarityIcon) == 0x000030, "Wrong size on FWeaponPropRarityIcon");
static_assert(offsetof(FWeaponPropRarityIcon, MinValue) == 0x000000, "Member 'FWeaponPropRarityIcon::MinValue' has a wrong offset!");
static_assert(offsetof(FWeaponPropRarityIcon, MaxValue) == 0x000004, "Member 'FWeaponPropRarityIcon::MaxValue' has a wrong offset!");
static_assert(offsetof(FWeaponPropRarityIcon, Icon) == 0x000008, "Member 'FWeaponPropRarityIcon::Icon' has a wrong offset!");

// ScriptStruct QRSL.WeaponSelectedInfo
// 0x0020 (0x0020 - 0x0000)
struct FWeaponSelectedInfo final
{
public:
	class FName                                   RadioName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CircleBarName;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IconName;                                          // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CDTextName;                                        // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponSelectedInfo) == 0x000004, "Wrong alignment on FWeaponSelectedInfo");
static_assert(sizeof(FWeaponSelectedInfo) == 0x000020, "Wrong size on FWeaponSelectedInfo");
static_assert(offsetof(FWeaponSelectedInfo, RadioName) == 0x000000, "Member 'FWeaponSelectedInfo::RadioName' has a wrong offset!");
static_assert(offsetof(FWeaponSelectedInfo, CircleBarName) == 0x000008, "Member 'FWeaponSelectedInfo::CircleBarName' has a wrong offset!");
static_assert(offsetof(FWeaponSelectedInfo, IconName) == 0x000010, "Member 'FWeaponSelectedInfo::IconName' has a wrong offset!");
static_assert(offsetof(FWeaponSelectedInfo, CDTextName) == 0x000018, "Member 'FWeaponSelectedInfo::CDTextName' has a wrong offset!");

// ScriptStruct QRSL.WeaponSkillBranchIconArray
// 0x0010 (0x0010 - 0x0000)
struct FWeaponSkillBranchIconArray final
{
public:
	TArray<TSoftObjectPtr<class UTexture2D>>      IconArray;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponSkillBranchIconArray) == 0x000008, "Wrong alignment on FWeaponSkillBranchIconArray");
static_assert(sizeof(FWeaponSkillBranchIconArray) == 0x000010, "Wrong size on FWeaponSkillBranchIconArray");
static_assert(offsetof(FWeaponSkillBranchIconArray, IconArray) == 0x000000, "Member 'FWeaponSkillBranchIconArray::IconArray' has a wrong offset!");

// ScriptStruct QRSL.SlotWidgetName
// 0x0078 (0x0078 - 0x0000)
struct FSlotWidgetName final
{
public:
	class FName                                   SizeBoxName;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RadioBoxName;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ButtonName;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QualityName;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParticleName;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SelectedEffectName;                                // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AdvanceLevelName;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StrengthenLevelName;                               // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CurSelectedPhotoName;                              // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ElementIconName;                                   // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RedPointName;                                      // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RedPointUpgradeName;                               // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ImageFashionName;                                  // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CPLowlevelPromptName;                              // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CPWeaponRedpointPromptName;                        // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSlotWidgetName) == 0x000004, "Wrong alignment on FSlotWidgetName");
static_assert(sizeof(FSlotWidgetName) == 0x000078, "Wrong size on FSlotWidgetName");
static_assert(offsetof(FSlotWidgetName, SizeBoxName) == 0x000000, "Member 'FSlotWidgetName::SizeBoxName' has a wrong offset!");
static_assert(offsetof(FSlotWidgetName, RadioBoxName) == 0x000008, "Member 'FSlotWidgetName::RadioBoxName' has a wrong offset!");
static_assert(offsetof(FSlotWidgetName, ButtonName) == 0x000010, "Member 'FSlotWidgetName::ButtonName' has a wrong offset!");
static_assert(offsetof(FSlotWidgetName, QualityName) == 0x000018, "Member 'FSlotWidgetName::QualityName' has a wrong offset!");
static_assert(offsetof(FSlotWidgetName, ParticleName) == 0x000020, "Member 'FSlotWidgetName::ParticleName' has a wrong offset!");
static_assert(offsetof(FSlotWidgetName, SelectedEffectName) == 0x000028, "Member 'FSlotWidgetName::SelectedEffectName' has a wrong offset!");
static_assert(offsetof(FSlotWidgetName, AdvanceLevelName) == 0x000030, "Member 'FSlotWidgetName::AdvanceLevelName' has a wrong offset!");
static_assert(offsetof(FSlotWidgetName, StrengthenLevelName) == 0x000038, "Member 'FSlotWidgetName::StrengthenLevelName' has a wrong offset!");
static_assert(offsetof(FSlotWidgetName, CurSelectedPhotoName) == 0x000040, "Member 'FSlotWidgetName::CurSelectedPhotoName' has a wrong offset!");
static_assert(offsetof(FSlotWidgetName, ElementIconName) == 0x000048, "Member 'FSlotWidgetName::ElementIconName' has a wrong offset!");
static_assert(offsetof(FSlotWidgetName, RedPointName) == 0x000050, "Member 'FSlotWidgetName::RedPointName' has a wrong offset!");
static_assert(offsetof(FSlotWidgetName, RedPointUpgradeName) == 0x000058, "Member 'FSlotWidgetName::RedPointUpgradeName' has a wrong offset!");
static_assert(offsetof(FSlotWidgetName, ImageFashionName) == 0x000060, "Member 'FSlotWidgetName::ImageFashionName' has a wrong offset!");
static_assert(offsetof(FSlotWidgetName, CPLowlevelPromptName) == 0x000068, "Member 'FSlotWidgetName::CPLowlevelPromptName' has a wrong offset!");
static_assert(offsetof(FSlotWidgetName, CPWeaponRedpointPromptName) == 0x000070, "Member 'FSlotWidgetName::CPWeaponRedpointPromptName' has a wrong offset!");

// ScriptStruct QRSL.HottaWhipCard
// 0x0028 (0x0028 - 0x0000)
struct FHottaWhipCard final
{
public:
	TSoftObjectPtr<class UObject>                 CardData;                                          // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHottaWhipCard) == 0x000008, "Wrong alignment on FHottaWhipCard");
static_assert(sizeof(FHottaWhipCard) == 0x000028, "Wrong size on FHottaWhipCard");
static_assert(offsetof(FHottaWhipCard, CardData) == 0x000000, "Member 'FHottaWhipCard::CardData' has a wrong offset!");

// ScriptStruct QRSL.WormholeMainLevelListSlotData
// 0x0010 (0x0010 - 0x0000)
struct FWormholeMainLevelListSlotData final
{
public:
	class FName                                   PanelWidgetName;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LevelIndexWidgetName;                              // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholeMainLevelListSlotData) == 0x000004, "Wrong alignment on FWormholeMainLevelListSlotData");
static_assert(sizeof(FWormholeMainLevelListSlotData) == 0x000010, "Wrong size on FWormholeMainLevelListSlotData");
static_assert(offsetof(FWormholeMainLevelListSlotData, PanelWidgetName) == 0x000000, "Member 'FWormholeMainLevelListSlotData::PanelWidgetName' has a wrong offset!");
static_assert(offsetof(FWormholeMainLevelListSlotData, LevelIndexWidgetName) == 0x000008, "Member 'FWormholeMainLevelListSlotData::LevelIndexWidgetName' has a wrong offset!");

// ScriptStruct QRSL.QRSLWorkGuideQualityConfig
// 0x0078 (0x0078 - 0x0000)
struct FQRSLWorkGuideQualityConfig final
{
public:
	TSoftObjectPtr<class UTexture2D>              bgimage;                                           // 0x0000(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconImage;                                         // 0x0028(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              QualityImage;                                      // 0x0050(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLWorkGuideQualityConfig) == 0x000008, "Wrong alignment on FQRSLWorkGuideQualityConfig");
static_assert(sizeof(FQRSLWorkGuideQualityConfig) == 0x000078, "Wrong size on FQRSLWorkGuideQualityConfig");
static_assert(offsetof(FQRSLWorkGuideQualityConfig, bgimage) == 0x000000, "Member 'FQRSLWorkGuideQualityConfig::bgimage' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideQualityConfig, IconImage) == 0x000028, "Member 'FQRSLWorkGuideQualityConfig::IconImage' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideQualityConfig, QualityImage) == 0x000050, "Member 'FQRSLWorkGuideQualityConfig::QualityImage' has a wrong offset!");

// ScriptStruct QRSL.QRSLWorkGuideRoundAwardConfig
// 0x000C (0x000C - 0x0000)
struct FQRSLWorkGuideRoundAwardConfig final
{
public:
	int32                                         Round;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DropGroupID;                                       // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLWorkGuideRoundAwardConfig) == 0x000004, "Wrong alignment on FQRSLWorkGuideRoundAwardConfig");
static_assert(sizeof(FQRSLWorkGuideRoundAwardConfig) == 0x00000C, "Wrong size on FQRSLWorkGuideRoundAwardConfig");
static_assert(offsetof(FQRSLWorkGuideRoundAwardConfig, Round) == 0x000000, "Member 'FQRSLWorkGuideRoundAwardConfig::Round' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideRoundAwardConfig, DropGroupID) == 0x000004, "Member 'FQRSLWorkGuideRoundAwardConfig::DropGroupID' has a wrong offset!");

// ScriptStruct QRSL.QRSLWorkGuideRoundConfig
// 0x0040 (0x0040 - 0x0000)
struct FQRSLWorkGuideRoundConfig final
{
public:
	int32                                         TurnCount;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetFunding;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 SymbolRatioArray;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<int32>                                 ItemRatioArray;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         RefreshItemCount;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RefreshCount;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemoveCount;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DropGroupID;                                       // 0x0034(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E8B[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQRSLWorkGuideRoundConfig) == 0x000008, "Wrong alignment on FQRSLWorkGuideRoundConfig");
static_assert(sizeof(FQRSLWorkGuideRoundConfig) == 0x000040, "Wrong size on FQRSLWorkGuideRoundConfig");
static_assert(offsetof(FQRSLWorkGuideRoundConfig, TurnCount) == 0x000000, "Member 'FQRSLWorkGuideRoundConfig::TurnCount' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideRoundConfig, TargetFunding) == 0x000004, "Member 'FQRSLWorkGuideRoundConfig::TargetFunding' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideRoundConfig, SymbolRatioArray) == 0x000008, "Member 'FQRSLWorkGuideRoundConfig::SymbolRatioArray' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideRoundConfig, ItemRatioArray) == 0x000018, "Member 'FQRSLWorkGuideRoundConfig::ItemRatioArray' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideRoundConfig, RefreshItemCount) == 0x000028, "Member 'FQRSLWorkGuideRoundConfig::RefreshItemCount' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideRoundConfig, RefreshCount) == 0x00002C, "Member 'FQRSLWorkGuideRoundConfig::RefreshCount' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideRoundConfig, RemoveCount) == 0x000030, "Member 'FQRSLWorkGuideRoundConfig::RemoveCount' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideRoundConfig, DropGroupID) == 0x000034, "Member 'FQRSLWorkGuideRoundConfig::DropGroupID' has a wrong offset!");

// ScriptStruct QRSL.QRSLWorkGuideItemConfig
// 0x00C8 (0x00D0 - 0x0008)
struct FQRSLWorkGuideItemConfig final : public FTableRowBase
{
public:
	class FName                                   ID;                                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0010(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0028(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0050(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWorkGuideQualityType                         Quality;                                           // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E8C[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Cost;                                              // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           RelevantArray;                                     // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         ComeRound;                                         // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SalePrice;                                         // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecyclePrice;                                      // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWorkGuideItemEventType                       ItemEventType;                                     // 0x0094(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E8D[0x3];                                     // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ConditionArray;                                    // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           ConditionItems;                                    // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           TargetItems;                                       // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E8E[0x4];                                     // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQRSLWorkGuideItemConfig) == 0x000008, "Wrong alignment on FQRSLWorkGuideItemConfig");
static_assert(sizeof(FQRSLWorkGuideItemConfig) == 0x0000D0, "Wrong size on FQRSLWorkGuideItemConfig");
static_assert(offsetof(FQRSLWorkGuideItemConfig, ID) == 0x000008, "Member 'FQRSLWorkGuideItemConfig::ID' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideItemConfig, Name) == 0x000010, "Member 'FQRSLWorkGuideItemConfig::Name' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideItemConfig, Icon) == 0x000028, "Member 'FQRSLWorkGuideItemConfig::Icon' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideItemConfig, Description) == 0x000050, "Member 'FQRSLWorkGuideItemConfig::Description' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideItemConfig, Tag) == 0x000068, "Member 'FQRSLWorkGuideItemConfig::Tag' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideItemConfig, Quality) == 0x000070, "Member 'FQRSLWorkGuideItemConfig::Quality' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideItemConfig, Cost) == 0x000074, "Member 'FQRSLWorkGuideItemConfig::Cost' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideItemConfig, RelevantArray) == 0x000078, "Member 'FQRSLWorkGuideItemConfig::RelevantArray' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideItemConfig, ComeRound) == 0x000088, "Member 'FQRSLWorkGuideItemConfig::ComeRound' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideItemConfig, SalePrice) == 0x00008C, "Member 'FQRSLWorkGuideItemConfig::SalePrice' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideItemConfig, RecyclePrice) == 0x000090, "Member 'FQRSLWorkGuideItemConfig::RecyclePrice' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideItemConfig, ItemEventType) == 0x000094, "Member 'FQRSLWorkGuideItemConfig::ItemEventType' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideItemConfig, ConditionArray) == 0x000098, "Member 'FQRSLWorkGuideItemConfig::ConditionArray' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideItemConfig, ConditionItems) == 0x0000A8, "Member 'FQRSLWorkGuideItemConfig::ConditionItems' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideItemConfig, TargetItems) == 0x0000B8, "Member 'FQRSLWorkGuideItemConfig::TargetItems' has a wrong offset!");
static_assert(offsetof(FQRSLWorkGuideItemConfig, Value) == 0x0000C8, "Member 'FQRSLWorkGuideItemConfig::Value' has a wrong offset!");

// ScriptStruct QRSL.WormholeEnergyCostInfo
// 0x0014 (0x0014 - 0x0000)
struct FWormholeEnergyCostInfo final
{
public:
	struct FInt32Range                            CountRange;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cost;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholeEnergyCostInfo) == 0x000004, "Wrong alignment on FWormholeEnergyCostInfo");
static_assert(sizeof(FWormholeEnergyCostInfo) == 0x000014, "Wrong size on FWormholeEnergyCostInfo");
static_assert(offsetof(FWormholeEnergyCostInfo, CountRange) == 0x000000, "Member 'FWormholeEnergyCostInfo::CountRange' has a wrong offset!");
static_assert(offsetof(FWormholeEnergyCostInfo, Cost) == 0x000010, "Member 'FWormholeEnergyCostInfo::Cost' has a wrong offset!");

// ScriptStruct QRSL.WormholePickItemPoolDrop
// 0x0020 (0x0020 - 0x0000)
struct FWormholePickItemPoolDrop final
{
public:
	class FString                                 PoolID;                                            // 0x0000(0x0010)(ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Items;                                             // 0x0010(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholePickItemPoolDrop) == 0x000008, "Wrong alignment on FWormholePickItemPoolDrop");
static_assert(sizeof(FWormholePickItemPoolDrop) == 0x000020, "Wrong size on FWormholePickItemPoolDrop");
static_assert(offsetof(FWormholePickItemPoolDrop, PoolID) == 0x000000, "Member 'FWormholePickItemPoolDrop::PoolID' has a wrong offset!");
static_assert(offsetof(FWormholePickItemPoolDrop, Items) == 0x000010, "Member 'FWormholePickItemPoolDrop::Items' has a wrong offset!");

// ScriptStruct QRSL.WormholePickItemDrops
// 0x0018 (0x0018 - 0x0000)
struct FWormholePickItemDrops final
{
public:
	int32                                         Layer;                                             // 0x0000(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E8F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWormholePickItemPoolDrop>      Pools;                                             // 0x0008(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholePickItemDrops) == 0x000008, "Wrong alignment on FWormholePickItemDrops");
static_assert(sizeof(FWormholePickItemDrops) == 0x000018, "Wrong size on FWormholePickItemDrops");
static_assert(offsetof(FWormholePickItemDrops, Layer) == 0x000000, "Member 'FWormholePickItemDrops::Layer' has a wrong offset!");
static_assert(offsetof(FWormholePickItemDrops, Pools) == 0x000008, "Member 'FWormholePickItemDrops::Pools' has a wrong offset!");

// ScriptStruct QRSL.PickWormholeItemResult
// 0x000C (0x000C - 0x0000)
struct FPickWormholeItemResult final
{
public:
	uint8                                         Pad_1E90[0x4];                                     // 0x0000(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UHottaItem>              Item;                                              // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPickWormholeItemResult) == 0x000004, "Wrong alignment on FPickWormholeItemResult");
static_assert(sizeof(FPickWormholeItemResult) == 0x00000C, "Wrong size on FPickWormholeItemResult");
static_assert(offsetof(FPickWormholeItemResult, Item) == 0x000004, "Member 'FPickWormholeItemResult::Item' has a wrong offset!");

// ScriptStruct QRSL.WorldBossWaveManager
// 0x0010 (0x0010 - 0x0000)
struct FWorldBossWaveManager final
{
public:
	TArray<TSoftObjectPtr<class AHottaAISpawnManager>> SpawnManagerArray;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorldBossWaveManager) == 0x000008, "Wrong alignment on FWorldBossWaveManager");
static_assert(sizeof(FWorldBossWaveManager) == 0x000010, "Wrong size on FWorldBossWaveManager");
static_assert(offsetof(FWorldBossWaveManager, SpawnManagerArray) == 0x000000, "Member 'FWorldBossWaveManager::SpawnManagerArray' has a wrong offset!");

// ScriptStruct QRSL.QRSLTestStruct
// 0x0078 (0x0078 - 0x0000)
struct alignas(0x08) FQRSLTestStruct final
{
public:
	uint8                                         Pad_1E91[0x78];                                    // 0x0000(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQRSLTestStruct) == 0x000008, "Wrong alignment on FQRSLTestStruct");
static_assert(sizeof(FQRSLTestStruct) == 0x000078, "Wrong size on FQRSLTestStruct");

// ScriptStruct QRSL.QRSLTestItemData
// 0x000C (0x000C - 0x0000)
struct FQRSLTestItemData final
{
public:
	class FName                                   ItemID;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQRSLTestItemData) == 0x000004, "Wrong alignment on FQRSLTestItemData");
static_assert(sizeof(FQRSLTestItemData) == 0x00000C, "Wrong size on FQRSLTestItemData");
static_assert(offsetof(FQRSLTestItemData, ItemID) == 0x000000, "Member 'FQRSLTestItemData::ItemID' has a wrong offset!");
static_assert(offsetof(FQRSLTestItemData, Count) == 0x000008, "Member 'FQRSLTestItemData::Count' has a wrong offset!");

// ScriptStruct QRSL.ServerCloneTreasureInfo
// 0x0030 (0x0030 - 0x0000)
struct FServerCloneTreasureInfo final
{
public:
	TArray<class AHottaAISpawnManager*>           MonsterSpawnManagerList;                           // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class ATargetPoint*                           SpawnPoint;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TreasureBoxID;                                     // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BossDropId;                                        // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TreasureBoxRefresh;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E92[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerCloneTreasureInfo) == 0x000008, "Wrong alignment on FServerCloneTreasureInfo");
static_assert(sizeof(FServerCloneTreasureInfo) == 0x000030, "Wrong size on FServerCloneTreasureInfo");
static_assert(offsetof(FServerCloneTreasureInfo, MonsterSpawnManagerList) == 0x000000, "Member 'FServerCloneTreasureInfo::MonsterSpawnManagerList' has a wrong offset!");
static_assert(offsetof(FServerCloneTreasureInfo, SpawnPoint) == 0x000010, "Member 'FServerCloneTreasureInfo::SpawnPoint' has a wrong offset!");
static_assert(offsetof(FServerCloneTreasureInfo, TreasureBoxID) == 0x000018, "Member 'FServerCloneTreasureInfo::TreasureBoxID' has a wrong offset!");
static_assert(offsetof(FServerCloneTreasureInfo, BossDropId) == 0x000020, "Member 'FServerCloneTreasureInfo::BossDropId' has a wrong offset!");
static_assert(offsetof(FServerCloneTreasureInfo, TreasureBoxRefresh) == 0x000028, "Member 'FServerCloneTreasureInfo::TreasureBoxRefresh' has a wrong offset!");

// ScriptStruct QRSL.2V2BuffGenerateData
// 0x0028 (0x0028 - 0x0000)
struct FTwoV2BuffGenerateData final
{
public:
	class FName                                   BuffID;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   BuffName;                                          // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E93[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTwoV2BuffGenerateData) == 0x000008, "Wrong alignment on FTwoV2BuffGenerateData");
static_assert(sizeof(FTwoV2BuffGenerateData) == 0x000028, "Wrong size on FTwoV2BuffGenerateData");
static_assert(offsetof(FTwoV2BuffGenerateData, BuffID) == 0x000000, "Member 'FTwoV2BuffGenerateData::BuffID' has a wrong offset!");
static_assert(offsetof(FTwoV2BuffGenerateData, BuffName) == 0x000008, "Member 'FTwoV2BuffGenerateData::BuffName' has a wrong offset!");
static_assert(offsetof(FTwoV2BuffGenerateData, Weight) == 0x000020, "Member 'FTwoV2BuffGenerateData::Weight' has a wrong offset!");

// ScriptStruct QRSL.2V2BuffRefreshData
// 0x0020 (0x0028 - 0x0008)
struct FTwoV2BuffRefreshData final : public FTableRowBase
{
public:
	float                                         RefreshTime;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenerateAmount;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeTime;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E94[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTwoV2BuffGenerateData>         GenerateData;                                      // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTwoV2BuffRefreshData) == 0x000008, "Wrong alignment on FTwoV2BuffRefreshData");
static_assert(sizeof(FTwoV2BuffRefreshData) == 0x000028, "Wrong size on FTwoV2BuffRefreshData");
static_assert(offsetof(FTwoV2BuffRefreshData, RefreshTime) == 0x000008, "Member 'FTwoV2BuffRefreshData::RefreshTime' has a wrong offset!");
static_assert(offsetof(FTwoV2BuffRefreshData, GenerateAmount) == 0x00000C, "Member 'FTwoV2BuffRefreshData::GenerateAmount' has a wrong offset!");
static_assert(offsetof(FTwoV2BuffRefreshData, LifeTime) == 0x000010, "Member 'FTwoV2BuffRefreshData::LifeTime' has a wrong offset!");
static_assert(offsetof(FTwoV2BuffRefreshData, GenerateData) == 0x000018, "Member 'FTwoV2BuffRefreshData::GenerateData' has a wrong offset!");

// ScriptStruct QRSL.2V2BuffData
// 0x0028 (0x0030 - 0x0008)
struct FTwoV2BuffData final : public FTableRowBase
{
public:
	TSoftClassPtr<class UClass>                   BuffActorClass;                                    // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTwoV2BuffData) == 0x000008, "Wrong alignment on FTwoV2BuffData");
static_assert(sizeof(FTwoV2BuffData) == 0x000030, "Wrong size on FTwoV2BuffData");
static_assert(offsetof(FTwoV2BuffData, BuffActorClass) == 0x000008, "Member 'FTwoV2BuffData::BuffActorClass' has a wrong offset!");

// ScriptStruct QRSL.MultiSoloLeagueRoleInfo
// 0x0148 (0x0148 - 0x0000)
struct FMultiSoloLeagueRoleInfo final
{
public:
	int64                                         RoleId;                                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E95[0x14];                                    // 0x0008(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BattleScore;                                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGiveUp;                                         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNegative;                                       // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E96[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AwardList;                                         // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E97[0x50];                                    // 0x0038(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RoleName;                                          // 0x0088(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E98[0xC];                                     // 0x0098(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AvatarID;                                          // 0x00A4(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AvatarFrameID;                                     // 0x00AC(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E99[0x14];                                    // 0x00B4(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DistrictId;                                        // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E9A[0x1C];                                    // 0x00CC(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 WeaponID_1;                                        // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WeaponID_2;                                        // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WeaponID_3;                                        // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Artifact_1;                                        // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Artifact_2;                                        // 0x0128(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E9B[0x4];                                     // 0x0138(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OriginSoloLeagueRankStars;                         // 0x013C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SettleSoloLeagueRankStars;                         // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SettleSoloLeagueProtectScore;                      // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiSoloLeagueRoleInfo) == 0x000008, "Wrong alignment on FMultiSoloLeagueRoleInfo");
static_assert(sizeof(FMultiSoloLeagueRoleInfo) == 0x000148, "Wrong size on FMultiSoloLeagueRoleInfo");
static_assert(offsetof(FMultiSoloLeagueRoleInfo, RoleId) == 0x000000, "Member 'FMultiSoloLeagueRoleInfo::RoleId' has a wrong offset!");
static_assert(offsetof(FMultiSoloLeagueRoleInfo, BattleScore) == 0x00001C, "Member 'FMultiSoloLeagueRoleInfo::BattleScore' has a wrong offset!");
static_assert(offsetof(FMultiSoloLeagueRoleInfo, bIsGiveUp) == 0x000020, "Member 'FMultiSoloLeagueRoleInfo::bIsGiveUp' has a wrong offset!");
static_assert(offsetof(FMultiSoloLeagueRoleInfo, bIsNegative) == 0x000021, "Member 'FMultiSoloLeagueRoleInfo::bIsNegative' has a wrong offset!");
static_assert(offsetof(FMultiSoloLeagueRoleInfo, AwardList) == 0x000028, "Member 'FMultiSoloLeagueRoleInfo::AwardList' has a wrong offset!");
static_assert(offsetof(FMultiSoloLeagueRoleInfo, RoleName) == 0x000088, "Member 'FMultiSoloLeagueRoleInfo::RoleName' has a wrong offset!");
static_assert(offsetof(FMultiSoloLeagueRoleInfo, AvatarID) == 0x0000A4, "Member 'FMultiSoloLeagueRoleInfo::AvatarID' has a wrong offset!");
static_assert(offsetof(FMultiSoloLeagueRoleInfo, AvatarFrameID) == 0x0000AC, "Member 'FMultiSoloLeagueRoleInfo::AvatarFrameID' has a wrong offset!");
static_assert(offsetof(FMultiSoloLeagueRoleInfo, DistrictId) == 0x0000C8, "Member 'FMultiSoloLeagueRoleInfo::DistrictId' has a wrong offset!");
static_assert(offsetof(FMultiSoloLeagueRoleInfo, WeaponID_1) == 0x0000E8, "Member 'FMultiSoloLeagueRoleInfo::WeaponID_1' has a wrong offset!");
static_assert(offsetof(FMultiSoloLeagueRoleInfo, WeaponID_2) == 0x0000F8, "Member 'FMultiSoloLeagueRoleInfo::WeaponID_2' has a wrong offset!");
static_assert(offsetof(FMultiSoloLeagueRoleInfo, WeaponID_3) == 0x000108, "Member 'FMultiSoloLeagueRoleInfo::WeaponID_3' has a wrong offset!");
static_assert(offsetof(FMultiSoloLeagueRoleInfo, Artifact_1) == 0x000118, "Member 'FMultiSoloLeagueRoleInfo::Artifact_1' has a wrong offset!");
static_assert(offsetof(FMultiSoloLeagueRoleInfo, Artifact_2) == 0x000128, "Member 'FMultiSoloLeagueRoleInfo::Artifact_2' has a wrong offset!");
static_assert(offsetof(FMultiSoloLeagueRoleInfo, OriginSoloLeagueRankStars) == 0x00013C, "Member 'FMultiSoloLeagueRoleInfo::OriginSoloLeagueRankStars' has a wrong offset!");
static_assert(offsetof(FMultiSoloLeagueRoleInfo, SettleSoloLeagueRankStars) == 0x000140, "Member 'FMultiSoloLeagueRoleInfo::SettleSoloLeagueRankStars' has a wrong offset!");
static_assert(offsetof(FMultiSoloLeagueRoleInfo, SettleSoloLeagueProtectScore) == 0x000144, "Member 'FMultiSoloLeagueRoleInfo::SettleSoloLeagueProtectScore' has a wrong offset!");

// ScriptStruct QRSL.MultiSoloLeagueRoomInfo
// 0x0328 (0x0328 - 0x0000)
struct FMultiSoloLeagueRoomInfo final
{
public:
	int32                                         RoomId;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESoloLeagueStage                              BattleStage;                                       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E9C[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BattleStartTime;                                   // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E9D[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         WinnerRoleId;                                      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WinnerRoleTeam;                                    // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E9E[0x20];                                    // 0x0028(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMultiSoloLeagueRoleInfo               RivalRole_A;                                       // 0x0048(0x0148)(NativeAccessSpecifierPublic)
	struct FMultiSoloLeagueRoleInfo               RivalRole_B;                                       // 0x0190(0x0148)(NativeAccessSpecifierPublic)
	class FString                                 RivalTeam_A;                                       // 0x02D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RivalTeam_B;                                       // 0x02E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMultiSoloLeagueRoleInfo>       RivalRoles_A;                                      // 0x02F8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMultiSoloLeagueRoleInfo>       RivalRoles_B;                                      // 0x0308(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E9F[0x10];                                    // 0x0318(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMultiSoloLeagueRoomInfo) == 0x000008, "Wrong alignment on FMultiSoloLeagueRoomInfo");
static_assert(sizeof(FMultiSoloLeagueRoomInfo) == 0x000328, "Wrong size on FMultiSoloLeagueRoomInfo");
static_assert(offsetof(FMultiSoloLeagueRoomInfo, RoomId) == 0x000000, "Member 'FMultiSoloLeagueRoomInfo::RoomId' has a wrong offset!");
static_assert(offsetof(FMultiSoloLeagueRoomInfo, BattleStage) == 0x000004, "Member 'FMultiSoloLeagueRoomInfo::BattleStage' has a wrong offset!");
static_assert(offsetof(FMultiSoloLeagueRoomInfo, BattleStartTime) == 0x000008, "Member 'FMultiSoloLeagueRoomInfo::BattleStartTime' has a wrong offset!");
static_assert(offsetof(FMultiSoloLeagueRoomInfo, WinnerRoleId) == 0x000010, "Member 'FMultiSoloLeagueRoomInfo::WinnerRoleId' has a wrong offset!");
static_assert(offsetof(FMultiSoloLeagueRoomInfo, WinnerRoleTeam) == 0x000018, "Member 'FMultiSoloLeagueRoomInfo::WinnerRoleTeam' has a wrong offset!");
static_assert(offsetof(FMultiSoloLeagueRoomInfo, RivalRole_A) == 0x000048, "Member 'FMultiSoloLeagueRoomInfo::RivalRole_A' has a wrong offset!");
static_assert(offsetof(FMultiSoloLeagueRoomInfo, RivalRole_B) == 0x000190, "Member 'FMultiSoloLeagueRoomInfo::RivalRole_B' has a wrong offset!");
static_assert(offsetof(FMultiSoloLeagueRoomInfo, RivalTeam_A) == 0x0002D8, "Member 'FMultiSoloLeagueRoomInfo::RivalTeam_A' has a wrong offset!");
static_assert(offsetof(FMultiSoloLeagueRoomInfo, RivalTeam_B) == 0x0002E8, "Member 'FMultiSoloLeagueRoomInfo::RivalTeam_B' has a wrong offset!");
static_assert(offsetof(FMultiSoloLeagueRoomInfo, RivalRoles_A) == 0x0002F8, "Member 'FMultiSoloLeagueRoomInfo::RivalRoles_A' has a wrong offset!");
static_assert(offsetof(FMultiSoloLeagueRoomInfo, RivalRoles_B) == 0x000308, "Member 'FMultiSoloLeagueRoomInfo::RivalRoles_B' has a wrong offset!");

// ScriptStruct QRSL.SoloBanPickInfo
// 0x0040 (0x0040 - 0x0000)
struct FSoloBanPickInfo final
{
public:
	TArray<class FName>                           BanWeapons;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           PickWeapons;                                       // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           WeaponPool;                                        // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EA0[0x10];                                    // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSoloBanPickInfo) == 0x000008, "Wrong alignment on FSoloBanPickInfo");
static_assert(sizeof(FSoloBanPickInfo) == 0x000040, "Wrong size on FSoloBanPickInfo");
static_assert(offsetof(FSoloBanPickInfo, BanWeapons) == 0x000000, "Member 'FSoloBanPickInfo::BanWeapons' has a wrong offset!");
static_assert(offsetof(FSoloBanPickInfo, PickWeapons) == 0x000010, "Member 'FSoloBanPickInfo::PickWeapons' has a wrong offset!");
static_assert(offsetof(FSoloBanPickInfo, WeaponPool) == 0x000020, "Member 'FSoloBanPickInfo::WeaponPool' has a wrong offset!");

// ScriptStruct QRSL.TheAsianGamesLevelData
// 0x0068 (0x0070 - 0x0008)
struct FTheAsianGamesLevelData final : public FTableRowBase
{
public:
	int32                                         LevelIndex;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EA1[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   LevelID;                                           // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     BirthTransform;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVector                                EndPoint;                                          // 0x0038(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EA2[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftClassPtr<class UClass>>           LevelBuff;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bNeedRideVehicle;                                  // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EA3[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AQRSLMountCharacter>        DesignativeMount;                                  // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedSkateboard;                                   // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotNeedRideVehicle;                               // 0x0069(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotNeedSkateboard;                                // 0x006A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EA4[0x5];                                     // 0x006B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTheAsianGamesLevelData) == 0x000008, "Wrong alignment on FTheAsianGamesLevelData");
static_assert(sizeof(FTheAsianGamesLevelData) == 0x000070, "Wrong size on FTheAsianGamesLevelData");
static_assert(offsetof(FTheAsianGamesLevelData, LevelIndex) == 0x000008, "Member 'FTheAsianGamesLevelData::LevelIndex' has a wrong offset!");
static_assert(offsetof(FTheAsianGamesLevelData, LevelID) == 0x000010, "Member 'FTheAsianGamesLevelData::LevelID' has a wrong offset!");
static_assert(offsetof(FTheAsianGamesLevelData, BirthTransform) == 0x000028, "Member 'FTheAsianGamesLevelData::BirthTransform' has a wrong offset!");
static_assert(offsetof(FTheAsianGamesLevelData, EndPoint) == 0x000038, "Member 'FTheAsianGamesLevelData::EndPoint' has a wrong offset!");
static_assert(offsetof(FTheAsianGamesLevelData, LevelBuff) == 0x000048, "Member 'FTheAsianGamesLevelData::LevelBuff' has a wrong offset!");
static_assert(offsetof(FTheAsianGamesLevelData, bNeedRideVehicle) == 0x000058, "Member 'FTheAsianGamesLevelData::bNeedRideVehicle' has a wrong offset!");
static_assert(offsetof(FTheAsianGamesLevelData, DesignativeMount) == 0x000060, "Member 'FTheAsianGamesLevelData::DesignativeMount' has a wrong offset!");
static_assert(offsetof(FTheAsianGamesLevelData, bNeedSkateboard) == 0x000068, "Member 'FTheAsianGamesLevelData::bNeedSkateboard' has a wrong offset!");
static_assert(offsetof(FTheAsianGamesLevelData, bNotNeedRideVehicle) == 0x000069, "Member 'FTheAsianGamesLevelData::bNotNeedRideVehicle' has a wrong offset!");
static_assert(offsetof(FTheAsianGamesLevelData, bNotNeedSkateboard) == 0x00006A, "Member 'FTheAsianGamesLevelData::bNotNeedSkateboard' has a wrong offset!");

// ScriptStruct QRSL.TheAsianGamesRank
// 0x0018 (0x0018 - 0x0000)
struct FTheAsianGamesRank final
{
public:
	int32                                         Rank;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EA5[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerName;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTheAsianGamesRank) == 0x000008, "Wrong alignment on FTheAsianGamesRank");
static_assert(sizeof(FTheAsianGamesRank) == 0x000018, "Wrong size on FTheAsianGamesRank");
static_assert(offsetof(FTheAsianGamesRank, Rank) == 0x000000, "Member 'FTheAsianGamesRank::Rank' has a wrong offset!");
static_assert(offsetof(FTheAsianGamesRank, PlayerName) == 0x000008, "Member 'FTheAsianGamesRank::PlayerName' has a wrong offset!");

// ScriptStruct QRSL.TheAsianGamesWallGroup
// 0x0008 (0x0008 - 0x0000)
struct FTheAsianGamesWallGroup final
{
public:
	int32                                         WallGroupIndex;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WallIndex;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTheAsianGamesWallGroup) == 0x000004, "Wrong alignment on FTheAsianGamesWallGroup");
static_assert(sizeof(FTheAsianGamesWallGroup) == 0x000008, "Wrong size on FTheAsianGamesWallGroup");
static_assert(offsetof(FTheAsianGamesWallGroup, WallGroupIndex) == 0x000000, "Member 'FTheAsianGamesWallGroup::WallGroupIndex' has a wrong offset!");
static_assert(offsetof(FTheAsianGamesWallGroup, WallIndex) == 0x000004, "Member 'FTheAsianGamesWallGroup::WallIndex' has a wrong offset!");

// ScriptStruct QRSL.TheAsianGamesMoveWallChangePropertyActor
// 0x0030 (0x0030 - 0x0000)
struct FTheAsianGamesMoveWallChangePropertyActor final
{
public:
	TSoftClassPtr<class UClass>                   Actor;                                             // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EA6[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTheAsianGamesMoveWallChangePropertyActor) == 0x000008, "Wrong alignment on FTheAsianGamesMoveWallChangePropertyActor");
static_assert(sizeof(FTheAsianGamesMoveWallChangePropertyActor) == 0x000030, "Wrong size on FTheAsianGamesMoveWallChangePropertyActor");
static_assert(offsetof(FTheAsianGamesMoveWallChangePropertyActor, Actor) == 0x000000, "Member 'FTheAsianGamesMoveWallChangePropertyActor::Actor' has a wrong offset!");
static_assert(offsetof(FTheAsianGamesMoveWallChangePropertyActor, Weight) == 0x000028, "Member 'FTheAsianGamesMoveWallChangePropertyActor::Weight' has a wrong offset!");

// ScriptStruct QRSL.TheAsianGamesMoveWallChangeProperty
// 0x0008 (0x0008 - 0x0000)
struct FTheAsianGamesMoveWallChangeProperty final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTheAsianGamesMoveWallChangeProperty) == 0x000004, "Wrong alignment on FTheAsianGamesMoveWallChangeProperty");
static_assert(sizeof(FTheAsianGamesMoveWallChangeProperty) == 0x000008, "Wrong size on FTheAsianGamesMoveWallChangeProperty");
static_assert(offsetof(FTheAsianGamesMoveWallChangeProperty, Num) == 0x000000, "Member 'FTheAsianGamesMoveWallChangeProperty::Num' has a wrong offset!");
static_assert(offsetof(FTheAsianGamesMoveWallChangeProperty, Weight) == 0x000004, "Member 'FTheAsianGamesMoveWallChangeProperty::Weight' has a wrong offset!");

// ScriptStruct QRSL.TheAsianGamesMoveWallInfo
// 0x0018 (0x0018 - 0x0000)
struct FTheAsianGamesMoveWallInfo final
{
public:
	TArray<int32>                                 MoveWallIndexTay;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EA7[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTheAsianGamesMoveWallInfo) == 0x000008, "Wrong alignment on FTheAsianGamesMoveWallInfo");
static_assert(sizeof(FTheAsianGamesMoveWallInfo) == 0x000018, "Wrong size on FTheAsianGamesMoveWallInfo");
static_assert(offsetof(FTheAsianGamesMoveWallInfo, MoveWallIndexTay) == 0x000000, "Member 'FTheAsianGamesMoveWallInfo::MoveWallIndexTay' has a wrong offset!");
static_assert(offsetof(FTheAsianGamesMoveWallInfo, Weight) == 0x000010, "Member 'FTheAsianGamesMoveWallInfo::Weight' has a wrong offset!");

// ScriptStruct QRSL.TheAsianGamesDropRockTime
// 0x0008 (0x0008 - 0x0000)
struct FTheAsianGamesDropRockTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTheAsianGamesDropRockTime) == 0x000004, "Wrong alignment on FTheAsianGamesDropRockTime");
static_assert(sizeof(FTheAsianGamesDropRockTime) == 0x000008, "Wrong size on FTheAsianGamesDropRockTime");
static_assert(offsetof(FTheAsianGamesDropRockTime, Time) == 0x000000, "Member 'FTheAsianGamesDropRockTime::Time' has a wrong offset!");
static_assert(offsetof(FTheAsianGamesDropRockTime, Weight) == 0x000004, "Member 'FTheAsianGamesDropRockTime::Weight' has a wrong offset!");

// ScriptStruct QRSL.TheAsianGamesDropRockActor
// 0x0030 (0x0030 - 0x0000)
struct FTheAsianGamesDropRockActor final
{
public:
	TSoftClassPtr<class UClass>                   Actor;                                             // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EA8[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTheAsianGamesDropRockActor) == 0x000008, "Wrong alignment on FTheAsianGamesDropRockActor");
static_assert(sizeof(FTheAsianGamesDropRockActor) == 0x000030, "Wrong size on FTheAsianGamesDropRockActor");
static_assert(offsetof(FTheAsianGamesDropRockActor, Actor) == 0x000000, "Member 'FTheAsianGamesDropRockActor::Actor' has a wrong offset!");
static_assert(offsetof(FTheAsianGamesDropRockActor, Weight) == 0x000028, "Member 'FTheAsianGamesDropRockActor::Weight' has a wrong offset!");

// ScriptStruct QRSL.TheAsianGamesDropRockNum
// 0x0008 (0x0008 - 0x0000)
struct FTheAsianGamesDropRockNum final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTheAsianGamesDropRockNum) == 0x000004, "Wrong alignment on FTheAsianGamesDropRockNum");
static_assert(sizeof(FTheAsianGamesDropRockNum) == 0x000008, "Wrong size on FTheAsianGamesDropRockNum");
static_assert(offsetof(FTheAsianGamesDropRockNum, Num) == 0x000000, "Member 'FTheAsianGamesDropRockNum::Num' has a wrong offset!");
static_assert(offsetof(FTheAsianGamesDropRockNum, Weight) == 0x000004, "Member 'FTheAsianGamesDropRockNum::Weight' has a wrong offset!");

// ScriptStruct QRSL.TheAsianGamesDropRockInfo
// 0x0040 (0x0040 - 0x0000)
struct FTheAsianGamesDropRockInfo final
{
public:
	struct FTransform                             DropRockActorTransaction;                          // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EA9[0xC];                                     // 0x0034(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTheAsianGamesDropRockInfo) == 0x000010, "Wrong alignment on FTheAsianGamesDropRockInfo");
static_assert(sizeof(FTheAsianGamesDropRockInfo) == 0x000040, "Wrong size on FTheAsianGamesDropRockInfo");
static_assert(offsetof(FTheAsianGamesDropRockInfo, DropRockActorTransaction) == 0x000000, "Member 'FTheAsianGamesDropRockInfo::DropRockActorTransaction' has a wrong offset!");
static_assert(offsetof(FTheAsianGamesDropRockInfo, Weight) == 0x000030, "Member 'FTheAsianGamesDropRockInfo::Weight' has a wrong offset!");

// ScriptStruct QRSL.TheAsianGamesPlayerInfo
// 0x0380 (0x0380 - 0x0000)
struct FTheAsianGamesPlayerInfo final
{
public:
	int64                                         PlayerID;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerLevelProgress;                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerExpendTime;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerRanking;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HaveSettled;                                       // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Uncompleted;                                       // 0x0015(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EAA[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerIndex;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MidwayLeave;                                       // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EAB[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActivityCloneSettlementInfo           SettlementInfo;                                    // 0x0020(0x0360)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTheAsianGamesPlayerInfo) == 0x000008, "Wrong alignment on FTheAsianGamesPlayerInfo");
static_assert(sizeof(FTheAsianGamesPlayerInfo) == 0x000380, "Wrong size on FTheAsianGamesPlayerInfo");
static_assert(offsetof(FTheAsianGamesPlayerInfo, PlayerID) == 0x000000, "Member 'FTheAsianGamesPlayerInfo::PlayerID' has a wrong offset!");
static_assert(offsetof(FTheAsianGamesPlayerInfo, PlayerLevelProgress) == 0x000008, "Member 'FTheAsianGamesPlayerInfo::PlayerLevelProgress' has a wrong offset!");
static_assert(offsetof(FTheAsianGamesPlayerInfo, PlayerExpendTime) == 0x00000C, "Member 'FTheAsianGamesPlayerInfo::PlayerExpendTime' has a wrong offset!");
static_assert(offsetof(FTheAsianGamesPlayerInfo, PlayerRanking) == 0x000010, "Member 'FTheAsianGamesPlayerInfo::PlayerRanking' has a wrong offset!");
static_assert(offsetof(FTheAsianGamesPlayerInfo, HaveSettled) == 0x000014, "Member 'FTheAsianGamesPlayerInfo::HaveSettled' has a wrong offset!");
static_assert(offsetof(FTheAsianGamesPlayerInfo, Uncompleted) == 0x000015, "Member 'FTheAsianGamesPlayerInfo::Uncompleted' has a wrong offset!");
static_assert(offsetof(FTheAsianGamesPlayerInfo, PlayerIndex) == 0x000018, "Member 'FTheAsianGamesPlayerInfo::PlayerIndex' has a wrong offset!");
static_assert(offsetof(FTheAsianGamesPlayerInfo, MidwayLeave) == 0x00001C, "Member 'FTheAsianGamesPlayerInfo::MidwayLeave' has a wrong offset!");
static_assert(offsetof(FTheAsianGamesPlayerInfo, SettlementInfo) == 0x000020, "Member 'FTheAsianGamesPlayerInfo::SettlementInfo' has a wrong offset!");

// ScriptStruct QRSL.TransferBoomSpecialBoomData
// 0x0020 (0x0020 - 0x0000)
struct FTransferBoomSpecialBoomData final
{
public:
	TWeakObjectPtr<class AQRSLPlayerCharacter>    BoomOwner;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AQRSLPlayerCharacter>    LastBoomOwner;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemainLifeTime;                                    // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemainHideTime;                                    // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalLife;                                         // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInHideTime;                                       // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EAC[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTransferBoomSpecialBoomData) == 0x000004, "Wrong alignment on FTransferBoomSpecialBoomData");
static_assert(sizeof(FTransferBoomSpecialBoomData) == 0x000020, "Wrong size on FTransferBoomSpecialBoomData");
static_assert(offsetof(FTransferBoomSpecialBoomData, BoomOwner) == 0x000000, "Member 'FTransferBoomSpecialBoomData::BoomOwner' has a wrong offset!");
static_assert(offsetof(FTransferBoomSpecialBoomData, LastBoomOwner) == 0x000008, "Member 'FTransferBoomSpecialBoomData::LastBoomOwner' has a wrong offset!");
static_assert(offsetof(FTransferBoomSpecialBoomData, RemainLifeTime) == 0x000010, "Member 'FTransferBoomSpecialBoomData::RemainLifeTime' has a wrong offset!");
static_assert(offsetof(FTransferBoomSpecialBoomData, RemainHideTime) == 0x000014, "Member 'FTransferBoomSpecialBoomData::RemainHideTime' has a wrong offset!");
static_assert(offsetof(FTransferBoomSpecialBoomData, TotalLife) == 0x000018, "Member 'FTransferBoomSpecialBoomData::TotalLife' has a wrong offset!");
static_assert(offsetof(FTransferBoomSpecialBoomData, bInHideTime) == 0x00001C, "Member 'FTransferBoomSpecialBoomData::bInHideTime' has a wrong offset!");

// ScriptStruct QRSL.OldTreasureMapDecomposeData
// 0x0010 (0x0010 - 0x0000)
struct FOldTreasureMapDecomposeData final
{
public:
	class FName                                   TreasureMapId;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DecomposeDropId;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOldTreasureMapDecomposeData) == 0x000004, "Wrong alignment on FOldTreasureMapDecomposeData");
static_assert(sizeof(FOldTreasureMapDecomposeData) == 0x000010, "Wrong size on FOldTreasureMapDecomposeData");
static_assert(offsetof(FOldTreasureMapDecomposeData, TreasureMapId) == 0x000000, "Member 'FOldTreasureMapDecomposeData::TreasureMapId' has a wrong offset!");
static_assert(offsetof(FOldTreasureMapDecomposeData, DecomposeDropId) == 0x000008, "Member 'FOldTreasureMapDecomposeData::DecomposeDropId' has a wrong offset!");

// ScriptStruct QRSL.AcquireTipsInfo
// 0x0038 (0x0038 - 0x0000)
struct FAcquireTipsInfo final
{
public:
	class FName                                   ItemID;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UQRSLUI_TipsBase>        UITips;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ItemName;                                          // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EAD[0x8];                                     // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAcquireTipsInfo) == 0x000008, "Wrong alignment on FAcquireTipsInfo");
static_assert(sizeof(FAcquireTipsInfo) == 0x000038, "Wrong size on FAcquireTipsInfo");
static_assert(offsetof(FAcquireTipsInfo, ItemID) == 0x000000, "Member 'FAcquireTipsInfo::ItemID' has a wrong offset!");
static_assert(offsetof(FAcquireTipsInfo, Num) == 0x000008, "Member 'FAcquireTipsInfo::Num' has a wrong offset!");
static_assert(offsetof(FAcquireTipsInfo, Duration) == 0x00000C, "Member 'FAcquireTipsInfo::Duration' has a wrong offset!");
static_assert(offsetof(FAcquireTipsInfo, UITips) == 0x000010, "Member 'FAcquireTipsInfo::UITips' has a wrong offset!");
static_assert(offsetof(FAcquireTipsInfo, ItemName) == 0x000018, "Member 'FAcquireTipsInfo::ItemName' has a wrong offset!");

// ScriptStruct QRSL.BigMapGuideInfo
// 0x001C (0x001C - 0x0000)
struct FBigMapGuideInfo final
{
public:
	class FName                                   GuideID;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuideStepId;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GuidePointID;                                      // 0x000C(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GuidePOIType;                                      // 0x0014(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBigMapGuideInfo) == 0x000004, "Wrong alignment on FBigMapGuideInfo");
static_assert(sizeof(FBigMapGuideInfo) == 0x00001C, "Wrong size on FBigMapGuideInfo");
static_assert(offsetof(FBigMapGuideInfo, GuideID) == 0x000000, "Member 'FBigMapGuideInfo::GuideID' has a wrong offset!");
static_assert(offsetof(FBigMapGuideInfo, GuideStepId) == 0x000008, "Member 'FBigMapGuideInfo::GuideStepId' has a wrong offset!");
static_assert(offsetof(FBigMapGuideInfo, GuidePointID) == 0x00000C, "Member 'FBigMapGuideInfo::GuidePointID' has a wrong offset!");
static_assert(offsetof(FBigMapGuideInfo, GuidePOIType) == 0x000014, "Member 'FBigMapGuideInfo::GuidePOIType' has a wrong offset!");

// ScriptStruct QRSL.WormholeSkyData
// 0x0068 (0x0068 - 0x0000)
struct FWormholeSkyData final
{
public:
	struct FLinearColor                           SunColor;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogColor;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogDensity;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BGSkyColor;                                        // 0x0024(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FXStarColor;                                       // 0x0034(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FXCloudColor;                                      // 0x0044(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkyLightColor;                                     // 0x0054(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkylightDensity;                                   // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormholeSkyData) == 0x000004, "Wrong alignment on FWormholeSkyData");
static_assert(sizeof(FWormholeSkyData) == 0x000068, "Wrong size on FWormholeSkyData");
static_assert(offsetof(FWormholeSkyData, SunColor) == 0x000000, "Member 'FWormholeSkyData::SunColor' has a wrong offset!");
static_assert(offsetof(FWormholeSkyData, FogColor) == 0x000010, "Member 'FWormholeSkyData::FogColor' has a wrong offset!");
static_assert(offsetof(FWormholeSkyData, FogDensity) == 0x000020, "Member 'FWormholeSkyData::FogDensity' has a wrong offset!");
static_assert(offsetof(FWormholeSkyData, BGSkyColor) == 0x000024, "Member 'FWormholeSkyData::BGSkyColor' has a wrong offset!");
static_assert(offsetof(FWormholeSkyData, FXStarColor) == 0x000034, "Member 'FWormholeSkyData::FXStarColor' has a wrong offset!");
static_assert(offsetof(FWormholeSkyData, FXCloudColor) == 0x000044, "Member 'FWormholeSkyData::FXCloudColor' has a wrong offset!");
static_assert(offsetof(FWormholeSkyData, SkyLightColor) == 0x000054, "Member 'FWormholeSkyData::SkyLightColor' has a wrong offset!");
static_assert(offsetof(FWormholeSkyData, SkylightDensity) == 0x000064, "Member 'FWormholeSkyData::SkylightDensity' has a wrong offset!");

// ScriptStruct QRSL.YunTaiMarticalSavedPlayerDataInfo
// 0x0028 (0x0028 - 0x0000)
struct FYunTaiMarticalSavedPlayerDataInfo final
{
public:
	class AQRSLPlayerCharacter*                   PlayerPtr;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         PlayerID;                                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentRoundFlag;                                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EAE[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHottaDropItemInfo>             RewardList;                                        // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYunTaiMarticalSavedPlayerDataInfo) == 0x000008, "Wrong alignment on FYunTaiMarticalSavedPlayerDataInfo");
static_assert(sizeof(FYunTaiMarticalSavedPlayerDataInfo) == 0x000028, "Wrong size on FYunTaiMarticalSavedPlayerDataInfo");
static_assert(offsetof(FYunTaiMarticalSavedPlayerDataInfo, PlayerPtr) == 0x000000, "Member 'FYunTaiMarticalSavedPlayerDataInfo::PlayerPtr' has a wrong offset!");
static_assert(offsetof(FYunTaiMarticalSavedPlayerDataInfo, PlayerID) == 0x000008, "Member 'FYunTaiMarticalSavedPlayerDataInfo::PlayerID' has a wrong offset!");
static_assert(offsetof(FYunTaiMarticalSavedPlayerDataInfo, CurrentRoundFlag) == 0x000010, "Member 'FYunTaiMarticalSavedPlayerDataInfo::CurrentRoundFlag' has a wrong offset!");
static_assert(offsetof(FYunTaiMarticalSavedPlayerDataInfo, RewardList) == 0x000018, "Member 'FYunTaiMarticalSavedPlayerDataInfo::RewardList' has a wrong offset!");

}

