#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Tide_LevelSequence

#include "Basic.hpp"

#include "HottaFramework_structs.hpp"


namespace SDK::Params
{

// Function Tide_LevelSequence.SequenceDirector_C.ExecuteUbergraph_SequenceDirector
// 0x00C8 (0x00C8 - 0x0000)
struct SequenceDirector_C_ExecuteUbergraph_SequenceDirector final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E02[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHottaTideVolume*                       K2Node_CustomEvent_HottaTideVolume;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETideState                                    K2Node_CustomEvent_NewState;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E03[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHottaTideVolume*                       K2Node_CustomEvent_HottaTideVolume2_1;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETideState                                    K2Node_CustomEvent_NewState_11;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E04[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHottaTideVolume*                       K2Node_CustomEvent_HottaTideVolume3_1;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETideState                                    K2Node_CustomEvent_NewState_10;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E05[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHottaTideVolume*                       K2Node_CustomEvent_HottaTideVolume4_1;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETideState                                    K2Node_CustomEvent_NewState_9;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E06[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHottaTideVolume*                       K2Node_CustomEvent_HottaTideVolume5_1;             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETideState                                    K2Node_CustomEvent_NewState_8;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E07[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHottaTideVolume*                       K2Node_CustomEvent_HottaTideVolume6_1;             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETideState                                    K2Node_CustomEvent_NewState_7;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E08[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHottaTideVolume*                       K2Node_CustomEvent_HottaTideVolume2;               // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETideState                                    K2Node_CustomEvent_NewState_6;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E09[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHottaTideVolume*                       K2Node_CustomEvent_HottaTideVolume3;               // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETideState                                    K2Node_CustomEvent_NewState_5;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E0A[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHottaTideVolume*                       K2Node_CustomEvent_HottaTideVolume4;               // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETideState                                    K2Node_CustomEvent_NewState_4;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E0B[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHottaTideVolume*                       K2Node_CustomEvent_HottaTideVolume5;               // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETideState                                    K2Node_CustomEvent_NewState_3;                     // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E0C[0x7];                                     // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHottaTideVolume*                       K2Node_CustomEvent_HottaTideVolume6;               // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETideState                                    K2Node_CustomEvent_NewState_2;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E0D[0x7];                                     // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHottaTideVolume*                       K2Node_CustomEvent_HottaTideVolume_1;              // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETideState                                    K2Node_CustomEvent_NewState_1;                     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector) == 0x000008, "Wrong alignment on SequenceDirector_C_ExecuteUbergraph_SequenceDirector");
static_assert(sizeof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector) == 0x0000C8, "Wrong size on SequenceDirector_C_ExecuteUbergraph_SequenceDirector");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, EntryPoint) == 0x000000, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::EntryPoint' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_HottaTideVolume) == 0x000008, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_HottaTideVolume' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_NewState) == 0x000010, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_NewState' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_HottaTideVolume2_1) == 0x000018, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_HottaTideVolume2_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_NewState_11) == 0x000020, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_NewState_11' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_HottaTideVolume3_1) == 0x000028, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_HottaTideVolume3_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_NewState_10) == 0x000030, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_NewState_10' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_HottaTideVolume4_1) == 0x000038, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_HottaTideVolume4_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_NewState_9) == 0x000040, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_NewState_9' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_HottaTideVolume5_1) == 0x000048, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_HottaTideVolume5_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_NewState_8) == 0x000050, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_NewState_8' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_HottaTideVolume6_1) == 0x000058, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_HottaTideVolume6_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_NewState_7) == 0x000060, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_NewState_7' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_HottaTideVolume2) == 0x000068, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_HottaTideVolume2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_NewState_6) == 0x000070, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_NewState_6' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_HottaTideVolume3) == 0x000078, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_HottaTideVolume3' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_NewState_5) == 0x000080, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_NewState_5' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_HottaTideVolume4) == 0x000088, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_HottaTideVolume4' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_NewState_4) == 0x000090, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_NewState_4' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_HottaTideVolume5) == 0x000098, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_HottaTideVolume5' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_NewState_3) == 0x0000A0, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_NewState_3' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_HottaTideVolume6) == 0x0000A8, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_HottaTideVolume6' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_NewState_2) == 0x0000B0, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_NewState_2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_HottaTideVolume_1) == 0x0000B8, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_HottaTideVolume_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_NewState_1) == 0x0000C0, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_NewState_1' has a wrong offset!");

// Function Tide_LevelSequence.SequenceDirector_C.HottaTideVolume_Event_1
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_HottaTideVolume_Event_1 final
{
public:
	class AHottaTideVolume*                       HottaTideVolume;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETideState                                    NewState;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_HottaTideVolume_Event_1) == 0x000008, "Wrong alignment on SequenceDirector_C_HottaTideVolume_Event_1");
static_assert(sizeof(SequenceDirector_C_HottaTideVolume_Event_1) == 0x000010, "Wrong size on SequenceDirector_C_HottaTideVolume_Event_1");
static_assert(offsetof(SequenceDirector_C_HottaTideVolume_Event_1, HottaTideVolume) == 0x000000, "Member 'SequenceDirector_C_HottaTideVolume_Event_1::HottaTideVolume' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_HottaTideVolume_Event_1, NewState) == 0x000008, "Member 'SequenceDirector_C_HottaTideVolume_Event_1::NewState' has a wrong offset!");

// Function Tide_LevelSequence.SequenceDirector_C.HottaTideVolume_Event_0
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_HottaTideVolume_Event_0 final
{
public:
	class AHottaTideVolume*                       HottaTideVolume;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETideState                                    NewState;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_HottaTideVolume_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_HottaTideVolume_Event_0");
static_assert(sizeof(SequenceDirector_C_HottaTideVolume_Event_0) == 0x000010, "Wrong size on SequenceDirector_C_HottaTideVolume_Event_0");
static_assert(offsetof(SequenceDirector_C_HottaTideVolume_Event_0, HottaTideVolume) == 0x000000, "Member 'SequenceDirector_C_HottaTideVolume_Event_0::HottaTideVolume' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_HottaTideVolume_Event_0, NewState) == 0x000008, "Member 'SequenceDirector_C_HottaTideVolume_Event_0::NewState' has a wrong offset!");

// Function Tide_LevelSequence.SequenceDirector_C.HottaTideVolume6_Event_1
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_HottaTideVolume6_Event_1 final
{
public:
	class AHottaTideVolume*                       HottaTideVolume6;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETideState                                    NewState;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_HottaTideVolume6_Event_1) == 0x000008, "Wrong alignment on SequenceDirector_C_HottaTideVolume6_Event_1");
static_assert(sizeof(SequenceDirector_C_HottaTideVolume6_Event_1) == 0x000010, "Wrong size on SequenceDirector_C_HottaTideVolume6_Event_1");
static_assert(offsetof(SequenceDirector_C_HottaTideVolume6_Event_1, HottaTideVolume6) == 0x000000, "Member 'SequenceDirector_C_HottaTideVolume6_Event_1::HottaTideVolume6' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_HottaTideVolume6_Event_1, NewState) == 0x000008, "Member 'SequenceDirector_C_HottaTideVolume6_Event_1::NewState' has a wrong offset!");

// Function Tide_LevelSequence.SequenceDirector_C.HottaTideVolume5_Event_1
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_HottaTideVolume5_Event_1 final
{
public:
	class AHottaTideVolume*                       HottaTideVolume5;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETideState                                    NewState;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_HottaTideVolume5_Event_1) == 0x000008, "Wrong alignment on SequenceDirector_C_HottaTideVolume5_Event_1");
static_assert(sizeof(SequenceDirector_C_HottaTideVolume5_Event_1) == 0x000010, "Wrong size on SequenceDirector_C_HottaTideVolume5_Event_1");
static_assert(offsetof(SequenceDirector_C_HottaTideVolume5_Event_1, HottaTideVolume5) == 0x000000, "Member 'SequenceDirector_C_HottaTideVolume5_Event_1::HottaTideVolume5' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_HottaTideVolume5_Event_1, NewState) == 0x000008, "Member 'SequenceDirector_C_HottaTideVolume5_Event_1::NewState' has a wrong offset!");

// Function Tide_LevelSequence.SequenceDirector_C.HottaTideVolume4_Event_1
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_HottaTideVolume4_Event_1 final
{
public:
	class AHottaTideVolume*                       HottaTideVolume4;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETideState                                    NewState;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_HottaTideVolume4_Event_1) == 0x000008, "Wrong alignment on SequenceDirector_C_HottaTideVolume4_Event_1");
static_assert(sizeof(SequenceDirector_C_HottaTideVolume4_Event_1) == 0x000010, "Wrong size on SequenceDirector_C_HottaTideVolume4_Event_1");
static_assert(offsetof(SequenceDirector_C_HottaTideVolume4_Event_1, HottaTideVolume4) == 0x000000, "Member 'SequenceDirector_C_HottaTideVolume4_Event_1::HottaTideVolume4' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_HottaTideVolume4_Event_1, NewState) == 0x000008, "Member 'SequenceDirector_C_HottaTideVolume4_Event_1::NewState' has a wrong offset!");

// Function Tide_LevelSequence.SequenceDirector_C.HottaTideVolume3_Event_1
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_HottaTideVolume3_Event_1 final
{
public:
	class AHottaTideVolume*                       HottaTideVolume3;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETideState                                    NewState;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_HottaTideVolume3_Event_1) == 0x000008, "Wrong alignment on SequenceDirector_C_HottaTideVolume3_Event_1");
static_assert(sizeof(SequenceDirector_C_HottaTideVolume3_Event_1) == 0x000010, "Wrong size on SequenceDirector_C_HottaTideVolume3_Event_1");
static_assert(offsetof(SequenceDirector_C_HottaTideVolume3_Event_1, HottaTideVolume3) == 0x000000, "Member 'SequenceDirector_C_HottaTideVolume3_Event_1::HottaTideVolume3' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_HottaTideVolume3_Event_1, NewState) == 0x000008, "Member 'SequenceDirector_C_HottaTideVolume3_Event_1::NewState' has a wrong offset!");

// Function Tide_LevelSequence.SequenceDirector_C.HottaTideVolume2_Event_1
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_HottaTideVolume2_Event_1 final
{
public:
	class AHottaTideVolume*                       HottaTideVolume2;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETideState                                    NewState;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_HottaTideVolume2_Event_1) == 0x000008, "Wrong alignment on SequenceDirector_C_HottaTideVolume2_Event_1");
static_assert(sizeof(SequenceDirector_C_HottaTideVolume2_Event_1) == 0x000010, "Wrong size on SequenceDirector_C_HottaTideVolume2_Event_1");
static_assert(offsetof(SequenceDirector_C_HottaTideVolume2_Event_1, HottaTideVolume2) == 0x000000, "Member 'SequenceDirector_C_HottaTideVolume2_Event_1::HottaTideVolume2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_HottaTideVolume2_Event_1, NewState) == 0x000008, "Member 'SequenceDirector_C_HottaTideVolume2_Event_1::NewState' has a wrong offset!");

// Function Tide_LevelSequence.SequenceDirector_C.HottaTideVolume6_Event_0
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_HottaTideVolume6_Event_0 final
{
public:
	class AHottaTideVolume*                       HottaTideVolume6;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETideState                                    NewState;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_HottaTideVolume6_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_HottaTideVolume6_Event_0");
static_assert(sizeof(SequenceDirector_C_HottaTideVolume6_Event_0) == 0x000010, "Wrong size on SequenceDirector_C_HottaTideVolume6_Event_0");
static_assert(offsetof(SequenceDirector_C_HottaTideVolume6_Event_0, HottaTideVolume6) == 0x000000, "Member 'SequenceDirector_C_HottaTideVolume6_Event_0::HottaTideVolume6' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_HottaTideVolume6_Event_0, NewState) == 0x000008, "Member 'SequenceDirector_C_HottaTideVolume6_Event_0::NewState' has a wrong offset!");

// Function Tide_LevelSequence.SequenceDirector_C.HottaTideVolume5_Event_0
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_HottaTideVolume5_Event_0 final
{
public:
	class AHottaTideVolume*                       HottaTideVolume5;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETideState                                    NewState;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_HottaTideVolume5_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_HottaTideVolume5_Event_0");
static_assert(sizeof(SequenceDirector_C_HottaTideVolume5_Event_0) == 0x000010, "Wrong size on SequenceDirector_C_HottaTideVolume5_Event_0");
static_assert(offsetof(SequenceDirector_C_HottaTideVolume5_Event_0, HottaTideVolume5) == 0x000000, "Member 'SequenceDirector_C_HottaTideVolume5_Event_0::HottaTideVolume5' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_HottaTideVolume5_Event_0, NewState) == 0x000008, "Member 'SequenceDirector_C_HottaTideVolume5_Event_0::NewState' has a wrong offset!");

// Function Tide_LevelSequence.SequenceDirector_C.HottaTideVolume4_Event_0
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_HottaTideVolume4_Event_0 final
{
public:
	class AHottaTideVolume*                       HottaTideVolume4;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETideState                                    NewState;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_HottaTideVolume4_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_HottaTideVolume4_Event_0");
static_assert(sizeof(SequenceDirector_C_HottaTideVolume4_Event_0) == 0x000010, "Wrong size on SequenceDirector_C_HottaTideVolume4_Event_0");
static_assert(offsetof(SequenceDirector_C_HottaTideVolume4_Event_0, HottaTideVolume4) == 0x000000, "Member 'SequenceDirector_C_HottaTideVolume4_Event_0::HottaTideVolume4' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_HottaTideVolume4_Event_0, NewState) == 0x000008, "Member 'SequenceDirector_C_HottaTideVolume4_Event_0::NewState' has a wrong offset!");

// Function Tide_LevelSequence.SequenceDirector_C.HottaTideVolume3_Event_0
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_HottaTideVolume3_Event_0 final
{
public:
	class AHottaTideVolume*                       HottaTideVolume3;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETideState                                    NewState;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_HottaTideVolume3_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_HottaTideVolume3_Event_0");
static_assert(sizeof(SequenceDirector_C_HottaTideVolume3_Event_0) == 0x000010, "Wrong size on SequenceDirector_C_HottaTideVolume3_Event_0");
static_assert(offsetof(SequenceDirector_C_HottaTideVolume3_Event_0, HottaTideVolume3) == 0x000000, "Member 'SequenceDirector_C_HottaTideVolume3_Event_0::HottaTideVolume3' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_HottaTideVolume3_Event_0, NewState) == 0x000008, "Member 'SequenceDirector_C_HottaTideVolume3_Event_0::NewState' has a wrong offset!");

// Function Tide_LevelSequence.SequenceDirector_C.HottaTideVolume2_Event_0
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_HottaTideVolume2_Event_0 final
{
public:
	class AHottaTideVolume*                       HottaTideVolume2;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETideState                                    NewState;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_HottaTideVolume2_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_HottaTideVolume2_Event_0");
static_assert(sizeof(SequenceDirector_C_HottaTideVolume2_Event_0) == 0x000010, "Wrong size on SequenceDirector_C_HottaTideVolume2_Event_0");
static_assert(offsetof(SequenceDirector_C_HottaTideVolume2_Event_0, HottaTideVolume2) == 0x000000, "Member 'SequenceDirector_C_HottaTideVolume2_Event_0::HottaTideVolume2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_HottaTideVolume2_Event_0, NewState) == 0x000008, "Member 'SequenceDirector_C_HottaTideVolume2_Event_0::NewState' has a wrong offset!");

// Function Tide_LevelSequence.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0 final
{
public:
	class AHottaTideVolume*                       HottaTideVolume2;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0, HottaTideVolume2) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0::HottaTideVolume2' has a wrong offset!");

// Function Tide_LevelSequence.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_1
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1 final
{
public:
	class AHottaTideVolume*                       HottaTideVolume2;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1, HottaTideVolume2) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1::HottaTideVolume2' has a wrong offset!");

// Function Tide_LevelSequence.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_2
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2 final
{
public:
	class AHottaTideVolume*                       HottaTideVolume2;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2, HottaTideVolume2) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2::HottaTideVolume2' has a wrong offset!");

// Function Tide_LevelSequence.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_3
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3 final
{
public:
	class AHottaTideVolume*                       HottaTideVolume2;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3, HottaTideVolume2) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3::HottaTideVolume2' has a wrong offset!");

// Function Tide_LevelSequence.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_4
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4 final
{
public:
	class AHottaTideVolume*                       HottaTideVolume3;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4, HottaTideVolume3) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4::HottaTideVolume3' has a wrong offset!");

// Function Tide_LevelSequence.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_5
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_5 final
{
public:
	class AHottaTideVolume*                       HottaTideVolume3;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_5) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_5");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_5) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_5");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_5, HottaTideVolume3) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_5::HottaTideVolume3' has a wrong offset!");

// Function Tide_LevelSequence.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_6
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6 final
{
public:
	class AHottaTideVolume*                       HottaTideVolume3;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6, HottaTideVolume3) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6::HottaTideVolume3' has a wrong offset!");

// Function Tide_LevelSequence.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_7
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7 final
{
public:
	class AHottaTideVolume*                       HottaTideVolume3;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7, HottaTideVolume3) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7::HottaTideVolume3' has a wrong offset!");

// Function Tide_LevelSequence.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_8
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8 final
{
public:
	class AHottaTideVolume*                       HottaTideVolume4;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8, HottaTideVolume4) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8::HottaTideVolume4' has a wrong offset!");

// Function Tide_LevelSequence.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_9
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9 final
{
public:
	class AHottaTideVolume*                       HottaTideVolume4;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9, HottaTideVolume4) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9::HottaTideVolume4' has a wrong offset!");

// Function Tide_LevelSequence.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_10
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10 final
{
public:
	class AHottaTideVolume*                       HottaTideVolume4;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10, HottaTideVolume4) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10::HottaTideVolume4' has a wrong offset!");

// Function Tide_LevelSequence.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_11
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_11 final
{
public:
	class AHottaTideVolume*                       HottaTideVolume4;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_11) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_11");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_11) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_11");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_11, HottaTideVolume4) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_11::HottaTideVolume4' has a wrong offset!");

// Function Tide_LevelSequence.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_12
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_12 final
{
public:
	class AHottaTideVolume*                       HottaTideVolume5;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_12) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_12");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_12) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_12");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_12, HottaTideVolume5) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_12::HottaTideVolume5' has a wrong offset!");

// Function Tide_LevelSequence.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_13
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_13 final
{
public:
	class AHottaTideVolume*                       HottaTideVolume5;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_13) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_13");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_13) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_13");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_13, HottaTideVolume5) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_13::HottaTideVolume5' has a wrong offset!");

// Function Tide_LevelSequence.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_14
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_14 final
{
public:
	class AHottaTideVolume*                       HottaTideVolume5;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_14) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_14");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_14) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_14");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_14, HottaTideVolume5) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_14::HottaTideVolume5' has a wrong offset!");

// Function Tide_LevelSequence.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_15
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_15 final
{
public:
	class AHottaTideVolume*                       HottaTideVolume5;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_15) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_15");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_15) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_15");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_15, HottaTideVolume5) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_15::HottaTideVolume5' has a wrong offset!");

// Function Tide_LevelSequence.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_16
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_16 final
{
public:
	class AHottaTideVolume*                       HottaTideVolume6;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_16) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_16");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_16) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_16");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_16, HottaTideVolume6) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_16::HottaTideVolume6' has a wrong offset!");

// Function Tide_LevelSequence.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_17
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_17 final
{
public:
	class AHottaTideVolume*                       HottaTideVolume6;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_17) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_17");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_17) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_17");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_17, HottaTideVolume6) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_17::HottaTideVolume6' has a wrong offset!");

// Function Tide_LevelSequence.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_18
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_18 final
{
public:
	class AHottaTideVolume*                       HottaTideVolume6;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_18) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_18");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_18) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_18");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_18, HottaTideVolume6) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_18::HottaTideVolume6' has a wrong offset!");

// Function Tide_LevelSequence.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_19
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_19 final
{
public:
	class AHottaTideVolume*                       HottaTideVolume6;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_19) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_19");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_19) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_19");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_19, HottaTideVolume6) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_19::HottaTideVolume6' has a wrong offset!");

// Function Tide_LevelSequence.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_20
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_20 final
{
public:
	class AHottaTideVolume*                       HottaTideVolume;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_20) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_20");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_20) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_20");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_20, HottaTideVolume) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_20::HottaTideVolume' has a wrong offset!");

// Function Tide_LevelSequence.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_21
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_21 final
{
public:
	class AHottaTideVolume*                       HottaTideVolume;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_21) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_21");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_21) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_21");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_21, HottaTideVolume) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_21::HottaTideVolume' has a wrong offset!");

// Function Tide_LevelSequence.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_22
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_22 final
{
public:
	class AHottaTideVolume*                       HottaTideVolume;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_22) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_22");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_22) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_22");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_22, HottaTideVolume) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_22::HottaTideVolume' has a wrong offset!");

}

