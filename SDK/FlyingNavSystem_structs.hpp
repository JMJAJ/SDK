#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FlyingNavSystem

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum FlyingNavSystem.EPathfindingResult
// NumValues: 0x0007
enum class EPathfindingResult : uint8
{
	Invalid                                  = 0,
	Error                                    = 1,
	Fail                                     = 2,
	Success                                  = 3,
	RecastError                              = 4,
	Null                                     = 5,
	EPathfindingResult_MAX                   = 6,
};

// Enum FlyingNavSystem.EThreadSubdivisions
// NumValues: 0x0006
enum class EThreadSubdivisions : uint8
{
	Zero                                     = 0,
	One                                      = 1,
	Two                                      = 2,
	Three                                    = 3,
	Four                                     = 4,
	EThreadSubdivisions_MAX                  = 5,
};

// Enum FlyingNavSystem.EPathfindingAlgorithm
// NumValues: 0x0004
enum class EPathfindingAlgorithm : uint8
{
	AStar                                    = 0,
	LazyThetaStar                            = 1,
	ThetaStar                                = 2,
	EPathfindingAlgorithm_MAX                = 3,
};

// ScriptStruct FlyingNavSystem.SVOQuerySettings
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FSVOQuerySettings final
{
public:
	EPathfindingAlgorithm                         PathfindingAlgorithm;                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowPartialPaths;                                // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181D[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeuristicScale;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseUnitCost;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseNodeCompensation;                              // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePawnCentreForPathFollowing;                    // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSmoothPath;                                       // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DebugPathColor;                                    // 0x000C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181E[0x14];                                    // 0x001C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSVOQuerySettings) == 0x000008, "Wrong alignment on FSVOQuerySettings");
static_assert(sizeof(FSVOQuerySettings) == 0x000030, "Wrong size on FSVOQuerySettings");
static_assert(offsetof(FSVOQuerySettings, PathfindingAlgorithm) == 0x000000, "Member 'FSVOQuerySettings::PathfindingAlgorithm' has a wrong offset!");
static_assert(offsetof(FSVOQuerySettings, bAllowPartialPaths) == 0x000001, "Member 'FSVOQuerySettings::bAllowPartialPaths' has a wrong offset!");
static_assert(offsetof(FSVOQuerySettings, HeuristicScale) == 0x000004, "Member 'FSVOQuerySettings::HeuristicScale' has a wrong offset!");
static_assert(offsetof(FSVOQuerySettings, bUseUnitCost) == 0x000008, "Member 'FSVOQuerySettings::bUseUnitCost' has a wrong offset!");
static_assert(offsetof(FSVOQuerySettings, bUseNodeCompensation) == 0x000009, "Member 'FSVOQuerySettings::bUseNodeCompensation' has a wrong offset!");
static_assert(offsetof(FSVOQuerySettings, bUsePawnCentreForPathFollowing) == 0x00000A, "Member 'FSVOQuerySettings::bUsePawnCentreForPathFollowing' has a wrong offset!");
static_assert(offsetof(FSVOQuerySettings, bSmoothPath) == 0x00000B, "Member 'FSVOQuerySettings::bSmoothPath' has a wrong offset!");
static_assert(offsetof(FSVOQuerySettings, DebugPathColor) == 0x00000C, "Member 'FSVOQuerySettings::DebugPathColor' has a wrong offset!");

}

