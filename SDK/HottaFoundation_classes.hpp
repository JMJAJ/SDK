#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HottaFoundation

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// Class HottaFoundation.HottaGameplayStatics
// 0x0000 (0x0028 - 0x0028)
class UHottaGameplayStatics final : public UBlueprintFunctionLibrary
{
public:
	static class UAkComponent* GetAkComponent(class USceneComponent* AttachToComponent, bool* ComponentCreated, class FName AttachPointName, const struct FVector& Location, EAttachLocation LocationType, float OcclusionRefreshInterval);
	static int32 PostEvent(class UAkAudioEvent* AkEvent, class AActor* Actor, int32 CallbackMask, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& PostEventCallback, const TArray<struct FAkExternalSourceInfo>& ExternalSources, bool bStopWhenAttachedToDestroyed, const class FString& EventName, float OcclusionRefreshInterval);
	static int32 PostEventAttached(class UAkAudioEvent* AkEvent, class AActor* Actor, class FName AttachPointName, bool bStopWhenAttachedToDestroyed, const class FString& EventName, float OcclusionRefreshInterval);
	static class UAkComponent* SpawnAkComponentAtLocation(class UObject* WorldContextObject, class UAkAudioEvent* AkEvent, class UAkAuxBus* EarlyReflectionsBus, const struct FVector& Location, const struct FRotator& Orientation, bool AutoPost, const class FString& EventName, const class FString& EarlyReflectionsBusName, bool AutoDestroy, float OcclusionRefreshInterval);
	static class UAkComponent* SpawnAkcomponentAttacked(class UAkAudioEvent* AkEvent, class USceneComponent* AttachToComponent, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& PostEventCallback, EAkCallbackType CallbackMask, const class FName& AttachPointName, const struct FVector& Location, EAttachLocation LocationType, float OcclusionRefreshInterval);
	static class UAkComponent* SpawnAkcomponentAttacked2(class UAkAudioEvent* AkEvent, class USceneComponent* AttachToComponent, int32* OutPlayingID, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& PostEventCallback, EAkCallbackType CallbackMask, const class FName& AttachPointName, const struct FVector& Location, EAttachLocation LocationType, float OcclusionRefreshInterval);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HottaGameplayStatics">();
	}
	static class UHottaGameplayStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHottaGameplayStatics>();
	}
};
static_assert(alignof(UHottaGameplayStatics) == 0x000008, "Wrong alignment on UHottaGameplayStatics");
static_assert(sizeof(UHottaGameplayStatics) == 0x000028, "Wrong size on UHottaGameplayStatics");

// Class HottaFoundation.SkeletalMeshMergeFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class USkeletalMeshMergeFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class USkeletalMesh* MergeSkeletalMeshs(const struct FSkeletalMeshMergeOptions& Options, const TArray<class USkeletalMesh*>& CastShadowSkeletalMeshs);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SkeletalMeshMergeFunctionLibrary">();
	}
	static class USkeletalMeshMergeFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkeletalMeshMergeFunctionLibrary>();
	}
};
static_assert(alignof(USkeletalMeshMergeFunctionLibrary) == 0x000008, "Wrong alignment on USkeletalMeshMergeFunctionLibrary");
static_assert(sizeof(USkeletalMeshMergeFunctionLibrary) == 0x000028, "Wrong size on USkeletalMeshMergeFunctionLibrary");

}

