#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FlyingNavSystem

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "NavigationSystem_classes.hpp"
#include "Engine_classes.hpp"
#include "FlyingNavSystem_structs.hpp"


namespace SDK
{

// Class FlyingNavSystem.PathBatchComponent
// 0x0040 (0x04F0 - 0x04B0)
class UPathBatchComponent final : public ULineBatchComponent
{
public:
	uint8                                         Pad_181F[0x40];                                    // 0x04B0(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PathBatchComponent">();
	}
	static class UPathBatchComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPathBatchComponent>();
	}
};
static_assert(alignof(UPathBatchComponent) == 0x000010, "Wrong alignment on UPathBatchComponent");
static_assert(sizeof(UPathBatchComponent) == 0x0004F0, "Wrong size on UPathBatchComponent");

// Class FlyingNavSystem.CatmullRomSpline
// 0x0048 (0x0070 - 0x0028)
class UCatmullRomSpline final : public UObject
{
public:
	uint8                                         Pad_1820[0x48];                                    // 0x0028(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GenerateSpline(const TArray<struct FVector>& PathPoints);

	TArray<struct FVector> EquidistantSamples(const float SampleLength) const;
	float FindParameterForDistance(float Distance) const;
	float GetArcLength() const;
	struct FVector SampleSplineByDistance(const float Distance) const;
	struct FVector SampleSplineByParameter(const float T) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CatmullRomSpline">();
	}
	static class UCatmullRomSpline* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCatmullRomSpline>();
	}
};
static_assert(alignof(UCatmullRomSpline) == 0x000008, "Wrong alignment on UCatmullRomSpline");
static_assert(sizeof(UCatmullRomSpline) == 0x000070, "Wrong size on UCatmullRomSpline");

// Class FlyingNavSystem.FlyingNavFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UFlyingNavFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void DrawNavPath(const class UObject* WorldContextObject, class UNavigationPath* NavPath, const struct FLinearColor& PathColor, const struct FVector& PathOffset, const bool bPersistent);
	static class UNavigationPath* FindPathToActorAsynchronously(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const struct FVector& PathStart, class AActor* GoalActor, float TetherDistance, class AActor* PathfindingContext, TSubclassOf<class UNavigationQueryFilter> FilterClass);
	static class UNavigationPath* FindPathToLocationAsynchronously(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const struct FVector& PathStart, const struct FVector& PathEnd, class AActor* PathfindingContext, TSubclassOf<class UNavigationQueryFilter> FilterClass);
	static struct FVector GetActorFeetLocation(const class APawn* Pawn);
	static struct FVector GetActorFeetOffset(const class APawn* Pawn);
	static class AFlyingNavigationData* GetFlyingNavigationData(const class APawn* NavAgent);
	static EPathfindingResult GetPathfindingResult(class UNavigationPath* Path);
	static bool IsPositionAValidEndpoint(const class APawn* NavAgent, const struct FVector& Position, const bool bAllowBlocked);
	static class UCatmullRomSpline* MakeCatmullRomSpline(const TArray<struct FVector>& PathPoints);
	static void RebuildAllFlyingNavigation(const class UObject* WorldContextObject);
	static void RequestMove(class UNavigationPath* PathToFollow, class AAIController* Controller);
	static class UNavigationPath* SetNavigationPathPoints(const class UObject* WorldContextObject, class UNavigationPath* NavPath, const TArray<struct FVector>& PathPoints);
	static class UNavigationPath* SmoothPath(const class UObject* WorldContextObject, class UNavigationPath* Path, const float SampleLength);
	static TArray<struct FVector> SmoothPathPoints(const TArray<struct FVector>& PathPoints, const float SampleLength);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FlyingNavFunctionLibrary">();
	}
	static class UFlyingNavFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFlyingNavFunctionLibrary>();
	}
};
static_assert(alignof(UFlyingNavFunctionLibrary) == 0x000008, "Wrong alignment on UFlyingNavFunctionLibrary");
static_assert(sizeof(UFlyingNavFunctionLibrary) == 0x000028, "Wrong size on UFlyingNavFunctionLibrary");

// Class FlyingNavSystem.FlyingNavigationData
// 0x0160 (0x05A0 - 0x0440)
class AFlyingNavigationData final : public ANavigationData
{
public:
	double                                        MaxDetailSize;                                     // 0x0440(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bMultithreaded : 1;                                // 0x0448(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_182C[0x3];                                     // 0x0449(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EThreadSubdivisions                           ThreadSubdivisions;                                // 0x044C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_182D[0x3];                                     // 0x044D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxThreads;                                        // 0x0450(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseAgentRadius : 1;                               // 0x0454(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseExclusiveBounds : 1;                           // 0x0454(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsePreciseExclusiveBounds : 1;                    // 0x0454(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bBuildOnBeginPlay : 1;                             // 0x0454(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_182E[0x3];                                     // 0x0455(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSVOQuerySettings                      DefaultQuerySettings;                              // 0x0458(0x0030)(Edit, Config, NativeAccessSpecifierPublic)
	uint8                                         bDrawOctreeNodes : 1;                              // 0x0488(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDrawOctreeSubNodes : 1;                           // 0x0488(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDrawOnlyOverlappedSubNodes : 1;                   // 0x0488(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bColourByConnected : 1;                            // 0x0488(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_182F[0x3];                                     // 0x0489(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NodeMargin;                                        // 0x048C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WireThickness;                                     // 0x0490(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bDrawNeighbourConnections : 1;                     // 0x0494(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDrawSimplifiedConnections : 1;                    // 0x0494(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1830[0x3];                                     // 0x0495(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NodeCentreRadius;                                  // 0x0498(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1831[0x4];                                     // 0x049C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnFlyingNavGenerationFinished;                     // 0x04A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1832[0xF0];                                    // 0x04B0(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RebuildFlyingNavigation(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);
	void RebuildNavigationData();
	void StopRebuild();

	float CurrentlyBuiltVoxelSize() const;
	bool IsNavigationDataBuilt() const;
	bool OctreeRaycast(const struct FVector& RayStart, const struct FVector& RayEnd, struct FVector* HitLocation) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FlyingNavigationData">();
	}
	static class AFlyingNavigationData* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFlyingNavigationData>();
	}
};
static_assert(alignof(AFlyingNavigationData) == 0x000008, "Wrong alignment on AFlyingNavigationData");
static_assert(sizeof(AFlyingNavigationData) == 0x0005A0, "Wrong size on AFlyingNavigationData");
static_assert(offsetof(AFlyingNavigationData, MaxDetailSize) == 0x000440, "Member 'AFlyingNavigationData::MaxDetailSize' has a wrong offset!");
static_assert(offsetof(AFlyingNavigationData, ThreadSubdivisions) == 0x00044C, "Member 'AFlyingNavigationData::ThreadSubdivisions' has a wrong offset!");
static_assert(offsetof(AFlyingNavigationData, MaxThreads) == 0x000450, "Member 'AFlyingNavigationData::MaxThreads' has a wrong offset!");
static_assert(offsetof(AFlyingNavigationData, DefaultQuerySettings) == 0x000458, "Member 'AFlyingNavigationData::DefaultQuerySettings' has a wrong offset!");
static_assert(offsetof(AFlyingNavigationData, NodeMargin) == 0x00048C, "Member 'AFlyingNavigationData::NodeMargin' has a wrong offset!");
static_assert(offsetof(AFlyingNavigationData, WireThickness) == 0x000490, "Member 'AFlyingNavigationData::WireThickness' has a wrong offset!");
static_assert(offsetof(AFlyingNavigationData, NodeCentreRadius) == 0x000498, "Member 'AFlyingNavigationData::NodeCentreRadius' has a wrong offset!");
static_assert(offsetof(AFlyingNavigationData, OnFlyingNavGenerationFinished) == 0x0004A0, "Member 'AFlyingNavigationData::OnFlyingNavGenerationFinished' has a wrong offset!");

// Class FlyingNavSystem.FlyingObjectInterface
// 0x0000 (0x0028 - 0x0028)
class IFlyingObjectInterface final : public IInterface
{
public:
	struct FSVOQuerySettings GetPathfindingQuerySettings() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FlyingObjectInterface">();
	}
	static class IFlyingObjectInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFlyingObjectInterface>();
	}
};
static_assert(alignof(IFlyingObjectInterface) == 0x000008, "Wrong alignment on IFlyingObjectInterface");
static_assert(sizeof(IFlyingObjectInterface) == 0x000028, "Wrong size on IFlyingObjectInterface");

// Class FlyingNavSystem.OctreeRenderingComponent
// 0x0080 (0x0520 - 0x04A0)
class UOctreeRenderingComponent final : public UMeshComponent
{
public:
	uint8                                         Pad_1834[0x8];                                     // 0x0498(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               WireMaterial;                                      // 0x04A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1835[0x78];                                    // 0x04A8(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OctreeRenderingComponent">();
	}
	static class UOctreeRenderingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOctreeRenderingComponent>();
	}
};
static_assert(alignof(UOctreeRenderingComponent) == 0x000010, "Wrong alignment on UOctreeRenderingComponent");
static_assert(sizeof(UOctreeRenderingComponent) == 0x000520, "Wrong size on UOctreeRenderingComponent");
static_assert(offsetof(UOctreeRenderingComponent, WireMaterial) == 0x0004A0, "Member 'UOctreeRenderingComponent::WireMaterial' has a wrong offset!");

}

