#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Character_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "HottaFramework_structs.hpp"
#include "QRSL_classes.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Character_Base.BP_Character_Base_C
// 0x0210 (0xFDE0 - 0xFBD0)
class ABP_Character_Base_C : public AQRSLPlayerCharacter
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0xFBD0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UHottaSwimmingSystem_C*                 HottaSwimmingSystem;                               // 0xFBD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0xFBE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCharacterHeadUpComp_BP_C*              CharacterHeadUpComp_BP;                            // 0xFBE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USilentCheckComponent*                  SilentCheck;                                       // 0xFBF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMapRevealerComponent*                  MapRevealer;                                       // 0xFBF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMapViewComponent*                      MapView;                                           // 0xFC00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_NewTrack_0_1531F758487900C6B0B791A6F344DA29; // 0xFC08(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_1531F758487900C6B0B791A6F344DA29; // 0xFC0C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_58A5[0x3];                                     // 0xFC0D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0xFC10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETraceTypeQuery                               LineTraceChannel;                                  // 0xFC18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_58A6[0x3];                                     // 0xFC19(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NewL;                                              // 0xFC1C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastShowDamageTextTime;                            // 0xFC28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastShowDamageTextPosition;                        // 0xFC2C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentDamageHitPoint;                             // 0xFC38(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastShowDamageTextHitPoint;                        // 0xFC44(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   TaskId_FireVillage;                                // 0xFC50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnBecomeViewTarget;                                // 0xFC58(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnEndViewTarget;                                   // 0xFC68(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class FString>                         CheckShadowLevelName;                              // 0xFC78(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Root_Motion_Source_ID;                             // 0xFC88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_58A7[0x4];                                     // 0xFC8C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TrailRight0;                                       // 0xFC90(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             TrailRight1;                                       // 0xFCC0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             TrailLeft0;                                        // 0xFCF0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             TrailLeft1;                                        // 0xFD20(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DrawTrail;                                         // 0xFD50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_58A8[0x3];                                     // 0xFD51(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PlayerCurrentPosition;                             // 0xFD54(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PlayerHistoryPosition_A;                           // 0xFD60(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PlayerHistoryPosition_B;                           // 0xFD6C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDistance;                                       // 0xFD78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlendNormal;                                       // 0xFD7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlendSpeed;                                        // 0xFD80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PositionIndex;                                     // 0xFD84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_58A9[0x8];                                     // 0xFD88(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Spawn_Transform;                                   // 0xFD90(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTimerHandle                           DivingCheckTimer;                                  // 0xFDC0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               LeftIceComponent;                                  // 0xFDC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               RightIceComponent;                                 // 0xFDD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayIceSkatingParticle;                            // 0xFDD8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void BP_CanDrawTrail(bool* Param_DrawTrail);
	bool BP_CanMount();
	void SetBlendNormal(float DeltaTime);
	void Trail(float DeltaTime);
	void TrailStartSet();
	void IsInGame(bool bContainWormhole, bool* Result);
	void FindWidgetFromViewport(const class FString& WidgetClass, class UUserWidget** Widget);
	void GetActorHorizontalForward(struct FVector* HorizontalForward);
	void ModifyToVerticalRot(const struct FRotator& OldRot, struct FRotator* VerticalRot);
	void IsMoving(bool* Param_IsMoving);
	void UserConstructionScript();
	void Timeline_0__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void InpActEvt_Decimal_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void OnLoaded_AC5D3A31433B6A5FE55878A8142BF0AF(class UObject* Loaded);
	void OnLoaded_87F4F07F445A552BD1ABCB94CD7581E8(class UObject* Loaded);
	void OnLoaded_738F174A47E0CEFE86A83CAC96282F5B(class UObject* Loaded);
	void OnLoaded_DCF2793F436B098F80532E95968C929A(class UObject* Loaded);
	void OnMagicHandStartPullActor(class AActor* Actor);
	void ReceiveBeginPlay();
	void MakeupSelectFaceEffect(int32 PartID);
	void OnGMGetPlayerComInfo_Event_0(const struct FGMPlayerComInfo& ComInfo);
	void K2_OnBecomeViewTarget(class APlayerController* PC);
	void K2_OnEndViewTarget(class APlayerController* PC);
	void BP_OnArtifactUpgrade(class UArtifactItem* InArtifactItem, int32 OldLevel, int32 NewLevel);
	void BP_OnArtifactAdvance(class UArtifactItem* InArtifactItem, int32 OldStar, int32 NewStar);
	void RMS_PlayerBackRunBegin();
	void RMS_PlayerBackRunEnd();
	void ReceiveTick(float Param_DeltaSeconds);
	void CustomEvent_0(class UHottaCharacterStateManagerComponent* InStateManagerComponent, const struct FHottaEnterStateRequest& InRequest);
	void CustomEvent_1(class UHottaCharacterStateManagerComponent* InStateManagerComponent, const struct FHottaBreakStateRequest& InRequest);
	void BP_HandleCharacterOnDamaged(float DamageAmount, class AActor* DamageCauser);
	void CheckPlayerDivingState();
	void BPCall_FallingEnd(float EndSpeed);
	void BPCall_EnterIceSkating();
	void BPCall_EndIceSkating();
	void BP_OnMiniGameStoped(class AHottaPlayerCharacter* PlayerCharacter, class FName MiniGameId);
	void BP_OnMiniGameStarted(class AHottaPlayerCharacter* PlayerCharacter, class FName MiniGameId);
	void ExecuteUbergraph_BP_Character_Base(int32 EntryPoint);
	void OnEndViewTarget__DelegateSignature();
	void OnBecomeViewTarget__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Character_Base_C">();
	}
	static class ABP_Character_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Character_Base_C>();
	}
};
static_assert(alignof(ABP_Character_Base_C) == 0x000010, "Wrong alignment on ABP_Character_Base_C");
static_assert(sizeof(ABP_Character_Base_C) == 0x00FDE0, "Wrong size on ABP_Character_Base_C");
static_assert(offsetof(ABP_Character_Base_C, UberGraphFrame) == 0x00FBD0, "Member 'ABP_Character_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, HottaSwimmingSystem) == 0x00FBD8, "Member 'ABP_Character_Base_C::HottaSwimmingSystem' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, StaticMesh) == 0x00FBE0, "Member 'ABP_Character_Base_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, CharacterHeadUpComp_BP) == 0x00FBE8, "Member 'ABP_Character_Base_C::CharacterHeadUpComp_BP' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, SilentCheck) == 0x00FBF0, "Member 'ABP_Character_Base_C::SilentCheck' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, MapRevealer) == 0x00FBF8, "Member 'ABP_Character_Base_C::MapRevealer' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, MapView) == 0x00FC00, "Member 'ABP_Character_Base_C::MapView' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, Timeline_0_NewTrack_0_1531F758487900C6B0B791A6F344DA29) == 0x00FC08, "Member 'ABP_Character_Base_C::Timeline_0_NewTrack_0_1531F758487900C6B0B791A6F344DA29' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, Timeline_0__Direction_1531F758487900C6B0B791A6F344DA29) == 0x00FC0C, "Member 'ABP_Character_Base_C::Timeline_0__Direction_1531F758487900C6B0B791A6F344DA29' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, Timeline_0) == 0x00FC10, "Member 'ABP_Character_Base_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, LineTraceChannel) == 0x00FC18, "Member 'ABP_Character_Base_C::LineTraceChannel' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, NewL) == 0x00FC1C, "Member 'ABP_Character_Base_C::NewL' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, LastShowDamageTextTime) == 0x00FC28, "Member 'ABP_Character_Base_C::LastShowDamageTextTime' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, LastShowDamageTextPosition) == 0x00FC2C, "Member 'ABP_Character_Base_C::LastShowDamageTextPosition' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, CurrentDamageHitPoint) == 0x00FC38, "Member 'ABP_Character_Base_C::CurrentDamageHitPoint' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, LastShowDamageTextHitPoint) == 0x00FC44, "Member 'ABP_Character_Base_C::LastShowDamageTextHitPoint' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, TaskId_FireVillage) == 0x00FC50, "Member 'ABP_Character_Base_C::TaskId_FireVillage' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, OnBecomeViewTarget) == 0x00FC58, "Member 'ABP_Character_Base_C::OnBecomeViewTarget' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, OnEndViewTarget) == 0x00FC68, "Member 'ABP_Character_Base_C::OnEndViewTarget' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, CheckShadowLevelName) == 0x00FC78, "Member 'ABP_Character_Base_C::CheckShadowLevelName' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, Root_Motion_Source_ID) == 0x00FC88, "Member 'ABP_Character_Base_C::Root_Motion_Source_ID' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, TrailRight0) == 0x00FC90, "Member 'ABP_Character_Base_C::TrailRight0' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, TrailRight1) == 0x00FCC0, "Member 'ABP_Character_Base_C::TrailRight1' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, TrailLeft0) == 0x00FCF0, "Member 'ABP_Character_Base_C::TrailLeft0' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, TrailLeft1) == 0x00FD20, "Member 'ABP_Character_Base_C::TrailLeft1' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, DrawTrail) == 0x00FD50, "Member 'ABP_Character_Base_C::DrawTrail' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, PlayerCurrentPosition) == 0x00FD54, "Member 'ABP_Character_Base_C::PlayerCurrentPosition' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, PlayerHistoryPosition_A) == 0x00FD60, "Member 'ABP_Character_Base_C::PlayerHistoryPosition_A' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, PlayerHistoryPosition_B) == 0x00FD6C, "Member 'ABP_Character_Base_C::PlayerHistoryPosition_B' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, MaxDistance) == 0x00FD78, "Member 'ABP_Character_Base_C::MaxDistance' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, BlendNormal) == 0x00FD7C, "Member 'ABP_Character_Base_C::BlendNormal' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, BlendSpeed) == 0x00FD80, "Member 'ABP_Character_Base_C::BlendSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, PositionIndex) == 0x00FD84, "Member 'ABP_Character_Base_C::PositionIndex' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, Spawn_Transform) == 0x00FD90, "Member 'ABP_Character_Base_C::Spawn_Transform' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, DivingCheckTimer) == 0x00FDC0, "Member 'ABP_Character_Base_C::DivingCheckTimer' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, LeftIceComponent) == 0x00FDC8, "Member 'ABP_Character_Base_C::LeftIceComponent' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, RightIceComponent) == 0x00FDD0, "Member 'ABP_Character_Base_C::RightIceComponent' has a wrong offset!");
static_assert(offsetof(ABP_Character_Base_C, PlayIceSkatingParticle) == 0x00FDD8, "Member 'ABP_Character_Base_C::PlayIceSkatingParticle' has a wrong offset!");

}

