#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UIMinimap

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "MinimapPlugin_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_UIMinimap.BP_UIMinimap_C
// 0x0098 (0x0318 - 0x0280)
class UBP_UIMinimap_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0280(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCanvasPanel*                           Canvas_Backgrounds;                                // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Canvas_IconsAboveFog;                              // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_Fogs;                                      // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMapViewComponent*                      MapViewComp;                                       // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UMapTrackerComponent*                   MapTrackerComp;                                    // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              InitialMapSize;                                    // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMapViewSearchOption                          AutoLocateMapView;                                 // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bIsCircular;                                       // 0x02B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_5669[0x6];                                     // 0x02BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnMapClicked;                                      // 0x02C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnViewChanged;                                     // 0x02D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnBoxSelected;                                     // 0x02E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class UBP_UIMapBackground_C*>          MapBackgrounds;                                    // 0x02F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UBP_UIMapFog_C*>                 MapFogs;                                           // 0x0300(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          bIsCanRefeshMapFogMask;                            // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	bool HasFogLevel(const class FString& InLevelName);
	void RefreshMapFogMask();
	void SetMapView(class UMapViewComponent* NewMapView);
	void OnTimerInitMap();
	void BroadcastMapView();
	void AddMapFog(class AMapFog* MapFog);
	void AutoFindMapView();
	void InitZoom();
	void AddMapBackground(class AMapBackground* MapBackground);
	void EnforceAspectRatio();
	void SetupListeners();
	void CleanupListeners();
	void OnMapBackgroundUnregistered_Event_0(class AMapBackground* MapBackground);
	void OnMapFogRegistered_Event_0(class AMapFog* MapFog);
	void SetupViewListener();
	void OnViewDestroyed_Event_0(class UMapViewComponent* MapView);
	void Destruct();
	void RetryAutoFind();
	void Construct();
	void ExecuteUbergraph_BP_UIMinimap(int32 EntryPoint);
	void OnBoxSelected__DelegateSignature(TArray<class UMapIconComponent*>& MapIcons, bool IsLeftMouseButton, bool IsShiftSelect, bool IsCtrlSelect);
	void OnViewChanged__DelegateSignature(class UMapViewComponent* Param_MapViewComp);
	void OnMapClicked__DelegateSignature(const struct FVector& WorldLocation, bool IsLeftMouseButton, const struct FVector2D& ClickPos, const struct FVector2D& ClickUV);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_UIMinimap_C">();
	}
	static class UBP_UIMinimap_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_UIMinimap_C>();
	}
};
static_assert(alignof(UBP_UIMinimap_C) == 0x000008, "Wrong alignment on UBP_UIMinimap_C");
static_assert(sizeof(UBP_UIMinimap_C) == 0x000318, "Wrong size on UBP_UIMinimap_C");
static_assert(offsetof(UBP_UIMinimap_C, UberGraphFrame) == 0x000280, "Member 'UBP_UIMinimap_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_UIMinimap_C, Canvas_Backgrounds) == 0x000288, "Member 'UBP_UIMinimap_C::Canvas_Backgrounds' has a wrong offset!");
static_assert(offsetof(UBP_UIMinimap_C, Canvas_IconsAboveFog) == 0x000290, "Member 'UBP_UIMinimap_C::Canvas_IconsAboveFog' has a wrong offset!");
static_assert(offsetof(UBP_UIMinimap_C, Overlay_Fogs) == 0x000298, "Member 'UBP_UIMinimap_C::Overlay_Fogs' has a wrong offset!");
static_assert(offsetof(UBP_UIMinimap_C, MapViewComp) == 0x0002A0, "Member 'UBP_UIMinimap_C::MapViewComp' has a wrong offset!");
static_assert(offsetof(UBP_UIMinimap_C, MapTrackerComp) == 0x0002A8, "Member 'UBP_UIMinimap_C::MapTrackerComp' has a wrong offset!");
static_assert(offsetof(UBP_UIMinimap_C, InitialMapSize) == 0x0002B0, "Member 'UBP_UIMinimap_C::InitialMapSize' has a wrong offset!");
static_assert(offsetof(UBP_UIMinimap_C, AutoLocateMapView) == 0x0002B8, "Member 'UBP_UIMinimap_C::AutoLocateMapView' has a wrong offset!");
static_assert(offsetof(UBP_UIMinimap_C, bIsCircular) == 0x0002B9, "Member 'UBP_UIMinimap_C::bIsCircular' has a wrong offset!");
static_assert(offsetof(UBP_UIMinimap_C, OnMapClicked) == 0x0002C0, "Member 'UBP_UIMinimap_C::OnMapClicked' has a wrong offset!");
static_assert(offsetof(UBP_UIMinimap_C, OnViewChanged) == 0x0002D0, "Member 'UBP_UIMinimap_C::OnViewChanged' has a wrong offset!");
static_assert(offsetof(UBP_UIMinimap_C, OnBoxSelected) == 0x0002E0, "Member 'UBP_UIMinimap_C::OnBoxSelected' has a wrong offset!");
static_assert(offsetof(UBP_UIMinimap_C, MapBackgrounds) == 0x0002F0, "Member 'UBP_UIMinimap_C::MapBackgrounds' has a wrong offset!");
static_assert(offsetof(UBP_UIMinimap_C, MapFogs) == 0x000300, "Member 'UBP_UIMinimap_C::MapFogs' has a wrong offset!");
static_assert(offsetof(UBP_UIMinimap_C, bIsCanRefeshMapFogMask) == 0x000310, "Member 'UBP_UIMinimap_C::bIsCanRefeshMapFogMask' has a wrong offset!");

}

