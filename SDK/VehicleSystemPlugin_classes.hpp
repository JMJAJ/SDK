#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VehicleSystemPlugin

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "VehicleSystemPlugin_structs.hpp"


namespace SDK
{

// Class VehicleSystemPlugin.VehicleConstraint
// 0x0000 (0x0410 - 0x0410)
class UVehicleConstraint final : public UPhysicsConstraintComponent
{
public:
	void SetLinearSoftConstraint(bool SoftConstraint, float Stiffness, float Damping);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleConstraint">();
	}
	static class UVehicleConstraint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVehicleConstraint>();
	}
};
static_assert(alignof(UVehicleConstraint) == 0x000010, "Wrong alignment on UVehicleConstraint");
static_assert(sizeof(UVehicleConstraint) == 0x000410, "Wrong size on UVehicleConstraint");

// Class VehicleSystemPlugin.VehicleSystemBase
// 0x0160 (0x03F8 - 0x0298)
class AVehicleSystemBase : public APawn
{
public:
	uint8                                         Pad_1A84[0x8];                                     // 0x0298(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   VehicleMesh;                                       // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     SteeringCurve;                                     // 0x02A8(0x0088)(Edit, NativeAccessSpecifierPublic)
	float                                         SteeringSpeed;                                     // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A85[0x4];                                     // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVehicleGear>                   Gears;                                             // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A86[0x1];                                     // 0x0348(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          ReplicateMovement;                                 // 0x0349(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SyncLocation;                                      // 0x034A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SyncRotation;                                      // 0x034B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetSendRate;                                       // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetTimeBehind;                                     // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetLerpStart;                                      // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetPositionTolerance;                              // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetSmoothing;                                      // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNetState                              RestState;                                         // 0x0360(0x0038)(Net, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A87[0x60];                                    // 0x0398(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AVS_Tick(float DeltaTime);
	void BlueprintDebugMessage(const class FString& Text);
	void Client_ReceiveNetState(const struct FNetState& State);
	float GetSteeringFromCurve(float Speed);
	void Multicast_ChangedOwner();
	void NetStateSend();
	void OnRep_RestState();
	void OwnerChanged();
	void Server_ReceiveNetState(const struct FNetState& State);
	void Server_ReceiveRestState(const struct FNetState& State);
	void SetShouldSyncWithServer(bool ShouldSync);
	void SyncTrailerRotation(float DeltaTime);
	void TeleportWheels();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleSystemBase">();
	}
	static class AVehicleSystemBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVehicleSystemBase>();
	}
};
static_assert(alignof(AVehicleSystemBase) == 0x000008, "Wrong alignment on AVehicleSystemBase");
static_assert(sizeof(AVehicleSystemBase) == 0x0003F8, "Wrong size on AVehicleSystemBase");
static_assert(offsetof(AVehicleSystemBase, VehicleMesh) == 0x0002A0, "Member 'AVehicleSystemBase::VehicleMesh' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, SteeringCurve) == 0x0002A8, "Member 'AVehicleSystemBase::SteeringCurve' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, SteeringSpeed) == 0x000330, "Member 'AVehicleSystemBase::SteeringSpeed' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, Gears) == 0x000338, "Member 'AVehicleSystemBase::Gears' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, ReplicateMovement) == 0x000349, "Member 'AVehicleSystemBase::ReplicateMovement' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, SyncLocation) == 0x00034A, "Member 'AVehicleSystemBase::SyncLocation' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, SyncRotation) == 0x00034B, "Member 'AVehicleSystemBase::SyncRotation' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, NetSendRate) == 0x00034C, "Member 'AVehicleSystemBase::NetSendRate' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, NetTimeBehind) == 0x000350, "Member 'AVehicleSystemBase::NetTimeBehind' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, NetLerpStart) == 0x000354, "Member 'AVehicleSystemBase::NetLerpStart' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, NetPositionTolerance) == 0x000358, "Member 'AVehicleSystemBase::NetPositionTolerance' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, NetSmoothing) == 0x00035C, "Member 'AVehicleSystemBase::NetSmoothing' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, RestState) == 0x000360, "Member 'AVehicleSystemBase::RestState' has a wrong offset!");

// Class VehicleSystemPlugin.VehicleSystemFunctions
// 0x0000 (0x0028 - 0x0028)
class UVehicleSystemFunctions final : public UBlueprintFunctionLibrary
{
public:
	static struct FVector GetBoneBounds(class UPrimitiveComponent* Target, class FName BoneName, struct FVector* Origin);
	static struct FVector GetMeshCenterOfMass(class UPrimitiveComponent* Target, class FName BoneName);
	static float GetMeshDiameter(class UPrimitiveComponent* Target, class FName BoneName);
	static float GetMeshRadius(class UPrimitiveComponent* Target, class FName BoneName);
	static class FString GetPluginVersion();
	static void PrintToScreenWithTag(const class FString& InString, const struct FLinearColor& TextColor, float Duration, int32 Tag);
	static bool RunningInEditor_World(class UObject* WorldContextObject);
	static bool RunningInGame_World(class UObject* WorldContextObject);
	static bool RunningInPIE_World(class UObject* WorldContextObject);
	static void SetAngularDamping(class UPrimitiveComponent* Target, float InDamping, class FName BoneName);
	static void SetLinearDamping(class UPrimitiveComponent* Target, float InDamping, class FName BoneName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleSystemFunctions">();
	}
	static class UVehicleSystemFunctions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVehicleSystemFunctions>();
	}
};
static_assert(alignof(UVehicleSystemFunctions) == 0x000008, "Wrong alignment on UVehicleSystemFunctions");
static_assert(sizeof(UVehicleSystemFunctions) == 0x000028, "Wrong size on UVehicleSystemFunctions");

}

