#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UINavigation

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK
{

// Enum UINavigation.EKeysActionInputEvent
// NumValues: 0x0003
enum class EKeysActionInputEvent : uint8
{
	TouchOnly                                = 0,
	Any                                      = 1,
	EKeysActionInputEvent_MAX                = 2,
};

// Enum UINavigation.EUINavigationWidgetType
// NumValues: 0x0005
enum class EUINavigationWidgetType : uint8
{
	None                                     = 0,
	Common                                   = 1,
	Slider                                   = 2,
	Custom                                   = 3,
	EUINavigationWidgetType_MAX              = 4,
};

// Enum UINavigation.EUINavigationCategoryKey
// NumValues: 0x0004
enum class EUINavigationCategoryKey : uint8
{
	DpadUpDown                               = 0,
	DpadLeftRight                            = 1,
	Shoulder                                 = 2,
	EUINavigationCategoryKey_MAX             = 3,
};

// Enum UINavigation.EKeyboardNavigationEnableFlags
// NumValues: 0x0004
enum class EKeyboardNavigationEnableFlags : uint8
{
	None                                     = 0,
	KeysAction                               = 1,
	Navigation                               = 2,
	Max                                      = 3,
};

// Enum UINavigation.ENavigationDisableFlags
// NumValues: 0x0007
enum class ENavigationDisableFlags : uint8
{
	None                                     = 0,
	Flag_1                                   = 1,
	Flag_2                                   = 2,
	Flag_3                                   = 4,
	Flag_4                                   = 8,
	Flag_5                                   = 16,
	Max                                      = 31,
};

// Enum UINavigation.EGamepadCursorMoveMethod
// NumValues: 0x0003
enum class EGamepadCursorMoveMethod : uint8
{
	LeftStick                                = 0,
	RightStick                               = 1,
	EGamepadCursorMoveMethod_MAX             = 2,
};

// Enum UINavigation.EGamepadCursorMoveMode
// NumValues: 0x0003
enum class EGamepadCursorMoveMode : uint8
{
	Direct                                   = 0,
	Accelerated                              = 1,
	EGamepadCursorMoveMode_MAX               = 2,
};

// Enum UINavigation.EUINavigationInputType
// NumValues: 0x0005
enum class EUINavigationInputType : uint8
{
	MouseAndKeyboard                         = 0,
	Gamepad                                  = 1,
	Touch                                    = 2,
	Count                                    = 3,
	EUINavigationInputType_MAX               = 4,
};

// ScriptStruct UINavigation.WidgetTags
// 0x0050 (0x0050 - 0x0000)
struct FWidgetTags final
{
public:
	TSet<class FName>                             Tags;                                              // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetTags) == 0x000008, "Wrong alignment on FWidgetTags");
static_assert(sizeof(FWidgetTags) == 0x000050, "Wrong size on FWidgetTags");
static_assert(offsetof(FWidgetTags, Tags) == 0x000000, "Member 'FWidgetTags::Tags' has a wrong offset!");

// ScriptStruct UINavigation.UINavigationProcessor
// 0x0030 (0x0038 - 0x0008)
struct FUINavigationProcessor final : public FTableRowBase
{
public:
	class FName                                   AttachPoint;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   WidgetToAttach;                                    // 0x0010(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUINavigationProcessor) == 0x000008, "Wrong alignment on FUINavigationProcessor");
static_assert(sizeof(FUINavigationProcessor) == 0x000038, "Wrong size on FUINavigationProcessor");
static_assert(offsetof(FUINavigationProcessor, AttachPoint) == 0x000008, "Member 'FUINavigationProcessor::AttachPoint' has a wrong offset!");
static_assert(offsetof(FUINavigationProcessor, WidgetToAttach) == 0x000010, "Member 'FUINavigationProcessor::WidgetToAttach' has a wrong offset!");

// ScriptStruct UINavigation.StaticNavigations
// 0x0018 (0x0018 - 0x0000)
struct FStaticNavigations final
{
public:
	int32                                         Up;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Down;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Left;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Right;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Self;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoCalculateLeftOrRight;                         // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A45[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStaticNavigations) == 0x000004, "Wrong alignment on FStaticNavigations");
static_assert(sizeof(FStaticNavigations) == 0x000018, "Wrong size on FStaticNavigations");
static_assert(offsetof(FStaticNavigations, Up) == 0x000000, "Member 'FStaticNavigations::Up' has a wrong offset!");
static_assert(offsetof(FStaticNavigations, Down) == 0x000004, "Member 'FStaticNavigations::Down' has a wrong offset!");
static_assert(offsetof(FStaticNavigations, Left) == 0x000008, "Member 'FStaticNavigations::Left' has a wrong offset!");
static_assert(offsetof(FStaticNavigations, Right) == 0x00000C, "Member 'FStaticNavigations::Right' has a wrong offset!");
static_assert(offsetof(FStaticNavigations, Self) == 0x000010, "Member 'FStaticNavigations::Self' has a wrong offset!");
static_assert(offsetof(FStaticNavigations, bAutoCalculateLeftOrRight) == 0x000014, "Member 'FStaticNavigations::bAutoCalculateLeftOrRight' has a wrong offset!");

// ScriptStruct UINavigation.UINavigationViewportToExclude
// 0x0008 (0x0010 - 0x0008)
struct FUINavigationViewportToExclude final : public FTableRowBase
{
public:
	bool                                          bExclude;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A46[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUINavigationViewportToExclude) == 0x000008, "Wrong alignment on FUINavigationViewportToExclude");
static_assert(sizeof(FUINavigationViewportToExclude) == 0x000010, "Wrong size on FUINavigationViewportToExclude");
static_assert(offsetof(FUINavigationViewportToExclude, bExclude) == 0x000008, "Member 'FUINavigationViewportToExclude::bExclude' has a wrong offset!");

// ScriptStruct UINavigation.UINavigatedScrollParams
// 0x000C (0x000C - 0x0000)
struct FUINavigatedScrollParams final
{
public:
	class FName                                   WidgetName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUINavigatedScrollParams) == 0x000004, "Wrong alignment on FUINavigatedScrollParams");
static_assert(sizeof(FUINavigatedScrollParams) == 0x00000C, "Wrong size on FUINavigatedScrollParams");
static_assert(offsetof(FUINavigatedScrollParams, WidgetName) == 0x000000, "Member 'FUINavigatedScrollParams::WidgetName' has a wrong offset!");
static_assert(offsetof(FUINavigatedScrollParams, Speed) == 0x000008, "Member 'FUINavigatedScrollParams::Speed' has a wrong offset!");

// ScriptStruct UINavigation.UINavigationSupportKeys
// 0x0008 (0x0010 - 0x0008)
struct FUINavigationSupportKeys final : public FTableRowBase
{
public:
	bool                                          bEnableLeftStickNavigation;                        // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableRightStickNavigation;                       // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDPadNavigation;                             // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A47[0x5];                                     // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUINavigationSupportKeys) == 0x000008, "Wrong alignment on FUINavigationSupportKeys");
static_assert(sizeof(FUINavigationSupportKeys) == 0x000010, "Wrong size on FUINavigationSupportKeys");
static_assert(offsetof(FUINavigationSupportKeys, bEnableLeftStickNavigation) == 0x000008, "Member 'FUINavigationSupportKeys::bEnableLeftStickNavigation' has a wrong offset!");
static_assert(offsetof(FUINavigationSupportKeys, bEnableRightStickNavigation) == 0x000009, "Member 'FUINavigationSupportKeys::bEnableRightStickNavigation' has a wrong offset!");
static_assert(offsetof(FUINavigationSupportKeys, bEnableDPadNavigation) == 0x00000A, "Member 'FUINavigationSupportKeys::bEnableDPadNavigation' has a wrong offset!");

// ScriptStruct UINavigation.MultiItemsPerLineParams
// 0x0014 (0x0014 - 0x0000)
struct FMultiItemsPerLineParams final
{
public:
	int32                                         NumberItemsPerLine;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ContainerName;                                     // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UserWidgetName;                                    // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiItemsPerLineParams) == 0x000004, "Wrong alignment on FMultiItemsPerLineParams");
static_assert(sizeof(FMultiItemsPerLineParams) == 0x000014, "Wrong size on FMultiItemsPerLineParams");
static_assert(offsetof(FMultiItemsPerLineParams, NumberItemsPerLine) == 0x000000, "Member 'FMultiItemsPerLineParams::NumberItemsPerLine' has a wrong offset!");
static_assert(offsetof(FMultiItemsPerLineParams, ContainerName) == 0x000004, "Member 'FMultiItemsPerLineParams::ContainerName' has a wrong offset!");
static_assert(offsetof(FMultiItemsPerLineParams, UserWidgetName) == 0x00000C, "Member 'FMultiItemsPerLineParams::UserWidgetName' has a wrong offset!");

}

